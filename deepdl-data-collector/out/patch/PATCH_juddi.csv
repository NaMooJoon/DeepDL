Project,fix-commit,fix-shortMessage,fix-date,fix-author,patch
juddi,d31740d51f06344c76f44211ec5b63655316953b,"Merge branch 'master' into feature/JUDDI-978
",2022-09-24 22:18:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index ae25798..49dc391 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -1187,22 +1187,28 @@
                                         }
                                 }
                         }
-                        //dont forget this node
-                        Long id = (Long) em.createQuery(""select (e.id) from ChangeRecord e where e.nodeID = :node  order by e.id desc"")
-                                .setParameter(""node"", getNode()).setMaxResults(1).getSingleResult();
-                        if (id == null) {
-                                id = 0L;
-                        }
+                    //dont forget this node
+                        Query setMaxResults = em.createQuery(""select (e.id) from ChangeRecord e where e.nodeID = :node  order by e.id desc"")
+                                .setParameter(""node"", getNode()).setMaxResults(1);
+                        Long id =null;
+                        if (setMaxResults.getResultList().isEmpty()) {
+                            //this can happen at or near startup
+                            id = 0L;
+                        } else {
+                            id = (Long) em.createQuery(""select (e.id) from ChangeRecord e where e.nodeID = :node  order by e.id desc"")
+                                    .setParameter(""node"", getNode()).setMaxResults(1).getSingleResult();
+                        }    
                         ChangeRecordIDType x = new ChangeRecordIDType();
                         x.setNodeID(getNode());
                         x.setOriginatingUSN(id);
                         ret.add(x);
-
+                    
                         tx.rollback();
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(ReplicationQuery.GET_HIGHWATERMARKS, QueryStatus.SUCCESS, procTime);
 
                 } catch (Exception drfm) {
+                        logger.fatal(""Error, this node is: "" + getNode(), drfm);
                         throw new FatalErrorException(new ErrorMessage(""E_fatalError"", drfm.getMessage()));
 
                 } finally {
"
juddi,d31740d51f06344c76f44211ec5b63655316953b,"Merge branch 'master' into feature/JUDDI-978
",2022-09-24 22:18:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
index add0e16..832953d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
@@ -93,6 +93,11 @@
                                 tx.commit();
                         }
                         return authorizedName;
+                } catch (Exception ex) {
+                    //note: we saw an ArrayIndexOutOfBounds exception when using github actions for CI
+                    //with hibernate on derby, root cause is still tbd
+                    log.error(""error during authentication routine, could indicate a database issue"", ex);
+                    throw ex;
                 } finally {
                         if (tx.isActive()) {
                                 tx.rollback();
"
juddi,b5d853881d2133a10bb140b5d7d9174d97ca5bc6,"Merge branch 'master' into feature/JUDDI-978
",2022-05-14 20:53:36,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java
index fcd90bc..cfefef2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TripleDESCrytor.java
@@ -32,7 +32,9 @@
 /**
  * Triple DES, 168 bit key
  * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
+ * @deprecated use better crypto
  */
+@Deprecated
 public class TripleDESCrytor implements Cryptor {
 
     private static final String UNICODE_FORMAT = ""UTF8"";
"
juddi,b5d853881d2133a10bb140b5d7d9174d97ca5bc6,"Merge branch 'master' into feature/JUDDI-978
",2022-05-14 20:53:36,Alex O'Ree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java
index 69119b9..ecdd1fd 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/DES.java
@@ -35,7 +35,9 @@
  * using 3DES
  *
  * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
+ * @deprecated  to be removed
  */
+@Deprecated
 public class DES {
 
         private static final String UNICODE_FORMAT = ""UTF8"";
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
index 2d5ec2f..d2dac96 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
@@ -37,7 +37,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""j3_publisher_assertion"")
+@Table(name = ""j3_pubassrt"")
 public class PublisherAssertion implements java.io.Serializable {
 
         private static final long serialVersionUID = -5285434317957104272L;
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfiguration.java b/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfiguration.java
index 93d0f73..1e3de5c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfiguration.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfiguration.java
@@ -73,7 +73,7 @@
          * Gets the value of the serialNumber property.
          *
          */
-        @Column(name = ""serialnumb"")
+        @Column(name = ""serno"")
         @OrderBy(value = ""SerialNumber DESC"")
         @Id
         public Long getSerialNumber() {
@@ -206,7 +206,10 @@
         }
 
         // @OneToMany( fetch = FetchType.LAZY,targetEntity = Edge.class, mappedBy = ""Edge"")
-        @OneToMany(targetEntity = Edge.class, fetch = FetchType.LAZY, cascade = CascadeType.ALL)
+        @OneToMany(targetEntity = Edge.class, 
+                fetch = FetchType.LAZY, cascade = CascadeType.ALL
+                //mappedBy = ""j3_edge""
+                )
         public List<Edge> getEdge() {
                 return this.edge;
         }
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfigurationNode.java b/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfigurationNode.java
index e146375..7b03ffc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfigurationNode.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ReplicationConfigurationNode.java
@@ -37,7 +37,7 @@
         private static final long serialVersionUID = 1L;
         private Long id;
         private ReplicationConfiguration parent;
-        String rx;
+        private String rx;
 
         @Id
         @GeneratedValue(strategy = GenerationType.AUTO)
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Signature.java b/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
index 856014a..886092d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
@@ -33,7 +33,7 @@
  *
  */
 @Entity
-@Table(name = ""j3_signature"")
+@Table(name = ""j3_sig"")
 public class Signature implements java.io.Serializable {
     private static final long serialVersionUID = -3233157941119408718L;
     
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
index b606ad4..ac85264 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
@@ -91,10 +91,10 @@
 			String urlValue = discURL.getValue();
 			
 			if (discURL.getUseType() == null || discURL.getUseType().length() == 0 ) {
-				qry.appendGroupedAnd(new DynamicQuery.Parameter(urlTerm, urlValue, DynamicQuery.PREDICATE_EQUALS));
+				qry.appendGroupedAnd(new DynamicQuery.Parameter(urlTerm, urlValue, DynamicQuery.PREDICATE_LIKE));
 			}
 			else {
-				qry.appendGroupedAnd(new DynamicQuery.Parameter(urlTerm, urlValue, DynamicQuery.PREDICATE_EQUALS), 
+				qry.appendGroupedAnd(new DynamicQuery.Parameter(urlTerm, urlValue, DynamicQuery.PREDICATE_LIKE), 
 									 new DynamicQuery.Parameter(entityAliasChild + "".useType"", discURL.getUseType(), DynamicQuery.PREDICATE_EQUALS));
 			}
 			
"
juddi,4d7bc5a3bf37e7d5341286432c129f8fb1a4b203,"JUDDI-1015 reduces sql identifiers for better support for both mssql and for oracledb.
JUDDI-1101 related. also resolves sql query issues for discoery url due to varchar to clob change
",2020-08-12 20:39:39,Alex O'Ree,"diff --git a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
index d226c30..4f5a7f6 100644
--- a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
+++ b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
@@ -255,7 +255,6 @@
          */
         private static enum Dialect {
 
-                ORACLE(""org.hibernate.dialect.Oracle10gDialect""),
                 MYSQL(""org.hibernate.dialect.MySQLDialect""),
                 HSQL(""org.hibernate.dialect.HSQLDialect""),
                 POSTGRES(""org.hibernate.dialect.PostgreSQLDialect""),
"
juddi,7a26bedd92cff633d641118d19b5237ac8474105,"Merge branch 'master' into bug/JUDDI-1015
",2020-07-22 18:16:54,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
index ee5afd7..5438f71 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
@@ -51,6 +51,7 @@
     public static final String EMAIL = ""Email"";
     public static final String SORTCODE = ""Sortcode"";
     public static final String KEYNAME = ""KeyName"";
+    public static final String DISPLAYNAME = ""DisplayName"";
     public static final String KEYVALUE = ""KeyValue"";
     public static final String CATBAG_KEY_REF = ""catbagkeyref"";
     public static final String IDENT_KEY_REF = ""identbagkeyref"";
"
juddi,7a26bedd92cff633d641118d19b5237ac8474105,"Merge branch 'master' into bug/JUDDI-1015
",2020-07-22 18:16:54,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index d7ec2ec..36451dd 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1037,11 +1037,13 @@
                                         throw ex;
                                 }
                         }
-                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
-                             + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
-                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
+                    return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                            + "" <script type=\""text/javascript\"">window.location.href='""
+                            + StringEscapeUtils.escapeJavaScript(""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")) + ""';</script>""
+                            + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
+                            + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
                 } catch (Exception ex) {
-                        return HandleException(ex);
+                    return HandleException(ex);
                 }
         }
 
@@ -2241,7 +2243,9 @@
                                 }
                         }
                         //return ResourceLoader.GetResource(session, ""actions.saved"");
-                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                        return ResourceLoader.GetResource(session, ""actions.saved"") + 
+                                "" <script type=\""text/javascript\"">window.location.href='""+
+                                StringEscapeUtils.escapeJavaScript(""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")) + ""';</script>""
                              + ""<a href=\""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")
                              + ""\"">"" + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a>"";
                 } catch (Exception ex) {
@@ -3953,4 +3957,14 @@
                 x.add(id.trim());
                 return deleteBinding(x);
         }
+        
+        public String getTmodelDisplayName(String id) {
+            TModel tmodel = GettModelDetailsAsObject(id);
+            if (tmodel!=null &&
+                    tmodel.getName()!=null &&
+                    tmodel.getName().getValue()!=null) {
+                return tmodel.getName().getValue();
+            }
+            return """";
+        }
 }
"
juddi,7a26bedd92cff633d641118d19b5237ac8474105,"Merge branch 'master' into bug/JUDDI-1015
",2020-07-22 18:16:54,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
index 0700351..317b932 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
@@ -173,6 +173,7 @@
 
                 sb.append(""<table class=\""table table-hover\""><tr><th>"");
                 if (isChooser) {
+                        //for the input checkbox
                         sb.append(""</th><th>"");
                 }
                 sb.append(ResourceLoader.GetResource(session, ""items.key""))
@@ -186,7 +187,10 @@
                         if (isChooser) {
                                 sb.append(""<input class=\""modalableTmodel\"" type=checkbox id=\"""")
                                         .append(StringEscapeUtils.escapeHtml(findTModel.getTModelInfos().getTModelInfo().get(i).getTModelKey()))
-                                        .append(""\""></td><td>"");
+                                        .append(""\""   value=\"""" + 
+                                                StringEscapeUtils.escapeHtml(trunc(findTModel.getTModelInfos().getTModelInfo().get(i).getName().getValue()))
+                                                +
+                                                ""\""></td><td>"");
                         }
                         if (!isChooser) {
                                 sb.append(""<a href=\""tmodelEditor.jsp?id="")
"
juddi,ab728473c9197a48c15934bedafde537d502512d,"JUDDI-1009 reworks a number of functions in the ui related to paging operations, limits, offsets, etc. i think everything is working now. Adds some new functionality and some alt text warnings when using uddiv2 connections (offsets are not in the data model)
",2020-07-19 16:19:29,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index d7ec2ec..19ace92 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1037,11 +1037,13 @@
                                         throw ex;
                                 }
                         }
-                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
-                             + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
-                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
+                    return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                            + "" <script type=\""text/javascript\"">window.location.href='""
+                            + StringEscapeUtils.escapeJavaScript(""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")) + ""';</script>""
+                            + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
+                            + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
                 } catch (Exception ex) {
-                        return HandleException(ex);
+                    return HandleException(ex);
                 }
         }
 
@@ -2241,7 +2243,9 @@
                                 }
                         }
                         //return ResourceLoader.GetResource(session, ""actions.saved"");
-                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                        return ResourceLoader.GetResource(session, ""actions.saved"") + 
+                                "" <script type=\""text/javascript\"">window.location.href='""+
+                                StringEscapeUtils.escapeJavaScript(""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")) + ""';</script>""
                              + ""<a href=\""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")
                              + ""\"">"" + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a>"";
                 } catch (Exception ex) {
"
juddi,93f2d3693cff16e52129171368d36b2580bbbbfc,"Merge branch 'master' into bug/JUDDI-1015
",2020-07-16 21:37:36,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
index 4d0947b..183e934 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
@@ -766,6 +766,7 @@
                 FindBusiness r = new FindBusiness();
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setDiscoveryURLs(MapDiscoveryURLs(body.getDiscoveryURLs()));
+                r.setIdentifierBag(MapIdentBag(body.getIdentifierBag()));
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers(), false));
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
                 r.setMaxRows(body.getMaxRows());
"
juddi,93f2d3693cff16e52129171368d36b2580bbbbfc,"Merge branch 'master' into bug/JUDDI-1015
",2020-07-16 21:37:36,Alex O'Ree,"diff --git a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
index 33e922e..d226c30 100644
--- a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
+++ b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
@@ -264,8 +264,15 @@
                 Derby(""org.hibernate.dialect.DerbyDialect""),
                 MySQLInnoDB(""org.hibernate.dialect.MySQLInnoDBDialect""),
                 Oracle9i(""org.hibernate.dialect.Oracle9iDialect""),
+                Oracle10g(""org.hibernate.dialect.Oracle10gDialect""),
+                Oracle12c(""org.hibernate.dialect.Oracle12cDialect""),
                 Sybase(""org.hibernate.dialect.SybaseDialect""),
-                MSSQL2000(""org.hibernate.dialect.SQLServerDialect"");
+                MSSQL2000(""org.hibernate.dialect.SQLServerDialect""),
+                MSSQL2005(""org.hibernate.dialect.SQLServer2005Dialect""),
+                MSSQL2008(""org.hibernate.dialect.SQLServer2008Dialect""),
+                MSSQL2012(""org.hibernate.dialect.SQLServer2012Dialect"");
+
+
                 //   MSSQL2008(""org.hibernate.dialect.SQLServer2008Dialect"");
 
                 private String dialectClass;
"
juddi,f9ca9042de955fd61e3c8edf65b6616526ca1a43,"JUDDI-1008 fix for find by ident bag via v2 findbusiness api
",2020-07-11 18:37:55,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
index 4d0947b..183e934 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
@@ -766,6 +766,7 @@
                 FindBusiness r = new FindBusiness();
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setDiscoveryURLs(MapDiscoveryURLs(body.getDiscoveryURLs()));
+                r.setIdentifierBag(MapIdentBag(body.getIdentifierBag()));
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers(), false));
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
                 r.setMaxRows(body.getMaxRows());
"
juddi,7d562f926b974d46b5e0f9e76d774a10ff9dc889,"JUDDI-1015 incomplete fix for certain columns being too long on specific database vendors (oracle in this case). this has some test failures and query issues due to the column type changes.
",2020-07-10 21:25:06,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index eceb877..41c2cc4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -23,6 +23,7 @@
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
@@ -89,6 +90,7 @@
 		this.accessPointType = accessPointType;
 	}
 
+        @Lob
 	@Column(name = ""access_point_url"", length = 4096)
 	public String getAccessPointUrl() {
 		return this.accessPointUrl;
"
juddi,7d562f926b974d46b5e0f9e76d774a10ff9dc889,"JUDDI-1015 incomplete fix for certain columns being too long on specific database vendors (oracle in this case). this has some test failures and query issues due to the column type changes.
",2020-07-10 21:25:06,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
index a95c619..abf5920 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
@@ -22,6 +22,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.Table;
 
@@ -75,6 +76,7 @@
 		this.useType = useType;
 	}
 
+        @Lob
 	@Column(name = ""url"", nullable = false, length=4096)
 	public String getUrl() {
 		return this.url;
"
juddi,7d562f926b974d46b5e0f9e76d774a10ff9dc889,"JUDDI-1015 incomplete fix for certain columns being too long on specific database vendors (oracle in this case). this has some test failures and query issues due to the column type changes.
",2020-07-10 21:25:06,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Email.java b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
index 2bf0d74..c80ccb6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Email.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
@@ -22,6 +22,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.Table;
 
@@ -79,6 +80,7 @@
 		this.useType = useType;
 	}
 
+        @Lob
 	@Column(name = ""email_address"", nullable = false, length=4096)
 	public String getEmailAddress() {
 		return this.emailAddress;
"
juddi,c8bce39ec3efd546a2dd4e4fd5e072cc218a86a1,"JUDDI-1013 insurance
",2020-07-03 23:42:43,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 0a871c0..d7ec2ec 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1072,7 +1072,7 @@
 
                         return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
                              + "" <script type=\""text/javascript\"">window.location.href='""+ 
-                                 ""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"") + ""';</script>""
+                                StringEscapeUtils.escapeJavaScript(""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"")) + ""';</script>""
                              + ""<a href=\""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"")
                              + ""\"">"" + StringEscapeUtils.escapeHtml(saveBusiness.getBusinessEntity().get(0).getBusinessKey()) + ""</a>"";
                 } catch (Exception ex) {
"
juddi,b2388cb66f11981733201a24de9234c205b217a7,"JUDDI-1013 auto refreshes the page after the save
",2020-07-03 23:33:43,Alex O'Ree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 3c62af5..0a871c0 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1071,6 +1071,8 @@
                         }
 
                         return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                             + "" <script type=\""text/javascript\"">window.location.href='""+ 
+                                 ""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"") + ""';</script>""
                              + ""<a href=\""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"")
                              + ""\"">"" + StringEscapeUtils.escapeHtml(saveBusiness.getBusinessEntity().get(0).getBusinessKey()) + ""</a>"";
                 } catch (Exception ex) {
"
juddi,ac888830b6e710334643f4ce33e5dd9f34d52db3,"JUDDI-1006 fixed, along with some light refactoring
",2020-06-22 22:18:45,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
index b7c04ec..4d0947b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
@@ -173,8 +173,8 @@
                 item.setBindingKey(be.getBindingKey());
                 item.setServiceKey(be.getServiceKey());
 
-                item.setAccessPoint(MapAccessPoint(be.getAccessPoint()));
-                item.setHostingRedirector(MapHostingRedir(be.getHostingRedirector()));
+                item.setAccessPoint(mapAccessPoint(be.getAccessPoint()));
+                item.setHostingRedirector(mapHostingRedir(be.getHostingRedirector()));
                 item.getDescription().addAll(MapDescription(be.getDescription()));
                 item.setTModelInstanceDetails(MapTModelInstanceDetails(be.getTModelInstanceDetails()));
 
@@ -202,7 +202,7 @@
                 item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
                 item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
                 item.getDescription().addAll(MapDescription(be.getDescription()));
-                OverviewDoc MapOverviewDoc = MapOverviewDoc(be.getOverviewDoc());
+                OverviewDoc MapOverviewDoc = mapOverviewDoc(be.getOverviewDoc());
                 if (MapOverviewDoc != null) {
                         item.getOverviewDoc().add(MapOverviewDoc);
                 }
@@ -255,7 +255,7 @@
          * @param overviewDoc
          * @return overdoc or null
          */
-        private static OverviewDoc MapOverviewDoc(org.uddi.api_v2.OverviewDoc overviewDoc) {
+        private static OverviewDoc mapOverviewDoc(org.uddi.api_v2.OverviewDoc overviewDoc) {
                 if (overviewDoc == null) {
                         return null;
                 }
@@ -269,14 +269,16 @@
                 return r;
         }
 
-        private static AccessPoint MapAccessPoint(org.uddi.api_v2.AccessPoint accessPoint) {
+        private static AccessPoint mapAccessPoint(org.uddi.api_v2.AccessPoint accessPoint) {
                 if (accessPoint == null) {
                         return null;
                 }
-                return new AccessPoint(accessPoint.getValue(), MapURLType(accessPoint.getValue()));
+                return new AccessPoint(accessPoint.getValue(), 
+                        mapURLType(accessPoint.getValue(),
+                                accessPoint.getURLType()));
         }
 
-        private static HostingRedirector MapHostingRedir(org.uddi.api_v2.HostingRedirector hostingRedirector) {
+        private static HostingRedirector mapHostingRedir(org.uddi.api_v2.HostingRedirector hostingRedirector) {
                 if (hostingRedirector == null) {
                         return null;
                 }
@@ -305,14 +307,13 @@
                 return r;
         }
 
-        private static String MapURLType(String url) {
+        private static String mapURLType(String url, org.uddi.api_v2.URLType type) {
                 if (url == null) {
                         return null;
                 }
-                if (url.toLowerCase().endsWith(""wsdl"")) {
-                        return AccessPointType.WSDL_DEPLOYMENT.toString();
-                }
-                return AccessPointType.END_POINT.toString();
+                if (type!=null)
+                        return type.name();
+                return null;
         }
 
         private static List<TModelInstanceInfo> MapTModelInstanceInfo(List<org.uddi.api_v2.TModelInstanceInfo> tModelInstanceInfo) {
@@ -328,7 +329,7 @@
                                 t.setInstanceDetails(new InstanceDetails());
                                 t.getInstanceDetails().getDescription().addAll(MapDescription(tModelInstanceInfo.get(i).getInstanceDetails().getDescription()));
                                 t.getInstanceDetails().setInstanceParms(tModelInstanceInfo.get(i).getInstanceDetails().getInstanceParms());
-                                t.getInstanceDetails().getOverviewDoc().add(MapOverviewDoc(tModelInstanceInfo.get(i).getInstanceDetails().getOverviewDoc()));
+                                t.getInstanceDetails().getOverviewDoc().add(mapOverviewDoc(tModelInstanceInfo.get(i).getInstanceDetails().getOverviewDoc()));
                         }
                         r.add(t);
                 }
"
juddi,ac888830b6e710334643f4ce33e5dd9f34d52db3,"JUDDI-1006 fixed, along with some light refactoring
",2020-06-22 22:18:45,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
index 5bc8712..b09c5bc 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
@@ -123,14 +123,14 @@
                 item.setBusinessKey(be.getBusinessKey());
                 if (item.getBusinessKey()==null)
                         item.setBusinessKey("""");
-                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
+                item.setCategoryBag(mapCategoryBag(be.getCategoryBag()));
                 item.setContacts(MapContacts(be.getContacts()));
                 item.setDiscoveryURLs(MapDiscoveryURLs(be.getDiscoveryURLs()));
-                item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
+                item.setIdentifierBag(mapIdentBag(be.getIdentifierBag()));
                 item.setOperator(operator);
-                item.getDescription().addAll(MapDescription(be.getDescription()));
+                item.getDescription().addAll(mapDescription(be.getDescription()));
 
-                item.getName().addAll(MapName(be.getName()));
+                item.getName().addAll(mapName(be.getName()));
                 if (be.getBusinessServices() != null && !be.getBusinessServices().getBusinessService().isEmpty()) {
                         item.setBusinessServices(new BusinessServices());
                         item.getBusinessServices().getBusinessService().addAll(MapService(be.getBusinessServices().getBusinessService()));
@@ -143,11 +143,11 @@
                         return null;
                 }
                 BusinessService item = new org.uddi.api_v2.BusinessService();
-                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
-                item.getDescription().addAll(MapDescription(be.getDescription()));
+                item.setCategoryBag(mapCategoryBag(be.getCategoryBag()));
+                item.getDescription().addAll(mapDescription(be.getDescription()));
                 item.setBusinessKey(be.getBusinessKey());
                 item.setServiceKey(be.getServiceKey());
-                item.getName().addAll(MapName(be.getName()));
+                item.getName().addAll(mapName(be.getName()));
                 if (be.getBindingTemplates() != null && !be.getBindingTemplates().getBindingTemplate().isEmpty()) {
                         item.setBindingTemplates(new BindingTemplates());
                         item.getBindingTemplates().getBindingTemplate().addAll(MapBinding(be.getBindingTemplates().getBindingTemplate()));
@@ -171,14 +171,14 @@
                         return null;
                 }
                 BindingTemplate item = new org.uddi.api_v2.BindingTemplate();
-                item.getDescription().addAll(MapDescription(be.getDescription()));
+                item.getDescription().addAll(mapDescription(be.getDescription()));
 
                 item.setBindingKey(be.getBindingKey());
                 item.setServiceKey(be.getServiceKey());
-                item.setAccessPoint(MapAccessPoint(be.getAccessPoint()));
-                item.setHostingRedirector(MapHostingRedir(be.getHostingRedirector()));
+                item.setAccessPoint(mapAccessPoint(be.getAccessPoint()));
+                item.setHostingRedirector(mapHostingRedir(be.getHostingRedirector()));
 
-                item.setTModelInstanceDetails(MapTModelInstanceDetails(be.getTModelInstanceDetails()));
+                item.setTModelInstanceDetails(mapTModelInstanceDetails(be.getTModelInstanceDetails()));
 
                 return item;
         }
@@ -201,14 +201,14 @@
                 TModel item = new org.uddi.api_v2.TModel();
                 item.setTModelKey(be.getTModelKey());
                 item.setName(new Name(be.getName().getValue(), be.getName().getLang()));
-                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
-                item.getDescription().addAll(MapDescription(be.getDescription()));
-                item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
-                item.setOverviewDoc(MapOverviewDoc(be.getOverviewDoc()));
+                item.setCategoryBag(mapCategoryBag(be.getCategoryBag()));
+                item.getDescription().addAll(mapDescription(be.getDescription()));
+                item.setIdentifierBag(mapIdentBag(be.getIdentifierBag()));
+                item.setOverviewDoc(mapOverviewDoc(be.getOverviewDoc()));
                 return item;
         }
 
-        private static List<Name> MapName(List<org.uddi.api_v3.Name> name) {
+        private static List<Name> mapName(List<org.uddi.api_v3.Name> name) {
                 List<Name> items = new ArrayList<Name>();
                 for (int i = 0; i < name.size(); i++) {
                         Name n = new Name(name.get(i).getValue(), name.get(i).getLang());
@@ -217,16 +217,16 @@
                 return items;
         }
 
-        private static CategoryBag MapCategoryBag(org.uddi.api_v3.CategoryBag categoryBag) {
+        private static CategoryBag mapCategoryBag(org.uddi.api_v3.CategoryBag categoryBag) {
                 if (categoryBag == null) {
                         return null;
                 }
                 CategoryBag c = new CategoryBag();
-                c.getKeyedReference().addAll(MapKeyedReference(categoryBag.getKeyedReference()));
+                c.getKeyedReference().addAll(mapKeyedReference(categoryBag.getKeyedReference()));
                 return c;
         }
 
-        private static List<Description> MapDescription(List<org.uddi.api_v3.Description> description) {
+        private static List<Description> mapDescription(List<org.uddi.api_v3.Description> description) {
                 List<Description> ret = new ArrayList<Description>();
                 if (description == null || description.isEmpty()) {
                         return ret;
@@ -238,13 +238,13 @@
 
         }
 
-        private static IdentifierBag MapIdentBag(org.uddi.api_v3.IdentifierBag identifierBag) {
+        private static IdentifierBag mapIdentBag(org.uddi.api_v3.IdentifierBag identifierBag) {
 
                 if (identifierBag == null) {
                         return null;
                 }
                 IdentifierBag r = new IdentifierBag();
-                r.getKeyedReference().addAll(MapKeyedReference(identifierBag.getKeyedReference()));
+                r.getKeyedReference().addAll(mapKeyedReference(identifierBag.getKeyedReference()));
                 return r;
         }
 
@@ -254,13 +254,13 @@
          * @param overviewDoc
          * @return overviewDoc or null
          */
-        private static OverviewDoc MapOverviewDoc(List<org.uddi.api_v3.OverviewDoc> overviewDoc) {
+        private static OverviewDoc mapOverviewDoc(List<org.uddi.api_v3.OverviewDoc> overviewDoc) {
                 if (overviewDoc == null || overviewDoc.isEmpty()) {
                         return null;
                 }
                 OverviewDoc r = new OverviewDoc();
 
-                r.getDescription().addAll(MapDescription(overviewDoc.get(0).getDescription()));
+                r.getDescription().addAll(mapDescription(overviewDoc.get(0).getDescription()));
                 if (overviewDoc.get(0).getOverviewURL() != null && overviewDoc.get(0).getOverviewURL().getValue() != null) {
                         r.setOverviewURL(overviewDoc.get(0).getOverviewURL().getValue());
                 }
@@ -268,14 +268,14 @@
                 return r;
         }
 
-        private static AccessPoint MapAccessPoint(org.uddi.api_v3.AccessPoint accessPoint) {
+        private static AccessPoint mapAccessPoint(org.uddi.api_v3.AccessPoint accessPoint) {
                 if (accessPoint == null) {
                         return null;
                 }
-                return new AccessPoint(accessPoint.getValue(), MapURLType(accessPoint.getValue()));
+                return new AccessPoint(accessPoint.getValue(), mapURLType(accessPoint.getValue(), accessPoint.getUseType()));
         }
 
-        private static HostingRedirector MapHostingRedir(org.uddi.api_v3.HostingRedirector hostingRedirector) {
+        private static HostingRedirector mapHostingRedir(org.uddi.api_v3.HostingRedirector hostingRedirector) {
                 if (hostingRedirector == null) {
                         return null;
                 }
@@ -284,7 +284,7 @@
                 return r;
         }
 
-        private static TModelInstanceDetails MapTModelInstanceDetails(org.uddi.api_v3.TModelInstanceDetails tModelInstanceDetails) {
+        private static TModelInstanceDetails mapTModelInstanceDetails(org.uddi.api_v3.TModelInstanceDetails tModelInstanceDetails) {
                 if (tModelInstanceDetails == null) {
                         return new TModelInstanceDetails();
                 }
@@ -293,7 +293,7 @@
                 return r;
         }
 
-        private static List<KeyedReference> MapKeyedReference(List<org.uddi.api_v3.KeyedReference> keyedReference) {
+        private static List<KeyedReference> mapKeyedReference(List<org.uddi.api_v3.KeyedReference> keyedReference) {
                 List<KeyedReference> r = new ArrayList<KeyedReference>();
                 if (keyedReference == null) {
                         return r;
@@ -304,7 +304,12 @@
                 return r;
         }
 
-        private static URLType MapURLType(String url) {
+        private static URLType mapURLType(String url, String useType) {
+                try {
+                        return URLType.fromValue(useType);
+                } catch (Exception ex) {
+                        //ignore
+                }
                 if (url == null) {
                         return URLType.OTHER;
                 }
@@ -337,12 +342,12 @@
                 for (int i = 0; i < tModelInstanceInfo.size(); i++) {
                         TModelInstanceInfo t = new TModelInstanceInfo();
                         t.setTModelKey(tModelInstanceInfo.get(i).getTModelKey());
-                        t.getDescription().addAll(MapDescription(tModelInstanceInfo.get(i).getDescription()));
+                        t.getDescription().addAll(mapDescription(tModelInstanceInfo.get(i).getDescription()));
                         if (tModelInstanceInfo.get(i).getInstanceDetails() != null) {
                                 t.setInstanceDetails(new InstanceDetails());
-                                t.getInstanceDetails().getDescription().addAll(MapDescription(tModelInstanceInfo.get(i).getInstanceDetails().getDescription()));
+                                t.getInstanceDetails().getDescription().addAll(mapDescription(tModelInstanceInfo.get(i).getInstanceDetails().getDescription()));
                                 t.getInstanceDetails().setInstanceParms(StringEscapeUtils.escapeXml(tModelInstanceInfo.get(i).getInstanceDetails().getInstanceParms()));
-                                t.getInstanceDetails().setOverviewDoc(MapOverviewDoc(tModelInstanceInfo.get(i).getInstanceDetails().getOverviewDoc()));
+                                t.getInstanceDetails().setOverviewDoc(mapOverviewDoc(tModelInstanceInfo.get(i).getInstanceDetails().getOverviewDoc()));
                         }
                         r.add(t);
                 }
@@ -375,11 +380,11 @@
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
                 r.setMaxRows(body.getMaxRows());
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
-                r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
+                r.setCategoryBag(mapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
                 r.setDiscoveryURLs(MapDiscoveryURLs(body.getDiscoveryURLs()));
-                r.setIdentifierBag(MapIdentBag(body.getIdentifierBag()));
-                r.getName().addAll(MapName(body.getName()));
+                r.setIdentifierBag(mapIdentBag(body.getIdentifierBag()));
+                r.getName().addAll(mapName(body.getName()));
                 if (ContainsWildCard(r.getName())) {
                         //r.setFindQualifiers(AddApproximateMatch(r.getFindQualifiers()));
                 }
@@ -407,11 +412,11 @@
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
                 r.setMaxRows(body.getMaxRows());
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
-                r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
+                r.setCategoryBag(mapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
 
                 r.setBusinessKey(body.getBusinessKey());
-                r.getName().addAll(MapName(body.getName()));
+                r.getName().addAll(mapName(body.getName()));
                 return r;
         }
 
@@ -419,7 +424,7 @@
                 FindTModel r = new FindTModel();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
                 r.setMaxRows(body.getMaxRows());
-                r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
+                r.setCategoryBag(mapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
 
                 if (body.getName() != null) {
@@ -818,8 +823,8 @@
                         for (int i = 0; i < findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().size(); i++) {
                                 RelatedBusinessInfo x = new RelatedBusinessInfo();
                                 x.setBusinessKey(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getBusinessKey());
-                                x.getDescription().addAll(MapDescription(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getDescription()));
-                                x.getName().addAll(MapName(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getName()));
+                                x.getDescription().addAll(mapDescription(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getDescription()));
+                                x.getName().addAll(mapName(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getName()));
                                 x.getSharedRelationships().addAll(MapSharedRelationships(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getSharedRelationships()));
                                 r.getRelatedBusinessInfos().getRelatedBusinessInfo().add(x);
                         }
@@ -950,8 +955,8 @@
                         BusinessInfo x = new BusinessInfo();
                         x.setBusinessKey(businessInfos.getBusinessInfo().get(i).getBusinessKey());
                         x.setServiceInfos(MapServiceInfos(businessInfos.getBusinessInfo().get(i).getServiceInfos()));
-                        x.getDescription().addAll(MapDescription(businessInfos.getBusinessInfo().get(i).getDescription()));
-                        x.getName().addAll(MapName(businessInfos.getBusinessInfo().get(i).getName()));
+                        x.getDescription().addAll(mapDescription(businessInfos.getBusinessInfo().get(i).getDescription()));
+                        x.getName().addAll(mapName(businessInfos.getBusinessInfo().get(i).getName()));
                         r.getBusinessInfo().add(x);
                 }
 
@@ -967,7 +972,7 @@
                         ServiceInfo x = new ServiceInfo();
                         x.setBusinessKey(serviceInfos.getServiceInfo().get(i).getBusinessKey());
                         x.setServiceKey(serviceInfos.getServiceInfo().get(i).getServiceKey());
-                        x.getName().addAll(MapName(serviceInfos.getServiceInfo().get(i).getName()));
+                        x.getName().addAll(mapName(serviceInfos.getServiceInfo().get(i).getName()));
                         r.getServiceInfo().add(x);
                 }
                 return r;
@@ -1005,8 +1010,8 @@
                         for (int i = 0; i < registeredInfo.getBusinessInfos().getBusinessInfo().size(); i++) {
                                 BusinessInfo x = new BusinessInfo();
                                 x.setBusinessKey(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey());
-                                x.getName().addAll(MapName(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getName()));
-                                x.getDescription().addAll(MapDescription(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getDescription()));
+                                x.getName().addAll(mapName(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getName()));
+                                x.getDescription().addAll(mapDescription(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getDescription()));
                                 x.setServiceInfos(MapServiceInfos(registeredInfo.getBusinessInfos().getBusinessInfo().get(i).getServiceInfos()));
                         }
                 }
@@ -1109,7 +1114,7 @@
                         c.setUseType(contact.get(i).getUseType());
                         c.setPersonName(contact.get(i).getPersonName().get(0).getValue());
                         c.getAddress().addAll(MapAddress(contact.get(i).getAddress()));
-                        c.getDescription().addAll(MapDescription(contact.get(i).getDescription()));
+                        c.getDescription().addAll(mapDescription(contact.get(i).getDescription()));
                         c.getEmail().addAll(MapEmail(contact.get(i).getEmail()));
                         c.getPhone().addAll(MapPhone(contact.get(i).getPhone()));
 
@@ -1230,7 +1235,7 @@
                 if (sharedRelationships==null) return r;
                 for (int i=0; i < sharedRelationships.size(); i++){
                         SharedRelationships x = new SharedRelationships();
-                        x.getKeyedReference().addAll(MapKeyedReference(sharedRelationships.get(i).getKeyedReference()));
+                        x.getKeyedReference().addAll(mapKeyedReference(sharedRelationships.get(i).getKeyedReference()));
                         if (sharedRelationships.get(i).getDirection()!=null)
                         switch (sharedRelationships.get(i).getDirection()){
                                 case FROM_KEY:
"
juddi,13101ecb48ad76fbb3a8c4aee84852887aae340d,"Merge branch 'bug/JUDDI-937'
",2020-01-31 21:06:09,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index b326645..61945b5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -77,6 +77,10 @@
         private Properties properties = null;
         private static Map<String, ServiceLocator> serviceLocators = new HashMap<String, ServiceLocator>();
 
+        
+        public static void  clearServiceLocatorCaches(){
+                serviceLocators.clear();
+        }
         /**
          * Default constructor, loads from the default config, META-INF/uddi.xml
          *
"
juddi,13101ecb48ad76fbb3a8c4aee84852887aae340d,"Merge branch 'bug/JUDDI-937'
",2020-01-31 21:06:09,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index bd2f441..d64dd7b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -89,5 +89,9 @@
     public static boolean contains(String name) {
         return 	(clients.containsKey(name)) ;
     }
+
+        public static void removeAll() {
+                clients.clear();
+        }
 	
 }
"
juddi,13101ecb48ad76fbb3a8c4aee84852887aae340d,"Merge branch 'bug/JUDDI-937'
",2020-01-31 21:06:09,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
index e270761..8c77604 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
@@ -19,6 +19,7 @@
 import java.rmi.RemoteException;
 import java.util.ArrayList;
 import java.util.Properties;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.namespace.QName;
 
@@ -46,7 +47,7 @@
  */
 public class ServiceLocator {
 	
-	private Log log = LogFactory.getLog(this.getClass());
+	private static final Log log = LogFactory.getLog(ServiceLocator.class);
 	
 	private UDDIClerk clerk;
 	private Properties properties = new Properties();
@@ -54,7 +55,7 @@
 	private String policy = null;
 	private SelectionPolicy selectionPolicy = null;
 	private URLLocalizer urlLocalizer = null;
-	
+	private ConcurrentHashMap<String, Topology> simpleCache= null;
 	/**
 	 * Requirement in the config is a clerk with access credentials to the UDDI server
 	 * you want the locator to do lookups to. When a live cache is used the clerk
@@ -80,6 +81,14 @@
                         this.properties = clerk.getUDDINode().getProperties();
 	}
 	
+        /**
+	 * Creates a new UDDIServiceCache, which brings up a new WebService Endpoint. This
+	 * EndPoint will be called by the UDDI server if any service changes. A callback
+	 * will result in cleaning the cache. 
+	 * 
+	 * @param baseCallbackURL
+	 * @throws ConfigurationException
+	 */
 	public ServiceLocator withCache(URL baseCallbackURL) throws ConfigurationException {
 		if (serviceCache == null) {
 			serviceCache = initCache(baseCallbackURL);
@@ -109,6 +118,14 @@
 		}
 		return this;
 	}
+        
+        
+        public ServiceLocator withSimpleCache(){
+                if (simpleCache==null){
+                       simpleCache= new ConcurrentHashMap<String, Topology>();
+                }
+                return this;
+        }
 	
 	public UDDIServiceCache getUDDIServiceCache() {
 		return serviceCache;
@@ -174,6 +191,13 @@
 			throw new ConfigurationException(e.getMessage(),e);
 		}
 	}
+        
+        public void clearCaches(){
+                if (serviceCache!=null)
+                        serviceCache.removeAll();
+                if (simpleCache!=null)
+                        simpleCache.clear();
+        }
 	
 	/**
 	 * 
@@ -182,7 +206,8 @@
 	 * @throws TransportException
 	 */
 	public void shutdown() throws RemoteException, ConfigurationException, TransportException {
-		serviceCache.shutdown();
+                if (serviceCache!=null)
+                        serviceCache.shutdown();
 	}
 	/**
 	 * Looks up the Endpoints for a Service. If the cache is in use it will try to 
@@ -199,21 +224,25 @@
 	 */
 	public String lookupEndpoint(String serviceKey) throws RemoteException, ConfigurationException, TransportException {
 		Topology topology = null;
-		if (serviceCache==null) { //nocache in use
+                if (simpleCache != null && simpleCache.containsKey(serviceKey)){
+                        topology = simpleCache.get(serviceKey);
+                } else if (serviceCache==null) { //nocache in use
 			topology = lookupEndpointInUDDI(serviceKey);
 		} else { //with cache
 			//try to get it from the cache first
 			topology = serviceCache.lookupService(serviceKey);
-			if (topology==null) { //not found in the cache
+			if (topology == null) { //not found in the cache
 				topology = lookupEndpointInUDDI(serviceKey);
 			}
 		}
-	    if (topology!=null && topology.getEprs().size() > 0) {
-	    	String epr = getPolicy().select(topology);
-	    	return epr;
-	    } else {
-	    	return null;
-	    }
+                if (topology!=null && topology.getEprs().size() > 0) {
+                        if (simpleCache!=null){
+                                simpleCache.put(serviceKey,topology);
+                        }
+                        String epr = getPolicy().select(topology);
+                        return epr;
+                } 
+                return null;
 	}
 	
 	/** 
@@ -264,11 +293,13 @@
 						log.debug(""epr= "" + url);
 						eprs.add(url);
 					} else if(AccessPointType.WSDL_DEPLOYMENT.toString().equals(accessPoint.getUseType())) {
-					//do something here
-                                            //try to open that wsdl, then grab the endpoints
+                                                //do something here
+                                                //try to open that wsdl, then grab the endpoints
+                                                //String url=fetchFromWsdl(accessPoint.getValue());
+                                              
 					}  else if(AccessPointType.BINDING_TEMPLATE.toString().equals(accessPoint.getUseType())) {
-					//do something here
-                                            //grab that binding template and use that address
+                                                //do something here
+                                                //grab that binding template and use that address
 					}
                                                 }
 				}
@@ -284,5 +315,4 @@
 	}
 	
 	
-	
 }
"
juddi,13101ecb48ad76fbb3a8c4aee84852887aae340d,"Merge branch 'bug/JUDDI-937'
",2020-01-31 21:06:09,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
index 38ed251..7011ca9 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
@@ -19,10 +19,12 @@
 import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessInfos;
 import org.uddi.api_v3.BusinessList;
+import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.Contacts;
 import org.uddi.api_v3.DeleteBusiness;
@@ -32,9 +34,11 @@
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
 import org.uddi.api_v3.GetOperationalInfo;
+import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.OperationalInfos;
+import org.uddi.api_v3.ServiceDetail;
 import org.uddi.api_v3.ServiceInfos;
 import org.uddi.api_v3.ServiceList;
 import org.uddi.api_v3.TModelList;
@@ -268,8 +272,23 @@
                                 return (""NO SERVICES RETURNED!"");
                         } else {
                                 for (int i = 0; i < findService.getServiceInfos().getServiceInfo().size(); i++) {
-                                        sb.append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getValue()).append("" lang="").append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getLang()).append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey()).append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()).append(
-                                                System.getProperty(""line.separator""));
+                                        sb.append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getValue()).
+                                                append("" lang="").append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getLang()).
+                                                append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey()).
+                                                append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()).
+                                                append(System.getProperty(""line.separator""));
+                                        GetServiceDetail req=new GetServiceDetail();
+                                        req.setAuthInfo(authinfo);
+                                        req.getServiceKey().add(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey());
+                                         ServiceDetail d=inquiry.getServiceDetail(req);
+                                        for(BusinessService bs : d.getBusinessService()){
+                                           for(BindingTemplate bt:bs.getBindingTemplates().getBindingTemplate()){
+                                               sb.append(bt.getBindingKey());
+                                               sb.append("" "");
+                                               sb.append(bt.getAccessPoint().getValue());
+                                               sb. append(System.getProperty(""line.separator""));
+                                           }
+                                        }
                                 }
                         }
                 } catch (Exception ex) {
"
juddi,5ac79c870c2e804ca154ee1dc207e6a8087d609d,"JUDDI-937 adding test cases, discovered a caching mechanism that had no way of being cleared which was resolved.
",2020-01-20 11:57:33,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index b326645..61945b5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -77,6 +77,10 @@
         private Properties properties = null;
         private static Map<String, ServiceLocator> serviceLocators = new HashMap<String, ServiceLocator>();
 
+        
+        public static void  clearServiceLocatorCaches(){
+                serviceLocators.clear();
+        }
         /**
          * Default constructor, loads from the default config, META-INF/uddi.xml
          *
"
juddi,5ac79c870c2e804ca154ee1dc207e6a8087d609d,"JUDDI-937 adding test cases, discovered a caching mechanism that had no way of being cleared which was resolved.
",2020-01-20 11:57:33,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index bd2f441..d64dd7b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -89,5 +89,9 @@
     public static boolean contains(String name) {
         return 	(clients.containsKey(name)) ;
     }
+
+        public static void removeAll() {
+                clients.clear();
+        }
 	
 }
"
juddi,5ac79c870c2e804ca154ee1dc207e6a8087d609d,"JUDDI-937 adding test cases, discovered a caching mechanism that had no way of being cleared which was resolved.
",2020-01-20 11:57:33,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
index 38ed251..7011ca9 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
@@ -19,10 +19,12 @@
 import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessInfos;
 import org.uddi.api_v3.BusinessList;
+import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.Contacts;
 import org.uddi.api_v3.DeleteBusiness;
@@ -32,9 +34,11 @@
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
 import org.uddi.api_v3.GetOperationalInfo;
+import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.OperationalInfos;
+import org.uddi.api_v3.ServiceDetail;
 import org.uddi.api_v3.ServiceInfos;
 import org.uddi.api_v3.ServiceList;
 import org.uddi.api_v3.TModelList;
@@ -268,8 +272,23 @@
                                 return (""NO SERVICES RETURNED!"");
                         } else {
                                 for (int i = 0; i < findService.getServiceInfos().getServiceInfo().size(); i++) {
-                                        sb.append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getValue()).append("" lang="").append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getLang()).append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey()).append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()).append(
-                                                System.getProperty(""line.separator""));
+                                        sb.append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getValue()).
+                                                append("" lang="").append(findService.getServiceInfos().getServiceInfo().get(i).getName().get(0).getLang()).
+                                                append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey()).
+                                                append("" "").append(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()).
+                                                append(System.getProperty(""line.separator""));
+                                        GetServiceDetail req=new GetServiceDetail();
+                                        req.setAuthInfo(authinfo);
+                                        req.getServiceKey().add(findService.getServiceInfos().getServiceInfo().get(i).getServiceKey());
+                                         ServiceDetail d=inquiry.getServiceDetail(req);
+                                        for(BusinessService bs : d.getBusinessService()){
+                                           for(BindingTemplate bt:bs.getBindingTemplates().getBindingTemplate()){
+                                               sb.append(bt.getBindingKey());
+                                               sb.append("" "");
+                                               sb.append(bt.getAccessPoint().getValue());
+                                               sb. append(System.getProperty(""line.separator""));
+                                           }
+                                        }
                                 }
                         }
                 } catch (Exception ex) {
"
juddi,07790a220657525c85d446ed9427aa9ac3fac6ee,"JUDDI-937 this resolve the caching issue, needs a test case still
",2020-01-19 23:10:38,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
index e270761..8c77604 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
@@ -19,6 +19,7 @@
 import java.rmi.RemoteException;
 import java.util.ArrayList;
 import java.util.Properties;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.namespace.QName;
 
@@ -46,7 +47,7 @@
  */
 public class ServiceLocator {
 	
-	private Log log = LogFactory.getLog(this.getClass());
+	private static final Log log = LogFactory.getLog(ServiceLocator.class);
 	
 	private UDDIClerk clerk;
 	private Properties properties = new Properties();
@@ -54,7 +55,7 @@
 	private String policy = null;
 	private SelectionPolicy selectionPolicy = null;
 	private URLLocalizer urlLocalizer = null;
-	
+	private ConcurrentHashMap<String, Topology> simpleCache= null;
 	/**
 	 * Requirement in the config is a clerk with access credentials to the UDDI server
 	 * you want the locator to do lookups to. When a live cache is used the clerk
@@ -80,6 +81,14 @@
                         this.properties = clerk.getUDDINode().getProperties();
 	}
 	
+        /**
+	 * Creates a new UDDIServiceCache, which brings up a new WebService Endpoint. This
+	 * EndPoint will be called by the UDDI server if any service changes. A callback
+	 * will result in cleaning the cache. 
+	 * 
+	 * @param baseCallbackURL
+	 * @throws ConfigurationException
+	 */
 	public ServiceLocator withCache(URL baseCallbackURL) throws ConfigurationException {
 		if (serviceCache == null) {
 			serviceCache = initCache(baseCallbackURL);
@@ -109,6 +118,14 @@
 		}
 		return this;
 	}
+        
+        
+        public ServiceLocator withSimpleCache(){
+                if (simpleCache==null){
+                       simpleCache= new ConcurrentHashMap<String, Topology>();
+                }
+                return this;
+        }
 	
 	public UDDIServiceCache getUDDIServiceCache() {
 		return serviceCache;
@@ -174,6 +191,13 @@
 			throw new ConfigurationException(e.getMessage(),e);
 		}
 	}
+        
+        public void clearCaches(){
+                if (serviceCache!=null)
+                        serviceCache.removeAll();
+                if (simpleCache!=null)
+                        simpleCache.clear();
+        }
 	
 	/**
 	 * 
@@ -182,7 +206,8 @@
 	 * @throws TransportException
 	 */
 	public void shutdown() throws RemoteException, ConfigurationException, TransportException {
-		serviceCache.shutdown();
+                if (serviceCache!=null)
+                        serviceCache.shutdown();
 	}
 	/**
 	 * Looks up the Endpoints for a Service. If the cache is in use it will try to 
@@ -199,21 +224,25 @@
 	 */
 	public String lookupEndpoint(String serviceKey) throws RemoteException, ConfigurationException, TransportException {
 		Topology topology = null;
-		if (serviceCache==null) { //nocache in use
+                if (simpleCache != null && simpleCache.containsKey(serviceKey)){
+                        topology = simpleCache.get(serviceKey);
+                } else if (serviceCache==null) { //nocache in use
 			topology = lookupEndpointInUDDI(serviceKey);
 		} else { //with cache
 			//try to get it from the cache first
 			topology = serviceCache.lookupService(serviceKey);
-			if (topology==null) { //not found in the cache
+			if (topology == null) { //not found in the cache
 				topology = lookupEndpointInUDDI(serviceKey);
 			}
 		}
-	    if (topology!=null && topology.getEprs().size() > 0) {
-	    	String epr = getPolicy().select(topology);
-	    	return epr;
-	    } else {
-	    	return null;
-	    }
+                if (topology!=null && topology.getEprs().size() > 0) {
+                        if (simpleCache!=null){
+                                simpleCache.put(serviceKey,topology);
+                        }
+                        String epr = getPolicy().select(topology);
+                        return epr;
+                } 
+                return null;
 	}
 	
 	/** 
@@ -264,11 +293,13 @@
 						log.debug(""epr= "" + url);
 						eprs.add(url);
 					} else if(AccessPointType.WSDL_DEPLOYMENT.toString().equals(accessPoint.getUseType())) {
-					//do something here
-                                            //try to open that wsdl, then grab the endpoints
+                                                //do something here
+                                                //try to open that wsdl, then grab the endpoints
+                                                //String url=fetchFromWsdl(accessPoint.getValue());
+                                              
 					}  else if(AccessPointType.BINDING_TEMPLATE.toString().equals(accessPoint.getUseType())) {
-					//do something here
-                                            //grab that binding template and use that address
+                                                //do something here
+                                                //grab that binding template and use that address
 					}
                                                 }
 				}
@@ -284,5 +315,4 @@
 	}
 	
 	
-	
 }
"
juddi,4522d6fb5bf61408aa8a4f20e47f2ee2813b48ff,"Merge branch 'master' into feature/JUDDI-991
",2019-12-13 15:18:11,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index e7b83e5..62439c5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -510,77 +510,77 @@
                         bt.setTModelInstanceDetails(new TModelInstanceDetails());
                 }
                 TModelInstanceInfo tModelInstanceInfo;
-                if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SOAP)) {
+                if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SOAP)) {
                         tModelInstanceInfo = new TModelInstanceInfo();
                         tModelInstanceInfo.setTModelKey(UDDIConstants.PROTOCOL_SOAP);
                         bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                 }
 
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""http:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_HTTP)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_HTTP)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_HTTP);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""jms:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_JMS)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_JMS)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_JMS);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""rmi:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_RMI)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_RMI)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_RMI);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""udp:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_UDP)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_UDP)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_UDP);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""amqp:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_AMQP)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_AMQP)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_AMQP);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""mailto:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_EMAIL)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_EMAIL)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_EMAIL);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""ftp:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_FTP)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_FTP)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_FTP);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""https:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.PROTOCOL_SSLv3);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""ftps:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.PROTOCOL_SSLv3);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""jndi:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_JNDI_RMI)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_JNDI_RMI)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_JNDI_RMI);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
@@ -601,21 +601,21 @@
                         bt.setTModelInstanceDetails(new TModelInstanceDetails());
                 }
                 TModelInstanceInfo tModelInstanceInfo;
-                if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_REST)) {
+                if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_REST)) {
                         tModelInstanceInfo = new TModelInstanceInfo();
                         tModelInstanceInfo.setTModelKey(UDDIConstants.PROTOCOL_REST);
                         bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                 }
 
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""http:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_HTTP)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.TRANSPORT_HTTP)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.TRANSPORT_HTTP);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
                         }
                 }
                 if (bt.getAccessPoint() != null && bt.getAccessPoint().getValue().startsWith(""https:"")) {
-                        if (!Exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
+                        if (!exists(bt.getTModelInstanceDetails().getTModelInstanceInfo(), UDDIConstants.PROTOCOL_SSLv3)) {
                                 tModelInstanceInfo = new TModelInstanceInfo();
                                 tModelInstanceInfo.setTModelKey(UDDIConstants.PROTOCOL_SSLv3);
                                 bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tModelInstanceInfo);
@@ -624,7 +624,7 @@
                 return bt;
         }
 
-        private static boolean Exists(List<TModelInstanceInfo> items, String key) {
+        private static boolean exists(List<TModelInstanceInfo> items, String key) {
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getTModelKey() != null
                                 && items.get(i).getTModelKey().equalsIgnoreCase(key)) {
"
juddi,4522d6fb5bf61408aa8a4f20e47f2ee2813b48ff,"Merge branch 'master' into feature/JUDDI-991
",2019-12-13 15:18:11,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
index be36ea5..57a411c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
@@ -81,7 +81,7 @@
                         Map<String, Object> requestContext = ((BindingProvider) inquiryService).getRequestContext();
                         if (endpointURL != null) {
                         
-                        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
+                                requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
                         }
                         setCredentials(requestContext);
                 } catch (Exception e) {
@@ -127,7 +127,7 @@
                         }
                         Map<String, Object> requestContext = ((BindingProvider) publishService).getRequestContext();
                         if (endpointURL != null)
-                        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
+                                requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
                         setCredentials(requestContext);
                 } catch (Exception e) {
                         throw new TransportException(e.getMessage(), e);
"
juddi,4522d6fb5bf61408aa8a4f20e47f2ee2813b48ff,"Merge branch 'master' into feature/JUDDI-991
",2019-12-13 15:18:11,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index a4ea297..83b7fab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -1318,8 +1318,7 @@
                         }
 
                         StringBuilder sql = new StringBuilder();
-                        sql.append(""select distinct c from ReplicationConfiguration c "");
-                        sql.toString();
+                        sql.append(""select distinct c from Subscription c "");
                         Query qry = em.createQuery(sql.toString());
                         List<org.apache.juddi.model.Subscription> resultList = qry.getResultList();
                         for (int i = 0; i < resultList.size(); i++) {
"
juddi,4522d6fb5bf61408aa8a4f20e47f2ee2813b48ff,"Merge branch 'master' into feature/JUDDI-991
",2019-12-13 15:18:11,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 0996eb1..6c9b37b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -26,6 +26,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OrderBy;
@@ -95,6 +96,7 @@
 		this.tmodelKey = tmodelKey;
 	}
 
+        @Lob
 	@Column(name = ""instance_parms"", length = 8192)
 	public String getInstanceParms() {
 		return this.instanceParms;
"
juddi,4522d6fb5bf61408aa8a4f20e47f2ee2813b48ff,"Merge branch 'master' into feature/JUDDI-991
",2019-12-13 15:18:11,Alex O'Ree,"diff --git a/juddi-examples/hello-world/src/main/java/org/apache/juddi/example/helloworld/HelloWorld.java b/juddi-examples/hello-world/src/main/java/org/apache/juddi/example/helloworld/HelloWorld.java
index 4be1827..a7f06c3 100644
--- a/juddi-examples/hello-world/src/main/java/org/apache/juddi/example/helloworld/HelloWorld.java
+++ b/juddi-examples/hello-world/src/main/java/org/apache/juddi/example/helloworld/HelloWorld.java
@@ -41,7 +41,7 @@
         	// a UddiClient can be a client to multiple UDDI nodes, so 
                         // supply the nodeName (defined in your uddi.xml.
                         // The transport can be WS, inVM, RMI etc which is defined in the uddi.xml
-                        Transport transport = uddiClient.getTransport();
+                        Transport transport = uddiClient.getTransport(""default"");
                         // Now you create a reference to the UDDI API
                         security = transport.getUDDISecurityService();
                 } catch (Exception e) {
"
juddi,854d5708bed7f025613916c182db9bbc879ba6cb,"JUDDI-999 merging
",2019-12-13 14:36:43,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 0996eb1..6c9b37b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -26,6 +26,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OrderBy;
@@ -95,6 +96,7 @@
 		this.tmodelKey = tmodelKey;
 	}
 
+        @Lob
 	@Column(name = ""instance_parms"", length = 8192)
 	public String getInstanceParms() {
 		return this.instanceParms;
"
juddi,539b31b8d2d7e7e6db13814943eec80cef3f3c4c,"JUDDI-999 fix for mssql issue with tmodelinstanceinfo varchar being too big
",2019-12-13 07:57:01,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 0996eb1..6c9b37b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -26,6 +26,7 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OrderBy;
@@ -95,6 +96,7 @@
 		this.tmodelKey = tmodelKey;
 	}
 
+        @Lob
 	@Column(name = ""instance_parms"", length = 8192)
 	public String getInstanceParms() {
 		return this.instanceParms;
"
juddi,c64ec446760f5efec489c3a967388145c98b2973,"JUDDI-997 made some minor changes, should resolve this
",2019-06-20 21:57:08,Alex O'Ree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
index 9ae8c44..aefb8da 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
@@ -1562,6 +1562,11 @@
                 return clientConfig.getConfiguration().getBoolean(PROP_ADMIN_LOCALHOST_ONLY, true);
         }
 
+        /**
+         * returns null on successful login, otherwise an error message
+         * 
+         * @return 
+         */
         public String verifyLogin() {
                 ensureConfig();
                 if (style != AuthStyle.UDDI_AUTH) {
@@ -1588,11 +1593,7 @@
                         } catch (Exception ex) {
                                 return handleException(ex);
                         }
-                        /*
-                         bp = (BindingProvider) juddi;
-                         context = bp.getRequestContext();
-                         context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(""username""));
-                         context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));*/
+                      
                         return null;
                 } else {
                         if (token != null) {
"
juddi,74e4985301ed7444f649f2e55cd2391a59acae99,"JUDDI-996 fixed with tests
",2019-06-20 21:21:13,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index a4ea297..83b7fab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -1318,8 +1318,7 @@
                         }
 
                         StringBuilder sql = new StringBuilder();
-                        sql.append(""select distinct c from ReplicationConfiguration c "");
-                        sql.toString();
+                        sql.append(""select distinct c from Subscription c "");
                         Query qry = em.createQuery(sql.toString());
                         List<org.apache.juddi.model.Subscription> resultList = qry.getResultList();
                         for (int i = 0; i < resultList.size(); i++) {
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 1b3b9b9..b4b88ed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -18,9 +18,8 @@
 
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.LinkedList;
 import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.xml.ws.Holder;
@@ -31,6 +30,7 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.model.BindingTemplate;
 import org.apache.juddi.query.FetchBindingTemplatesQuery;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
 import org.apache.juddi.query.FetchBusinessServicesQuery;
@@ -82,15 +82,17 @@
 
 	private static Log logger = LogFactory.getLog(InquiryHelper.class);
 	
-	public static List<?> findBinding(FindBinding body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+	public static List<Object> findBinding(FindBinding body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
-
-		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
+		List<Object> keysFound = new LinkedList<Object>();
+                if (body.getServiceKey()!=null && body.getServiceKey().length() > 0) {
+                    keysFound = findBindingsByServiceKey(em, body.getServiceKey(), keysFound);
+                }
+		
 		if (body.getTModelBag() == null)
 			body.setTModelBag(new TModelBag());
+                // First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		doFindTModelEmbeddedSearch(em, body.getFindQualifiers(), body.getFindTModel(), body.getTModelBag());
-		
 		keysFound = FindBindingByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), body.getServiceKey(), keysFound);
 		keysFound = FindBindingByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getServiceKey(), keysFound);
 		keysFound = FindBindingByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), body.getServiceKey(), keysFound);
@@ -168,9 +170,9 @@
 		return result;
 	}	
 	
-	public static List<?> findBusiness(FindBusiness body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+	public static List<Object> findBusiness(FindBusiness body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
+		List<Object> keysFound = null;
 
 		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		if (body.getTModelBag() == null)
@@ -192,7 +194,7 @@
 			else if (body.getFindRelatedBusinesses().getToKey() != null)
 				getRelatedBusinesses(em, Direction.TO_KEY, frb.getToKey(), frb.getKeyedReference(), relatedBusinessInfos);
 			
-			List<String> relatedBusinessKeys = new ArrayList<String>(0);
+			List<Object> relatedBusinessKeys = new ArrayList<Object>(0);
 			for (org.uddi.api_v3.RelatedBusinessInfo rbi : relatedBusinessInfos.getRelatedBusinessInfo())
 				relatedBusinessKeys.add(rbi.getBusinessKey());
 			
@@ -322,7 +324,7 @@
 	
 	public static List<?> findService(FindService body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
+		List<Object> keysFound = null;
 
 		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		if (body.getTModelBag() == null)
@@ -419,8 +421,8 @@
 		return result;
 	}
 
-	public static List<?> findTModel(FindTModel body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
-		List<?> keysFound = null;
+	public static List<Object> findTModel(FindTModel body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+		List<Object> keysFound = null;
 
 		keysFound = FindTModelByIdentifierQuery.select(em, findQualifiers, body.getIdentifierBag(), keysFound);
 		keysFound = FindTModelByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
@@ -608,7 +610,7 @@
 		return result;
 	}
 		
-	/*
+	/**
 	 * Performs the necessary queries for the find_tModel search and adds resulting tModel keys to the tModelBag provided.
 	 */
 	private static void doFindTModelEmbeddedSearch(EntityManager em, 
@@ -623,7 +625,7 @@
 			findQualifiers.mapApiFindQualifiers(findTmodel.getFindQualifiers());
 
 			
-			List<?> tmodelKeysFound = null;
+			List<Object> tmodelKeysFound = null;
 			tmodelKeysFound = FindTModelByIdentifierQuery.select(em, findQualifiers, findTmodel.getIdentifierBag(), tmodelKeysFound);
 			tmodelKeysFound = FindTModelByCategoryQuery.select(em, findQualifiers, findTmodel.getCategoryBag(), tmodelKeysFound);
 			tmodelKeysFound = FindTModelByCategoryGroupQuery.select(em, findQualifiers, findTmodel.getCategoryBag(), tmodelKeysFound);
@@ -635,6 +637,14 @@
 			}
 		}
 	}
+
+    private static List<Object> findBindingsByServiceKey(EntityManager em, String serviceKey, List<Object> keysFound) {
+        org.apache.juddi.model.BusinessService modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+        for (BindingTemplate bt : modelBusinessService.getBindingTemplates()){
+            keysFound.add(bt.getEntityKey());
+        }
+        return keysFound;
+    }
 	
 	
 }
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 8067a76..701f5f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -134,7 +134,7 @@
                     serviceCounter.update(InquiryQuery.FIND_BINDING, QueryStatus.FAILED, procTime);                      
                     throw drfm;
                 }
-
+                
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
@@ -144,27 +144,25 @@
 				this.getEntityPublisher(em, body.getAuthInfo());
 
                         LogFindBindingRequest(body);
+                        if (body.getServiceKey() != null && body.getServiceKey().length() > 0) {
+                            // Check that we were passed a valid serviceKey per
+                            // 5.1.12.4 of the UDDI v3 spec
+                            String serviceKey = body.getServiceKey();
+                            org.apache.juddi.model.BusinessService modelBusinessService = null;
+                            try {
+                                    modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+                            } catch (Exception e) {
+                                    log.debug(e.getMessage(), e);
+                            }
+                            if (modelBusinessService == null)
+                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+                        }
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
 
 			List<?> keysFound = InquiryHelper.findBinding(body, findQualifiers, em);
 
-			if (keysFound!=null && keysFound.size() == 0) {
-			    if (body.getServiceKey() != null) {
-			        // Check that we were passed a valid serviceKey per
-        			// 5.1.12.4 of the UDDI v3 spec
-        			String serviceKey = body.getServiceKey();
-        			org.apache.juddi.model.BusinessService modelBusinessService = null;
-        			try {
-        				modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
-        			} catch (Exception e) {
-                                        log.debug(e.getMessage(), e);
-                                }
-	                if (modelBusinessService == null)
-	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
-
-			    }
-			}
 			BindingDetail result = InquiryHelper.getBindingDetailFromKeys(body, findQualifiers, em, keysFound);
 			tx.rollback();
                         long procTime = System.currentTimeMillis() - startTime;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 5d375a0..b8558aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -124,7 +124,7 @@
 	 * Used for all the find operation sub-queries.  Restricts size of the IN clause based on global parameter
 	 */
 	@SuppressWarnings(""unchecked"")
-	public static List<?> getQueryResult(EntityManager em, DynamicQuery dynamicQry, List<?> keysIn, String inListTerm) {
+	public static List<Object> getQueryResult(EntityManager em, DynamicQuery dynamicQry, List<?> keysIn, String inListTerm) {
 		
 		List<Object> result = new ArrayList<Object>(0);
 		// If keysIn is null, then no IN list is applied to the query - we simply need to run the query.  Otherwise, the IN list is chunked based on
@@ -142,26 +142,31 @@
 			catch(ConfigurationException ce) {
 				log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_IN_CLAUSE);
 			}
-			
-			int inParamsLeft = keysIn.size();
-			int startIndex = 0;
-			while(inParamsLeft > 0) {
-				int endIndex = startIndex + Math.min(inParamsLeft, maxInClause);
-				
-				List<Object> subKeysIn = new ArrayList<Object>(endIndex);
-				for (int i=startIndex; i< endIndex; i++) {
-					subKeysIn.add(keysIn.get(i));
-				}
-				dynamicQry.appendInListWithAnd(inListTerm, subKeysIn);
-				log.debug(dynamicQry);
-	
-				Query qry = dynamicQry.buildJPAQuery(em);
-				List<Object> resultChunk = qry.getResultList();
-				result.addAll(resultChunk);
-				
-				inParamsLeft = inParamsLeft - (endIndex - startIndex);
-				startIndex = endIndex;
-			}
+			if (keysIn.isEmpty()) {
+                            Query qry = dynamicQry.buildJPAQuery(em);
+                            List<Object> resultChunk = qry.getResultList();
+                            result.addAll(resultChunk);
+                        } else {
+                            int inParamsLeft = keysIn.size();
+                            int startIndex = 0;
+                            while(inParamsLeft > 0) {
+                                    int endIndex = startIndex + Math.min(inParamsLeft, maxInClause);
+
+                                    List<Object> subKeysIn = new ArrayList<Object>(endIndex);
+                                    for (int i=startIndex; i< endIndex; i++) {
+                                            subKeysIn.add(keysIn.get(i));
+                                    }
+                                    dynamicQry.appendInListWithAnd(inListTerm, subKeysIn);
+                                    log.debug(dynamicQry);
+
+                                    Query qry = dynamicQry.buildJPAQuery(em);
+                                    List<Object> resultChunk = qry.getResultList();
+                                    result.addAll(resultChunk);
+
+                                    inParamsLeft = inParamsLeft - (endIndex - startIndex);
+                                    startIndex = endIndex;
+                            }
+                        }
 		}
 		
 		return result;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
index 14fd594..e65cbfc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
@@ -58,7 +58,7 @@
 													   BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
index 6489785..2e34d97 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
@@ -52,7 +52,7 @@
 												  BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
index 7f7dfc5..80d2df3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
@@ -60,11 +60,11 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
-		if ((keysIn != null) && (keysIn.size() == 0))
-			return keysIn;
+		//if ((keysIn != null) && (keysIn.size() == 0))
+		//	return keysIn;
 		
 		if (tModels == null)
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
index 790c127..dfc628b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
@@ -57,7 +57,7 @@
 													   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn);
 	}
 }
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
index 8c86a9d..cecb339 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
@@ -51,7 +51,7 @@
 												  BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn);
 	}
 }
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
index 28427f3..3949963 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
@@ -71,7 +71,7 @@
                             BusinessEntityQuery.SIGNATURE_PRESENT);
         }
         
-        public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+        public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
                 return findQuery.select(em, fq, categoryBag, keysIn);
         }
 }
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
index 0fbf493..b606ad4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
@@ -54,8 +54,8 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
index ae0bdf8..0c117f4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
@@ -50,7 +50,7 @@
 													BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn) {
 		return findQuery.select(em, fq, identifiers, keysIn);
 	}
 	
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
index 06568fc..b2a185a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
@@ -58,7 +58,7 @@
 											   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, List<Object> keysIn) {
 		return findQuery.select(em, fq, names, keysIn);
 	}
 	
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
index 88da9c1..bde5d2b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
@@ -60,7 +60,7 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index fe55a46..178e5f3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -128,7 +128,7 @@
 	}
 	
 	@SuppressWarnings(""unchecked"")
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
@@ -152,9 +152,9 @@
 		Collections.sort(keyedRefGroups, new KeyedRefGroupTModelComparator());
 		int count = 0;
 		String prevTModelKey = null;
-		Set<String> orResults = new HashSet<String>(0);
-		List<?> restrictionList = keysIn;
-		List<?> curResult = null;
+		Set<Object> orResults = new HashSet<Object>(0);
+		List<Object> restrictionList = keysIn;
+		List<Object> curResult = null;
 		for (KeyedReferenceGroup keyedRefGroup : keyedRefGroups) {
 			String curTModelKey = keyedRefGroup.getTModelKey();
 			
@@ -167,7 +167,7 @@
 			if (fq.isOrLikeKeys()) {
 				if (!curTModelKey.equals(prevTModelKey)) {
 					if (count != 0) {
-						restrictionList = new ArrayList<String>(orResults);
+						restrictionList = new ArrayList<Object>(orResults);
 						orResults.clear();
 					}
 				}
@@ -183,20 +183,20 @@
 			curResult = getQueryResult(em, dynamicQry, restrictionList, entityAlias + ""."" + keyName);
 
 			if (fq.isOrAllKeys() || fq.isOrLikeKeys()) {
-				orResults.addAll((List<String>)curResult);
+				orResults.addAll((List<Object>)curResult);
 			}
 			
 			prevTModelKey = curTModelKey;
 			count++;
 		}
 		
-		List<String> result = null;
+		List<Object> result = null;
 		if (fq.isOrAllKeys() || fq.isOrLikeKeys()) {
-			result = new ArrayList<String>(0);
+			result = new ArrayList<Object>(0);
 			result.addAll(orResults);
 		}
 		else
-			result = (List<String>)curResult;
+			result = (List<Object>)curResult;
 		
 		return result;
 		
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index 99d831a..0f7910e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -117,7 +117,7 @@
 		this.signaturePresent = signaturePresent;
 	}
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index a19f737..acb62dc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -126,8 +126,8 @@
 		return entityAliasChild3;
 	}
 		
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 	        
         // If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
@@ -195,7 +195,7 @@
 				}
 			}
 		}
-		return new ArrayList<String>(resultingEntityKeys);
+		return new ArrayList<Object>(resultingEntityKeys);
 	}
 	/**
 	 * Finding the entities (businesses or services) that have a matching keyedReference in their
@@ -212,7 +212,7 @@
 	 */
 	private void findEntityByCategoryQuery(Map<KeyedReference,Set<String>> map, EntityManager em, 
 			FindQualifiers fq, CategoryBag categoryBag, String entityField, String entityNameChild, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) 
 	{
 		FindEntityByCategoryQuery findEntityByCategoryQuery = new FindEntityByCategoryQuery(
 				entityName, entityAlias, keyName, entityField, entityNameChild, signaturePresent);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index 31251e2..d520b33 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -113,7 +113,7 @@
 	}
 
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
index 5915783..ba1c3bf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
@@ -99,7 +99,7 @@
 		this.signaturePresent = signaturePresent;
 	}
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
index acbc2b4..688f70a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
@@ -57,7 +57,7 @@
 													   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
index bbdb1d3..978e5c7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
@@ -51,7 +51,7 @@
 												  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" 
 					+ BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
index ab87a9d..3716bf4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
@@ -76,7 +76,7 @@
 														  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
index bb52bec..e6f1e94 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
@@ -58,7 +58,7 @@
 											   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, names, keysIn, param);
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index 5c855f9..991230e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -62,7 +62,7 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
index 487a90e..29750df 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
@@ -58,7 +58,7 @@
 													   TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn,  new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
 				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
index 6e5237c..edf0bd6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
@@ -52,7 +52,7 @@
 												  TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
 				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
index fe7d53a..3c13cfc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
@@ -51,7 +51,7 @@
 													TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn) {
 		return findQuery.select(em, fq, identifiers, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS + "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
 	
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
index bb64b81..40bfb2d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
@@ -51,7 +51,7 @@
 	@SuppressWarnings(""unused"")
 	private static Log log = LogFactory.getLog(FindTModelByNameQuery.class);
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, Name name, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, Name name, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index e5c276d..37d6ae0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -21,6 +21,13 @@
 import java.util.List;
 import java.util.Hashtable;
 import java.util.Map;
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+import org.apache.juddi.api.impl.InquiryHelper;
+import org.apache.juddi.api.util.InquiryQuery;
+import org.apache.juddi.api.util.QueryStatus;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.mapping.MappingModelToApi;
 
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetOperationalInfo;
@@ -40,6 +47,8 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.query.BusinessServiceQuery;
+import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
@@ -47,6 +56,8 @@
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.v3.error.UnsupportedException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
+import org.uddi.api_v3.BindingDetail;
+import org.uddi.api_v3.ServiceDetail;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -256,8 +267,10 @@
                 if (body == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
                 }
-
-                if (body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null) {
+                if (body.getServiceKey()!=null && body.getServiceKey().length() > 0) {
+                    validateServiceExists(body.getServiceKey());
+                }
+                if ((body.getServiceKey()==null || body.getServiceKey().length()==0) && body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.findbinding.NoInput""));
                 }
 
@@ -760,4 +773,30 @@
                 supportedFindqualifiers.put(FindQualifiers.UTS_10_TMODEL.toLowerCase(), true);
                 
         }
+
+    private void validateServiceExists(String serviceKey) throws InvalidKeyPassedException {
+        
+        EntityManager em = PersistenceManager.getEntityManager();
+        EntityTransaction tx = em.getTransaction();
+        try {
+            tx.begin();
+
+            org.apache.juddi.model.BusinessService modelBusinessService = null;
+            try {
+                modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+            } catch (ClassCastException e) {
+            }
+            if (modelBusinessService == null) {
+                throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+            }
+
+            tx.commit();
+
+        } finally {
+            if (tx.isActive()) {
+                tx.rollback();
+            }
+            em.close();
+        }
+    }
 }
"
juddi,8016bf340db08da87391129cfec23a59b1473691,"Merge branch 'master' into feature/JUDDI-991
",2018-11-23 16:20:36,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
index 316a5d0..291c06f 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
@@ -229,7 +229,7 @@
 		String serviceKey = null;
 		try {
 			FindService body = (FindService)EntityCreator.buildFromDoc(FIND_SERVICE_XML, ""org.uddi.api_v2"");
-               body.setGeneric(""2.0"");
+                        body.setGeneric(""2.0"");
 			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
 			ServiceList result = inquiry.findService(body);
 			if (result == null)
@@ -284,7 +284,7 @@
 	public void findServiceDetail(String serviceKey) {
 		try {
 			GetServiceDetail getServiceDetail = new GetServiceDetail();
-               getServiceDetail.setGeneric(""2.0"");
+                        getServiceDetail.setGeneric(""2.0"");
 			getServiceDetail.getServiceKey().add(serviceKey);
 			
 			
@@ -321,7 +321,7 @@
 		try {
 			FindBinding body = (FindBinding)EntityCreator.buildFromDoc(FIND_BINDING_XML, ""org.uddi.api_v2"");
 			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
-               body.setGeneric(""2.0"");
+                        body.setGeneric(""2.0"");
 			BindingDetail result = inquiry.findBinding(body);
 			if (result == null)
 				Assert.fail(""Null result from find binding operation"");
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 1b3b9b9..b4b88ed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -18,9 +18,8 @@
 
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.LinkedList;
 import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.xml.ws.Holder;
@@ -31,6 +30,7 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.model.BindingTemplate;
 import org.apache.juddi.query.FetchBindingTemplatesQuery;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
 import org.apache.juddi.query.FetchBusinessServicesQuery;
@@ -82,15 +82,17 @@
 
 	private static Log logger = LogFactory.getLog(InquiryHelper.class);
 	
-	public static List<?> findBinding(FindBinding body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+	public static List<Object> findBinding(FindBinding body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
-
-		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
+		List<Object> keysFound = new LinkedList<Object>();
+                if (body.getServiceKey()!=null && body.getServiceKey().length() > 0) {
+                    keysFound = findBindingsByServiceKey(em, body.getServiceKey(), keysFound);
+                }
+		
 		if (body.getTModelBag() == null)
 			body.setTModelBag(new TModelBag());
+                // First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		doFindTModelEmbeddedSearch(em, body.getFindQualifiers(), body.getFindTModel(), body.getTModelBag());
-		
 		keysFound = FindBindingByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), body.getServiceKey(), keysFound);
 		keysFound = FindBindingByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getServiceKey(), keysFound);
 		keysFound = FindBindingByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), body.getServiceKey(), keysFound);
@@ -168,9 +170,9 @@
 		return result;
 	}	
 	
-	public static List<?> findBusiness(FindBusiness body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+	public static List<Object> findBusiness(FindBusiness body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
+		List<Object> keysFound = null;
 
 		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		if (body.getTModelBag() == null)
@@ -192,7 +194,7 @@
 			else if (body.getFindRelatedBusinesses().getToKey() != null)
 				getRelatedBusinesses(em, Direction.TO_KEY, frb.getToKey(), frb.getKeyedReference(), relatedBusinessInfos);
 			
-			List<String> relatedBusinessKeys = new ArrayList<String>(0);
+			List<Object> relatedBusinessKeys = new ArrayList<Object>(0);
 			for (org.uddi.api_v3.RelatedBusinessInfo rbi : relatedBusinessInfos.getRelatedBusinessInfo())
 				relatedBusinessKeys.add(rbi.getBusinessKey());
 			
@@ -322,7 +324,7 @@
 	
 	public static List<?> findService(FindService body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
 
-		List<?> keysFound = null;
+		List<Object> keysFound = null;
 
 		// First perform the embedded FindTModel search which will augment the tModel bag with any resulting tModel keys.
 		if (body.getTModelBag() == null)
@@ -419,8 +421,8 @@
 		return result;
 	}
 
-	public static List<?> findTModel(FindTModel body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
-		List<?> keysFound = null;
+	public static List<Object> findTModel(FindTModel body, FindQualifiers findQualifiers, EntityManager em) throws DispositionReportFaultMessage {
+		List<Object> keysFound = null;
 
 		keysFound = FindTModelByIdentifierQuery.select(em, findQualifiers, body.getIdentifierBag(), keysFound);
 		keysFound = FindTModelByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
@@ -608,7 +610,7 @@
 		return result;
 	}
 		
-	/*
+	/**
 	 * Performs the necessary queries for the find_tModel search and adds resulting tModel keys to the tModelBag provided.
 	 */
 	private static void doFindTModelEmbeddedSearch(EntityManager em, 
@@ -623,7 +625,7 @@
 			findQualifiers.mapApiFindQualifiers(findTmodel.getFindQualifiers());
 
 			
-			List<?> tmodelKeysFound = null;
+			List<Object> tmodelKeysFound = null;
 			tmodelKeysFound = FindTModelByIdentifierQuery.select(em, findQualifiers, findTmodel.getIdentifierBag(), tmodelKeysFound);
 			tmodelKeysFound = FindTModelByCategoryQuery.select(em, findQualifiers, findTmodel.getCategoryBag(), tmodelKeysFound);
 			tmodelKeysFound = FindTModelByCategoryGroupQuery.select(em, findQualifiers, findTmodel.getCategoryBag(), tmodelKeysFound);
@@ -635,6 +637,14 @@
 			}
 		}
 	}
+
+    private static List<Object> findBindingsByServiceKey(EntityManager em, String serviceKey, List<Object> keysFound) {
+        org.apache.juddi.model.BusinessService modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+        for (BindingTemplate bt : modelBusinessService.getBindingTemplates()){
+            keysFound.add(bt.getEntityKey());
+        }
+        return keysFound;
+    }
 	
 	
 }
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 8067a76..701f5f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -134,7 +134,7 @@
                     serviceCounter.update(InquiryQuery.FIND_BINDING, QueryStatus.FAILED, procTime);                      
                     throw drfm;
                 }
-
+                
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
@@ -144,27 +144,25 @@
 				this.getEntityPublisher(em, body.getAuthInfo());
 
                         LogFindBindingRequest(body);
+                        if (body.getServiceKey() != null && body.getServiceKey().length() > 0) {
+                            // Check that we were passed a valid serviceKey per
+                            // 5.1.12.4 of the UDDI v3 spec
+                            String serviceKey = body.getServiceKey();
+                            org.apache.juddi.model.BusinessService modelBusinessService = null;
+                            try {
+                                    modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+                            } catch (Exception e) {
+                                    log.debug(e.getMessage(), e);
+                            }
+                            if (modelBusinessService == null)
+                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+                        }
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
 
 			List<?> keysFound = InquiryHelper.findBinding(body, findQualifiers, em);
 
-			if (keysFound!=null && keysFound.size() == 0) {
-			    if (body.getServiceKey() != null) {
-			        // Check that we were passed a valid serviceKey per
-        			// 5.1.12.4 of the UDDI v3 spec
-        			String serviceKey = body.getServiceKey();
-        			org.apache.juddi.model.BusinessService modelBusinessService = null;
-        			try {
-        				modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
-        			} catch (Exception e) {
-                                        log.debug(e.getMessage(), e);
-                                }
-	                if (modelBusinessService == null)
-	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
-
-			    }
-			}
 			BindingDetail result = InquiryHelper.getBindingDetailFromKeys(body, findQualifiers, em, keysFound);
 			tx.rollback();
                         long procTime = System.currentTimeMillis() - startTime;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 5d375a0..b8558aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -124,7 +124,7 @@
 	 * Used for all the find operation sub-queries.  Restricts size of the IN clause based on global parameter
 	 */
 	@SuppressWarnings(""unchecked"")
-	public static List<?> getQueryResult(EntityManager em, DynamicQuery dynamicQry, List<?> keysIn, String inListTerm) {
+	public static List<Object> getQueryResult(EntityManager em, DynamicQuery dynamicQry, List<?> keysIn, String inListTerm) {
 		
 		List<Object> result = new ArrayList<Object>(0);
 		// If keysIn is null, then no IN list is applied to the query - we simply need to run the query.  Otherwise, the IN list is chunked based on
@@ -142,26 +142,31 @@
 			catch(ConfigurationException ce) {
 				log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_IN_CLAUSE);
 			}
-			
-			int inParamsLeft = keysIn.size();
-			int startIndex = 0;
-			while(inParamsLeft > 0) {
-				int endIndex = startIndex + Math.min(inParamsLeft, maxInClause);
-				
-				List<Object> subKeysIn = new ArrayList<Object>(endIndex);
-				for (int i=startIndex; i< endIndex; i++) {
-					subKeysIn.add(keysIn.get(i));
-				}
-				dynamicQry.appendInListWithAnd(inListTerm, subKeysIn);
-				log.debug(dynamicQry);
-	
-				Query qry = dynamicQry.buildJPAQuery(em);
-				List<Object> resultChunk = qry.getResultList();
-				result.addAll(resultChunk);
-				
-				inParamsLeft = inParamsLeft - (endIndex - startIndex);
-				startIndex = endIndex;
-			}
+			if (keysIn.isEmpty()) {
+                            Query qry = dynamicQry.buildJPAQuery(em);
+                            List<Object> resultChunk = qry.getResultList();
+                            result.addAll(resultChunk);
+                        } else {
+                            int inParamsLeft = keysIn.size();
+                            int startIndex = 0;
+                            while(inParamsLeft > 0) {
+                                    int endIndex = startIndex + Math.min(inParamsLeft, maxInClause);
+
+                                    List<Object> subKeysIn = new ArrayList<Object>(endIndex);
+                                    for (int i=startIndex; i< endIndex; i++) {
+                                            subKeysIn.add(keysIn.get(i));
+                                    }
+                                    dynamicQry.appendInListWithAnd(inListTerm, subKeysIn);
+                                    log.debug(dynamicQry);
+
+                                    Query qry = dynamicQry.buildJPAQuery(em);
+                                    List<Object> resultChunk = qry.getResultList();
+                                    result.addAll(resultChunk);
+
+                                    inParamsLeft = inParamsLeft - (endIndex - startIndex);
+                                    startIndex = endIndex;
+                            }
+                        }
 		}
 		
 		return result;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
index 14fd594..e65cbfc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
@@ -58,7 +58,7 @@
 													   BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
index 6489785..2e34d97 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
@@ -52,7 +52,7 @@
 												  BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
index 7f7dfc5..80d2df3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
@@ -60,11 +60,11 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
-		if ((keysIn != null) && (keysIn.size() == 0))
-			return keysIn;
+		//if ((keysIn != null) && (keysIn.size() == 0))
+		//	return keysIn;
 		
 		if (tModels == null)
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
index 790c127..dfc628b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
@@ -57,7 +57,7 @@
 													   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn);
 	}
 }
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
index 8c86a9d..cecb339 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
@@ -51,7 +51,7 @@
 												  BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn);
 	}
 }
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
index 28427f3..3949963 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
@@ -71,7 +71,7 @@
                             BusinessEntityQuery.SIGNATURE_PRESENT);
         }
         
-        public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+        public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
                 return findQuery.select(em, fq, categoryBag, keysIn);
         }
 }
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
index 0fbf493..b606ad4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
@@ -54,8 +54,8 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
index ae0bdf8..0c117f4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
@@ -50,7 +50,7 @@
 													BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn) {
 		return findQuery.select(em, fq, identifiers, keysIn);
 	}
 	
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
index 06568fc..b2a185a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
@@ -58,7 +58,7 @@
 											   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, List<Object> keysIn) {
 		return findQuery.select(em, fq, names, keysIn);
 	}
 	
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
index 88da9c1..bde5d2b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
@@ -60,7 +60,7 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index fe55a46..178e5f3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -128,7 +128,7 @@
 	}
 	
 	@SuppressWarnings(""unchecked"")
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
@@ -152,9 +152,9 @@
 		Collections.sort(keyedRefGroups, new KeyedRefGroupTModelComparator());
 		int count = 0;
 		String prevTModelKey = null;
-		Set<String> orResults = new HashSet<String>(0);
-		List<?> restrictionList = keysIn;
-		List<?> curResult = null;
+		Set<Object> orResults = new HashSet<Object>(0);
+		List<Object> restrictionList = keysIn;
+		List<Object> curResult = null;
 		for (KeyedReferenceGroup keyedRefGroup : keyedRefGroups) {
 			String curTModelKey = keyedRefGroup.getTModelKey();
 			
@@ -167,7 +167,7 @@
 			if (fq.isOrLikeKeys()) {
 				if (!curTModelKey.equals(prevTModelKey)) {
 					if (count != 0) {
-						restrictionList = new ArrayList<String>(orResults);
+						restrictionList = new ArrayList<Object>(orResults);
 						orResults.clear();
 					}
 				}
@@ -183,20 +183,20 @@
 			curResult = getQueryResult(em, dynamicQry, restrictionList, entityAlias + ""."" + keyName);
 
 			if (fq.isOrAllKeys() || fq.isOrLikeKeys()) {
-				orResults.addAll((List<String>)curResult);
+				orResults.addAll((List<Object>)curResult);
 			}
 			
 			prevTModelKey = curTModelKey;
 			count++;
 		}
 		
-		List<String> result = null;
+		List<Object> result = null;
 		if (fq.isOrAllKeys() || fq.isOrLikeKeys()) {
-			result = new ArrayList<String>(0);
+			result = new ArrayList<Object>(0);
 			result.addAll(orResults);
 		}
 		else
-			result = (List<String>)curResult;
+			result = (List<Object>)curResult;
 		
 		return result;
 		
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index 99d831a..0f7910e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -117,7 +117,7 @@
 		this.signaturePresent = signaturePresent;
 	}
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index a19f737..acb62dc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -126,8 +126,8 @@
 		return entityAliasChild3;
 	}
 		
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 	        
         // If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
@@ -195,7 +195,7 @@
 				}
 			}
 		}
-		return new ArrayList<String>(resultingEntityKeys);
+		return new ArrayList<Object>(resultingEntityKeys);
 	}
 	/**
 	 * Finding the entities (businesses or services) that have a matching keyedReference in their
@@ -212,7 +212,7 @@
 	 */
 	private void findEntityByCategoryQuery(Map<KeyedReference,Set<String>> map, EntityManager em, 
 			FindQualifiers fq, CategoryBag categoryBag, String entityField, String entityNameChild, 
-			List<?> keysIn, DynamicQuery.Parameter... restrictions) 
+			List<Object> keysIn, DynamicQuery.Parameter... restrictions) 
 	{
 		FindEntityByCategoryQuery findEntityByCategoryQuery = new FindEntityByCategoryQuery(
 				entityName, entityAlias, keyName, entityField, entityNameChild, signaturePresent);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index 31251e2..d520b33 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -113,7 +113,7 @@
 	}
 
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
index 5915783..ba1c3bf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
@@ -99,7 +99,7 @@
 		this.signaturePresent = signaturePresent;
 	}
 	
-	public List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
index acbc2b4..688f70a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
@@ -57,7 +57,7 @@
 													   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
index bbdb1d3..978e5c7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
@@ -51,7 +51,7 @@
 												  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" 
 					+ BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
index ab87a9d..3716bf4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
@@ -76,7 +76,7 @@
 														  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
index bb52bec..e6f1e94 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
@@ -58,7 +58,7 @@
 											   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, String parentKey, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, List<Name> names, String parentKey, List<Object> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
 			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, names, keysIn, param);
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index 5c855f9..991230e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -62,7 +62,7 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
index 487a90e..29750df 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
@@ -58,7 +58,7 @@
 													   TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn,  new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
 				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
index 6e5237c..edf0bd6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
@@ -52,7 +52,7 @@
 												  TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<Object> keysIn) {
 		return findQuery.select(em, fq, categoryBag, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
 				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
index fe7d53a..3c13cfc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
@@ -51,7 +51,7 @@
 													TModelQuery.SIGNATURE_PRESENT);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<Object> keysIn) {
 		return findQuery.select(em, fq, identifiers, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS + "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
 	
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
index bb64b81..40bfb2d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
@@ -51,7 +51,7 @@
 	@SuppressWarnings(""unused"")
 	private static Log log = LogFactory.getLog(FindTModelByNameQuery.class);
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, Name name, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<Object> select(EntityManager em, FindQualifiers fq, Name name, List<Object> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.isEmpty()))
 			return keysIn;
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index e5c276d..37d6ae0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -21,6 +21,13 @@
 import java.util.List;
 import java.util.Hashtable;
 import java.util.Map;
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+import org.apache.juddi.api.impl.InquiryHelper;
+import org.apache.juddi.api.util.InquiryQuery;
+import org.apache.juddi.api.util.QueryStatus;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.mapping.MappingModelToApi;
 
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetOperationalInfo;
@@ -40,6 +47,8 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.query.BusinessServiceQuery;
+import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
@@ -47,6 +56,8 @@
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.v3.error.UnsupportedException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
+import org.uddi.api_v3.BindingDetail;
+import org.uddi.api_v3.ServiceDetail;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -256,8 +267,10 @@
                 if (body == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
                 }
-
-                if (body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null) {
+                if (body.getServiceKey()!=null && body.getServiceKey().length() > 0) {
+                    validateServiceExists(body.getServiceKey());
+                }
+                if ((body.getServiceKey()==null || body.getServiceKey().length()==0) && body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.findbinding.NoInput""));
                 }
 
@@ -760,4 +773,30 @@
                 supportedFindqualifiers.put(FindQualifiers.UTS_10_TMODEL.toLowerCase(), true);
                 
         }
+
+    private void validateServiceExists(String serviceKey) throws InvalidKeyPassedException {
+        
+        EntityManager em = PersistenceManager.getEntityManager();
+        EntityTransaction tx = em.getTransaction();
+        try {
+            tx.begin();
+
+            org.apache.juddi.model.BusinessService modelBusinessService = null;
+            try {
+                modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+            } catch (ClassCastException e) {
+            }
+            if (modelBusinessService == null) {
+                throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+            }
+
+            tx.commit();
+
+        } finally {
+            if (tx.isActive()) {
+                tx.rollback();
+            }
+            em.close();
+        }
+    }
 }
"
juddi,2f5a2492e49a64da73e29bc5ba0a8bf151b49bdb,"JUDDI-992 fix for several issues with find binding with and without the service key. Also had to do some light refactoring of List<?> to List<Object> for many of the apis in juddi-core. Shouldn't effect too many users.
",2018-11-18 13:18:37,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
index 316a5d0..291c06f 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v2/tck/TckFindEntity.java
@@ -229,7 +229,7 @@
 		String serviceKey = null;
 		try {
 			FindService body = (FindService)EntityCreator.buildFromDoc(FIND_SERVICE_XML, ""org.uddi.api_v2"");
-               body.setGeneric(""2.0"");
+                        body.setGeneric(""2.0"");
 			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
 			ServiceList result = inquiry.findService(body);
 			if (result == null)
@@ -284,7 +284,7 @@
 	public void findServiceDetail(String serviceKey) {
 		try {
 			GetServiceDetail getServiceDetail = new GetServiceDetail();
-               getServiceDetail.setGeneric(""2.0"");
+                        getServiceDetail.setGeneric(""2.0"");
 			getServiceDetail.getServiceKey().add(serviceKey);
 			
 			
@@ -321,7 +321,7 @@
 		try {
 			FindBinding body = (FindBinding)EntityCreator.buildFromDoc(FIND_BINDING_XML, ""org.uddi.api_v2"");
 			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
-               body.setGeneric(""2.0"");
+                        body.setGeneric(""2.0"");
 			BindingDetail result = inquiry.findBinding(body);
 			if (result == null)
 				Assert.fail(""Null result from find binding operation"");
"
juddi,e4112296a261249fc41663341933f3a931f5f07c,"JUDDI-991 progress with cxf upgrade
",2018-08-28 18:52:52,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 492ec8e..ae25798 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -1063,7 +1063,7 @@
                                                         + ""order by e.originatingUSN ASC"");
                                         }
                                         logger.info(""Query db for replication changes, lower index is "" + (firstrecord) + "" last index "" + lastrecord + "" record limit "" + maxrecords);
-                                        logger.info(""This node is"" + getNode() + "", request is for data originated from "" + changesAlreadySeen.getHighWaterMark().get(i).getNodeID() + "" and it's being sent back to "" + requestingNode);
+                                        logger.info(""This node is "" + getNode() + "", request is for data originated from "" + changesAlreadySeen.getHighWaterMark().get(i).getNodeID() + "" and it's being sent back to "" + requestingNode);
 
                                         createQuery.setMaxResults(maxrecords);
                                         createQuery.setParameter(""inbound"", firstrecord);
@@ -1092,7 +1092,7 @@
                                 }
                                 //assume that they just want records that originated from here?
                                 logger.info(""Query db for replication changes, lower index is "" + (firstrecord) + "" last index "" + lastrecord + "" record limit "" + maxrecords);
-                                logger.info(""This node is"" + getNode() + "" requesting node "" + requestingNode);
+                                logger.info(""This node is "" + getNode() + "" requesting node "" + requestingNode);
 
                                 if (lastrecord != null) {
                                         createQuery = em.createQuery(""select e from ChangeRecord e where ""
"
juddi,79f0ab8c9841367e546251ac606f7335bed92529,"JUDDI-985 updating the ddl generator after the hibernate update
",2017-10-22 20:34:42,Alex O'Ree,"diff --git a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
index 3db85b9..33e922e 100644
--- a/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
+++ b/juddi-ddl-generator/src/main/java/org/apache/juddi/ddl/generator/App.java
@@ -1,4 +1,5 @@
 package org.apache.juddi.ddl.generator;
+
 /*
  * Copyright 2001-2008 The Apache Software Foundation.
  * 
@@ -16,46 +17,55 @@
  */
 import java.io.File;
 import java.io.IOException;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.ArrayList;
+import java.util.EnumSet;
 import java.util.Enumeration;
 import java.util.List;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
-import org.hibernate.cfg.AnnotationConfiguration;
+import org.hibernate.boot.Metadata;
+import org.hibernate.boot.MetadataSources;
+import org.hibernate.boot.registry.StandardServiceRegistry;
+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
 import org.hibernate.tool.hbm2ddl.SchemaExport;
+import org.hibernate.tool.hbm2ddl.SchemaExport.Action;
+import org.hibernate.tool.schema.TargetType;
 
 /**
- * Source: http://jandrewthompson.blogspot.com/2009/10/how-to-generate-ddl-scripts-from.html
+ * Source:
+ * http://jandrewthompson.blogspot.com/2009/10/how-to-generate-ddl-scripts-from.html
+ * https://stackoverflow.com/a/33761464/1203182
+ * https://stackoverflow.com/a/41894432/1203182
+ * 
  * @author john.thompson
+ * @author Alex O'Ree
  *
  */
 public class App {
 
-        private AnnotationConfiguration cfg;
+        private List<Class> jpaClasses = new ArrayList<>();
 
         public App(String packageName) throws Exception {
-                cfg = new AnnotationConfiguration();
-                cfg.setProperty(""hibernate.hbm2ddl.auto"", ""create"");
+
                 List<Class> classesForPackage = getClassesForPackage(org.apache.juddi.model.Address.class.getPackage());
                 for (Class<Object> clazz : classesForPackage) {
-                        cfg.addAnnotatedClass(clazz);
+
+                        jpaClasses.add(clazz);
                 }
         }
-        
-         public App(String dir,String packageName) throws Exception {
-                cfg = new AnnotationConfiguration();
-                cfg.setProperty(""hibernate.hbm2ddl.auto"", ""create"");
+
+        public App(String dir, String packageName) throws Exception {
+
                 List<Class> c = new ArrayList<Class>();
-                processDirectory(new File(""../"" + dir), packageName,c);
-                
-                processDirectory(new File(dir), packageName,c);
+                processDirectory(new File(""../"" + dir), packageName, c);
+
+                processDirectory(new File(dir), packageName, c);
                 for (Class<Object> clazz : c) {
-                        cfg.addAnnotatedClass(clazz);
+
+                        jpaClasses.add(clazz);
                 }
-                
-                
+
         }
 
         /**
@@ -64,12 +74,24 @@
          * @param dbDialect to use
          */
         private void generate(Dialect dialect) {
-                cfg.setProperty(""hibernate.dialect"", dialect.getDialectClass());
 
-                SchemaExport export = new SchemaExport(cfg);
+                StandardServiceRegistryBuilder ssrb = new StandardServiceRegistryBuilder();
+                ssrb.applySetting(""hibernate.dialect"", dialect.getDialectClass());
+                StandardServiceRegistry standardServiceRegistry = ssrb.build();
+
+                MetadataSources metadataSources = new MetadataSources(standardServiceRegistry);
+                for (Class clzz : jpaClasses) {
+                        metadataSources.addAnnotatedClass(clzz);
+                }
+
+                Metadata metadata = metadataSources.buildMetadata();
+
+                SchemaExport export = new SchemaExport();
+
                 export.setDelimiter("";"");
                 export.setOutputFile(dialect.name().toLowerCase() + "".ddl"");
-                export.execute(true, false, false, true);
+                //export.execute(true, false, false, true);
+                export.execute(EnumSet.of(TargetType.SCRIPT), Action.BOTH, metadata);
         }
 
         /**
@@ -78,7 +100,7 @@
         public static void main(String[] args) throws Exception {
                 App gen = null;
                 if (args != null && args.length == 1) {
-                        gen = new App(args[0],""org.apache.juddi.model"");
+                        gen = new App(args[0], ""org.apache.juddi.model"");
                 } else {
                         gen = new App(""org.apache.juddi.model"");
                 }
@@ -99,11 +121,12 @@
                 }
         }
 
-        private static void processDirectory(File directory, String pkgname,List<Class> classes) {
+        private static void processDirectory(File directory, String pkgname, List<Class> classes) {
                 log(""Reading Directory '"" + directory + ""'"");
                 // Get the list of the files contained in the package
-                if (!directory.exists())
+                if (!directory.exists()) {
                         return;
+                }
                 String[] files = directory.list();
                 for (int i = 0; i < files.length; i++) {
                         String fileName = files[i];
@@ -206,7 +229,7 @@
                                 directory = new File(resource.toURI().getPath());
                         } catch (NullPointerException x) {
                                 throw new ClassNotFoundException(packageName + "" ("" + directory
-                                     + "") does not appear to be a valid package"");
+                                        + "") does not appear to be a valid package"");
                         }
                         if (directory.exists()) {
                                 String[] files = directory.list();
@@ -214,7 +237,7 @@
                                         if (files[i].endsWith("".class"")) {
 // removes the .class extension
                                                 classes.add(Class.forName(packageName + '.'
-                                                     + files[i].substring(0, files[i].length() - 6)));
+                                                        + files[i].substring(0, files[i].length() - 6)));
                                         }
                                 }
                         }
"
juddi,9c3336041f310ebd965d11d172ca50d0bd0b75ff,"JUDDI-985 potential fix for hibernate issues
JUDDI-978 potential fix for ci test failures with hibernate
JUDDI-986 hibernate dependencies updated
",2017-10-22 16:43:12,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 711ca18..492ec8e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -273,7 +273,7 @@
                                                                         logger.info(""Change records retrieved from "" + poll.getNotifyingNode() + "", "" + records.size());
                                                                         for (int i = 0; i < records.size(); i++) {
                                                                                 logger.info(""Change records retrieved "" + records.get(i).getChangeID().getNodeID() + "" USN "" + records.get(i).getChangeID().getOriginatingUSN());
-                                                                                PersistChangeRecord(records.get(i));
+                                                                                persistChangeRecord(records.get(i));
                                                                         }
                                                                         recordsreturned = records.size();
                                                                 }
@@ -304,7 +304,7 @@
                  *
                  * @param rec
                  */
-                private void PersistChangeRecord(ChangeRecord rec) {
+                private void persistChangeRecord(ChangeRecord rec) {
                         if (rec == null) {
                                 return;
                         }
@@ -369,12 +369,12 @@
                                         }
                                         if (rec.getChangeRecordDelete() != null && rec.getChangeRecordDelete().getBusinessKey() != null && !"""".equalsIgnoreCase(rec.getChangeRecordDelete().getBusinessKey())) {
                                                 //delete a business 
-                                                UddiEntity ue = em.find(BusinessEntity.class, rec.getChangeRecordDelete().getBindingKey());
+                                                UddiEntity ue = em.find(BusinessEntity.class, rec.getChangeRecordDelete().getBusinessKey());
                                                 validateNodeIdMisMatches(ue, getNode());
                                                 pub.deleteBusiness(rec.getChangeRecordDelete().getBusinessKey(), em);
                                         }
                                         if (rec.getChangeRecordDelete() != null && rec.getChangeRecordDelete().getServiceKey() != null && !"""".equalsIgnoreCase(rec.getChangeRecordDelete().getServiceKey())) {
-                                                UddiEntity ue = em.find(BusinessService.class, rec.getChangeRecordDelete().getBindingKey());
+                                                UddiEntity ue = em.find(BusinessService.class, rec.getChangeRecordDelete().getServiceKey());
                                                 validateNodeIdMisMatches(ue, getNode());
                                                 //delete a service 
                                                 pub.deleteService(rec.getChangeRecordDelete().getServiceKey(), em);
"
juddi,af452e119631055c5e9a1d5bdc136af46f5bede0,"JUDDI-983 potential fix for api deltas
",2017-10-15 10:20:17,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
index cbad43d..848d051 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
@@ -22,6 +22,7 @@
 import java.io.InputStream;
 import java.io.StringWriter;
 import java.net.MalformedURLException;
+import java.net.URI;
 import java.net.URL;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.KeyStore;
@@ -32,6 +33,7 @@
 import java.security.cert.CRLException;
 import java.security.cert.CertPath;
 import java.security.cert.CertPathValidator;
+import java.security.cert.CertPathValidatorException;
 import java.security.cert.CertPathValidatorResult;
 import java.security.cert.Certificate;
 import java.security.cert.CertificateException;
@@ -76,8 +78,12 @@
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import sun.security.provider.certpath.CertId;
 import sun.security.provider.certpath.OCSP;
 import sun.security.provider.certpath.OCSP.RevocationStatus;
+import static sun.security.provider.certpath.OCSP.getResponderURI;
+import sun.security.x509.X509CertImpl;
+
 
 /**
  * A utility class for signing and verifying JAXB Objects, such as UDDI
@@ -485,6 +491,24 @@
                 }
                 return null;
         }
+        
+        /**
+          * wrapper to overcome JDK differences between oracle vs openjdk
+          */
+          public static RevocationStatus check(X509Certificate cert,
+              X509Certificate issuerCert)
+              throws IOException, CertPathValidatorException, CertificateException {
+              CertId certId = null;
+              URI responderURI = null;
+              
+                  X509CertImpl certImpl = X509CertImpl.toImpl(cert);
+                  responderURI = getResponderURI(certImpl);
+                  if (responderURI == null) {
+                      throw new CertPathValidatorException
+                          (""No OCSP Responder URI in certificate"");
+                  }
+                  return OCSP.check(cert, issuerCert, responderURI, cert, null);
+         }
 
         /**
          * Verifies the signature on an enveloped digital signature on a UDDI
@@ -535,21 +559,13 @@
                                         X509Certificate issuer = FindCertByDN(issuerX500Principal);
                                         if (issuer == null) {
                                                 OutErrorMessage.set(""Unable to verify certificate status from OCSP because the issuer of the certificate is not in the trust store. "" + OutErrorMessage.get());
-                                                //throw new CertificateException(""unable to locate the issuers certificate in the trust store"");
                                         } else {
-                                                try{
-                                                        RevocationStatus check = OCSP.check(signingcert, issuer);
-                                                        logger.info(""certificate "" + signingcert.getSubjectDN().toString() + "" revocation status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
-                                                        if (check.getCertStatus() != RevocationStatus.CertStatus.GOOD) {
-                                                                OutErrorMessage.set(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString() + ""."" + OutErrorMessage.get());
-
-                                                                //throw new CertificateException(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
-                                                        }
-                                                } catch (Throwable t) {
-                                                        //this looks dirty, and it is, however there are some API differences on certain JDKs
-                                                        OutErrorMessage.set(""Certificate status is unknown. Failed to check due to error: "" + t.getMessage());
-                                                        logger.warn(""Certificate status is unknown. Failed to check due to error: "" + t.getMessage());
+                                                RevocationStatus check = check(signingcert, issuer);
+                                                logger.info(""certificate "" + signingcert.getSubjectDN().toString() + "" revocation status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
+                                                if (check.getCertStatus() != RevocationStatus.CertStatus.GOOD) {
+                                                        OutErrorMessage.set(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString() + ""."" + OutErrorMessage.get());
                                                 }
+                                               
                                         }
                                 }
                                 if (map.containsKey(CHECK_REVOCATION_STATUS_CRL) && Boolean.parseBoolean(map.getProperty(CHECK_REVOCATION_STATUS_CRL))) {
@@ -568,7 +584,7 @@
                                         CertPathValidatorResult result = certPathValidator.validate(certPath, params);
                                         try {
                                                 PKIXCertPathValidatorResult pkixResult = (PKIXCertPathValidatorResult) result;
-                                                logger.info(""revokation status via CRL PASSED for X509 public key "" + signingcert.getSubjectDN().toString());
+                                                logger.info(""revokation status via CRL PASSED for X509 public key "" + signingcert.getSubjectDN().toString() + "" "" + pkixResult.toString());
                                         } catch (Exception ex) {
                                                 OutErrorMessage.set(""Certificate status is via CRL Failed: "" + ex.getMessage() + ""."" + OutErrorMessage.get());
                                         }
"
juddi,ee347328e430b966c27fc1c65723091e69b6acb4,"JUDDI-983 workaround
JUDDI-981 attempting to fix the build
",2017-10-14 20:02:18,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
index b773c19..cbad43d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
@@ -537,12 +537,18 @@
                                                 OutErrorMessage.set(""Unable to verify certificate status from OCSP because the issuer of the certificate is not in the trust store. "" + OutErrorMessage.get());
                                                 //throw new CertificateException(""unable to locate the issuers certificate in the trust store"");
                                         } else {
-                                                RevocationStatus check = OCSP.check(signingcert, issuer);
-                                                logger.info(""certificate "" + signingcert.getSubjectDN().toString() + "" revocation status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
-                                                if (check.getCertStatus() != RevocationStatus.CertStatus.GOOD) {
-                                                        OutErrorMessage.set(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString() + ""."" + OutErrorMessage.get());
+                                                try{
+                                                        RevocationStatus check = OCSP.check(signingcert, issuer);
+                                                        logger.info(""certificate "" + signingcert.getSubjectDN().toString() + "" revocation status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
+                                                        if (check.getCertStatus() != RevocationStatus.CertStatus.GOOD) {
+                                                                OutErrorMessage.set(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString() + ""."" + OutErrorMessage.get());
 
-                                                        //throw new CertificateException(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
+                                                                //throw new CertificateException(""Certificate status is "" + check.getCertStatus().toString() + "" reason "" + check.getRevocationReason().toString());
+                                                        }
+                                                } catch (Throwable t) {
+                                                        //this looks dirty, and it is, however there are some API differences on certain JDKs
+                                                        OutErrorMessage.set(""Certificate status is unknown. Failed to check due to error: "" + t.getMessage());
+                                                        logger.warn(""Certificate status is unknown. Failed to check due to error: "" + t.getMessage());
                                                 }
                                         }
                                 }
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 3fde39f..de25edc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -17,10 +17,14 @@
 package org.apache.juddi.api.impl;
 
 import java.util.Date;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import javax.annotation.Resource;
 
 import javax.persistence.EntityManager;
 import javax.servlet.http.HttpServletRequest;
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
 import javax.xml.ws.WebServiceContext;
 import javax.xml.ws.handler.MessageContext;
 
@@ -50,7 +54,7 @@
         /**
          * @return the node
          */
-        public static String getNode() {
+        public String getNode() {
             return node;
         }
 
@@ -61,9 +65,10 @@
         /**
          * the node id of this server instance, as loaded from the config file
          */
-        private static String node = ""UNDEFINED_NODE_NAME"";
+        private String node = ""UNDEFINED_NODE_NAME"";
         protected String baseUrlSSL = ""UNDEFINED"";
         protected String baseUrl = ""UNDEFINED"";
+        protected DatatypeFactory df = null;
 
         public AuthenticatedService() {
                 try {
@@ -74,6 +79,14 @@
                 } catch (ConfigurationException ex) {
                         logger.fatal(null, ex);
                 }
+                init();
+        }
+        private synchronized  void init() {
+            try {
+                df = DatatypeFactory.newInstance();
+            } catch (DatatypeConfigurationException ex) {
+                logger.fatal(null, ex);
+            }
         }
 
         @Resource
@@ -153,7 +166,7 @@
                                                         req = (HttpServletRequest) mc.get(MessageContext.SERVLET_REQUEST);
                                                 }
                                                 if (req != null
-                                                        && modelAuthToken.getIPAddress() != null
+                                                        && req.getRemoteAddr() != null
                                                         && modelAuthToken.getIPAddress() != null
                                                         && !modelAuthToken.getIPAddress().equalsIgnoreCase(req.getRemoteAddr())) {
                                                         modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index 817c284..a4ea297 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -31,7 +31,6 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 import javax.persistence.Query;
-import javax.xml.bind.JAXB;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.Marshaller;
 import javax.xml.ws.Holder;
@@ -448,13 +447,13 @@
                                         throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.TModelNodeOwner"", entityKey + "" this node "" + getNode() + "" owning node "" + obj.getNodeId()));
                                 }
                                 em.remove(obj);
-                                changes.add(UDDIPublicationImpl.getChangeRecord_deleteTModelDelete(entityKey, getNode()));
+                                changes.add(UDDIPublicationImpl.getChangeRecord_deleteTModelDelete(entityKey, getNode(), df));
 
                         }
 
                         tx.commit();
                         for (ChangeRecord cr : changes) {
-                                ReplicationNotifier.Enqueue(cr);
+                                ReplicationNotifier.enqueue(cr);
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(JUDDIQuery.ADMIN_DELETE_TMODEL,
@@ -788,7 +787,7 @@
 
                         NodeDetail result = new NodeDetail();
 
-                        List<org.apache.juddi.api_v3.Node> apiNodeList = body.getNode();;
+                        List<org.apache.juddi.api_v3.Node> apiNodeList = body.getNode();
                         for (org.apache.juddi.api_v3.Node apiNode : apiNodeList) {
 
                                 org.apache.juddi.model.Node modelNode = new org.apache.juddi.model.Node();
@@ -1404,7 +1403,7 @@
                         }
 
                         tx.commit();
-                        UDDIReplicationImpl.notifyConfigurationChange(oldConfig, replicationConfiguration);
+                        UDDIReplicationImpl.notifyConfigurationChange(oldConfig, replicationConfiguration, this);
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(JUDDIQuery.SET_REPLICATION_NODES,
                                 QueryStatus.SUCCESS, procTime);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
index a05582e..bec809a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
@@ -326,7 +326,7 @@
                                         c.setChangeID(new ChangeRecordIDType());
                                         c.getChangeID().setNodeID(getNode());
                                         c.getChangeID().setOriginatingUSN(null);
-                                        ReplicationNotifier.Enqueue(MappingApiToModel.mapChangeRecord(c));
+                                        ReplicationNotifier.enqueue(MappingApiToModel.mapChangeRecord(c));
                                 } catch (UnsupportedEncodingException ex) {
                                         logger.error("""", ex);
                                 }
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 8c74893..b6ace81 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -108,18 +108,11 @@
         private static Log log = LogFactory.getLog(UDDIInquiryImpl.class);
         private UDDIServiceCounter serviceCounter;
 
-        private static DatatypeFactory df = null;
-
+     
         public UDDIPublicationImpl() {
                 super();
                 serviceCounter = ServiceCounterLifecycleResource.getServiceCounter(UDDIPublicationImpl.class);
-                if (df == null) {
-                        try {
-                                df = DatatypeFactory.newInstance();
-                        } catch (DatatypeConfigurationException ex) {
-                                logger.fatal(ex);
-                        }
-                }
+                
         }
 
         @Override
@@ -202,7 +195,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
 
                         long procTime = System.currentTimeMillis() - startTime;
@@ -241,7 +234,7 @@
                         }
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
 
                         long procTime = System.currentTimeMillis() - startTime;
@@ -301,7 +294,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_BUSINESS, QueryStatus.SUCCESS, procTime);
@@ -383,7 +376,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_PUBLISHERASSERTIONS,
@@ -468,7 +461,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_SERVICE,
@@ -531,7 +524,7 @@
                         tx.commit();
 
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_TMODEL, QueryStatus.SUCCESS, procTime);
@@ -767,7 +760,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BINDING,
@@ -794,9 +787,7 @@
         public BusinessDetail saveBusiness(SaveBusiness body)
                 throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
-                if (!body.getBusinessEntity().isEmpty()) {
-                        log.debug(""Inbound save business request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
-                }
+                
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
                 try {
@@ -831,7 +822,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BUSINESS,
@@ -900,7 +891,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_SERVICE,
@@ -970,7 +961,7 @@
 
                         tx.commit();
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_TMODEL,
@@ -1090,7 +1081,7 @@
                                 addPublisherAssertions(addPublisherAssertions);
                         }
                         for (int i = 0; i < changes.size(); i++) {
-                                ReplicationNotifier.Enqueue(changes.get(i));
+                                ReplicationNotifier.enqueue(changes.get(i));
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SET_PUBLISHERASSERTIONS,
@@ -1303,7 +1294,7 @@
                 return cr;
         }
 
-        public static ChangeRecord getChangeRecord_deleteBusiness(String entityKey, String node) {
+        public ChangeRecord getChangeRecord_deleteBusiness(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
                 cr.setEntityKey(entityKey);
                 cr.setNodeID(node);
@@ -1325,7 +1316,7 @@
                 return cr;
         }
 
-        public static ChangeRecord getChangeRecord_deleteService(String entityKey, String node) {
+        public ChangeRecord getChangeRecord_deleteService(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
                 cr.setEntityKey(entityKey);
                 cr.setNodeID(node);
@@ -1354,7 +1345,7 @@
          * @param node
          * @return
          */
-        public static ChangeRecord getChangeRecord_deleteTModelHide(String entityKey, String node) {
+        public ChangeRecord getChangeRecord_deleteTModelHide(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
                 cr.setEntityKey(entityKey);
                 cr.setNodeID(node);
@@ -1384,7 +1375,7 @@
          * @param node
          * @return
          */
-        public static ChangeRecord getChangeRecord_deleteTModelDelete(String entityKey, String node) {
+        public static ChangeRecord getChangeRecord_deleteTModelDelete(String entityKey, String node, DatatypeFactory df) {
                 ChangeRecord cr = new ChangeRecord();
                 cr.setEntityKey(entityKey);
                 cr.setNodeID(node);
@@ -1455,7 +1446,7 @@
                 return cr;
         }
 
-        public static ChangeRecord getChangeRecord_deleteBinding(String entityKey, String node) {
+        public ChangeRecord getChangeRecord_deleteBinding(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
                 cr.setEntityKey(entityKey);
                 cr.setNodeID(node);
@@ -1477,7 +1468,7 @@
                 return cr;
         }
 
-        public static ChangeRecord getChangeRecord_deletePublisherAssertion(PublisherAssertion entity, String node, boolean ToBusinessDelete, boolean FromBusinessDelete, long timestamp) {
+        public ChangeRecord getChangeRecord_deletePublisherAssertion(PublisherAssertion entity, String node, boolean ToBusinessDelete, boolean FromBusinessDelete, long timestamp) {
                 ChangeRecord cr = new ChangeRecord();
 
                 cr.setNodeID(node);
@@ -1503,7 +1494,7 @@
                 return cr;
         }
 
-        public static ChangeRecord getChangeRecord_NewAssertion(PublisherAssertion apiPubAssertion, org.apache.juddi.model.PublisherAssertion modelPubAssertion, String node) {
+        public ChangeRecord getChangeRecord_NewAssertion(PublisherAssertion apiPubAssertion, org.apache.juddi.model.PublisherAssertion modelPubAssertion, String node) {
                 ChangeRecord cr = new ChangeRecord();
 
                 cr.setNodeID(node);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index fcb1fd8..711ca18 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -41,7 +41,6 @@
 import javax.xml.bind.JAXB;
 import javax.xml.bind.annotation.XmlSeeAlso;
 import javax.xml.ws.BindingProvider;
-import static org.apache.juddi.api.impl.AuthenticatedService.getNode;
 import org.apache.juddi.api.util.QueryStatus;
 import org.apache.juddi.api.util.ReplicationQuery;
 import org.apache.juddi.config.AppConfig;
@@ -108,7 +107,7 @@
 })
 public class UDDIReplicationImpl extends AuthenticatedService implements UDDIReplicationPortType {
 
-        static void notifyConfigurationChange(ReplicationConfiguration oldConfig, ReplicationConfiguration newConfig) {
+        static void notifyConfigurationChange(ReplicationConfiguration oldConfig, ReplicationConfiguration newConfig, AuthenticatedService service) {
 
                 //if the config is different
                 Set<String> oldnodes = getNodes(oldConfig);
@@ -119,8 +118,8 @@
                         queue = new ConcurrentLinkedQueue<NotifyChangeRecordsAvailable>();
                 }
                 for (String s : addedNodes) {
-                        if (!s.equals(getNode())) {
-                                logger.info(""This node: "" + getNode() + "". New replication node queue for synchronization: "" + s);
+                        if (!s.equals(service.getNode())) {
+                                logger.info(""This node: "" + service.getNode() + "". New replication node queue for synchronization: "" + s);
                                 HighWaterMarkVectorType highWaterMarkVectorType = new HighWaterMarkVectorType();
                                 highWaterMarkVectorType.getHighWaterMark().add(new ChangeRecordIDType(s, 0L));
                                 queue.add(new NotifyChangeRecordsAvailable(s, highWaterMarkVectorType));
@@ -365,18 +364,18 @@
                                         if (rec.getChangeRecordDelete() != null && rec.getChangeRecordDelete().getBindingKey() != null && !"""".equalsIgnoreCase(rec.getChangeRecordDelete().getBindingKey())) {
                                                 //delete a binding template
                                                 UddiEntity ue = em.find(BindingTemplate.class, rec.getChangeRecordDelete().getBindingKey());
-                                                ValidateNodeIdMisMatches(ue, getNode());
+                                                validateNodeIdMisMatches(ue, getNode());
                                                 pub.deleteBinding(rec.getChangeRecordDelete().getBindingKey(), em);
                                         }
                                         if (rec.getChangeRecordDelete() != null && rec.getChangeRecordDelete().getBusinessKey() != null && !"""".equalsIgnoreCase(rec.getChangeRecordDelete().getBusinessKey())) {
                                                 //delete a business 
                                                 UddiEntity ue = em.find(BusinessEntity.class, rec.getChangeRecordDelete().getBindingKey());
-                                                ValidateNodeIdMisMatches(ue, getNode());
+                                                validateNodeIdMisMatches(ue, getNode());
                                                 pub.deleteBusiness(rec.getChangeRecordDelete().getBusinessKey(), em);
                                         }
                                         if (rec.getChangeRecordDelete() != null && rec.getChangeRecordDelete().getServiceKey() != null && !"""".equalsIgnoreCase(rec.getChangeRecordDelete().getServiceKey())) {
                                                 UddiEntity ue = em.find(BusinessService.class, rec.getChangeRecordDelete().getBindingKey());
-                                                ValidateNodeIdMisMatches(ue, getNode());
+                                                validateNodeIdMisMatches(ue, getNode());
                                                 //delete a service 
                                                 pub.deleteService(rec.getChangeRecordDelete().getServiceKey(), em);
                                         }
@@ -394,7 +393,7 @@
                                                  */
                                                 UddiEntity tm = em.find(Tmodel.class, rec.getChangeRecordDelete().getTModelKey());
                                                 if (tm != null) {
-                                                        ValidateNodeIdMisMatches(tm, getNode());
+                                                        validateNodeIdMisMatches(tm, getNode());
                                                         em.remove(tm);
                                                 } else {
                                                         logger.error(""failed to adminstratively delete tmodel because it doesn't exist. "" + rec.getChangeRecordDelete().getTModelKey());
@@ -431,7 +430,7 @@
                                                         if (model == null) {
                                                                 logger.error(""Replication error, attempting to insert a binding where the service doesn't exist yet"");
                                                         } else {
-                                                                ValidateNodeIdMatches(rec.getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
+                                                                validateNodeIdMatches(rec.getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
 
                                                                 org.apache.juddi.model.BindingTemplate bt = em.find(org.apache.juddi.model.BindingTemplate.class, rec.getChangeRecordNewData().getBindingTemplate().getBindingKey());
                                                                 if (bt != null) {
@@ -499,7 +498,7 @@
                                                                 org.apache.juddi.model.BusinessService model = null;
                                                                 model = em.find(org.apache.juddi.model.BusinessService.class, rec.getChangeRecordNewData().getBusinessService().getServiceKey());
                                                                 if (model != null) {
-                                                                        ValidateNodeIdMatches(rec.getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
+                                                                        validateNodeIdMatches(rec.getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
                                                                         em.remove(model);
                                                                 }
 
@@ -585,7 +584,7 @@
                                                 logger.error(""Unexpected delete/hide tmodel message received for non existing key "" + key);
                                         } else {
                                                 //no one else can delete/hide my tmodel
-                                                ValidateNodeIdMisMatches(existing, getNode());
+                                                validateNodeIdMisMatches(existing, getNode());
                                                 existing.setDeleted(true);
                                                 existing.setModified(rec.getChangeRecordHide().getModified().toGregorianCalendar().getTime());
                                                 existing.setModifiedIncludingChildren(rec.getChangeRecordHide().getModified().toGregorianCalendar().getTime());
@@ -659,7 +658,7 @@
                                         posack.setChangeRecordAcknowledgement(new ChangeRecordAcknowledgement());
                                         posack.getChangeRecordAcknowledgement().setAcknowledgedChange(rec.getChangeID());
                                         posack.setAcknowledgementRequested(false);
-                                        ReplicationNotifier.Enqueue(MappingApiToModel.mapChangeRecord(posack));
+                                        ReplicationNotifier.enqueue(MappingApiToModel.mapChangeRecord(posack));
                                 }
                                 if (rec.getChangeRecordNewDataConditional() != null) {
 
@@ -684,7 +683,7 @@
 
                                                                 org.apache.juddi.model.BindingTemplate bt = em.find(org.apache.juddi.model.BindingTemplate.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBindingTemplate().getBindingKey());
                                                                 if (bt != null) {
-                                                                        ValidateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), bt.getNodeId());
+                                                                        validateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), bt.getNodeId());
 
                                                                         em.remove(bt);
                                                                 }
@@ -699,7 +698,7 @@
 
                                                         BusinessEntity model = em.find(org.apache.juddi.model.BusinessEntity.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessEntity().getBusinessKey());
                                                         if (model != null) {
-                                                                ValidateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
+                                                                validateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
                                                                 //TODO revisit access control rules
                                                                 em.remove(model);
                                                         }
@@ -721,7 +720,7 @@
                                                                 org.apache.juddi.model.BusinessService model = null;
                                                                 model = em.find(org.apache.juddi.model.BusinessService.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessService().getServiceKey());
                                                                 if (model != null) {
-                                                                        ValidateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
+                                                                        validateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
                                                                         em.remove(model);
                                                                 }
 
@@ -737,7 +736,7 @@
 
                                                         Tmodel model = em.find(org.apache.juddi.model.Tmodel.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getTModel().getTModelKey());
                                                         if (model != null) {
-                                                                ValidateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
+                                                                validateNodeIdMatches(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID(), model.getNodeId());
                                                                 em.remove(model);
                                                         }
                                                         model = new Tmodel();
@@ -892,7 +891,7 @@
          * @param node
          * @throws Exception
          */
-        private static void ValidateNodeIdMisMatches(UddiEntity ue, String node) throws Exception {
+        private static void validateNodeIdMisMatches(UddiEntity ue, String node) throws Exception {
                 if (ue == null) {
                         return;//object doesn't exist
                 }
@@ -909,7 +908,7 @@
          * @param currentOwningNode
          * @throws Exception
          */
-        private static void ValidateNodeIdMatches(String newNodeId, String currentOwningNode) throws Exception {
+        private  void validateNodeIdMatches(String newNodeId, String currentOwningNode) throws Exception {
                 if (newNodeId == null || currentOwningNode == null) {
                         throw new Exception(""either the local node ID is null or the inbound replication data's node id is null"");
                 }
@@ -1308,7 +1307,7 @@
                                         c.setChangeID(new ChangeRecordIDType());
                                         c.getChangeID().setNodeID(getNode());
                                         c.getChangeID().setOriginatingUSN(null);
-                                        ReplicationNotifier.Enqueue(MappingApiToModel.mapChangeRecord(c));
+                                        ReplicationNotifier.enqueue(MappingApiToModel.mapChangeRecord(c));
                                 } catch (UnsupportedEncodingException ex) {
                                         logger.error("""", ex);
                                 }
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 6d05519..f8cfef0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -326,7 +326,7 @@
                 em.persist(modelBusinessEntity);
                 SaveBusiness sb = new SaveBusiness();
                 sb.getBusinessEntity().add(rootBusinessEntity);
-                ReplicationNotifier.Enqueue(UDDIPublicationImpl.getChangeRecord(modelBusinessEntity, rootBusinessEntity, modelBusinessEntity.getNodeId()));
+                ReplicationNotifier.enqueue(UDDIPublicationImpl.getChangeRecord(modelBusinessEntity, rootBusinessEntity, modelBusinessEntity.getNodeId()));
 
                 return modelBusinessEntity.getEntityKey();
 
@@ -505,7 +505,7 @@
 
                                         SaveTModel stm = new SaveTModel();
                                         stm.getTModel().add(apiTModel);
-                                        ReplicationNotifier.Enqueue(UDDIPublicationImpl.getChangeRecord(modelTModel, apiTModel, nodeId));
+                                        ReplicationNotifier.enqueue(UDDIPublicationImpl.getChangeRecord(modelTModel, apiTModel, nodeId));
                                 }
 
                         }
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Edge.java b/juddi-core/src/main/java/org/apache/juddi/model/Edge.java
index 669a2a2..af625d6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Edge.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Edge.java
@@ -15,10 +15,9 @@
  */
 package org.apache.juddi.model;
 
+import java.io.Serializable;
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
 import javax.persistence.Entity;
@@ -29,12 +28,11 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
-import javax.persistence.OneToOne;
 import javax.persistence.Table;
 
 @Entity
 @Table(name = ""j3_edge"")
-public class Edge {
+public class Edge implements Serializable{
 
         private Long id;
         private List<ControlMessage>  message;
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
index 4426cc7..48ea677 100644
--- a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
@@ -98,7 +98,7 @@
         }
 
         //ReplicationNotifier.Enqueue(this);
-        public synchronized static void Enqueue(org.apache.juddi.model.ChangeRecord change) {
+        public synchronized static void enqueue(org.apache.juddi.model.ChangeRecord change) {
                 if (queue == null) {
                         queue = new ConcurrentLinkedQueue<org.apache.juddi.model.ChangeRecord>();
                 }
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
index cc880ca..535f5a6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
@@ -38,7 +38,7 @@
 public class UDDICustodyTransferService extends UnicastRemoteObject implements UDDICustodyTransferPortType {
 
 	private static final long serialVersionUID = 8900970766388210839L;
-	private UDDICustodyTransferPortType custodyTransfer = new UDDICustodyTransferImpl();
+	private transient UDDICustodyTransferPortType custodyTransfer = new UDDICustodyTransferImpl();
 	
 	protected UDDICustodyTransferService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
index 6a4c951..a9ecbc9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
@@ -49,7 +49,7 @@
 public class UDDIInquiryService extends UnicastRemoteObject implements UDDIInquiryPortType {
 
 	private static final long serialVersionUID = -8384112899703963130L;
-	private UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
+	private transient UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
 
 	protected UDDIInquiryService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
index cf2494a..1646a94 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
@@ -52,7 +52,7 @@
 public class UDDIPublicationService extends UnicastRemoteObject implements UDDIPublicationPortType {
 
 	private static final long serialVersionUID = 8342463046574333026L;
-	private UDDIPublicationPortType publication = new UDDIPublicationImpl();
+	private transient UDDIPublicationPortType publication = new UDDIPublicationImpl();
 	
 	protected UDDIPublicationService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
index 128d53b..5812a5b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
@@ -34,7 +34,7 @@
 public class UDDISecurityService extends UnicastRemoteObject implements UDDISecurityPortType {
 
 	private static final long serialVersionUID = -7931578658303681458L;
-	private UDDISecurityPortType security = new UDDISecurityImpl();
+	private transient UDDISecurityPortType security = new UDDISecurityImpl();
 	
 	protected UDDISecurityService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
index 953e8c3..183a728 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
@@ -34,7 +34,7 @@
 public class UDDISubscriptionListenerService extends UnicastRemoteObject implements UDDISubscriptionListenerPortType {
 
 	private static final long serialVersionUID = -5103095115366760255L;
-	private UDDISubscriptionListenerPortType subscriptionListener = new UDDISubscriptionListenerImpl();
+	private transient UDDISubscriptionListenerPortType subscriptionListener = new UDDISubscriptionListenerImpl();
 	
 	protected UDDISubscriptionListenerService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
index 48f98fa..bf3b052 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
@@ -39,7 +39,7 @@
 public class UDDISubscriptionService extends UnicastRemoteObject implements UDDISubscriptionPortType {
 
 	private static final long serialVersionUID = 3534214581063707293L;
-	private UDDISubscriptionPortType subscription = new UDDISubscriptionImpl();
+	private transient UDDISubscriptionPortType subscription = new UDDISubscriptionImpl();
 	
 	protected UDDISubscriptionService(int port) throws RemoteException {
 		super(port);
"
juddi,9c77acdf9f3d47accec70a6e91cabf6ad304a00c,"JUDDI-977 findbugs
",2017-10-09 13:30:48,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index 1b5138c..70a2d46 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -64,11 +64,11 @@
  */
 public class SMTPNotifier implements Notifier {
 
-	static final Log log = LogFactory.getLog(SMTPNotifier.class);
-	String notificationEmailAddress = null;
+	protected static final Log log = LogFactory.getLog(SMTPNotifier.class);
+	protected String notificationEmailAddress = null;
 	//String from = null;
-	Session session = null;
-	Properties properties = null;
+	protected Session session = null;
+	protected Properties properties = null;
 
 	protected final static String[] mailProps = {""mail.smtp.from"", ""mail.smtp.host"", ""mail.smtp.port"", 
 		""mail.smtp.socketFactory.class"", ""mail.smtp.socketFactory.fallback"", ""mail.smtp.starttls.enable"",
"
juddi,6ea7ff2503c0a536c6f35d6806b114688d7d4063,"JUDDI-943 fixed
",2017-10-09 12:17:35,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 67345ee..b920e72 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -22,73 +22,79 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+/**
+ * 
+ * @author kstam
+ */
 public class WebHelper {
-	
-	public static final Log logger = LogFactory.getLog(WebHelper.class);
-	public static final String UDDI_CLIENT_NAME           = ""uddi.client.name"";
-	public static final String UDDI_CLIENT_CONFIG_FILE    = ""uddi.client.config.file"";
-	public static final String JUDDI_CLIENT_NAME          = ""juddi.client.name"";
-	public static final String JUDDI_CLIENT_TRANSPORT     = ""juddi.client.transport"";
-	
 
-	/**
-	 * Checks the servlet context for the manager defined in the web context. Optionally, in your 
-	 * web.xml you can specify either the manager name if you want to use an existing manager 
-	 * called 'uddi-portlet-manager':
-	 * <pre>
-	 * &lt;context-param&gt;
-	 *   &lt;param-name&gt;uddi.client.manager.name&lt;/param-name&gt;
-	 *   &lt;param-value&gt;uddi-portlet-manager&lt;/param-value&gt;
-	 * &lt;/context-param&gt;
-	 * </pre>
-	 * or, if you don't want to use the default META-INF/uddi.xml file path, but 'META-INF/my-uddi.xml' instead,
-	 * then you can set:
-	 * <pre>
-	 * &lt;context-param&gt;
-	 *   &lt;param-name&gt;uddi.client.config.path&lt;/param-name&gt;
-	 *   &lt;param-value&gt;META-INF/my-uddi.xml&lt;/param-value&gt;
-	 * &lt;/context-param&gt;
-	 * </pre>
-	 * @param servletContext
-	 * @return a UDDI Client instance
-	 * @throws ConfigurationException
-	 */
-	public static UDDIClient getUDDIClient(ServletContext servletContext) throws ConfigurationException 
-	{
-		if (servletContext.getAttribute(JUDDI_CLIENT_NAME)!=null) {
-			String clientName = String.valueOf(servletContext.getAttribute(JUDDI_CLIENT_NAME));
-			return UDDIClientContainer.getUDDIClient(clientName);
-		} else {
-			String clientName = servletContext.getInitParameter(UDDI_CLIENT_NAME);
-			if (clientName!=null) {
-				try {
-					UDDIClient client = UDDIClientContainer.getUDDIClient(clientName);
-					logger.info(""Client "" + clientName + "" was already started."");
-					servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName);
-					return client;
-				} catch (ConfigurationException ce) {
-					logger.debug(""Client "" + clientName + "" is not yet started."");
-				}
-			}
-			String clientConfigFile = servletContext.getInitParameter(UDDI_CLIENT_CONFIG_FILE);
-			if (clientConfigFile==null) clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
-			
-			logger.info(""Reading the clientName from the clientConfig file "" + clientConfigFile);
-			UDDIClient client = new UDDIClient(clientConfigFile);
-			if (client.getName()==null) {
-				logger.warn(""Deprecated, client name set to 'default', however it should be provided in the uddi.xml"");
-				clientName = ""default"";
-			}
-			if (client.getName()!=null) {
-				logger.info(""Starting Client "" + client.getName() + ""..."");
-                    clientName = client.getName();
-			} else {
-				throw new ConfigurationException(""A client name needs to be specified in the client config file."");
-			}
-			
-			client.start();
-			servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName);
-			return client;
-		}
-	}
+        public static final Log logger = LogFactory.getLog(WebHelper.class);
+        public static final String UDDI_CLIENT_NAME = ""uddi.client.name"";
+        public static final String UDDI_CLIENT_CONFIG_FILE = ""uddi.client.config.file"";
+        public static final String JUDDI_CLIENT_NAME = ""juddi.client.name"";
+        public static final String JUDDI_CLIENT_TRANSPORT = ""juddi.client.transport"";
+
+        /**
+         * Checks the servlet context for the manager defined in the web
+         * context. Optionally, in your web.xml you can specify either the
+         * manager name if you want to use an existing manager called
+         * 'uddi-portlet-manager':
+         * <pre>
+         * &lt;context-param&gt;
+         *   &lt;param-name&gt;uddi.client.manager.name&lt;/param-name&gt;
+         *   &lt;param-value&gt;uddi-portlet-manager&lt;/param-value&gt;
+         * &lt;/context-param&gt;
+         * </pre> or, if you don't want to use the default META-INF/uddi.xml
+         * file path, but 'META-INF/my-uddi.xml' instead, then you can set:
+         * <pre>
+         * &lt;context-param&gt;
+         *   &lt;param-name&gt;uddi.client.config.path&lt;/param-name&gt;
+         *   &lt;param-value&gt;META-INF/my-uddi.xml&lt;/param-value&gt;
+         * &lt;/context-param&gt;
+         * </pre>
+         *
+         * @param servletContext
+         * @return a UDDI Client instance
+         * @throws ConfigurationException
+         */
+        public static UDDIClient getUDDIClient(ServletContext servletContext) throws ConfigurationException {
+                if (servletContext.getAttribute(JUDDI_CLIENT_NAME) != null) {
+                        String clientName = String.valueOf(servletContext.getAttribute(JUDDI_CLIENT_NAME));
+                        return UDDIClientContainer.getUDDIClient(clientName);
+                } else {
+                        String clientName = servletContext.getInitParameter(UDDI_CLIENT_NAME);
+                        if (clientName != null) {
+                                try {
+                                        UDDIClient client = UDDIClientContainer.getUDDIClient(clientName);
+                                        logger.info(""Client "" + clientName + "" was already started."");
+                                        servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName);
+                                        return client;
+                                } catch (ConfigurationException ce) {
+                                        logger.debug(""Client "" + clientName + "" is not yet started."");
+                                }
+                        }
+                        String clientConfigFile = servletContext.getInitParameter(UDDI_CLIENT_CONFIG_FILE);
+                        if (clientConfigFile == null) {
+                                clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
+                        }
+                        
+
+                        logger.info(""Reading the clientName from the clientConfig file "" + clientConfigFile);
+                        UDDIClient client = new UDDIClient(clientConfigFile);
+                        if (client.getName() == null) {
+                                logger.warn(""Deprecated, client name set to 'default', however it should be provided in the uddi.xml"");
+                                clientName = ""default"";
+                        }
+                        if (client.getName() != null) {
+                                logger.info(""Starting Client "" + client.getName() + ""..."");
+                                clientName = client.getName();
+                        } else {
+                                throw new ConfigurationException(""A client name needs to be specified in the client config file."");
+                        }
+
+                        client.start();
+                        servletContext.setAttribute(JUDDI_CLIENT_NAME, clientName);
+                        return client;
+                }
+        }
 }
"
juddi,193fa4c56e8a44c9672a043d5e9e56c1d6cc99c2,"JUDDI-977 more findbugs fixes
JUDDI-960 test cleanup
",2017-10-09 10:42:08,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 29c54b9..4c25dc9 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -129,7 +129,7 @@
 
         private static final long serialVersionUID = -8597375975981358134L;
 
-        private Log log = LogFactory.getLog(this.getClass());
+        private static final Log log = LogFactory.getLog(UDDIClerk.class);
         protected String name;
         protected UDDINode uddiNode;
         protected String publisher;
"
juddi,193fa4c56e8a44c9672a043d5e9e56c1d6cc99c2,"JUDDI-977 more findbugs fixes
JUDDI-960 test cleanup
",2017-10-09 10:42:08,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index 6c973c1..ac08326 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -32,7 +32,7 @@
 	
 	private static final long serialVersionUID = -91998529871296125L;
 	private static final Log logger = LogFactory.getLog(UDDIClerkServlet.class);
-	private UDDIClient manager = null;
+	private transient UDDIClient manager = null;
 	
 	/**
 	 * Starting the UDDIClient
"
juddi,193fa4c56e8a44c9672a043d5e9e56c1d6cc99c2,"JUDDI-977 more findbugs fixes
JUDDI-960 test cleanup
",2017-10-09 10:42:08,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIKeyConvention.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIKeyConvention.java
index 0e2165e..2a9c800 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIKeyConvention.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIKeyConvention.java
@@ -91,6 +91,7 @@
 	 * @param properties
 	 * @param serviceName
 	 * @param portName
+         * @param bindingUrl
 	 * @return the bindingKey
 	 */
 	public static String getBindingKey(Properties properties, QName serviceName, String portName, URI bindingUrl) {
@@ -108,7 +109,7 @@
 		}
 		tempProperties.put(""serverPort"", String.valueOf(port));
 		//Constructing the binding Key
-		String keyFormat = properties.getProperty(Property.BINDING_KEY_FORMAT, DEFAULT_BINDING_KEY_FORMAT);
+		String keyFormat = tempProperties.getProperty(Property.BINDING_KEY_FORMAT, DEFAULT_BINDING_KEY_FORMAT);
 		String bindingKey = TokenResolver.replaceTokens(keyFormat, tempProperties).toLowerCase();
 		return bindingKey;
 	}
"
juddi,193fa4c56e8a44c9672a043d5e9e56c1d6cc99c2,"JUDDI-977 more findbugs fixes
JUDDI-960 test cleanup
",2017-10-09 10:42:08,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index ade25c5..a28ec16 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -34,7 +34,7 @@
 
 	private static final long serialVersionUID = 5721040459195558161L;
 	private Properties properties;
-	private Transport transport;
+	private transient Transport transport;
 	
 	private boolean isHomeJUDDI;
 	private String name;
"
juddi,193fa4c56e8a44c9672a043d5e9e56c1d6cc99c2,"JUDDI-977 more findbugs fixes
JUDDI-960 test cleanup
",2017-10-09 10:42:08,Alex O'Ree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TransportSecurityHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TransportSecurityHelper.java
index ed8b07e..29c05b9 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TransportSecurityHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/TransportSecurityHelper.java
@@ -21,7 +21,6 @@
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLContext;
-import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
 import javax.xml.ws.BindingProvider;
 import org.apache.commons.logging.Log;
@@ -75,16 +74,15 @@
                                 }
 
                                 if (keystore.exists()) {
+                                        TrustManagerFactory tmFact = null;
                                         FileInputStream fis = null;
+                                        SSLContext sc = SSLContext.getInstance(""SSLv3"");
+                                        KeyManagerFactory kmf
+                                                = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
                                         try {
                                                 log.info(""Using keystore from "" + keystore.getAbsolutePath() + "" current dir is "" + currentdir.getAbsolutePath());
 
                                                 log.info(""Using truststore from "" + truststore.getAbsolutePath() + "" current dir is "" + currentdir.getAbsolutePath());
-                                                //log.info(""Using truststure from "" + truststore.getAbsolutePath() + "" current dir is "" + currentdir.getAbsolutePath());
-                                                SSLContext sc = SSLContext.getInstance(""SSLv3"");
-
-                                                KeyManagerFactory kmf
-                                                        = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
 
                                                 KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
                                                 try {
@@ -101,8 +99,11 @@
                                                 kmf.init(ks, pwd.toCharArray());
 
                                                 String alg = TrustManagerFactory.getDefaultAlgorithm();
-                                                TrustManagerFactory tmFact = TrustManagerFactory.getInstance(alg);
-
+                                                tmFact = TrustManagerFactory.getInstance(alg);
+                                        } catch (Exception ex) {
+                                                log.warn(""unable to establish ssl settings"", ex);
+                                        } 
+                                        try {
                                                 fis = new FileInputStream(st);
                                                 KeyStore kst = KeyStore.getInstance(""jks"");
                                                 try {
@@ -117,8 +118,7 @@
 
                                                 tmFact.init(kst);
 
-                                                //TrustManager[] tms = tmFact.getTrustManagers();
-                                                sc.init(kmf.getKeyManagers(), null, null);
+                                                sc.init(kmf.getKeyManagers(), tmFact.getTrustManagers(), null);
                                                 HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
                                                 ((BindingProvider) webServicePort).getRequestContext().put(""com.sun.xml.internal.ws.transport.https.client.SSLSocketFactory"", sc.getSocketFactory());
                                                 ((BindingProvider) webServicePort).getRequestContext().put(""com.sun.xml.ws.transport.https.client.SSLSocketFactory"", sc.getSocketFactory());
"
juddi,3e354954d9fea806c685ca91dffc9a4cea42c8e3,"Merge branch 'master' into bug/JUDDI-977
",2017-10-08 14:38:09,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index 987b8eb..817c284 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -1367,8 +1367,6 @@
                         }
                         new ValidateReplication(publisher).validateSetReplicationNodes(replicationConfiguration, em, getNode(), AppConfig.getConfiguration());
 
-                        //StringWriter sw = new StringWriter();
-                        //JAXB.marshal(replicationConfiguration, sw);
                         org.apache.juddi.model.ReplicationConfiguration model = null;
                         logger.info(publisher.getAuthorizedName() + "" is setting the replication config from "" + getRequestorsIPAddress());// + "" "" + sw.toString());
                         try {
@@ -1417,7 +1415,6 @@
                         throw drfm;
                 } catch (Exception ex) {
                         logger.error(ex, ex);
-                        JAXB.marshal(replicationConfiguration, System.out);
                         throw new FatalErrorException(new ErrorMessage(""E_fatalError"", ex.getMessage()));
                 } finally {
                         if (tx.isActive()) {
"
juddi,3e354954d9fea806c685ca91dffc9a4cea42c8e3,"Merge branch 'master' into bug/JUDDI-977
",2017-10-08 14:38:09,Alex O'Ree,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index 22191e1..890b0d2 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -116,28 +116,6 @@
                         return;
                 }
                 try {
-                        /*                 smtpPort = 9700 + new Random().nextInt(99);
-                         httpPort = 9600 + new Random().nextInt(99);
-                         Properties properties = new Properties();
-                         properties.setProperty(""juddi.mail.smtp.host"", ""localhost"");
-                         properties.setProperty(""juddi.mail.smtp.port"", String.valueOf(smtpPort));
-                         properties.setProperty(""juddi.mail.smtp.from"", ""jUDDI@example.org"");
-                         String version = Release.getRegistryVersion().replaceAll("".SNAPSHOT"", ""-SNAPSHOT"");
-                         String curDir = System.getProperty(""user.dir"");
-                         if (!curDir.endsWith(""uddi-tck"")) {
-                         curDir += ""/uddi-tck"";
-                         }
-                         String path = curDir + ""/target/juddi-tomcat-"" + version + ""/temp/"";
-                         System.out.println(""Saving jUDDI email properties to "" + path);
-                         File tmpDir = new File(path);
-                         File tmpFile = new File(tmpDir + ""/juddi-mail.properties"");
-                         if (!tmpFile.createNewFile()) {
-                         tmpFile.delete();
-                         tmpFile.createNewFile();
-                         }
-                         properties.store(new FileOutputStream(tmpFile), ""tmp email settings"");
-                         */
-
                         manager = new UDDIClient();
                         manager.start();
 
@@ -513,7 +491,7 @@
                         logger.info(""updating Mary's tModel ********** "");
                         updateTModel(authInfoMary, saveMaryPublisherTmodel, publicationMary);
 
-                        boolean found = verifyDelivery(""a new description"");
+                        boolean found = verifyDelivery(TckTModel.MARY_PUBLISHER_TMODEL_KEY);
 
                         if (!found) {
                                 TckCommon.PrintMarker();
"
juddi,f1f6bf037a4774c4f076a1b479dba2252b04426a,"Merge branch 'master' into bug/JUDDI-977

# Conflicts:
#	uddi-tck/pom.xml
",2017-10-08 11:19:32,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
index 8259d6d..da6e4f1 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
@@ -58,12 +58,13 @@
                         }
                         tckProperties.load(inputSteam);
                 } catch (IOException ioe) {
-                        ioe.printStackTrace();
+                        logger.warn(ioe);
                 } finally {
                         if (inputSteam != null) {
                                 try {
                                         inputSteam.close();
                                 } catch (Exception ex) {
+                                    logger.debug(ex);
                                 }
                         }
                 }
@@ -135,82 +136,52 @@
 
         public static boolean isUDDIAuthMode() {
                 String x = tckProperties.getProperty(""auth_mode"");
-                if (x != null && x.equalsIgnoreCase(""uddi"")) {
-                        return true;
-                }
-                return false;
+                return ""uddi"".equalsIgnoreCase(x);
         }
 
         public static boolean isReplicationEnabled() {
                 String x = tckProperties.getProperty(""replication.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isInquiryRestEnabled() {
                 String x = tckProperties.getProperty(""rest.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isValueSetAPIEnabled() {
                 String x = tckProperties.getProperty(""vsv.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isSubscriptionEnabled() {
                 String x = tckProperties.getProperty(""sub.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isCustodyTransferEnabled() {
                 String x = tckProperties.getProperty(""transfer.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isJUDDI() {
                 String x = tckProperties.getProperty(""isJuddi"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isRMI() {
                 String x = tckProperties.getProperty(""rmi.enabled"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isLoadTest() {
                 String x = tckProperties.getProperty(""loadtest.enable"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isBPEL() {
                 String x = tckProperties.getProperty(""bpel.enable"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static int getMaxLoadServices() {
@@ -250,9 +221,6 @@
 
         public static boolean isSMTPEnabled() {
                 String x = tckProperties.getProperty(""smtp.notify.enabled"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 }
"
juddi,f1f6bf037a4774c4f076a1b479dba2252b04426a,"Merge branch 'master' into bug/JUDDI-977

# Conflicts:
#	uddi-tck/pom.xml
",2017-10-08 11:19:32,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index b338eaf..1feadf4 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -57,7 +57,13 @@
         final static String SAM_SYNDICATOR_TMODEL_XML = ""uddi_data/samsyndicator/tModelKeyGen.xml"";
         final static String SAM_SYNDICATOR_TMODEL_KEY = ""uddi:www.samco.com:keygenerator"";
         final static String TMODEL_PUBLISHER_TMODEL_XML = ""uddi_data/tmodels/tModelKeyGen.xml"";
+
+        final static String TMODEL_PUBLISHER_TMODEL_KEY_ROOT = ""uddi:tmodelkey:keygenerator"";
+        final static String TMODEL_PUBLISHER_TMODEL_XML_PARENT = ""uddi_data/tmodels/tmodelsKeyGenParent.xml"";
+        
         final static String TMODEL_PUBLISHER_TMODEL_KEY = ""uddi:tmodelkey:categories:keygenerator"";
+        
+
         final static String FIND_TMODEL_XML = ""uddi_data/find/findTModel1.xml"";
         final static String FIND_TMODEL_XML_BY_CAT = ""uddi_data/find/findTModelByCategoryBag.xml"";
         public final static String TMODELS_XML = ""uddi_data/tmodels/tmodels.xml"";
@@ -174,7 +180,7 @@
                 try {
                         tmIn = (org.uddi.api_v3.TModel) EntityCreator.buildFromDoc(tModelXml, ""org.uddi.api_v3"");
                 } catch (Exception ex) {
-                        Assert.fail(""unable to load tmodel from file!"");
+                        Assert.fail(""unable to load tmodel from file!"" + ex.getMessage());
                 }
                 if (tmIn == null) {
                         Assert.fail(""unable to load tmodel from file!"");
@@ -266,6 +272,10 @@
                 return saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, force);
         }
 
+        /**
+         * creates key generator
+         * @param authInfoTM 
+         */
         public void saveUDDIPublisherTmodel(String authInfoTM) {
                 saveTModel(authInfoTM, TMODEL_PUBLISHER_TMODEL_XML, TMODEL_PUBLISHER_TMODEL_KEY, false);
         }
"
juddi,a8785abb7aeeeecee0b6d43edb5be484b70560fb,"JUDDI-978 possible fix for replication tests
",2017-10-08 10:17:25,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index b338eaf..1feadf4 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -57,7 +57,13 @@
         final static String SAM_SYNDICATOR_TMODEL_XML = ""uddi_data/samsyndicator/tModelKeyGen.xml"";
         final static String SAM_SYNDICATOR_TMODEL_KEY = ""uddi:www.samco.com:keygenerator"";
         final static String TMODEL_PUBLISHER_TMODEL_XML = ""uddi_data/tmodels/tModelKeyGen.xml"";
+
+        final static String TMODEL_PUBLISHER_TMODEL_KEY_ROOT = ""uddi:tmodelkey:keygenerator"";
+        final static String TMODEL_PUBLISHER_TMODEL_XML_PARENT = ""uddi_data/tmodels/tmodelsKeyGenParent.xml"";
+        
         final static String TMODEL_PUBLISHER_TMODEL_KEY = ""uddi:tmodelkey:categories:keygenerator"";
+        
+
         final static String FIND_TMODEL_XML = ""uddi_data/find/findTModel1.xml"";
         final static String FIND_TMODEL_XML_BY_CAT = ""uddi_data/find/findTModelByCategoryBag.xml"";
         public final static String TMODELS_XML = ""uddi_data/tmodels/tmodels.xml"";
@@ -174,7 +180,7 @@
                 try {
                         tmIn = (org.uddi.api_v3.TModel) EntityCreator.buildFromDoc(tModelXml, ""org.uddi.api_v3"");
                 } catch (Exception ex) {
-                        Assert.fail(""unable to load tmodel from file!"");
+                        Assert.fail(""unable to load tmodel from file!"" + ex.getMessage());
                 }
                 if (tmIn == null) {
                         Assert.fail(""unable to load tmodel from file!"");
@@ -266,6 +272,10 @@
                 return saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, force);
         }
 
+        /**
+         * creates key generator
+         * @param authInfoTM 
+         */
         public void saveUDDIPublisherTmodel(String authInfoTM) {
                 saveTModel(authInfoTM, TMODEL_PUBLISHER_TMODEL_XML, TMODEL_PUBLISHER_TMODEL_KEY, false);
         }
"
juddi,b09a6fb7785a9c02675847577c3cc37a2a9cb84c,"JUDDI-978 adding missing checks for load testing, reducing the quantity of entities created during the load test to decrease build times. Some tck code cleanup
",2017-10-07 10:46:20,Alex O'Ree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
index 8259d6d..da6e4f1 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisher.java
@@ -58,12 +58,13 @@
                         }
                         tckProperties.load(inputSteam);
                 } catch (IOException ioe) {
-                        ioe.printStackTrace();
+                        logger.warn(ioe);
                 } finally {
                         if (inputSteam != null) {
                                 try {
                                         inputSteam.close();
                                 } catch (Exception ex) {
+                                    logger.debug(ex);
                                 }
                         }
                 }
@@ -135,82 +136,52 @@
 
         public static boolean isUDDIAuthMode() {
                 String x = tckProperties.getProperty(""auth_mode"");
-                if (x != null && x.equalsIgnoreCase(""uddi"")) {
-                        return true;
-                }
-                return false;
+                return ""uddi"".equalsIgnoreCase(x);
         }
 
         public static boolean isReplicationEnabled() {
                 String x = tckProperties.getProperty(""replication.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isInquiryRestEnabled() {
                 String x = tckProperties.getProperty(""rest.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isValueSetAPIEnabled() {
                 String x = tckProperties.getProperty(""vsv.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isSubscriptionEnabled() {
                 String x = tckProperties.getProperty(""sub.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isCustodyTransferEnabled() {
                 String x = tckProperties.getProperty(""transfer.enabled"");
-                if (x != null && x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isJUDDI() {
                 String x = tckProperties.getProperty(""isJuddi"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isRMI() {
                 String x = tckProperties.getProperty(""rmi.enabled"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isLoadTest() {
                 String x = tckProperties.getProperty(""loadtest.enable"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static boolean isBPEL() {
                 String x = tckProperties.getProperty(""bpel.enable"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 
         public static int getMaxLoadServices() {
@@ -250,9 +221,6 @@
 
         public static boolean isSMTPEnabled() {
                 String x = tckProperties.getProperty(""smtp.notify.enabled"");
-                if (x.equalsIgnoreCase(""true"")) {
-                        return true;
-                }
-                return false;
+                return ""true"".equalsIgnoreCase(x);
         }
 }
"
juddi,a967991ae7641ba89caf4e4c7d81fe89e9e78c1e,"JUDDI-970 resolved logic issue for subscription chunk validation
",2017-09-22 21:37:43,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index d250f24..bf570f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -194,7 +194,7 @@
 				
 				if (chunkToken == null)
 					throw new InvalidValueException(new ErrorMessage(""errors.getsubscriptionresult.InvalidChunkToken"", body.getChunkToken()));
-				if (!chunkToken.getSubscriptionKey().equals(chunkToken.getSubscriptionKey()))
+				if (!chunkToken.getSubscriptionKey().equals(body.getSubscriptionKey()))
 					throw new InvalidValueException(new ErrorMessage(""errors.getsubscriptionresult.NonMatchingChunkToken"", body.getChunkToken()));
 				if (chunkToken.getStartPoint() != null && chunkToken.getStartPoint().getTime() != startPointDate.getTime())
 					throw new InvalidValueException(new ErrorMessage(""errors.getsubscriptionresult.NonMatchingChunkToken"", body.getChunkToken()));
"
juddi,3f8dc0303641c12cd10f836402218aa391b7c236,"JUDDI-967 resolved
",2017-02-02 20:55:33,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
index b56d39c..114048b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
@@ -15,7 +15,6 @@
  */
 package org.apache.juddi.validation.vsv;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import javax.persistence.EntityManager;
@@ -28,7 +27,6 @@
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.KeyedReference;
-import org.uddi.api_v3.KeyedReferenceGroup;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelInstanceInfo;
@@ -157,7 +155,7 @@
                                 //ok we have some work to do
                                 boolean valid = false;
                                 for (int k = 0; k < validValues.size(); k++) {
-                                        if (validValues.get(i).equals(items.get(i).getKeyValue())) {
+                                        if (validValues.get(k).equals(items.get(i).getKeyValue())) {
                                                 valid = true;
                                         }
                                 }
"
juddi,3f8dc0303641c12cd10f836402218aa391b7c236,"JUDDI-967 resolved
",2017-02-02 20:55:33,Alex O'Ree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
index 7d841d6..33b4620 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
@@ -306,7 +306,7 @@
                                 //ok we have some work to do
                                 boolean valid = false;
                                 for (int k = 0; k < validValues.size(); k++) {
-                                        if (validValues.get(i).equals(items.get(i).getKeyValue())) {
+                                        if (validValues.get(k).equals(items.get(i).getKeyValue())) {
                                                 valid = true;
                                         }
                                 }
"
juddi,83312bd2aa23fbed63312f1ff2cabb0770baf998,"JUDDI-965 fixed
",2016-09-11 13:13:42,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 62b6c93..847945e 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -18,6 +18,7 @@
 
 package org.uddi.v3_service;
 
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.UndeclaredThrowableException;
 import java.rmi.RemoteException;
 
@@ -110,7 +111,10 @@
     			DispositionReportFaultMessage faultMsg = (DispositionReportFaultMessage) ute.getUndeclaredThrowable().getCause().getCause();
 	    		report = faultMsg.getFaultInfo();
     		}
-    	} else {
+    	} else if (e instanceof InvocationTargetException){
+          //https://issues.apache.org/jira/browse/JUDDI-965
+          log.error(""InvocationTargetException: It's not a known instance of DispositionReport. Target: "",((InvocationTargetException)e).getTargetException());
+     } else{
     		log.error(""Unsupported Exception: It's not a known instance of DispositionReport. "",e);
           
     	}
"
juddi,4f63c9cb7a749ed1eefaecb4673786aa1595a4a1,"JUDDI-966 sources jars are fixed
JUDDI-965 exception is now logged and thrown
",2016-09-11 12:28:19,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 3c8b26b..f500a52 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -784,6 +784,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, null, null);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -846,6 +848,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, null, null);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -930,6 +934,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, serviceKey);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -1015,6 +1021,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, bindingKey);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -1096,6 +1104,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, businessKey);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -1131,6 +1141,8 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, businessKey);
+                }catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
         }
@@ -1843,8 +1855,11 @@
                 } catch (UndeclaredThrowableException ute) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
                         checkForErrorInDispositionReport(report, null, null);
+                } catch (Throwable t){
+                     throw new RemoteException(""Unhandled exception"", t);
                 }
                 return null;
+
         }
 
 }
"
juddi,4f63c9cb7a749ed1eefaecb4673786aa1595a4a1,"JUDDI-966 sources jars are fixed
JUDDI-965 exception is now logged and thrown
",2016-09-11 12:28:19,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index b27a2f4..62b6c93 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -29,6 +29,8 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.uddi.api_v3.DispositionReport;
+import org.uddi.api_v3.ErrInfo;
+import org.uddi.api_v3.Result;
 
 
 /**
@@ -109,7 +111,8 @@
 	    		report = faultMsg.getFaultInfo();
     		}
     	} else {
-    		log.error(""Unsupported Exception: "" + e.getClass());
+    		log.error(""Unsupported Exception: It's not a known instance of DispositionReport. "",e);
+          
     	}
     	return report;
     }
"
juddi,29593c748b49688bd2adbc21a84c1883b110800f,"JUDDI-957 potential fix
",2016-01-12 18:38:58,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
index 54a11a9..38ed251 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
@@ -15,6 +15,7 @@
  */
 package org.apache.juddi.v3.tck;
 
+import java.rmi.RemoteException;
 import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -30,8 +31,10 @@
 import org.uddi.api_v3.FindQualifiers;
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
+import org.uddi.api_v3.GetOperationalInfo;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.Name;
+import org.uddi.api_v3.OperationalInfos;
 import org.uddi.api_v3.ServiceInfos;
 import org.uddi.api_v3.ServiceList;
 import org.uddi.api_v3.TModelList;
@@ -334,4 +337,28 @@
                 System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
         }
 
+        public static void DumpAllTModelsOpInfo(String authInfoJoe, UDDIInquiryPortType uddiInquiryImpl) throws Exception {
+                FindTModel ftm = new FindTModel();
+                ftm.setAuthInfo(authInfoJoe);
+                //org.apache.juddi.v3.client.UDDIConstants.WILDCARD
+                ftm.setName(new Name(""%"", null));
+                ftm.setFindQualifiers(new FindQualifiers());
+                ftm.getFindQualifiers().getFindQualifier().add(""approximateMatch"");
+                TModelList findTModel = uddiInquiryImpl.findTModel(ftm);
+
+                GetOperationalInfo req = new GetOperationalInfo();
+                req.setAuthInfo(authInfoJoe);
+
+                for (int i = 0; i < findTModel.getTModelInfos().getTModelInfo().size(); i++) {
+                        req.getEntityKey().add(
+                             findTModel.getTModelInfos().getTModelInfo().get(i).getTModelKey());
+                }
+                OperationalInfos operationalInfo = uddiInquiryImpl.getOperationalInfo(req);
+
+                for (int i = 0; i < operationalInfo.getOperationalInfo().size(); i++) {
+                        System.out.println(operationalInfo.getOperationalInfo().get(i).getEntityKey() + "" on node ""
+                             + operationalInfo.getOperationalInfo().get(i).getNodeID() + "" is owned by "" + operationalInfo.getOperationalInfo().get(i).getAuthorizedName());
+                }
+        }
+
 }
"
juddi,988624e55415f90344208334c179659fa93b5807,"JUDDI-956 fixed
",2016-01-05 22:16:52,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 2111ecf..6ec27f1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -1955,6 +1955,7 @@
                                                 if (modelTModel == null) {
                                                         checked = false;
                                                 } else {
+                                                     if (modelTModel.getCategoryBag()!=null)
                                                         for (org.apache.juddi.model.KeyedReference ref : modelTModel.getCategoryBag().getKeyedReferences()) {
                                                                 if (""uddi-org:types:unchecked"".equalsIgnoreCase(ref.getKeyName())) {
                                                                         checked = false;
"
juddi,988624e55415f90344208334c179659fa93b5807,"JUDDI-956 fixed
",2016-01-05 22:16:52,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index a689cf0..b338eaf 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -105,7 +105,7 @@
                 }
         }
 
-        private TModel saveTModel(String authInfo, TModel tmIn, boolean force) {
+        public TModel saveTModel(String authInfo, TModel tmIn, boolean force) {
                 boolean exists = false;
                 GetTModelDetail gt1 = new GetTModelDetail();
                 gt1.getTModelKey().add(tmIn.getTModelKey());
"
juddi,ed1692d1ccddaa564c5bd361bb0877384be4fedb,"JUDDI-946 Incorrect annotation on JPA entity classes, applying user submitted patch
",2015-12-05 19:20:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TempKey.java b/juddi-core/src/main/java/org/apache/juddi/model/TempKey.java
index 33f1927..398b957 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TempKey.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TempKey.java
@@ -1,52 +1,52 @@
-package org.apache.juddi.model;
-/*
- * Copyright 2001-2008 The Apache Software Foundation.
- * 
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
+package org.apache.juddi.model;
+/*
+ * Copyright 2001-2008 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import javax.persistence.EmbeddedId;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+/**
+ * @author <a href=""mailto:kstam@apache.org"">Kurt Stam</a>
+ */
+@Entity
+@Table(name = ""j3_temp_key"")
+public class TempKey implements java.io.Serializable {
+
+	private static final long serialVersionUID = -2763025628473227781L;
+	
+	private TempKeyPK pk;
+	
+	public TempKey(){
+	}
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
-
-/**
- * @author <a href=""mailto:kstam@apache.org"">Kurt Stam</a>
- */
-@Entity
-@Table(name = ""j3_temp_key"")
-public class TempKey implements java.io.Serializable {
-
-	private static final long serialVersionUID = -2763025628473227781L;
-	
-	private TempKeyPK pk;
-	
-	public TempKey(){
-	}
-	
-	@Id
-	public TempKeyPK getPk() {
-		return pk;
-	}
-	
-	public void setPk(TempKeyPK pk) {
-		this.pk = pk;
-	}
-
-	public void setPk(String txId, String entityKey) {
-		TempKeyPK pk = new TempKeyPK();
-		pk.setEntityKey(entityKey);
-		pk.setTxId(txId);
-		this.pk = pk;
-	}
-	
-}
+	@EmbeddedId
+	public TempKeyPK getPk() {
+		return pk;
+	}
+	
+	public void setPk(TempKeyPK pk) {
+		this.pk = pk;
+	}
+
+	public void setPk(String txId, String entityKey) {
+		TempKeyPK pk = new TempKeyPK();
+		pk.setEntityKey(entityKey);
+		pk.setTxId(txId);
+		this.pk = pk;
+	}
+	
+}
"
juddi,ed1692d1ccddaa564c5bd361bb0877384be4fedb,"JUDDI-946 Incorrect annotation on JPA entity classes, applying user submitted patch
",2015-12-05 19:20:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
index f98acab..39e6cb7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
@@ -1,82 +1,75 @@
-/*
- * Copyright 2001-2008 The Apache Software Foundation.
- * 
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package org.apache.juddi.model;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import javax.persistence.CascadeType;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.Id;
-import javax.persistence.OneToMany;
-import javax.persistence.OrderBy;
-import javax.persistence.Table;
-
-/**
- * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
- */
-@Entity
-@Table(name = ""j3_transfer_token"")
-public class TransferToken implements java.io.Serializable{
-
-	private static final long serialVersionUID = -7361461730400118274L;
-	private String transferToken;
-	private Date expirationDate;
-	protected List<TransferTokenKey> transferKeys = new ArrayList<TransferTokenKey>(0);
-	
-	public TransferToken() {
-	}
-
-	public TransferToken(String transferToken, Date expirationDate,
-			List<TransferTokenKey> transferKeys) {
-		this.transferToken = transferToken;
-		this.expirationDate = expirationDate;
-		this.transferKeys = transferKeys;
-	}
-
-	@Id
-	@Column(name = ""transfer_token"", nullable = false, length = 51)
-	public String getTransferToken() {
-		return transferToken;
-	}
-	public void setTransferToken(String transferToken) {
-		this.transferToken = transferToken;
-	}
-
-    @Column(name=""expiration_date"", nullable = false, updatable = false)
-	public Date getExpirationDate() {
-		return expirationDate;
-	}
-	public void setExpirationDate(Date expirationDate) {
-		this.expirationDate = expirationDate;
-	}
-
-	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""transferToken"")
-	@OrderBy
-	public List<TransferTokenKey> getTransferKeys() {
-		return transferKeys;
-	}
-	public void setTransferKeys(List<TransferTokenKey> transferKeys) {
-		this.transferKeys = transferKeys;
-	}
-	
-
-}
+/*
+ * Copyright 2001-2008 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.juddi.model;
+
+import javax.persistence.*;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
+ */
+@Entity
+@Table(name = ""j3_transfer_token"")
+public class TransferToken implements java.io.Serializable{
+
+	private static final long serialVersionUID = -7361461730400118274L;
+	private String transferToken;
+	private Date expirationDate;
+	protected List<TransferTokenKey> transferKeys = new ArrayList<TransferTokenKey>(0);
+	
+	public TransferToken() {
+	}
+
+	public TransferToken(String transferToken, Date expirationDate,
+			List<TransferTokenKey> transferKeys) {
+		this.transferToken = transferToken;
+		this.expirationDate = expirationDate;
+		this.transferKeys = transferKeys;
+	}
+
+	@Id
+	@Column(name = ""transfer_token"", nullable = false, length = 51)
+	public String getTransferToken() {
+		return transferToken;
+	}
+	public void setTransferToken(String transferToken) {
+		this.transferToken = transferToken;
+	}
+
+	@Temporal(TemporalType.TIMESTAMP)
+    @Column(name=""expiration_date"", nullable = false, updatable = false)
+	public Date getExpirationDate() {
+		return expirationDate;
+	}
+	public void setExpirationDate(Date expirationDate) {
+		this.expirationDate = expirationDate;
+	}
+
+	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""transferToken"")
+	@OrderBy
+	public List<TransferTokenKey> getTransferKeys() {
+		return transferKeys;
+	}
+	public void setTransferKeys(List<TransferTokenKey> transferKeys) {
+		this.transferKeys = transferKeys;
+	}
+	
+
+}
"
juddi,776d9081dc06e07f75c8a79e52b4e6183393a53a,"JUDDI-951 merging user submitted patch, EntityManagerFactory not closed when undeploying juddi
",2015-12-05 16:21:48,Alex,"diff --git a/juddiv3-war-repl/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java b/juddiv3-war-repl/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
index c600522..b3b90ba 100644
--- a/juddiv3-war-repl/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
+++ b/juddiv3-war-repl/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
@@ -16,12 +16,12 @@
  */
 package org.apache.juddi.adminconsole;
 
+import javax.servlet.ServletContextEvent;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.servlet.ServletContextEvent;
 
 /**
  * This startup servlet's job is to generate an encryption key which will be
@@ -31,101 +31,102 @@
  */
 public class StartupServlet implements javax.servlet.ServletContextListener {
 
-        static final Logger log = Logger.getLogger(StartupServlet.class.getCanonicalName());
+    static final Logger log = Logger.getLogger(StartupServlet.class.getCanonicalName());
 
-        /**
-         * creates a new AES key and stores it to the properties files
-         *
-         * @param sce
-         */
-        public void contextInitialized(ServletContextEvent sce) {
-                log.info(""juddi-admin gui startup"");
-                FileOutputStream fos = null;
-                try {
-                        //URL resource = sce.getServletContext().getResource(""/META-INF/config.properties"");
-                        Properties p = new Properties();
-
-                        log.info(""Attempting to generate 256 bit AES key"");
-                        boolean ok = false;
-                        String key = AES.GEN(256);
-                        if (key == null) {
-                                ok = false;
-                        } else {
-                                if (AES.ValidateKey(key)) {
-                                        log.info(""Generation of 256 bit AES key successful"");
-                                        ok = true;
-                                } else {
-                                        log.warning(""256 bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
-                                }
-                        }
-                        if (!ok) {
-                                log.info(""Attempting to generate 128 bit AES key"");
-                                key = AES.GEN(128);
-                                if (key == null) {
-                                        log.log(Level.SEVERE, ""128 bit key generation failed! user's won't be able to login!"");
-                                        return;
-                                } else if (AES.ValidateKey(key)) {
-                                        log.info(""Generation of 128 bit AES key successful"");
-                                } else {
-                                        log.severe(""128 bit key validation failed! giving up, user's won't be able to login! "");
-                                        return;
-
-                                }
-                        }
-
-                        p.put(""key"", key);
-                        fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-
-                        log.log(Level.INFO, ""Storing key to "" + sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-                        p.store(fos, ""No comments"");
-                        fos.flush();
-                        fos.close();
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                        try {
-                                if (fos != null) {
-                                        fos.close();
-                                }
-                        } catch (Exception e) {
-                        }
+    /**
+     * creates a new AES key and stores it to the properties files
+     *
+     * @param sce
+     */
+    @Override
+    public void contextInitialized(ServletContextEvent sce) {
+        log.info(""juddi-admin gui startup"");
+        FileOutputStream fos = null;
+        try {
+            Properties p = new Properties();
+            String key = generateKey();
+            if (key == null) return;
+            p.put(""key"", key);
+            fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            log.log(Level.INFO, ""Storing key to "" + sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            p.store(fos, ""No comments"");
+            fos.flush();
+            fos.close();
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+            try {
+                if (fos != null) {
+                    fos.close();
                 }
+            } catch (Exception e) {
+            }
         }
+    }
 
-        /**
-         * does nothing
-         *
-         * @param sce
-         */
-        public void contextDestroyed(ServletContextEvent sce) {
-                FileOutputStream fos = null;
-                try {
-                        log.info(""Cleaning up juddi-admin"");
-                        Properties p = new Properties();
-                        InputStream is = sce.getServletContext().getResourceAsStream(""/WEB-INF/config.properties"");
-                        p.load(is);
-                        p.remove(""key"");
-                        is.close();
-                        fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-                        p.store(fos, ""No comments"");
-                        fos.flush();
-                        fos.close();
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                        try {
-                                if (fos != null) {
-                                        fos.close();
-                                }
-                        } catch (Exception e) {
-                        }
-                }
-                try {
-                        sce.getServletContext().removeAttribute(""username"");
-                        sce.getServletContext().removeAttribute(""password"");
-                        sce.getServletContext().removeAttribute(""locale"");
-                        sce.getServletContext().removeAttribute(""hub"");
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                }
-
+    private String generateKey() {
+        String key = generateKey(256);
+        if (key == null) {
+            key = generateKey(128);
         }
+        if (key == null) {
+            log.severe(""128 bit key validation failed! giving up, user's won't be able to login! "");
+            return null;
+        }
+        return key;
+    }
+
+    private String generateKey(int length) {
+        log.info(""Attempting to generate ""+length+"" bit AES key"");
+        String key = AES.GEN(length);
+        if (key != null) {
+            if (AES.ValidateKey(key)) {
+                log.info(""Generation of ""+length+"" bit AES key successful"");
+            } else {
+                log.warning(length+"" bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
+                return null;
+            }
+        }
+        return key;
+    }
+
+    /**
+     *
+     * @param sce
+     */
+    @Override
+    public void contextDestroyed(ServletContextEvent sce) {
+        removeKeyFromConfigurationFile(sce);
+    }
+
+    private void removeKeyFromConfigurationFile(ServletContextEvent sce) {
+        FileOutputStream fos = null;
+        try {
+            log.info(""Cleaning up juddi-admin"");
+            Properties p = new Properties();
+            InputStream is = sce.getServletContext().getResourceAsStream(""/WEB-INF/config.properties"");
+            p.load(is);
+            p.remove(""key"");
+            is.close();
+            fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            p.store(fos, ""No comments"");
+            fos.flush();
+            fos.close();
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+            try {
+                if (fos != null) {
+                    fos.close();
+                }
+            } catch (Exception e) {
+            }
+        }
+        try {
+            sce.getServletContext().removeAttribute(""username"");
+            sce.getServletContext().removeAttribute(""password"");
+            sce.getServletContext().removeAttribute(""locale"");
+            sce.getServletContext().removeAttribute(""hub"");
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+        }
+    }
 }
"
juddi,776d9081dc06e07f75c8a79e52b4e6183393a53a,"JUDDI-951 merging user submitted patch, EntityManagerFactory not closed when undeploying juddi
",2015-12-05 16:21:48,Alex,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
index 9cbb028..fba35d3 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
@@ -1,131 +1,134 @@
-/*
- * Copyright 2001-2008 The Apache Software Foundation.
- * 
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-package org.apache.juddi.adminconsole;
+/*
+ * Copyright 2001-2008 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+package org.apache.juddi.adminconsole;
+
+import org.apache.juddi.config.PersistenceManager;
 
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.util.Properties;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import javax.servlet.ServletContextEvent;
-
-/**
- * This startup servlet's job is to generate an encryption key which will be
- * used for encrypting cached user credentials in the http session object
- *
- * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
- */
-public class StartupServlet implements javax.servlet.ServletContextListener {
-
-        static final Logger log = Logger.getLogger(StartupServlet.class.getCanonicalName());
-
-        /**
-         * creates a new AES key and stores it to the properties files
-         *
-         * @param sce
-         */
-        public void contextInitialized(ServletContextEvent sce) {
-                log.info(""juddi-admin gui startup"");
-                FileOutputStream fos = null;
-                try {
-                        //URL resource = sce.getServletContext().getResource(""/META-INF/config.properties"");
-                        Properties p = new Properties();
-
-                        log.info(""Attempting to generate 256 bit AES key"");
-                        boolean ok = false;
-                        String key = AES.GEN(256);
-                        if (key == null) {
-                                ok = false;
-                        } else {
-                                if (AES.ValidateKey(key)) {
-                                        log.info(""Generation of 256 bit AES key successful"");
-                                        ok = true;
-                                } else {
-                                        log.warning(""256 bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
-                                }
-                        }
-                        if (!ok) {
-                                log.info(""Attempting to generate 128 bit AES key"");
-                                key = AES.GEN(128);
-                                if (key == null) {
-                                        log.log(Level.SEVERE, ""128 bit key generation failed! user's won't be able to login!"");
-                                        return;
-                                } else if (AES.ValidateKey(key)) {
-                                        log.info(""Generation of 128 bit AES key successful"");
-                                } else {
-                                        log.severe(""128 bit key validation failed! giving up, user's won't be able to login! "");
-                                        return;
-
-                                }
-                        }
-
-                        p.put(""key"", key);
-                        fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-
-                        log.log(Level.INFO, ""Storing key to "" + sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-                        p.store(fos, ""No comments"");
-                        fos.flush();
-                        fos.close();
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                        try {
-                                if (fos != null) {
-                                        fos.close();
-                                }
-                        } catch (Exception e) {
-                        }
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.util.Properties;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+/**
+ * This startup servlet's job is to generate an encryption key which will be
+ * used for encrypting cached user credentials in the http session object
+ *
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
+ */
+public class StartupServlet implements javax.servlet.ServletContextListener {
+
+    static final Logger log = Logger.getLogger(StartupServlet.class.getCanonicalName());
+
+    /**
+     * creates a new AES key and stores it to the properties files
+     *
+     * @param sce
+     */
+    @Override
+    public void contextInitialized(ServletContextEvent sce) {
+        log.info(""juddi-admin gui startup"");
+        FileOutputStream fos = null;
+        try {
+            Properties p = new Properties();
+            String key = generateKey();
+            if (key == null) return;
+            p.put(""key"", key);
+            fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            log.log(Level.INFO, ""Storing key to "" + sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            p.store(fos, ""No comments"");
+            fos.flush();
+            fos.close();
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+            try {
+                if (fos != null) {
+                    fos.close();
                 }
+            } catch (Exception e) {
+            }
         }
-
-        /**
-         * does nothing
-         *
-         * @param sce
-         */
-        public void contextDestroyed(ServletContextEvent sce) {
-                FileOutputStream fos = null;
-                try {
-                        log.info(""Cleaning up juddi-admin"");
-                        Properties p = new Properties();
-                        InputStream is = sce.getServletContext().getResourceAsStream(""/WEB-INF/config.properties"");
-                        p.load(is);
-                        p.remove(""key"");
-                        is.close();
-                        fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
-                        p.store(fos, ""No comments"");
-                        fos.flush();
-                        fos.close();
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                        try {
-                                if (fos != null) {
-                                        fos.close();
-                                }
-                        } catch (Exception e) {
-                        }
-                }
-                try {
-                        sce.getServletContext().removeAttribute(""username"");
-                        sce.getServletContext().removeAttribute(""password"");
-                        sce.getServletContext().removeAttribute(""locale"");
-                        sce.getServletContext().removeAttribute(""hub"");
-                } catch (Exception ex) {
-                        log.log(Level.WARNING, null, ex);
-                }
-
+    }
+
+    private String generateKey() {
+        String key = generateKey(256);
+        if (key == null) {
+            key = generateKey(128);
         }
-}
+        if (key == null) {
+            log.severe(""128 bit key validation failed! giving up, user's won't be able to login! "");
+            return null;
+        }
+        return key;
+    }
+
+    private String generateKey(int length) {
+        log.info(""Attempting to generate "" + length + "" bit AES key"");
+        String key = AES.GEN(length);
+        if (key != null) {
+            if (AES.ValidateKey(key)) {
+                log.info(""Generation of "" + length + "" bit AES key successful"");
+            } else {
+                log.warning(length + "" bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
+                return null;
+            }
+        }
+        return key;
+    }
+
+    /**
+     * @param sce
+     */
+    @Override
+    public void contextDestroyed(ServletContextEvent sce) {
+        removeKeyFromConfigurationFile(sce);
+        PersistenceManager.closeEntityManager();
+    }
+
+    private void removeKeyFromConfigurationFile(ServletContextEvent sce) {
+        FileOutputStream fos = null;
+        try {
+            log.info(""Cleaning up juddi-admin"");
+            Properties p = new Properties();
+            InputStream is = sce.getServletContext().getResourceAsStream(""/WEB-INF/config.properties"");
+            p.load(is);
+            p.remove(""key"");
+            is.close();
+            fos = new FileOutputStream(sce.getServletContext().getRealPath(""/WEB-INF/config.properties""));
+            p.store(fos, ""No comments"");
+            fos.flush();
+            fos.close();
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+            try {
+                if (fos != null) {
+                    fos.close();
+                }
+            } catch (Exception e) {
+            }
+        }
+        try {
+            sce.getServletContext().removeAttribute(""username"");
+            sce.getServletContext().removeAttribute(""password"");
+            sce.getServletContext().removeAttribute(""locale"");
+            sce.getServletContext().removeAttribute(""hub"");
+        } catch (Exception ex) {
+            log.log(Level.WARNING, null, ex);
+        }
+    }
+}
"
juddi,1dcd5285f3513f48aff5b763c8328dfbd2027dbb,"JUDDI-943 WebHelper class: Client name not set in servletContext after getUDDIClient is called
JUDDI-944 gitignore file
",2015-11-16 19:58:39,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 0c33bc0..5935e05 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -81,6 +81,7 @@
 			}
 			if (client.getName()!=null) {
 				logger.info(""Starting Client "" + client.getName() + ""..."");
+                    clientName = client.getName();
 			} else {
 				throw new ConfigurationException(""A client name needs to be specified in the client config file."");
 			}
"
juddi,d2ccea33dac4ebca14bf6a17bc0b1df145315a61,"JUDDI-939 fixing test case
",2015-10-29 07:39:15,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
index 2ee15a8..7f79c98 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
@@ -257,11 +257,19 @@
 				//Loop over all bindingTemplates found and get the endpoints.
 				for (BindingTemplate bindingTemplate : bindingTemplates.getBindingTemplate()) {
 					AccessPoint accessPoint = bindingTemplate.getAccessPoint();
+                                        if (accessPoint!=null){
 					if (AccessPointType.END_POINT.toString().equals(accessPoint.getUseType())) {
 						String url = accessPoint.getValue();
 						log.debug(""epr= "" + url);
 						eprs.add(url);
+					} else if(AccessPointType.WSDL_DEPLOYMENT.toString().equals(accessPoint.getUseType())) {
+					//do something here
+                                            //try to open that wsdl, then grab the endpoints
+					}  else if(AccessPointType.BINDING_TEMPLATE.toString().equals(accessPoint.getUseType())) {
+					//do something here
+                                            //grab that binding template and use that address
 					}
+                                                }
 				}
 				if (eprs.size()>0) {
 					topology = new Topology(eprs);
"
juddi,3fb9382b3872a5a375fc9fa0610ba32b1cdafb00,"JUDDI-939 fixed, test cases will be added to the tck
",2015-10-28 19:55:16,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
index b8a6ac1..2ee15a8 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
@@ -165,6 +165,7 @@
 	private UDDIServiceCache initCache(URL baseCallbackURL) throws ConfigurationException {
 		if (clerk==null) throw new ConfigurationException(""The UDDIClerk is needed to use the UDDIServiceCache and is null"");
 		if (urlLocalizer==null) urlLocalizer = new URLLocalizerDefaultImpl(baseCallbackURL);
+                if (properties==null) properties = new Properties();
 		try {
 			log.info(""Creating a UDDICLientCache"");
 			return new UDDIServiceCache(clerk, urlLocalizer, properties);
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 2f47e43..af2e32f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -67,7 +67,7 @@
  */
 @WebService(serviceName=""UDDIInquiryService"",   
 			endpointInterface=""org.uddi.v3_service.UDDIInquiryPortType"",
-			targetNamespace = ""urn:uddi-org:v3_service"")
+			targetNamespace = ""urn:uddi-org:api_v3_portType"")
 public class UDDIInquiryImpl extends AuthenticatedService implements UDDIInquiryPortType {
 
 
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 3fe2f84..eb1885c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -102,7 +102,7 @@
  */
 @WebService(serviceName = ""UDDIPublicationService"",
         endpointInterface = ""org.uddi.v3_service.UDDIPublicationPortType"",
-        targetNamespace = ""urn:uddi-org:v3_service"")
+        targetNamespace = ""urn:uddi-org:api_v3_portType"")
 public class UDDIPublicationImpl extends AuthenticatedService implements UDDIPublicationPortType {
 
         private static Log log = LogFactory.getLog(UDDIInquiryImpl.class);
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 3a1645b..92ef637 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -91,7 +91,7 @@
  *
  * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
-@WebService(serviceName = ""UDDI_Replication_PortType"", targetNamespace = ""urn:uddi-org:repl_v3_portType"",
+@WebService(serviceName = ""UDDI_Replication_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"",
         endpointInterface = ""org.uddi.v3_service.UDDIReplicationPortType"")
 @XmlSeeAlso({
         org.uddi.custody_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index 7a2a0cb..24077c5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -50,7 +50,7 @@
  */
 @WebService(serviceName=""UDDISecurityService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISecurityPortType"",
-			targetNamespace = ""urn:uddi-org:v3_service"")
+			targetNamespace = ""urn:uddi-org:api_v3_portType"")
 public class UDDISecurityImpl extends AuthenticatedService implements UDDISecurityPortType {
 
 	public static final String AUTH_TOKEN_PREFIX = ""authtoken:"";
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index ff3bff6..d250f24 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -42,7 +42,6 @@
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
-import org.apache.juddi.model.PublisherAssertion;
 import org.apache.juddi.model.SubscriptionChunkToken;
 import org.apache.juddi.model.SubscriptionMatch;
 import org.apache.juddi.model.UddiEntityPublisher;
@@ -52,7 +51,6 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.InvalidValueException;
 import org.apache.juddi.validation.ValidateSubscription;
-import org.uddi.api_v3.AssertionStatusItem;
 import org.uddi.api_v3.AssertionStatusReport;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BusinessDetail;
@@ -86,7 +84,7 @@
  */
 @WebService(serviceName=""UDDISubscriptionService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISubscriptionPortType"",
-			targetNamespace = ""urn:uddi-org:v3_service"")
+			targetNamespace = ""urn:uddi-org:api_v3_portType"")
 public class UDDISubscriptionImpl extends AuthenticatedService implements UDDISubscriptionPortType {
 
 	private static Log logger = LogFactory.getLog(UDDISubscriptionImpl.class);
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index a6239b1..dbe328e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -48,7 +48,7 @@
  */
 @WebService(serviceName=""UDDISubscriptionListenerService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISubscriptionListenerPortType"",
-			targetNamespace = ""urn:uddi-org:v3_service"")
+			targetNamespace = ""urn:uddi-org:api_v3_portType"")
 public class UDDISubscriptionListenerImpl extends AuthenticatedService implements
 		UDDISubscriptionListenerPortType {
 	
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
index cbd443e..c516fdf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
@@ -25,7 +25,6 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api.util.QueryStatus;
 import org.apache.juddi.api.util.ValueSetCachingQuery;
-import org.apache.juddi.validation.ValidateValueSetCaching;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIValueSetCachingPortType;
 import org.uddi.vscache_v3.ValidValue;
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDICustodyTransferPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDICustodyTransferPortType.java
index 8a2b56d..b932b83 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDICustodyTransferPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDICustodyTransferPortType.java
@@ -242,7 +242,7 @@
  * 2.1.5-b03- Generated source version: 2.1
  *
  */
-@WebService(name = ""UDDI_CustodyTransfer_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_CustodyTransfer_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIInquiryPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIInquiryPortType.java
index 4b31286..c00686c 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIInquiryPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIInquiryPortType.java
@@ -56,7 +56,7 @@
  * Generated source version: 2.1
  *
  */
-@WebService(name = ""UDDI_Inquiry_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_Inquiry_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
index 83ddb70..2a472a2 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
@@ -680,7 +680,7 @@
  * reasserted to be removed from the registry.</p>
  *
  */
-@WebService(name = ""UDDI_Publication_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_Publication_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIReplicationPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIReplicationPortType.java
index 684c7a3..d66e9d6 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIReplicationPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIReplicationPortType.java
@@ -66,7 +66,7 @@
  * Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  * </span></span>get_highWaterMarks</p>
  */
-@WebService(name = ""UDDI_Replication_PortType"", targetNamespace = ""urn:uddi-org:repl_v3_portType"")
+@WebService(name = ""UDDI_Replication_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISecurityPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISecurityPortType.java
index 7296e73..2b7a7c1 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISecurityPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISecurityPortType.java
@@ -72,7 +72,7 @@
  * MAY provide an alternative mechanism for obtaining authInfo elements.&nbsp;
  * </p>
  */
-@WebService(name = ""UDDI_Security_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_Security_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionListenerPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionListenerPortType.java
index 9cbe67f..e20bb99 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionListenerPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionListenerPortType.java
@@ -74,7 +74,7 @@
  * policy of the node.
  *
  */
-@WebService(name = ""UDDI_SubscriptionListener_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_SubscriptionListener_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionPortType.java
index 4a19483..0a6dfc3 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDISubscriptionPortType.java
@@ -311,7 +311,7 @@
 containing the data that changed since notify_subscriptionListener was last
 invoked for a particular subscription.</p>
  */
-@WebService(name = ""UDDI_Subscription_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_Subscription_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetCachingPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetCachingPortType.java
index dd37898..282977c 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetCachingPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetCachingPortType.java
@@ -126,7 +126,7 @@
 Set Validation API tModel</i>) as well tModels for all of the value sets the
 service applies to.&nbsp; </p>
  */
-@WebService(name = ""UDDI_ValueSetCaching_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_ValueSetCaching_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,f0a1ae7f66fbbc828c0d7031afded9a1fb8623de,"JUDDI-940 fixing the portType declaration for our services.
",2015-10-28 19:18:04,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetValidationPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetValidationPortType.java
index 945952f..ad6c9ed 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetValidationPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIValueSetValidationPortType.java
@@ -130,7 +130,7 @@
 service applies to.&nbsp; </p>
  * 
  */
-@WebService(name = ""UDDI_ValueSetValidation_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
+@WebService(name = ""UDDI_ValueSetValidation_PortType"", targetNamespace = ""urn:uddi-org:api_v3_portType"")
 @XmlSeeAlso({
     org.uddi.custody_v3.ObjectFactory.class,
     org.uddi.repl_v3.ObjectFactory.class,
"
juddi,bbf1cccd63a65593b023bb35a5f3da4576c9437f,"JUDDI-939 fixing a potential NPE with a more user friendly error message
",2015-10-28 19:16:08,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index 0c9e7d7..e7b83e5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -134,6 +134,9 @@
          */
         public synchronized ServiceLocator getServiceLocator(String clerkName) throws ConfigurationException {
                 UDDIClerk clerk = getClerk(clerkName);
+                if (clerk==null){
+                    throw new ConfigurationException(""could not locate the UDDI Clerk '"" + clerkName +""'."");
+                }
                 if (!serviceLocators.containsKey(clerk.getName())) {
                         ServiceLocator serviceLocator = new ServiceLocator(clerk, new URLLocalizerDefaultImpl(), properties);
                         serviceLocators.put(clerk.getName(), serviceLocator);
"
juddi,0c3ac4f1e2fa7c6fb5b1f63bff26734cd6069d70,"JUDDI-938 fixed
",2015-10-27 18:41:05,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
index b0fed48..18e202d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
@@ -61,7 +61,7 @@
  * the UDDIClientSubscriptionListenerService which is a WebService Endpoint brought
  * up by this cache.
  * 
- * The Cache also registers an MBean which allows the 
+ * The Cache also registers an MBean which allows for managing and monitoring via JMX.
  * 
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  * @see UDDIClientSubscriptionListenerImpl
"
juddi,5eda4a714c86584b24576a51a9995d72240fa55c,"JUDDI-926 fixed
",2015-02-02 22:14:13,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 10a63be..db8c970 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -460,6 +460,12 @@
                 throw new ConfigurationException(""One of the node elements in the client configuration needs to a 'isHomeJUDDI=\""true\""' attribute."");
         }
 
+        /**
+         * returns the named uddi node from config or throws if one is not found
+         * @param nodeName
+         * @return
+         * @throws ConfigurationException 
+         */
         public UDDINode getUDDINode(String nodeName) throws ConfigurationException {
                 if (!uddiNodes.containsKey(nodeName)) {
                         throw new ConfigurationException(""Node '"" + nodeName
@@ -578,7 +584,8 @@
          * adds a new node to the client configuration section. Don't forget to
          * call save to persist the changes
          *
-         * @param n
+         * @param node
+         * @throws org.apache.commons.configuration.ConfigurationException
          * @since 3.3
          */
         public void addUDDINode(UDDINode node) throws ConfigurationException {
@@ -592,7 +599,10 @@
                         log.info(""ClientName wasn't specified, I'll configure it with the defaults"");
                         node.setClientName(this.clientName);
                 }
-                this.uddiNodes.put(node.getClientName(), node);
+                if (node.getName() == null || """".equalsIgnoreCase(node.getName())) {
+                       throw new ConfigurationException(""Node Name wasn't specified. It cannot be null"");
+                }
+                this.uddiNodes.put(node.getName(), node);
 
         }
 
"
juddi,5eda4a714c86584b24576a51a9995d72240fa55c,"JUDDI-926 fixed
",2015-02-02 22:14:13,Alex,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 261968b..c76a7d1 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -420,7 +420,7 @@
 
         /**
          * gets a reference to the current juddi client config file. this is a
-         * live instance changes can be stored to disk, usually
+         * live instance changes can be stored to disk
          *
          * @return client config
          * @throws ConfigurationException g
@@ -449,7 +449,7 @@
                                         return true;
                                 }
                         }
-                } catch (ConfigurationException ex) {
+                } catch (Exception ex) {
                         log.error(ex);
                         return false;
                 }
"
juddi,09abb1b4e2d37c05e5adf866bd00393060b96e5a,"JUDDI-904 adding some additional checks for the tck tests
",2015-02-02 22:09:14,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index b328134..2111ecf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -2461,7 +2461,7 @@
 
                         String enc = config.getString(Property.JUDDI_REJECT_ENTITIES_WITH_INVALID_SIG_PREFIX + ""trustStorePassword"", """");
                         if (config.getBoolean(Property.JUDDI_REJECT_ENTITIES_WITH_INVALID_SIG_PREFIX + ""trustStorePassword[@isPasswordEncrypted]"", false)) {
-                                log.info(""trust password is encrypted, decrypting..."");
+                                log.debug(""trust password is encrypted, decrypting..."");
                                 
                                 String prov = config.getString(Property.JUDDI_REJECT_ENTITIES_WITH_INVALID_SIG_PREFIX + ""trustStorePassword[@cryptoProvider]"", """");
                                 try {
"
juddi,2a243727f055bfdf97dc37e1e3dffc8a09a40199,"JUDDI-734 new admin function added to rename a node. updates the database and config files
",2015-01-20 21:39:49,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 9a9f5e0..131f067 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -19,7 +19,6 @@
 import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 
@@ -39,10 +38,6 @@
 import org.apache.juddi.Registry;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.FindBusinessByCategoryQuery;
-import org.apache.juddi.query.util.FindQualifiers;
-import org.uddi.api_v3.CategoryBag;
-import org.uddi.api_v3.KeyedReference;
 
 /**
  * Handles the application level configuration for jUDDI. By default it first
@@ -64,6 +59,7 @@
 	private Configuration config;
 	private static AppConfig instance=null;
         private static URL loadedFrom=null;
+        private static XMLConfiguration propConfig=null;
         
         /**
          * Enables an administrator to identify the physical location of the configuration file from which it was loaded.<br>
@@ -84,6 +80,20 @@
 	{
 		loadConfiguration();
 	}
+        public static void setJuddiProperty(String key, Object val) throws ConfigurationException{
+                if (instance==null) {
+			instance = new AppConfig();
+		}
+                propConfig.setProperty(key, val);
+                propConfig.save();
+        }
+        
+        public static void saveConfiguration() throws ConfigurationException{
+                Configuration configuration = getConfiguration();
+                propConfig.save();
+        }
+       
+        
 	/**
 	 * Does the actual work of reading the configuration from System
 	 * Properties and/or juddiv3.xml file. When the juddiv3.xml
@@ -97,7 +107,7 @@
 		compositeConfig.addConfiguration(new SystemConfiguration());
 		//Properties from file
                 //changed 7-19-2013 AO for JUDDI-627
-		XMLConfiguration propConfig = null;
+		propConfig = null;
 	        final String filename = System.getProperty(JUDDI_CONFIGURATION_FILE_SYSTEM_PROPERTY);
 		if (filename != null) {
                   propConfig = new XMLConfiguration (filename); 
@@ -118,7 +128,7 @@
 		}
                 //Hey! this may break things
                 propConfig.setAutoSave(true);
-		
+
 		log.info(""Reading from jUDDI config file from:  "" + loadedFrom);
 		long refreshDelay = propConfig.getLong(Property.JUDDI_CONFIGURATION_RELOAD_DELAY, 1000l);
 		log.debug(""Setting refreshDelay to "" + refreshDelay);
@@ -194,6 +204,10 @@
 			// The node Id is defined as the business key of the business entity categorized as a node.  This entity is saved as part of the install.
 			// Only one business entity should be categorized as a node.
 			String nodeId = config.getString(Property.JUDDI_NODE_ID);
+                        if (nodeId==null)
+                                log.fatal(""Error! "" + Property.JUDDI_NODE_ID + "" is not defined in the config!"");
+                        else
+                                result.setProperty(Property.JUDDI_NODE_ID, nodeId);
 			/*
                         CategoryBag categoryBag = new CategoryBag();
 			KeyedReference keyedRef = new KeyedReference();
@@ -218,9 +232,13 @@
 			else
 				throw new ConfigurationException(""A node business entity was not found.  Please make sure that the application is properly installed."");
 			*/
-                        result.setProperty(Property.JUDDI_NODE_ROOT_BUSINESS, nodeId);
+                        String rootbiz=config.getString(Property.JUDDI_NODE_ROOT_BUSINESS);
+                        if (rootbiz==null)
+                                log.fatal(""Error! "" + Property.JUDDI_NODE_ROOT_BUSINESS + "" is not defined in the config"");
+                        else
+                                result.setProperty(Property.JUDDI_NODE_ROOT_BUSINESS, rootbiz);
                         
-                        //result.setProperty(Property.JUDDI_NODE_ROOT_BUSINESS, nodeId);
+                        
 			
 			tx.commit();
 			return result;
"
juddi,2a243727f055bfdf97dc37e1e3dffc8a09a40199,"JUDDI-734 new admin function added to rename a node. updates the database and config files
",2015-01-20 21:39:49,Alex,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
index 5cbd061..233c6ac 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
@@ -25,6 +25,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
+import javax.persistence.Query;
 import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
@@ -37,6 +42,7 @@
 import javax.xml.transform.stream.StreamSource;
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Holder;
+import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.logging.Log;
@@ -64,6 +70,10 @@
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.juddi.adminconsole.AES;
 import org.apache.juddi.adminconsole.resources.ResourceLoader;
+import org.apache.juddi.api.impl.JUDDIApiImpl;
+import org.apache.juddi.api.impl.UDDIInquiryImpl;
+import org.apache.juddi.api.impl.UDDIPublicationImpl;
+import org.apache.juddi.api.impl.UDDIReplicationImpl;
 import org.apache.juddi.api_v3.AdminSaveBusiness;
 import org.apache.juddi.api_v3.AdminSaveSubscriptionRequest;
 import org.apache.juddi.api_v3.AdminSaveSubscriptionResponse;
@@ -76,16 +86,25 @@
 import org.apache.juddi.api_v3.GetEntityHistoryMessageResponse;
 import org.apache.juddi.api_v3.NodeList;
 import org.apache.juddi.api_v3.SubscriptionWrapper;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.model.BindingTemplate;
 import org.apache.juddi.subscription.notify.SMTPNotifier;
 import org.uddi.api_v3.AuthToken;
+import org.uddi.api_v3.BusinessDetail;
+import org.uddi.api_v3.BusinessEntity;
+import org.uddi.api_v3.BusinessService;
+import org.uddi.api_v3.DeleteBusiness;
 import org.uddi.api_v3.DeleteTModel;
 import org.uddi.api_v3.DiscardAuthToken;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.FindBusiness;
 import org.uddi.api_v3.FindQualifiers;
 import org.uddi.api_v3.GetAuthToken;
+import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.Name;
+import org.uddi.api_v3.SaveBusiness;
 import org.uddi.repl_v3.ReplicationConfiguration;
 import org.uddi.sub_v3.Subscription;
 import org.uddi.sub_v3.SubscriptionResultsList;
@@ -333,74 +352,54 @@
                         String action = parameters.getParameter(""soapaction"");
                         if (action.equalsIgnoreCase(""adminDelete_tmodel"")) {
                                 return adminDelete_tmodel(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""delete_ClientSubscriptionInfo"")) {
+                        } else if (action.equalsIgnoreCase(""delete_ClientSubscriptionInfo"")) {
                                 return delete_ClientSubscriptionInfo(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""delete_publisher"")) {
+                        } else if (action.equalsIgnoreCase(""delete_publisher"")) {
                                 return delete_publisher(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""getAllPublisherDetail"")) {
+                        } else if (action.equalsIgnoreCase(""getAllPublisherDetail"")) {
                                 return getAllPublisherDetail(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_publisherDetail"")) {
+                        } else if (action.equalsIgnoreCase(""get_publisherDetail"")) {
                                 return get_publisherDetail(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""invoke_SyncSubscription"")) {
+                        } else if (action.equalsIgnoreCase(""invoke_SyncSubscription"")) {
                                 return invoke_SyncSubscription(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""save_Clerk"")) {
+                        } else if (action.equalsIgnoreCase(""save_Clerk"")) {
                                 return save_Clerk(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""save_ClientSubscriptionInfo"")) {
+                        } else if (action.equalsIgnoreCase(""save_ClientSubscriptionInfo"")) {
                                 return save_ClientSubscriptionInfo(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""save_Node"")) {
+                        } else if (action.equalsIgnoreCase(""save_Node"")) {
                                 return save_Node(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""save_publisher"")) {
+                        } else if (action.equalsIgnoreCase(""save_publisher"")) {
                                 return save_publisher(parameters);
+                        } else if (action.equalsIgnoreCase(""send_EmailTest"")) {
+                                return sendTestEmail(parameters);
+                        } else if (action.equalsIgnoreCase(""get_AllNodes"")) {
+                                return getAllNodes(parameters);
+                        } else if (action.equalsIgnoreCase(""get_AllClerks"")) {
+                                return getAllClerks(parameters);
+                        } else if (action.equalsIgnoreCase(""delete_Node"")) {
+                                return deleteNode(parameters);
+                        } else if (action.equalsIgnoreCase(""delete_Clerk"")) {
+                                return deleteClerk(parameters);
+                        } else if (action.equalsIgnoreCase(""admin_DeleteSubscription"")) {
+                                return deleteSubscription(parameters);
+                        } else if (action.equalsIgnoreCase(""admin_SaveBusiness"")) {
+                                return adminSaveBusiness(parameters);
+                        } else if (action.equalsIgnoreCase(""admin_SaveTModel"")) {
+                                return adminSaveTmodel(parameters);
+                        } else if (action.equalsIgnoreCase(""get_AllClientSubscriptionInfo"")) {
+                                return getAllClientSubscriptionInfo(parameters);
+                        } else if (action.equalsIgnoreCase(""set_ReplicationNodes"")) {
+                                return setReplicationConfig(parameters);
+                        } else if (action.equalsIgnoreCase(""get_ReplicationNodes"")) {
+                                return getReplicationNodes(parameters);
+                        } else if (action.equalsIgnoreCase(""admin_SaveSubscription"")) {
+                                return adminSaveSubscription(parameters);
+                        } else if (action.equalsIgnoreCase(""get_EntityHistory"")) {
+                                return getEntityHistory(parameters);
+                        } else if (action.equalsIgnoreCase(""change_NodeID"")) {
+                                return change_NodeID(parameters);
                         }
 
-                        if (action.equalsIgnoreCase(""send_EmailTest"")) {
-                                return sendTestEmail(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_AllNodes"")) {
-                                return getAllNodes(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_AllClerks"")) {
-                                return getAllClerks(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""delete_Node"")) {
-                                return deleteNode(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""delete_Clerk"")) {
-                                return deleteClerk(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""admin_DeleteSubscription"")) {
-                                return deleteSubscription(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""admin_SaveBusiness"")) {
-                                return adminSaveBusiness(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""admin_SaveTModel"")) {
-                                return adminSaveTmodel(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_AllClientSubscriptionInfo"")) {
-                                return getAllClientSubscriptionInfo(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""set_ReplicationNodes"")) {
-                                return setReplicationConfig(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_ReplicationNodes"")) {
-                                return getReplicationNodes(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""admin_SaveSubscription"")) {
-                                return adminSaveSubscription(parameters);
-                        }
-                        if (action.equalsIgnoreCase(""get_EntityHistory"")) {
-                                return getEntityHistory(parameters);
-                        }
                 } catch (Exception ex) {
                         return ""Error!"" + HandleException(ex);
                 }
@@ -812,6 +811,104 @@
                 return StringEscapeUtils.escapeHtml(sw.toString());
         }
 
+        private String change_NodeID(HttpServletRequest parameters) {
+                //check replication config
+
+                EntityManager em = PersistenceManager.getEntityManager();
+                EntityTransaction tx = em.getTransaction();
+
+                try {
+
+                        ReplicationConfiguration replicationNodes = new JUDDIApiImpl().getReplicationNodes(GetToken());
+                        if (replicationNodes.getOperator().size() > 1) {
+                                throw new Exception(""Replication is configured with "" + replicationNodes.getOperator() + "" nodes. Node rename aborted"");
+                        }
+                        Configuration configuration = AppConfig.getConfiguration();
+                        //this is going to break a few design rules.
+                        String currentnode = configuration.getString(Property.JUDDI_NODE_ID);
+                        String newnode = parameters.getParameter(""change_NodeIDKey"");
+                        if (newnode==null)
+                                throw new Exception(""The new node id was not specified"");
+                        newnode = newnode.trim();
+                        newnode=newnode.toLowerCase();
+                        log.warn(""AUDIT - Renaming Node ID from "" + currentnode + "" to "" + newnode);
+
+                        UDDIPublicationImpl pub = new UDDIPublicationImpl();
+                        UDDIInquiryImpl inquire = new UDDIInquiryImpl();
+
+                        GetBusinessDetail gbd = new GetBusinessDetail();
+                        gbd.setAuthInfo(GetToken());
+                        gbd.getBusinessKey().add(newnode);
+                        BusinessDetail businessDetail = null;
+                        try {
+                                businessDetail = inquire.getBusinessDetail(gbd);
+                        } catch (Exception ex) {
+                                //business doesn't exist
+                        }
+                        if (businessDetail == null || businessDetail.getBusinessEntity().isEmpty()) {
+                                //copy the existing Root Node and rekey it with the new key
+                                //incase the destination key generator is valid, we'll abort.
+                                gbd.getBusinessKey().clear();
+                                gbd.getBusinessKey().add(AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ROOT_BUSINESS));
+                                businessDetail = inquire.getBusinessDetail(gbd);
+                                BusinessEntity get = businessDetail.getBusinessEntity().get(0);
+                                get.setBusinessKey(newnode);
+                                get.getSignature().clear();
+                                if (get.getBusinessServices() != null) {
+                                        for (BusinessService bs : get.getBusinessServices().getBusinessService()) {
+                                                bs.setBusinessKey(newnode);
+                                                bs.getSignature().clear();
+                                                //we also need to rekey all of the services and bindings wait do we?
+                                                //bs.setServiceKey(bs.getServiceKey());
+                                        }
+                                }
+                                SaveBusiness sb = new SaveBusiness();
+                                sb.setAuthInfo(GetToken());
+                                sb.getBusinessEntity().add(get);
+                                //if there's something wrong with the new key, this will throw
+                                BusinessDetail saveBusiness = pub.saveBusiness(sb);
+                                newnode = saveBusiness.getBusinessEntity().get(0).getBusinessKey();
+                        }
+
+                        tx.begin();
+                        //rekey all entities with the new node id
+                        Query createQuery = em.createQuery(""Update UddiEntity ue set ue.nodeId=:node where ue.nodeId=:oldnode"");
+                        createQuery.setParameter(""node"", newnode);
+                        createQuery.setParameter(""oldnode"", currentnode);
+                        int records = createQuery.executeUpdate();
+                        //rekey all the existing change records with the new node id
+                        createQuery = em.createQuery(""Update ChangeRecord ue set ue.nodeID=:node where ue.nodeID=:oldnode"");
+                        createQuery.setParameter(""node"", newnode);
+                        createQuery.setParameter(""oldnode"", currentnode);
+                        records += createQuery.executeUpdate();
+
+                        //rekey is_replaced_by references? nah
+                        tx.commit();
+                        try{
+                                DeleteBusiness db = new DeleteBusiness();
+                                db.setAuthInfo(GetToken());
+                                db.getBusinessKey().add(currentnode);
+                                pub.deleteBusiness(db);
+                        }
+                        catch (Exception ex){
+                                log.warn(""Node id change error: "", ex);
+                        }
+                        
+                        //finally update the xml config and resave it
+                        AppConfig.setJuddiProperty(Property.JUDDI_NODE_ID, newnode);
+                        AppConfig.setJuddiProperty(Property.JUDDI_NODE_ROOT_BUSINESS, newnode);
+
+                        return ""Sucess, Records update: "" + records + "" current node id is now "" + AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID);
+                } catch (Exception ex) {
+                        return HandleException(ex);
+                } finally {
+                        if (tx.isActive()) {
+                                tx.rollback();
+                        }
+                        em.close();
+                }
+        }
+
         public enum AuthStyle {
 
                 /**
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
index 291f603..dc00628 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
@@ -124,12 +124,15 @@
                 Set<String> validators = new HashSet<String>();
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
+                //for each key to process
                 try {
                         while (iterator.hasNext()) {
 
                                 String key = iterator.next();
+                                //find out if it needs to be validated
                                 Tmodel find = em.find(org.apache.juddi.model.Tmodel.class, key);
                                 if (find != null) {
+                                        //if it is, added it to the list
                                         if (ContainsValidatedKey(find, UDDIConstants.IS_VALIDATED_BY)) {
                                                 validators.add(key);
                                         }
@@ -158,6 +161,7 @@
                         } else {
                                 try {
                                         vsv = (ValueSetValidator) Class.forName(clazz).newInstance();
+                                        logger.info(""translated "" + tmodelkey + "" to class "" + clazz);
                                         vsv.validateValuesBindingTemplate(body.getBindingTemplate(), """");
                                         vsv.validateValuesBusinessEntity(body.getBusinessEntity());
                                         vsv.validateValuesBusinessService(body.getBusinessService(), """");
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 3bf5b54..b328134 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -26,8 +26,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateValuesFromWebService.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateValuesFromWebService.java
index 8c48298..1662a9f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateValuesFromWebService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateValuesFromWebService.java
@@ -82,6 +82,7 @@
                 {
                         log.warn(""Unable to figure out how to use the URL "" + url  + "" as a Value Set Validation Service transport mechanism."");
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidurl"", url));
+                        throw x;
                 }
                 
                 return vsv;
@@ -97,7 +98,8 @@
                 try {
                         DispositionReport validateValues = vsv.validateValues(req);
                 } catch (Exception ex) {
-                        log.warn(ex);
+                        log.warn(ex.getMessage());
+                        log.debug(ex.getMessage(),ex);
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ex.getMessage()));
                         throw x;
                 }
@@ -111,7 +113,8 @@
                 try {
                         DispositionReport validateValues = vsv.validateValues(req);
                 } catch (Exception ex) {
-                        log.warn(ex);
+                        log.warn(ex.getMessage());
+                        log.debug(ex.getMessage(),ex);
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ex.getMessage()));
                         throw x;
                 }
@@ -125,7 +128,8 @@
                 try {
                         DispositionReport validateValues = vsv.validateValues(req);
                 } catch (Exception ex) {
-                        log.warn(ex);
+                        log.warn(ex.getMessage());
+                        log.debug(ex.getMessage(),ex);
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ex.getMessage()));
                         throw x;
                 }
@@ -140,7 +144,8 @@
                 try {
                         DispositionReport validateValues = vsv.validateValues(req);
                 } catch (Exception ex) {
-                        log.warn(ex);
+                        log.warn(ex.getMessage());
+                        log.debug(ex.getMessage(),ex);
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ex.getMessage()));
                         throw x;
                 }
@@ -153,7 +158,8 @@
                 try {
                         DispositionReport validateValues = vsv.validateValues(req);
                 } catch (Exception ex) {
-                        log.warn(ex);
+                        log.warn(ex.getMessage());
+                        log.debug(ex.getMessage(),ex);
                         ValueNotAllowedException x = new ValueNotAllowedException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ex.getMessage()));
                         throw x;
                 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/AbstractSimpleValidator.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/AbstractSimpleValidator.java
index 4a23900..301719a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/AbstractSimpleValidator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/AbstractSimpleValidator.java
@@ -30,14 +30,18 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
- * A simple base class for the validator interface that lets you define a simple set of allowed values. 
- * All other values will be rejected. Valid values apply to all UDDI elements
+ * A simple base class for the validator interface that lets you define a simple
+ * set of allowed values. All other values will be rejected. Valid values apply
+ * to all UDDI elements
+ *
  * @author Alex O'Ree
  * @since 3.2.1
- * 
+ *
  */
 public abstract class AbstractSimpleValidator implements ValueSetValidator {
 
+        public abstract String getMyKey();
+
         @Override
         public void validateValuesBindingTemplate(List<BindingTemplate> items, String xpath) throws DispositionReportFaultMessage {
                 if (items == null) {
@@ -63,7 +67,7 @@
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
                                 validatedValuesKeyRef(items.get(i).getCategoryBag().getKeyedReference(), ""businessEntity("" + i + "").categoryBag."");
-                                validatedValuesKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), ""businessEntity("" + i + "").categoryBag."");
+                                validatedValuesKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), ""businessEntity("" + i + "").categoryBagGroup."");
                         }
                         if (items.get(i).getIdentifierBag() != null) {
                                 validatedValuesKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), ""businessEntity("" + i + "").identifierBag."");
@@ -85,7 +89,7 @@
                                 validatedValuesKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), xpath + ""businessService("" + i + "").categoryBag."");
                         }
                         if (items.get(i).getBindingTemplates() != null) {
-                                validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
+                                validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "")."");
                         }
                 }
         }
@@ -108,19 +112,25 @@
                 if (items == null) {
                         return;
                 }
+                //StringBuilder badvalues=new StringBuilder();
                 String err = """";
                 for (int i = 0; i < items.size(); i++) {
-                        List<String> validValues = getValidValues();
-                        if (validValues != null) {
+                        if (items.get(i).getTModelKey().equalsIgnoreCase(getMyKey())) {
+                                List<String> validValues = getValidValues();
+                                if (validValues != null) {
                                 //ok we have some work to do
-                                boolean valid = false;
-                                for (int k = 0; k < validValues.size(); k++) {
-                                        if (validValues.get(k).equals(items.get(i).getKeyValue())) {
-                                                valid = true;
+                                        //boolean valid = false;
+                                        boolean localfound = false;
+                                        for (int k = 0; k < validValues.size(); k++) {
+                                                if (validValues.get(k).equals(items.get(i).getKeyValue())) {
+                                                        //           valid = true;
+                                                        localfound = true;
+                                                }
                                         }
-                                }
-                                if (!valid) {
-                                        err += xpath + ""keyedReference("" + i + "") "";
+                                        if (!localfound) {
+                                                //badvalues.append(items.get(i).getKeyValue()).append("" "");
+                                                err += xpath + ""keyedReference("" + i + "")="" + items.get(i).getKeyValue() + "" "";
+                                        }
                                 }
                         }
                 }
@@ -166,13 +176,9 @@
                 if (items == null) {
                         return;
                 }
-                String err = """";
                 for (int i = 0; i < items.size(); i++) {
                         validateKeyNotPresentKeyRef(items.get(i), key, itemtype);
                 }
-                if (err.length() > 0) {
-
-                }
         }
 
         public static void validateKeyNotPresentKeyRef(KeyedReference item, String key, String itemtype) throws DispositionReportFaultMessage {
@@ -180,7 +186,7 @@
                         return;
                 }
                 if (key.equalsIgnoreCase(item.getTModelKey())) {
-                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""key "" + key + "" not allowed on "" + itemtype) );
+                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""key "" + key + "" not allowed on "" + itemtype));
                 }
         }
 
@@ -200,10 +206,11 @@
                 StringBuilder sb = new StringBuilder();
                 sb.append("" Valid Values:["");
                 List<String> validValues = getValidValues();
-                for (int i=0; i < validValues.size(); i++){
+                for (int i = 0; i < validValues.size(); i++) {
                         sb.append(validValues.get(i));
-                        if (i+1< validValues.size())
+                        if (i + 1 < validValues.size()) {
                                 sb.append("","");
+                        }
                 }
                 sb.append(""]"");
                 return sb.toString();
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
index a973936..b56d39c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationderivedfrom.java
@@ -74,7 +74,9 @@
  */
 public class Uddiuddiorgcategorizationderivedfrom implements ValueSetValidator {
 
-        public static final String key = ""uddi:uddi.org:categorization:derivedfrom"";
+        public String getMyKey() {
+                return ""uddi:uddi.org:categorization:derivedfrom"";
+        }
 
         @Override
         public void validateValuesBindingTemplate(List<BindingTemplate> items, String xpath) throws DispositionReportFaultMessage {
@@ -84,14 +86,15 @@
 
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""binding"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""binding"");
                         }
                         if (items.get(i).getTModelInstanceDetails() != null) {
                                 for (int k = 0; k < items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().size(); k++) {
-                                        if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) 
-                                        if (key.equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
-                                                throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
+                                        if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
+                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
+                                                }
                                         }
                                 }
                         }
@@ -105,11 +108,11 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""business"");
                         }
                         if (items.get(i).getIdentifierBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""business"");
                         }
                         if (items.get(i).getBusinessServices() != null) {
                                 validateValuesBusinessService(items.get(i).getBusinessServices().getBusinessService(), ""businessEntity("" + i + "")."");
@@ -124,8 +127,8 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""service"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""service"");
                         }
                         if (items.get(i).getBindingTemplates() != null) {
                                 validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
@@ -139,7 +142,7 @@
                         return;
                 }
                 for (int i = 0; i < items.size(); i++) {
-                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), key, ""publisherAssertion"");
+                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), getMyKey(), ""publisherAssertion"");
                 }
         }
 
@@ -174,7 +177,7 @@
                         return;
                 }
                 for (int k = 0; k < tModelInstanceInfo.size(); k++) {
-                        if (key.equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
+                        if (getMyKey().equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on tModel instance info""));
                         }
                 }
@@ -191,7 +194,7 @@
                         for (int i = 0; i < items.size(); i++) {
                                 if (items.get(i).getCategoryBag() != null) {
                                         for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //TODO look up value
                                                         Tmodel find = em.find(org.apache.juddi.model.Tmodel.class, items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue());
                                                         if (find == null) {
@@ -201,7 +204,7 @@
                                         }
                                 }
                                 if (items.get(i).getIdentifierBag() != null) {
-                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), key, ""tmodel identbag"");
+                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), getMyKey(), ""tmodel identbag"");
                                 }
                         }
                 } catch (DispositionReportFaultMessage d) {
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationentitykeyvalues.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationentitykeyvalues.java
index 50c9da0..170027f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationentitykeyvalues.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationentitykeyvalues.java
@@ -85,4 +85,9 @@
                 return ret;
         }
 
+        @Override
+        public String getMyKey() {
+                return ""uddi:uddi.org:categorization:entitykeyvalues"";
+        }
+
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationnodes.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationnodes.java
index 8c10cc7..a0efefa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationnodes.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationnodes.java
@@ -51,6 +51,7 @@
  */
 public class Uddiuddiorgcategorizationnodes extends AbstractSimpleValidator {
 
+        
         @Override
         public List<String> getValidValues() {
                 List<String> ret = new ArrayList<String>();
@@ -58,4 +59,9 @@
                 return ret;
         }
 
+        @Override
+        public String getMyKey() {
+                return ""uddi:uddi.org:categorization:nodes"";
+        }
+
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationowningbusiness.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationowningbusiness.java
index fb05e08..2c6b1ba 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationowningbusiness.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationowningbusiness.java
@@ -15,19 +15,16 @@
  */
 package org.apache.juddi.validation.vsv;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.model.Tmodel;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidValueException;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
-import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelInstanceInfo;
@@ -57,7 +54,9 @@
  */
 public class Uddiuddiorgcategorizationowningbusiness implements ValueSetValidator {
 
-        public static final String key = ""uddi:uddi.org:categorization:owningbusiness"";
+        public String getMyKey() {
+                return ""uddi:uddi.org:categorization:owningbusiness"";
+        }
 
         @Override
         public void validateValuesBindingTemplate(List<BindingTemplate> items, String xpath) throws DispositionReportFaultMessage {
@@ -67,14 +66,15 @@
 
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""binding"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""binding"");
                         }
                         if (items.get(i).getTModelInstanceDetails() != null) {
                                 for (int k = 0; k < items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().size(); k++) {
-                                        if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) 
-                                        if (key.equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
-                                                throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
+                                        if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
+                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
+                                                }
                                         }
                                 }
                         }
@@ -88,11 +88,11 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""business"");
                         }
                         if (items.get(i).getIdentifierBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""business"");
                         }
                         if (items.get(i).getBusinessServices() != null) {
                                 validateValuesBusinessService(items.get(i).getBusinessServices().getBusinessService(), ""businessEntity("" + i + "")."");
@@ -107,8 +107,8 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""service"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""service"");
                         }
                         if (items.get(i).getBindingTemplates() != null) {
                                 validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
@@ -122,7 +122,7 @@
                         return;
                 }
                 for (int i = 0; i < items.size(); i++) {
-                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), key, ""publisherAssertion"");
+                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), getMyKey(), ""publisherAssertion"");
                 }
         }
 
@@ -132,7 +132,7 @@
                         return;
                 }
                 for (int k = 0; k < tModelInstanceInfo.size(); k++) {
-                        if (key.equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
+                        if (getMyKey().equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on tModel instance info""));
                         }
                 }
@@ -149,7 +149,7 @@
                         for (int i = 0; i < items.size(); i++) {
                                 if (items.get(i).getCategoryBag() != null) {
                                         for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //The content of keyValue in keyedReferences that refers to this tModel must be a businessKey. 
                                                         //the referred-to businessEntity must exist, and it must have been published by the same publisher.
                                                         org.apache.juddi.model.BusinessEntity find = em.find(org.apache.juddi.model.BusinessEntity.class, items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue());
@@ -172,7 +172,7 @@
                                         }
                                 }
                                 if (items.get(i).getIdentifierBag() != null) {
-                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), key, ""tmodel identbag"");
+                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), getMyKey(), ""tmodel identbag"");
                                 }
                         }
                 } catch (DispositionReportFaultMessage d) {
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationtypes.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationtypes.java
index 1933359..a2e1a7d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationtypes.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationtypes.java
@@ -895,7 +895,7 @@
                                 for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
                                         if (items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey() != null) {
                                                 if (NotAllowedOnBindings.containsKey(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey().toLowerCase())) {
-                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Value ["" + items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
+                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", xpath+""("" + i + "").catbag.keyedReferences("" +k +"").tModelKey "" + ""Value ["" + items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
                                                 }
                                         }
 
@@ -904,12 +904,12 @@
                                 for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReferenceGroup().size(); k++) {
                                         if (items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getTModelKey() != null) {
                                                 if (NotAllowedOnBindings.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getTModelKey().toLowerCase())) {
-                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Value ["" + items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
+                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", xpath+""("" + i + "").catbag.keyedReferenceGroup("" +k +"").tModelKey "" +""Value ["" + items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
                                                 }
                                                 for (int j = 0; j < items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().size(); j++) {
                                                         if (items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey() != null) {
                                                                 if (NotAllowedOnBindings.containsKey(items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey().toLowerCase())) {
-                                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Value ["" + items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
+                                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", xpath+""("" + i + "").catbag.keyedReferenceGroup("" +k +"").keyedReference("" + j + "").tModel "" +""Value ["" + items.get(i).getCategoryBag().getKeyedReferenceGroup().get(k).getKeyedReference().get(j).getTModelKey() + ""] not allowed on bindingtemplates for key "" + key));
                                                                 }
                                                         }
                                                 }
@@ -921,7 +921,7 @@
                                 for (int k = 0; k < items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().size(); k++) {
                                         if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) {
                                                 if (key.equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
-                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", key + "" is not allowed on tModelInstanceInfos""));
+                                                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", xpath+""tModelInstanceDetails("" + k +"").tModelKey "" + key + "" is not allowed on tModelInstanceInfos""));
                                                 }
                                         }
                                 }
@@ -956,7 +956,7 @@
 
                         }
                         if (items.get(i).getBindingTemplates() != null) {
-                                validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
+                                validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + ""businessService("" + i + "").bindingTemplates."");
                         }
                 }
         }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationvalidatedby.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationvalidatedby.java
index 9853c55..54094b8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationvalidatedby.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgcategorizationvalidatedby.java
@@ -20,13 +20,11 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.model.Tmodel;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidValueException;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
-import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelInstanceInfo;
@@ -69,8 +67,10 @@
  */
 public class Uddiuddiorgcategorizationvalidatedby implements ValueSetValidator{
 
-               public static final String key = ""uddi:uddi.org:categorization:validatedby"";
-
+         
+        public String getKey(){
+                return ""uddi:uddi.org:categorization:validatedby"";
+        }
         @Override
         public void validateValuesBindingTemplate(List<BindingTemplate> items, String xpath) throws DispositionReportFaultMessage {
                 if (items == null) {
@@ -79,13 +79,13 @@
 
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""binding"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getKey(), ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getKey(), ""binding"");
                         }
                         if (items.get(i).getTModelInstanceDetails() != null) {
                                 for (int k = 0; k < items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().size(); k++) {
                                         if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) 
-                                        if (key.equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
+                                        if (getKey().equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
                                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
                                         }
                                 }
@@ -100,11 +100,11 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getKey(), ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getKey(), ""business"");
                         }
                         if (items.get(i).getIdentifierBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""business"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getKey(), ""business"");
                         }
                         if (items.get(i).getBusinessServices() != null) {
                                 validateValuesBusinessService(items.get(i).getBusinessServices().getBusinessService(), ""businessEntity("" + i + "")."");
@@ -119,8 +119,8 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""service"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getKey(), ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getKey(), ""service"");
                         }
                         if (items.get(i).getBindingTemplates() != null) {
                                 validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
@@ -134,42 +134,18 @@
                         return;
                 }
                 for (int i = 0; i < items.size(); i++) {
-                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), key, ""publisherAssertion"");
+                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), getKey(), ""publisherAssertion"");
                 }
         }
 
-        private void validatedValuesKeyRef(List<KeyedReference> items, String xpath) throws DispositionReportFaultMessage {
-                if (items == null) {
-                        return;
-                }
-                String err = """";
-                for (int i = 0; i < items.size(); i++) {
-                        List<String> validValues = getValidValues();
-                        if (validValues != null) {
-                                //ok we have some work to do
-                                boolean valid = false;
-                                for (int k = 0; k < validValues.size(); k++) {
-                                        if (validValues.get(i).equals(items.get(i).getKeyValue())) {
-                                                valid = true;
-                                        }
-                                }
-                                if (!valid) {
-                                        err += xpath + ""keyedReference("" + i + "") "";
-                                }
-                        }
-                }
-                if (err.length() > 0) {
-                        throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", err));
-                }
-        }
-
+      
         @Override
         public void validateTmodelInstanceDetails(List<TModelInstanceInfo> tModelInstanceInfo, String xpath) throws DispositionReportFaultMessage {
                 if (tModelInstanceInfo == null) {
                         return;
                 }
                 for (int k = 0; k < tModelInstanceInfo.size(); k++) {
-                        if (key.equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
+                        if (getKey().equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on tModel instance info""));
                         }
                 }
@@ -186,7 +162,7 @@
                         for (int i = 0; i < items.size(); i++) {
                                 if (items.get(i).getCategoryBag() != null) {
                                         for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getKey().equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
                                                        
                                                         org.apache.juddi.model.BindingTemplate find = em.find(org.apache.juddi.model.BindingTemplate.class, items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue());
                                                         if (find == null) {
@@ -196,7 +172,7 @@
                                         }
                                 }
                                 if (items.get(i).getIdentifierBag() != null) {
-                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), key, ""tmodel identbag"");
+                                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getIdentifierBag().getKeyedReference(), getKey(), ""tmodel identbag"");
                                 }
                         }
                 } catch (DispositionReportFaultMessage d) {
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
index 9fbed12..7d841d6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgidentifierisreplacedby.java
@@ -171,7 +171,9 @@
  */
 public class Uddiuddiorgidentifierisreplacedby implements ValueSetValidator {
 
-        public static final String key = ""uddi:uddi.org:identifier:isreplacedby"";
+        public String getMyKey(){
+                return ""uddi:uddi.org:identifier:isreplacedby"";
+        }
 
         @Override
         public void validateValuesBindingTemplate(List<BindingTemplate> items, String xpath) throws DispositionReportFaultMessage {
@@ -181,13 +183,13 @@
 
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""binding"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""binding"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""binding"");
                         }
                         if (items.get(i).getTModelInstanceDetails() != null) {
                                 for (int k = 0; k < items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().size(); k++) {
                                         if (items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k) != null) {
-                                                if (key.equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getTModelInstanceDetails().getTModelInstanceInfo().get(k).getTModelKey())) {
                                                         throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on binding templates""));
                                                 }
                                         }
@@ -209,7 +211,7 @@
                         for (int i = 0; i < items.size(); i++) {
                                 if (items.get(i).getCategoryBag() != null) {
                                         for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //reference to self; this is invalid
                                                         if (items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey().equalsIgnoreCase(items.get(i).getBusinessKey())) {
                                                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Referenced key "" + items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue() + "" can't reference itself""));
@@ -233,7 +235,7 @@
                                 }
                                 if (items.get(i).getIdentifierBag() != null) {
                                         for (int k = 0; k < items.get(i).getIdentifierBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //reference to self; this is invalid
                                                         if (items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey().equalsIgnoreCase(items.get(i).getBusinessKey())) {
                                                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Referenced key "" + items.get(i).getIdentifierBag().getKeyedReference().get(k).getKeyValue() + "" can't reference itself""));
@@ -274,8 +276,8 @@
                 }
                 for (int i = 0; i < items.size(); i++) {
                         if (items.get(i).getCategoryBag() != null) {
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), key, ""service"");
-                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), key, ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getCategoryBag().getKeyedReference(), getMyKey(), ""service"");
+                                AbstractSimpleValidator.validateKeyNotPresentKeyRefGrp(items.get(i).getCategoryBag().getKeyedReferenceGroup(), getMyKey(), ""service"");
                         }
                         if (items.get(i).getBindingTemplates() != null) {
                                 validateValuesBindingTemplate(items.get(i).getBindingTemplates().getBindingTemplate(), xpath + xpath + ""businessService("" + i + "").identifierBag."");
@@ -289,7 +291,7 @@
                         return;
                 }
                 for (int i = 0; i < items.size(); i++) {
-                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), key, ""publisherAssertion"");
+                        AbstractSimpleValidator.validateKeyNotPresentKeyRef(items.get(i).getKeyedReference(), getMyKey(), ""publisherAssertion"");
                 }
         }
 
@@ -324,7 +326,7 @@
                         return;
                 }
                 for (int k = 0; k < tModelInstanceInfo.size(); k++) {
-                        if (key.equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
+                        if (getMyKey().equalsIgnoreCase(tModelInstanceInfo.get(k).getTModelKey())) {
                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""not allowed on tModel instance info""));
                         }
                 }
@@ -344,7 +346,7 @@
                         for (int i = 0; i < items.size(); i++) {
                                 if (items.get(i).getCategoryBag() != null) {
                                         for (int k = 0; k < items.get(i).getCategoryBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //reference to self; this is invalid
                                                         if (items.get(i).getCategoryBag().getKeyedReference().get(k).getTModelKey().equalsIgnoreCase(items.get(i).getTModelKey())) {
                                                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Referenced key "" + items.get(i).getCategoryBag().getKeyedReference().get(k).getKeyValue() + "" can't reference itself""));
@@ -370,7 +372,7 @@
                                 }
                                 if (items.get(i).getIdentifierBag() != null) {
                                         for (int k = 0; k < items.get(i).getIdentifierBag().getKeyedReference().size(); k++) {
-                                                if (key.equalsIgnoreCase(items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey())) {
+                                                if (getMyKey().equalsIgnoreCase(items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey())) {
                                                         //reference to self; this is invalid
                                                         if (items.get(i).getIdentifierBag().getKeyedReference().get(k).getTModelKey().equalsIgnoreCase(items.get(i).getTModelKey())) {
                                                                 throw new InvalidValueException(new ErrorMessage(""errors.valuesetvalidation.invalidcontent"", ""Referenced key "" + items.get(i).getIdentifierBag().getKeyedReference().get(k).getKeyValue() + "" can't reference itself""));
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgrelationships.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgrelationships.java
index 2748bba..25c2580 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgrelationships.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uddiuddiorgrelationships.java
@@ -50,6 +50,11 @@
                 ret.add(""peer-peer"");
                 return ret;
         }
+
+        @Override
+        public String getMyKey() {
+                return ""uddi:uddi.org:relationships"";
+        }
         
 
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid25b22e3e3dfa3024b02a3438b9050b59.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid25b22e3e3dfa3024b02a3438b9050b59.java
index 11db5ab..987d2e9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid25b22e3e3dfa3024b02a3438b9050b59.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid25b22e3e3dfa3024b02a3438b9050b59.java
@@ -22,4 +22,8 @@
  */
 public class Uuid25b22e3e3dfa3024b02a3438b9050b59 extends Uddiuddiorgcategorizationvalidatedby{
 
+        @Override
+        public String getKey(){
+                return ""uuid:25b22e3e-3dfa-3024-b02a-3438b9050b59"";
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid327a56f032994461bc235cd513e95c55.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid327a56f032994461bc235cd513e95c55.java
index 358dc83..c96e9e3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid327a56f032994461bc235cd513e95c55.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid327a56f032994461bc235cd513e95c55.java
@@ -21,5 +21,8 @@
  * @author Alex O'Ree
  */
 public class Uuid327a56f032994461bc235cd513e95c55 extends Uddiuddiorgcategorizationnodes{
-
+        @Override
+        public String getMyKey(){
+                return ""uuid:327A56F0-3299-4461-BC23-5CD513E95C55"".toLowerCase();
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid4064c0646d144f3589539652106476a9.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid4064c0646d144f3589539652106476a9.java
index fea9ef4..75d85f2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid4064c0646d144f3589539652106476a9.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid4064c0646d144f3589539652106476a9.java
@@ -17,9 +17,13 @@
 package org.apache.juddi.validation.vsv;
 
 /**
- *
+ * ownung business
  * @author Alex O'Ree
  */
 public class Uuid4064c0646d144f3589539652106476a9 extends Uddiuddiorgcategorizationowningbusiness {
+        @Override
+        public String getMyKey(){
+                return ""uuid:4064C064-6D14-4F35-8953-9652106476A9"".toLowerCase();
+        }
 
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid5678dd4ff95d35f99ea6f79a7dd64656.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid5678dd4ff95d35f99ea6f79a7dd64656.java
index e08407e..379ab54 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid5678dd4ff95d35f99ea6f79a7dd64656.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid5678dd4ff95d35f99ea6f79a7dd64656.java
@@ -17,9 +17,13 @@
 package org.apache.juddi.validation.vsv;
 
 /**
- *
+ *dervied from
  * @author Alex O'Ree
  */
 public class Uuid5678dd4ff95d35f99ea6f79a7dd64656 extends Uddiuddiorgcategorizationderivedfrom {
-
+        
+        @Override
+        public String getMyKey(){
+                return ""uuid:5678dd4f-f95d-35f9-9ea6-f79a7dd64656"";
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid807a2c6aee22470dadc7e0424a337c03.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid807a2c6aee22470dadc7e0424a337c03.java
index 55ed982..c09ddc8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid807a2c6aee22470dadc7e0424a337c03.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid807a2c6aee22470dadc7e0424a337c03.java
@@ -17,9 +17,12 @@
 package org.apache.juddi.validation.vsv;
 
 /**
- *
+ *relationships
  * @author Alex O'Ree
  */
 public class Uuid807a2c6aee22470dadc7e0424a337c03 extends Uddiuddiorgrelationships{
-
+        @Override
+        public String getMyKey(){
+                return ""uuid:807A2C6A-EE22-470D-ADC7-E0424A337C03"".toLowerCase();
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid916b87bf075639198eae97dfa325e5a4.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid916b87bf075639198eae97dfa325e5a4.java
index 60b339a..337deb0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid916b87bf075639198eae97dfa325e5a4.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuid916b87bf075639198eae97dfa325e5a4.java
@@ -22,4 +22,6 @@
  */
 public class Uuid916b87bf075639198eae97dfa325e5a4 extends Uddiuddiorgcategorizationentitykeyvalues {
 
+        @Override
+        public String getMyKey(){return ""uuid:916b87bf-0756-3919-8eae-97dfa325e5a4"";}
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuidc1acf26d967244049d7039b756e62ab4.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuidc1acf26d967244049d7039b756e62ab4.java
index d5ceeec..c053a7a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuidc1acf26d967244049d7039b756e62ab4.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuidc1acf26d967244049d7039b756e62ab4.java
@@ -21,5 +21,7 @@
  * @author Alex O'Ree
  */
 public class Uuidc1acf26d967244049d7039b756e62ab4 extends Uddiuddiorgcategorizationtypes {
-
+        public String getMyKey(){
+                return ""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"".toLowerCase();
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuide59ae32077a511d5b8980004ac49cc1e.java b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuide59ae32077a511d5b8980004ac49cc1e.java
index f18e385..ce663e1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuide59ae32077a511d5b8980004ac49cc1e.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/vsv/Uuide59ae32077a511d5b8980004ac49cc1e.java
@@ -17,9 +17,12 @@
 package org.apache.juddi.validation.vsv;
 
 /**
- *
+ *replaced by
  * @author Alex O'Ree
  */
 public class Uuide59ae32077a511d5b8980004ac49cc1e extends Uddiuddiorgidentifierisreplacedby {
-
+        @Override
+        public String getMyKey(){
+                return ""uuid:E59AE320-77A5-11D5-B898-0004AC49CC1E"".toLowerCase();
+        }
 }
"
juddi,8c5350d8f7c554f4826096791f94aaed7b4ebf7f,"JUDDI-922 fixed, note: API change
",2015-01-20 21:36:20,Alex,"diff --git a/juddi-examples/ValueSetValidator/src/main/java/org/apache/juddi/validation/vsv/Uddiwwwbobcomverifiedtmodel.java b/juddi-examples/ValueSetValidator/src/main/java/org/apache/juddi/validation/vsv/Uddiwwwbobcomverifiedtmodel.java
index cb79c0c..af12e33 100644
--- a/juddi-examples/ValueSetValidator/src/main/java/org/apache/juddi/validation/vsv/Uddiwwwbobcomverifiedtmodel.java
+++ b/juddi-examples/ValueSetValidator/src/main/java/org/apache/juddi/validation/vsv/Uddiwwwbobcomverifiedtmodel.java
@@ -32,4 +32,9 @@
                 return ret;
         }
 
+        @Override
+        public String getMyKey() {
+                return ""uddi:www.bob.com:verified-tmodel"";
+        }
+
 }
"
juddi,75f1a2b7d778c5ad349892d691cf1ab82bcfac67,"JUDDI-921 fixed
",2015-01-19 08:52:07,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
index d58bcd7..80f317b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/cryptor/DigSigUtil.java
@@ -110,6 +110,10 @@
                 this.map = config;
         }
 
+        /**
+         * Creates a new instance of the digital signature utility with no configuration options set.
+         * @throws CertificateException 
+         */
         public DigSigUtil() throws CertificateException {
                 cf = CertificateFactory.getInstance(""X.509"");
         }
@@ -407,13 +411,13 @@
                                 Node sig = childNodes.item(i);
                                 for (int k = 0; k < sig.getChildNodes().getLength(); k++) {
                                         //      System.out.println(sig.getChildNodes().item(k).getNamespaceURI() + "" "" + sig.getChildNodes().item(k).getNodeName());
-                                        if (sig.getChildNodes().item(k).getLocalName().equalsIgnoreCase(""KeyInfo"")) {
+                                        if (""KeyInfo"".equalsIgnoreCase(sig.getChildNodes().item(k).getLocalName())) {
                                                 //TODO figure out how to reference Subject DN, serial, thumbprint, etc
                                                 for (int j = 0; j < sig.getChildNodes().item(k).getChildNodes().getLength(); j++) {
-                                                        if (sig.getChildNodes().item(k).getChildNodes().item(j).getLocalName().equalsIgnoreCase(""X509Data"")) {
+                                                        if (""X509Data"".equalsIgnoreCase(sig.getChildNodes().item(k).getChildNodes().item(j).getLocalName())) {
                                                                 Node X509Data = sig.getChildNodes().item(k).getChildNodes().item(j);
                                                                 for (int x = 0; x < X509Data.getChildNodes().getLength(); x++) {
-                                                                        if (X509Data.getChildNodes().item(x).getLocalName().equalsIgnoreCase(""X509Certificate"")) {
+                                                                        if (""X509Certificate"".equalsIgnoreCase(X509Data.getChildNodes().item(x).getLocalName())) {
                                         //yay found it!
 
                                                                                 String c
"
juddi,2ba82c8ea43ed7e405dda8f4e3894d109ab89ca8,"JUDDI-913 fixed and tested
",2015-01-18 21:36:07,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index a62e1c6..0139497 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -25,6 +25,7 @@
 import javax.jws.WebService;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
+import javax.persistence.Query;
 import javax.xml.bind.JAXB;
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
@@ -43,9 +44,9 @@
 import org.apache.juddi.model.BusinessEntity;
 import org.apache.juddi.model.BusinessService;
 import org.apache.juddi.model.ChangeRecord;
+import org.apache.juddi.model.Signature;
 import org.apache.juddi.model.Tmodel;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.DeletePublisherAssertionByBusinessQuery;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
 import org.apache.juddi.query.FetchTModelsQuery;
 import org.apache.juddi.query.FindBusinessByPublisherQuery;
@@ -156,6 +157,9 @@
                                                 if (publisher.isOwner(existingPubAssertion.getBusinessEntityByToKey())) {
                                                         existingPubAssertion.setToCheck(""true"");
                                                 }
+                                                //it's also possible that the signatures have changed
+                                                removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
+                                                savePushliserAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), modelPubAssertion.getSignatures(), em);
 
                                                 em.merge(existingPubAssertion);
                                                 persistNewAssertion = false;
@@ -164,6 +168,7 @@
                                                 // Otherwise, it is a new relationship between these entities.  Remove the old one so the new one can be added.
                                                 // TODO: the model only seems to allow one assertion per two business (primary key is fromKey and toKey). Spec seems to imply as 
                                                 // many relationships as desired (the differentiator would be the keyedRef values).
+                                                removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
                                                 em.remove(existingPubAssertion);
                                                 changes.add(getChangeRecord_deletePublisherAssertion(apiPubAssertion, node, true, true, System.currentTimeMillis()));
                                         }
@@ -185,6 +190,8 @@
                                                 modelPubAssertion.setToCheck(""true"");
                                         }
                                         modelPubAssertion.setModified(new Date());
+                                         savePushliserAssertionSignatures(modelPubAssertion.getBusinessEntityByFromKey().getEntityKey(), modelPubAssertion.getBusinessEntityByToKey().getEntityKey(), modelPubAssertion.getSignatures(), em);
+
                                         em.persist(modelPubAssertion);
 
                                         changes.add(getChangeRecord_NewAssertion(apiPubAssertion, modelPubAssertion, node));
@@ -359,9 +366,15 @@
                                 }
                                 if (""false"".equalsIgnoreCase(existingPubAssertion.getToCheck())
                                         && ""false"".equalsIgnoreCase(existingPubAssertion.getFromCheck())) {
+                                        logger.info(""Publisher assertion updated database via replication"");
+                                        removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
                                         em.remove(existingPubAssertion);
                                 } else {
                                         existingPubAssertion.setModified(new Date());
+                                        logger.info(""Publisher assertion updated database via replication"");
+                                        removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
+                                        savePushliserAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(),
+                                                existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), modelPubAssertion.getSignatures(), em);
                                         em.persist(existingPubAssertion);
                                 }
 
@@ -419,11 +432,15 @@
                 }
                 if (""false"".equalsIgnoreCase(existingPubAssertion.getToCheck())
                         && ""false"".equalsIgnoreCase(existingPubAssertion.getFromCheck())) {
-                        logger.info(""!!!Deletion of publisher assertion from database via replication"");
+                        logger.info(""Deletion of publisher assertion from database via replication"");
+                        removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
                         em.remove(existingPubAssertion);
                 } else {
                         existingPubAssertion.setModified(new Date());
-                        logger.info(""!!!Publisher assertion update database via replication"");
+                        logger.info(""Publisher assertion updated database via replication"");
+                        removeExistingPublisherAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(), existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), em);
+                        savePushliserAssertionSignatures(existingPubAssertion.getBusinessEntityByFromKey().getEntityKey(),
+                                existingPubAssertion.getBusinessEntityByToKey().getEntityKey(), modelPubAssertion.getSignatures(), em);
                         em.persist(existingPubAssertion);
                 }
 
@@ -927,7 +944,7 @@
                         List<ChangeRecord> changes = new ArrayList<ChangeRecord>();
                         for (org.uddi.api_v3.TModel apiTModel : apiTModelList) {
 
-                               // Object obj=em.find( org.apache.juddi.model.Tmodel.class, apiTModel.getTModelKey());
+                                // Object obj=em.find( org.apache.juddi.model.Tmodel.class, apiTModel.getTModelKey());
                                 //just making changes to an existing tModel, no worries
                                 org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
 
@@ -940,14 +957,14 @@
                                 result.getTModel().add(apiTModel);
                                 changes.add(getChangeRecord(modelTModel, apiTModel, node));
                                 /*
-                                //TODO JUDDI-915
-                                if (obj != null) {
+                                 //TODO JUDDI-915
+                                 if (obj != null) {
 
-                                        changes.add(getChangeRecord(modelTModel, apiTModel, node));
-                                } else {
-                                        //special case for replication, must setup a new data conditional change record
-                                        changes.add(getChangeRecordConditional(modelTModel, apiTModel, node));
-                                }*/
+                                 changes.add(getChangeRecord(modelTModel, apiTModel, node));
+                                 } else {
+                                 //special case for replication, must setup a new data conditional change record
+                                 changes.add(getChangeRecordConditional(modelTModel, apiTModel, node));
+                                 }*/
 
                         }
 
@@ -1574,4 +1591,22 @@
                 return cr;
         }
 
+        private void removeExistingPublisherAssertionSignatures(String from, String to, EntityManager em) {
+                Query createQuery = em.createQuery(""delete from Signature pa where pa.publisherAssertionFromKey=:from and pa.publisherAssertionToKey=:to"");
+                createQuery.setParameter(""from"", from);
+                createQuery.setParameter(""to"", to);
+                createQuery.executeUpdate();
+        }
+
+        private void savePushliserAssertionSignatures(String from, String to, List<Signature> signatures, EntityManager em) {
+                if (signatures == null) {
+                        return;
+                }
+                for (Signature s : signatures) {
+                        s.setPublisherAssertionFromKey(from);
+                        s.setPublisherAssertionToKey(to);
+                        em.persist(s);
+                }
+        }
+
 }
"
juddi,2ba82c8ea43ed7e405dda8f4e3894d109ab89ca8,"JUDDI-913 fixed and tested
",2015-01-18 21:36:07,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 0648a02..1dd95a4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -1004,10 +1004,14 @@
                 }
                 if (!apiPubAssertion.getSignature().isEmpty())
                 {
-                      /*  modelPubAssertion.setSignatures(mapApiSignaturesToModelSignatures(apiPubAssertion.getSignature()));
+                        modelPubAssertion.setSignatures(mapApiSignaturesToModelSignatures(apiPubAssertion.getSignature()));
                         for (Signature s : modelPubAssertion.getSignatures())
-                                s.setPublisherAssertion(modelPubAssertion);
-                        */
+                        {        s.setPublisherAssertionFromKey(modelPubAssertion.getBusinessEntityByFromKey().getEntityKey());
+                                s.setPublisherAssertionToKey(modelPubAssertion.getBusinessEntityByToKey().getEntityKey());
+                                
+                        }
+                        
+                        
                 }
         }
 
"
juddi,2ba82c8ea43ed7e405dda8f4e3894d109ab89ca8,"JUDDI-913 fixed and tested
",2015-01-18 21:36:07,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 98d3ec9..f622097 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -1018,11 +1018,11 @@
                 keyedRef.setKeyName(modelPublisherAssertion.getKeyName());
                 keyedRef.setKeyValue(modelPublisherAssertion.getKeyValue());
 
-               /* if (modelPublisherAssertion.getSignatures()!=null &&
+                if (modelPublisherAssertion.getSignatures()!=null &&
                         !modelPublisherAssertion.getSignatures().isEmpty())
                 {
                         mapSignature(modelPublisherAssertion.getSignatures(), apiPublisherAssertion.getSignature());
-                }*/
+                }
                 apiPublisherAssertion.setKeyedReference(keyedRef);
                
         }
"
juddi,2ba82c8ea43ed7e405dda8f4e3894d109ab89ca8,"JUDDI-913 fixed and tested
",2015-01-18 21:36:07,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
index 3f9d592..c00269d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
@@ -28,7 +28,6 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
-import javax.persistence.OrderBy;
 import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
@@ -95,6 +94,8 @@
 	public void setId(PublisherAssertionId id) {
 		this.id = id;
 	}
+         
+        
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = ""to_key"", nullable = false, insertable = false, updatable = false)
 
@@ -170,13 +171,15 @@
                 return (this.id.equals(rhs.id));
         }
         
-        /*
+        
         @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
         public List<Signature> getSignatures() {
+                if (signatures==null)
+                        signatures=new ArrayList<Signature>();
                 return signatures;
         }
 
         public void setSignatures(List<Signature> signatures) {
                 this.signatures = signatures;
-        }*/
+        }
 }
"
juddi,2ba82c8ea43ed7e405dda8f4e3894d109ab89ca8,"JUDDI-913 fixed and tested
",2015-01-18 21:36:07,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Signature.java b/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
index 3b36265..856014a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Signature.java
@@ -24,7 +24,6 @@
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
-import javax.persistence.JoinColumns;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OrderBy;
@@ -50,7 +49,8 @@
     private ReplicationConfiguration replConfig;
     private Tmodel tmodel;
     private String xmlID;
-    private PublisherAssertion assertion;
+    private String assertionFromKey;
+    private String assertionToKey;
 
     @Id
     @GeneratedValue(strategy=GenerationType.AUTO)
@@ -72,18 +72,23 @@
         this.bindingTemplate = bindingTemplate;
     }
     
-    /*@ManyToOne
-    @JoinColumns({  
-        @JoinColumn(name = ""fromKey"", nullable = true),
-        @JoinColumn(name = ""toKey"", nullable = true)
-        })
-    public PublisherAssertion getPublisherAssertion() {
-        return assertion;
+    
+    
+    @Column(nullable = true, length = 255, name = ""passertionfrom"")
+    public String getPublisherAssertionFromKey() {
+        return assertionFromKey;
     }
 
-    public void setPublisherAssertion(PublisherAssertion item) {
-        this.assertion = item;
-    }*/
+    public void setPublisherAssertionFromKey(String item) {
+        this.assertionFromKey = item;
+    }
+    @Column(nullable = true, length = 255, name = ""passertionto"")
+    public String getPublisherAssertionToKey() {
+        return assertionFromKey;
+    }
+    public void setPublisherAssertionToKey(String item) {
+        this.assertionToKey = item;
+    }
  
     
      @ManyToOne
"
juddi,86d58ae417563ea973a970b76914352becb31fb8,"JUDDI-920 this should enable http based authentication
",2015-01-17 10:55:02,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 532d6eb..7a4c334 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -14,7 +14,6 @@
  * limitations under the License.
  *
  */
-
 package org.apache.juddi.api.impl;
 
 import java.util.Date;
@@ -36,163 +35,190 @@
 import org.apache.juddi.v3.error.AuthTokenRequiredException;
 import org.apache.juddi.v3.error.AuthTokenExpiredException;
 import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.UnknownUserException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
-/**Although this class is abstract, it provides token validation
+/**
+ * Although this class is abstract, it provides token validation
+ *
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
- * 
- * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a> - modified to include token expiration validation
+ *
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a> - modified to
+ * include token expiration validation
  */
 public abstract class AuthenticatedService {
-	public static final int AUTHTOKEN_ACTIVE = 1;
-	public static final int AUTHTOKEN_RETIRED = 0;
-	static final Log logger = LogFactory.getLog(AuthenticatedService.class);
+
+        public static final int AUTHTOKEN_ACTIVE = 1;
+        public static final int AUTHTOKEN_RETIRED = 0;
+        static final Log logger = LogFactory.getLog(AuthenticatedService.class);
         /**
          * the node id of this server instance, as loaded from the config file
          */
-	protected static String node = ""UNDEFINED_NODE_NAME"";
-        protected String baseUrlSSL=""UNDEFINED"";
-         protected String baseUrl=""UNDEFINED"";
-        
-        public AuthenticatedService(){
+        protected static String node = ""UNDEFINED_NODE_NAME"";
+        protected String baseUrlSSL = ""UNDEFINED"";
+        protected String baseUrl = ""UNDEFINED"";
+
+        public AuthenticatedService() {
                 try {
                         node = AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID, ""UNDEFINED_NODE_NAME"");
-                        node=node.trim();
-                        baseUrlSSL=AppConfig.getConfiguration().getString(Property.JUDDI_BASE_URL_SECURE, Property.DEFAULT_BASE_URL_SECURE);
-                        baseUrlSSL=AppConfig.getConfiguration().getString(Property.JUDDI_BASE_URL, Property.DEFAULT_BASE_URL);
+                        node = node.trim();
+                        baseUrlSSL = AppConfig.getConfiguration().getString(Property.JUDDI_BASE_URL_SECURE, Property.DEFAULT_BASE_URL_SECURE);
+                        baseUrlSSL = AppConfig.getConfiguration().getString(Property.JUDDI_BASE_URL, Property.DEFAULT_BASE_URL);
                 } catch (ConfigurationException ex) {
                         logger.fatal(null, ex);
                 }
         }
-        
-        
+
         @Resource
         protected WebServiceContext ctx;
-	public UddiEntityPublisher getEntityPublisher(EntityManager em, String authInfo) throws DispositionReportFaultMessage {
-		
-		if (authInfo == null || authInfo.length() == 0)
-			throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthRequired""));
-		
-		org.apache.juddi.model.AuthToken modelAuthToken = em.find(org.apache.juddi.model.AuthToken.class, authInfo);
-		if (modelAuthToken == null)
-			throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
-	
-		int allowedMinutesOfInactivity = 0;
-		try {
-			allowedMinutesOfInactivity = AppConfig.getConfiguration().getInt(Property.JUDDI_AUTH_TOKEN_TIMEOUT, 0);
-		} catch (ConfigurationException ce) {
-			logger.error(""Error reading property "" + Property.JUDDI_AUTH_TOKEN_EXPIRATION + "" from ""
-					+ ""the application's configuration. No automatic timeout token invalidation will occur. ""
-					+ ce.getMessage(), ce);
-		}
-		int maxMinutesOfAge = 0;
-		try {
-			maxMinutesOfAge = AppConfig.getConfiguration().getInt(Property.JUDDI_AUTH_TOKEN_EXPIRATION, 0);
-		} catch (ConfigurationException ce) {
-			logger.error(""Error reading property "" + Property.JUDDI_AUTH_TOKEN_EXPIRATION + "" from ""
-					+ ""the application's configuration. No automatic timeout token invalidation will occur. ""
-					+ ce.getMessage(), ce);
-		}
-		Date now = new Date();
-		// 0 or negative means token does not expire
-		if (allowedMinutesOfInactivity > 0) {
-			// expire tokens after # minutes of inactivity
-			// compare the time in milli-seconds
-			if (now.getTime() > modelAuthToken.getLastUsed().getTime() + allowedMinutesOfInactivity * 60000l) {
-				logger.info(""AUDIT: FAILTURE Token "" + modelAuthToken.getAuthToken() + "" expired due to inactivity ""+getRequestorsIPAddress());
-				modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
-			}
-		}
-		if (maxMinutesOfAge > 0) {
-			// expire tokens when max age is reached
-			// compare the time in milli-seconds
-			if (now.getTime() > modelAuthToken.getCreated().getTime()  + maxMinutesOfAge * 60000l) {
-                            
-				logger.info(""AUDIT: FAILURE - Token "" + modelAuthToken.getAuthorizedName() + "" expired due to old age "" + getRequestorsIPAddress());
-				modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
-			}
-		}
 
-		if (modelAuthToken.getTokenState() == AUTHTOKEN_RETIRED){
-                    
-			throw new AuthTokenExpiredException(new ErrorMessage(""errors.auth.AuthTokenExpired""));
+        public UddiEntityPublisher getEntityPublisher(EntityManager em, String authInfo) throws DispositionReportFaultMessage {
+                boolean useAuthInfo = true;
+                try {
+                        useAuthInfo = AppConfig.getConfiguration().getBoolean(Property.JUDDI_AUTHENTICATOR_USE_TOKEN, true);
+                } catch (ConfigurationException ex) {
+
                 }
-		if (ctx !=null){
-                    try{
-                        boolean check=true;
-                        try{
-                            check=AppConfig.getConfiguration().getBoolean(Property.JUDDI_AUTH_TOKEN_ENFORCE_SAME_IP, true);
+                if (useAuthInfo) {
+
+                        if (authInfo == null || authInfo.length() == 0) {
+                                throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthRequired""));
                         }
-                        catch (ConfigurationException ex){
-                            logger.warn(""Error loading config property "" + Property.JUDDI_AUTH_TOKEN_ENFORCE_SAME_IP + 
-                                    "" Enforcing Same IP for Auth Tokens will be enabled by default"", ex);
-                        }
-                        if (check){
-                            MessageContext mc = ctx.getMessageContext();
-                            HttpServletRequest req = null;
-                            if (mc!=null){
-                                req=(HttpServletRequest)mc.get(MessageContext.SERVLET_REQUEST); 
-                            }
-                            if (req!=null &&
-                                    modelAuthToken.getIPAddress()!=null &&
-                                    modelAuthToken.getIPAddress()!=null &&
-                                    !modelAuthToken.getIPAddress().equalsIgnoreCase(req.getRemoteAddr()))
-                            {
-                                modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
-                                logger.error(""AUDIT FAILURE - Security Alert - Attempt to use issued auth token from a different IP address, user "" +
-                                        modelAuthToken.getAuthorizedName() + "", issued IP "" + modelAuthToken.getIPAddress() + 
-                                        "", attempted use from "" + req.getRemoteAddr() + "", forcing reauthentication."");
+
+                        org.apache.juddi.model.AuthToken modelAuthToken = em.find(org.apache.juddi.model.AuthToken.class, authInfo);
+                        if (modelAuthToken == null) {
                                 throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
-                                //invalidate the token, someone's intercepted it or it was reused on another ip
-                            }
                         }
-                    }
-                    catch (Exception ex){
-                        if (ex instanceof AuthTokenRequiredException)
-                            throw (AuthTokenRequiredException)ex;
-                        logger.error(""unexpected error caught looking up requestor's ip address"", ex);
-                    }
-                    
+
+                        int allowedMinutesOfInactivity = 0;
+                        try {
+                                allowedMinutesOfInactivity = AppConfig.getConfiguration().getInt(Property.JUDDI_AUTH_TOKEN_TIMEOUT, 0);
+                        } catch (ConfigurationException ce) {
+                                logger.error(""Error reading property "" + Property.JUDDI_AUTH_TOKEN_EXPIRATION + "" from ""
+                                        + ""the application's configuration. No automatic timeout token invalidation will occur. ""
+                                        + ce.getMessage(), ce);
+                        }
+                        int maxMinutesOfAge = 0;
+                        try {
+                                maxMinutesOfAge = AppConfig.getConfiguration().getInt(Property.JUDDI_AUTH_TOKEN_EXPIRATION, 0);
+                        } catch (ConfigurationException ce) {
+                                logger.error(""Error reading property "" + Property.JUDDI_AUTH_TOKEN_EXPIRATION + "" from ""
+                                        + ""the application's configuration. No automatic timeout token invalidation will occur. ""
+                                        + ce.getMessage(), ce);
+                        }
+                        Date now = new Date();
+                        // 0 or negative means token does not expire
+                        if (allowedMinutesOfInactivity > 0) {
+                                // expire tokens after # minutes of inactivity
+                                // compare the time in milli-seconds
+                                if (now.getTime() > modelAuthToken.getLastUsed().getTime() + allowedMinutesOfInactivity * 60000l) {
+                                        logger.info(""AUDIT: FAILTURE Token "" + modelAuthToken.getAuthToken() + "" expired due to inactivity "" + getRequestorsIPAddress());
+                                        modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
+                                }
+                        }
+                        if (maxMinutesOfAge > 0) {
+                                // expire tokens when max age is reached
+                                // compare the time in milli-seconds
+                                if (now.getTime() > modelAuthToken.getCreated().getTime() + maxMinutesOfAge * 60000l) {
+
+                                        logger.info(""AUDIT: FAILURE - Token "" + modelAuthToken.getAuthorizedName() + "" expired due to old age "" + getRequestorsIPAddress());
+                                        modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
+                                }
+                        }
+
+                        if (modelAuthToken.getTokenState() == AUTHTOKEN_RETIRED) {
+
+                                throw new AuthTokenExpiredException(new ErrorMessage(""errors.auth.AuthTokenExpired""));
+                        }
+                        if (ctx != null) {
+                                try {
+                                        boolean check = true;
+                                        try {
+                                                check = AppConfig.getConfiguration().getBoolean(Property.JUDDI_AUTH_TOKEN_ENFORCE_SAME_IP, true);
+                                        } catch (ConfigurationException ex) {
+                                                logger.warn(""Error loading config property "" + Property.JUDDI_AUTH_TOKEN_ENFORCE_SAME_IP
+                                                        + "" Enforcing Same IP for Auth Tokens will be enabled by default"", ex);
+                                        }
+                                        if (check) {
+                                                MessageContext mc = ctx.getMessageContext();
+                                                HttpServletRequest req = null;
+                                                if (mc != null) {
+                                                        req = (HttpServletRequest) mc.get(MessageContext.SERVLET_REQUEST);
+                                                }
+                                                if (req != null
+                                                        && modelAuthToken.getIPAddress() != null
+                                                        && modelAuthToken.getIPAddress() != null
+                                                        && !modelAuthToken.getIPAddress().equalsIgnoreCase(req.getRemoteAddr())) {
+                                                        modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
+                                                        logger.error(""AUDIT FAILURE - Security Alert - Attempt to use issued auth token from a different IP address, user ""
+                                                                + modelAuthToken.getAuthorizedName() + "", issued IP "" + modelAuthToken.getIPAddress()
+                                                                + "", attempted use from "" + req.getRemoteAddr() + "", forcing reauthentication."");
+                                                        throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
+                                                        //invalidate the token, someone's intercepted it or it was reused on another ip
+                                                }
+                                        }
+                                } catch (Exception ex) {
+                                        if (ex instanceof AuthTokenRequiredException) {
+                                                throw (AuthTokenRequiredException) ex;
+                                        }
+                                        logger.error(""unexpected error caught looking up requestor's ip address"", ex);
+                                }
+
+                        }
+                        Authenticator authenticator = AuthenticatorFactory.getAuthenticator();
+                        UddiEntityPublisher entityPublisher = authenticator.identify(authInfo, modelAuthToken.getAuthorizedName(), ctx);
+
+                        // Must make sure the returned publisher has all the necessary fields filled
+                        if (entityPublisher == null) {
+                                logger.warn(""AUDIT FAILURE - Auth token invalid, publisher does not exist "" + getRequestorsIPAddress());
+                                throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
+                        }
+                        if (entityPublisher.getAuthorizedName() == null) {
+                                logger.warn(""AUDIT FAILURE - Auth token invalid, username does exist"" + getRequestorsIPAddress());
+                                throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
+                        }
+                        // Auth token is being used.  Adjust appropriate values so that it's internal 'expiration clock' is reset.
+                        modelAuthToken.setLastUsed(new Date());
+                        modelAuthToken.setNumberOfUses(modelAuthToken.getNumberOfUses() + 1);
+                        return entityPublisher;
+                } else {
+                        //use non-token based authentication
+                        Authenticator authenticator = AuthenticatorFactory.getAuthenticator();
+                        UddiEntityPublisher entityPublisher = authenticator.identify(null, null, ctx);
+                        // Must make sure the returned publisher has all the necessary fields filled
+                        if (entityPublisher == null) {
+                                logger.warn(""AUDIT FAILURE - Auth token invalid, publisher does not exist "" + getRequestorsIPAddress());
+                                throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
+                        }
+                        if (entityPublisher.getAuthorizedName() == null) {
+                                logger.warn(""AUDIT FAILURE - Auth token invalid, username does exist"" + getRequestorsIPAddress());
+                                throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
+                        }
+                        return entityPublisher;
+
                 }
-		Authenticator authenticator = AuthenticatorFactory.getAuthenticator();
-		UddiEntityPublisher entityPublisher = authenticator.identify(authInfo, modelAuthToken.getAuthorizedName(), ctx);
-		
-		// Must make sure the returned publisher has all the necessary fields filled
-		if (entityPublisher == null) {
-                    logger.warn(""AUDIT FAILURE - Auth token invalided, publisher does not exist ""+ getRequestorsIPAddress());
-			throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
-                }
-		if (entityPublisher.getAuthorizedName() == null){
-                    logger.warn(""AUDIT FAILURE - Auth token invalided, username does exist""+ getRequestorsIPAddress());
-			throw new AuthTokenRequiredException(new ErrorMessage(""errors.auth.AuthInvalid""));
-                }
-		// Auth token is being used.  Adjust appropriate values so that it's internal 'expiration clock' is reset.
-		modelAuthToken.setLastUsed(new Date());
-		modelAuthToken.setNumberOfUses(modelAuthToken.getNumberOfUses() + 1);
-		
-		return entityPublisher;
-				   
-	}
+
+        }
 
         /**
-         * Attempts to get the requestor's ip address from the servlet context, defaults to null it it can't be
-         * retrieved
+         * Attempts to get the requestor's ip address from the servlet context,
+         * defaults to null it it can't be retrieved
+         *
          * @return requestor's ip address or null if it's not available
          */
-        public String getRequestorsIPAddress()
-        {
-            try {
-                MessageContext mc = ctx.getMessageContext();
-                HttpServletRequest req = null;
-                if (mc != null) {
-                    req = (HttpServletRequest) mc.get(MessageContext.SERVLET_REQUEST);
+        public String getRequestorsIPAddress() {
+                try {
+                        MessageContext mc = ctx.getMessageContext();
+                        HttpServletRequest req = null;
+                        if (mc != null) {
+                                req = (HttpServletRequest) mc.get(MessageContext.SERVLET_REQUEST);
+                        }
+                        if (req != null) {
+                                return req.getRemoteAddr();
+                        }
+                } catch (Exception ex) {
+                        logger.debug(""Error caught looking up the requestor's ip address"", ex);
                 }
-                if (req != null) {
-                    return req.getRemoteAddr();
-                }
-            } catch (Exception ex) {
-                logger.debug(""Error caught looking up the requestor's ip address"", ex);
-            }
-            return null;
+                return null;
         }
 }
"
juddi,86d58ae417563ea973a970b76914352becb31fb8,"JUDDI-920 this should enable http based authentication
",2015-01-17 10:55:02,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index 139a5c5..e855a46 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -85,6 +85,11 @@
     public final static String JUDDI_AUTH_TOKEN_ENFORCE_SAME_IP = ""juddi.auth.token.enforceSameIPRule"";
     
     /**
+     * Whether not the token is used with each transition, default should be true
+     */
+    public final static String JUDDI_AUTHENTICATOR_USE_TOKEN = ""juddi.auth.authenticator[@useAuthToken]"";
+    
+    /**
      * This points to the class of the authenticator
      */
     public final static String JUDDI_AUTHENTICATOR = ""juddi.auth.authenticator.class"";
"
juddi,86d58ae417563ea973a970b76914352becb31fb8,"JUDDI-920 this should enable http based authentication
",2015-01-17 10:55:02,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPContainerAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPContainerAuthenticator.java
index 35b3123..e003aa3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPContainerAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPContainerAuthenticator.java
@@ -47,7 +47,7 @@
         }
 
         @Override
-        public UddiEntityPublisher identify(String authInfo, String authorizedName, WebServiceContext ctx) throws AuthenticationException, FatalErrorException {
+        public UddiEntityPublisher identify(String authInfoNotused, String authorizedNameNotused, WebServiceContext ctx) throws AuthenticationException, FatalErrorException {
                 int MaxBindingsPerService = -1;
                 int MaxServicesPerBusiness = -1;
                 int MaxTmodels = -1;
@@ -62,7 +62,7 @@
                         MaxServicesPerBusiness = -1;
                         MaxTmodels = -1;
                         MaxBusinesses = -1;
-                        log.error(""config exception! "" + authorizedName, ex);
+                        log.error(""config exception! "", ex);
                 }
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
@@ -89,9 +89,9 @@
                         tx.begin();
                         Publisher publisher = em.find(Publisher.class, user);
                         if (publisher == null) {
-                                log.warn(""Publisher \"""" + authorizedName + ""\"" was not found, adding the publisher in on the fly."");
+                                log.warn(""Publisher \"""" + user + ""\"" was not found, adding the publisher in on the fly."");
                                 publisher = new Publisher();
-                                publisher.setAuthorizedName(authorizedName);
+                                publisher.setAuthorizedName(user);
                                 publisher.setIsAdmin(""false"");
                                 publisher.setIsEnabled(""true"");
                                 publisher.setMaxBindingsPerService(MaxBindingsPerService);
"
juddi,86d58ae417563ea973a970b76914352becb31fb8,"JUDDI-920 this should enable http based authentication
",2015-01-17 10:55:02,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPHeaderAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPHeaderAuthenticator.java
index 902d1e5..99e79d9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPHeaderAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/HTTPHeaderAuthenticator.java
@@ -54,7 +54,7 @@
         }
 
         @Override
-        public UddiEntityPublisher identify(String authInfo, String authorizedName, WebServiceContext ctx) throws AuthenticationException, FatalErrorException {
+        public UddiEntityPublisher identify(String notusedauthtoken, String notusedusername, WebServiceContext ctx) throws AuthenticationException, FatalErrorException {
                 int MaxBindingsPerService = -1;
                 int MaxServicesPerBusiness = -1;
                 int MaxTmodels = -1;
@@ -71,7 +71,7 @@
                         MaxServicesPerBusiness = -1;
                         MaxTmodels = -1;
                         MaxBusinesses = -1;
-                        log.error(""config exception! "" + authorizedName, ex);
+                        log.error(""config exception! "", ex);
                 }
                 if (http_header_name == null) {
                         throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", ""misconfiguration!""));
@@ -94,9 +94,9 @@
                         tx.begin();
                         Publisher publisher = em.find(Publisher.class, user);
                         if (publisher == null) {
-                                log.warn(""Publisher \"""" + authorizedName + ""\"" was not found, adding the publisher in on the fly."");
+                                log.warn(""Publisher \"""" + user + ""\"" was not found, adding the publisher in on the fly."");
                                 publisher = new Publisher();
-                                publisher.setAuthorizedName(authorizedName);
+                                publisher.setAuthorizedName(user);
                                 publisher.setIsAdmin(""false"");
                                 publisher.setIsEnabled(""true"");
                                 publisher.setMaxBindingsPerService(MaxBindingsPerService);
"
juddi,2bf444ca145066136b67e0d886ef0903a0f42616,"JUDDI-904 increasing the TCK auth token time out
JUDDI-241 acting the setPublisherAssertion function to be replication api friendly. added a number of unit tests to confirm as expected functionalist. reducing log4j output for schema validation
",2015-01-10 10:28:00,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 63c77ba..9e7c786 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -88,7 +88,6 @@
 import org.uddi.repl_v3.ChangeRecordPublisherAssertion;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIPublicationPortType;
-import sun.util.BuddhistCalendar;
 
 /**
  * This class implements the UDDI Publication Service
@@ -334,27 +333,29 @@
                         List<org.uddi.api_v3.PublisherAssertion> entityList = body.getPublisherAssertion();
                         List<ChangeRecord> changes = new ArrayList<ChangeRecord>();
                         for (org.uddi.api_v3.PublisherAssertion entity : entityList) {
-                                 org.apache.juddi.model.PublisherAssertion modelPubAssertion = new org.apache.juddi.model.PublisherAssertion();
+                                org.apache.juddi.model.PublisherAssertion modelPubAssertion = new org.apache.juddi.model.PublisherAssertion();
 
                                 MappingApiToModel.mapPublisherAssertion(entity, modelPubAssertion);
 
-                                org.apache.juddi.model.PublisherAssertion existingPubAssertion = em.find(org.apache.juddi.model.PublisherAssertion.class, 
+                                org.apache.juddi.model.PublisherAssertion existingPubAssertion = em.find(org.apache.juddi.model.PublisherAssertion.class,
                                         modelPubAssertion.getId());
-                                
-                                boolean fromkey =  publisher.isOwner(em.find(BusinessEntity.class, entity.getFromKey()));
-                                boolean tokey =  publisher.isOwner(em.find(BusinessEntity.class, entity.getToKey()));
-                                if (fromkey)
+
+                                boolean fromkey = publisher.isOwner(em.find(BusinessEntity.class, entity.getFromKey()));
+                                boolean tokey = publisher.isOwner(em.find(BusinessEntity.class, entity.getToKey()));
+                                if (fromkey) {
                                         existingPubAssertion.setFromCheck(""false"");
-                                if (tokey)
+                                }
+                                if (tokey) {
                                         existingPubAssertion.setToCheck(""false"");
+                                }
                                 if (""false"".equalsIgnoreCase(existingPubAssertion.getToCheck())
-                                        && ""false"".equalsIgnoreCase(existingPubAssertion.getFromCheck()))
+                                        && ""false"".equalsIgnoreCase(existingPubAssertion.getFromCheck())) {
                                         em.remove(existingPubAssertion);
-                                else {
+                                } else {
                                         existingPubAssertion.setModified(new Date());
                                         em.persist(existingPubAssertion);
                                 }
-                                
+
                                 changes.add(getChangeRecord_deletePublisherAssertion(entity, node, fromkey, tokey, existingPubAssertion.getModified().getTime()));
                         }
 
@@ -379,8 +380,9 @@
 
         /**
          * deletes the referenced object, assuming authorization rules are
-         * already processed and there is already an open transaction. this is primarily used
-         * to support replication calls, i.e. another node just changed a PA record and let us know
+         * already processed and there is already an open transaction. this is
+         * primarily used to support replication calls, i.e. another node just
+         * changed a PA record and let us know
          *
          * @param entityKey
          * @param em
@@ -395,9 +397,8 @@
                 org.apache.juddi.model.PublisherAssertion existingPubAssertion = em.find(org.apache.juddi.model.PublisherAssertion.class,
                         modelPubAssertion.getId());
 
-                if (existingPubAssertion==null){
-                        log.fatal(""Can't delete a Publisher Assertion that isn't persisted int the database!"");
-                        return;
+                if (existingPubAssertion == null) {
+                        throw new FatalErrorException(new ErrorMessage(""assertionNotFound""));
                 }
                 boolean fromkey = entity.isFromBusinessCheck();// publisher.isOwner(em.find(BusinessEntity.class, entity.getFromKey()));
                 boolean tokey = entity.isToBusinessCheck();//  publisher.isOwner(em.find(BusinessEntity.class, entity.getToKey()));
@@ -467,10 +468,11 @@
         protected void deleteService(String key, EntityManager em) throws DispositionReportFaultMessage {
                 Object obj = em.find(org.apache.juddi.model.BusinessService.class, key);
                 //((org.apache.juddi.model.BusinessService) obj).getBusinessEntity().setModifiedIncludingChildren(new Date());
-                if (obj!=null)
+                if (obj != null) {
                         em.remove(obj);
-                else
-                        logger.warn(""Unable to remove service with the key '"" + key +""', it doesn't exist in the database"");
+                } else {
+                        logger.warn(""Unable to remove service with the key '"" + key + ""', it doesn't exist in the database"");
+                }
         }
 
         /**
@@ -613,7 +615,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         public RegisteredInfo getRegisteredInfo(GetRegisteredInfo body)
                 throws DispositionReportFaultMessage {
@@ -694,7 +696,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         public BindingDetail saveBinding(SaveBinding body)
                 throws DispositionReportFaultMessage {
@@ -759,7 +761,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         public BusinessDetail saveBusiness(SaveBusiness body)
                 throws DispositionReportFaultMessage {
@@ -830,7 +832,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         public ServiceDetail saveService(SaveService body)
                 throws DispositionReportFaultMessage {
@@ -863,7 +865,7 @@
                                 em.persist(modelBusinessService);
 
                                 result.getBusinessService().add(apiBusinessService);
-                                
+
                                 validator.validateSaveServiceMax(em, modelBusinessService.getBusinessEntity().getEntityKey());
                                 changes.add(getChangeRecord(modelBusinessService, apiBusinessService, node));
                         }
@@ -892,7 +894,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         @Override
         public TModelDetail saveTModel(SaveTModel body)
@@ -951,7 +953,7 @@
 
         /**
          * {@inheritdoc}
-         * 
+         *
          */
         @Override
         public void setPublisherAssertions(String authInfo,
@@ -961,6 +963,7 @@
 
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
+                List<ChangeRecord> changes = new ArrayList<ChangeRecord>();
                 try {
                         tx.begin();
 
@@ -972,40 +975,81 @@
                         businessKeysFound = FindBusinessByPublisherQuery.select(em, null, publisher, businessKeysFound);
 
                         //TODO this has to be reworked to record what was deleted.
-                        // First, wipe out all previous assertions associated with this publisher
-                        DeletePublisherAssertionByBusinessQuery.delete(em, businessKeysFound);
+                        // First, identify all previous assertions that need to be removed
+                        List<org.apache.juddi.model.PublisherAssertion> existingAssertions = FindPublisherAssertionByBusinessQuery.select(em, businessKeysFound, null);
+
+                        logger.info("">>>> Existing assertions "" + existingAssertions.size() + "", inbound set "" + publisherAssertion.value.size());
+                        List<org.apache.juddi.model.PublisherAssertion> deleteMe = diff(publisherAssertion.value, existingAssertions);
+                        logger.info("">>>> DIFF size is "" + deleteMe.size());
+                        for (org.apache.juddi.model.PublisherAssertion del : deleteMe) {
+                                logger.info("">>>> PROCESSING "" + del.getBusinessEntityByFromKey().getEntityKey() + "" "" + del.getBusinessEntityByToKey().getEntityKey());
+                                boolean from = false;
+                                if (del.getFromCheck() != null) {
+                                        del.getFromCheck().equalsIgnoreCase(""true"");
+                                }
+                                boolean to = false;
+                                if (del.getToCheck() != null) {
+                                        del.getToCheck().equalsIgnoreCase(""true"");
+                                }
+                                if (publisher.isOwner(del.getBusinessEntityByFromKey())) {
+                                        from = false;
+                                }
+                                if (publisher.isOwner(del.getBusinessEntityByToKey())) {
+                                        to = false;
+                                }
+                                PublisherAssertion api = new PublisherAssertion();
+                                MappingModelToApi.mapPublisherAssertion(del, api);
+
+                                if (!to && !from) {
+                                        logger.info("">>>> DELETE ME "" + del.getBusinessEntityByFromKey().getEntityKey() + "" "" + del.getBusinessEntityByToKey().getEntityKey());
+                                        em.remove(del);
+                                } else {
+                                        logger.info("">>>> MERGING ME "" + del.getBusinessEntityByFromKey().getEntityKey() + "" "" + del.getBusinessEntityByToKey().getEntityKey());
+                                        del.setFromCheck(from ? ""true"" : ""false"");
+                                        del.setToCheck(to ? ""true"" : ""false"");
+                                        del.setModified(new Date());
+                                        em.merge(del);
+                                }
+                                changes.add(getChangeRecord_deletePublisherAssertion(api, node, to, from, System.currentTimeMillis()));
+                        }
+                        //DeletePublisherAssertionByBusinessQuery.delete(em, businessKeysFound);
 
                         // Slate is clean for all assertions involving this publisher, now we simply need to add the new ones (and they will all be ""new"").
-                        List<org.uddi.api_v3.PublisherAssertion> apiPubAssertionList = publisherAssertion.value;
+                        /*List<org.uddi.api_v3.PublisherAssertion> apiPubAssertionList = publisherAssertion.value;
 
-                        List<ChangeRecord> changes = new ArrayList<ChangeRecord>();
-                        for (org.uddi.api_v3.PublisherAssertion apiPubAssertion : apiPubAssertionList) {
+                        
+                         for (org.uddi.api_v3.PublisherAssertion apiPubAssertion : apiPubAssertionList) {
 
-                                org.apache.juddi.model.PublisherAssertion modelPubAssertion = new org.apache.juddi.model.PublisherAssertion();
+                         org.apache.juddi.model.PublisherAssertion modelPubAssertion = new org.apache.juddi.model.PublisherAssertion();
 
-                                MappingApiToModel.mapPublisherAssertion(apiPubAssertion, modelPubAssertion);
+                         MappingApiToModel.mapPublisherAssertion(apiPubAssertion, modelPubAssertion);
+                                
+                         org.apache.juddi.model.BusinessEntity beFrom = em.find(org.apache.juddi.model.BusinessEntity.class, modelPubAssertion.getId().getFromKey());
+                         org.apache.juddi.model.BusinessEntity beTo = em.find(org.apache.juddi.model.BusinessEntity.class, modelPubAssertion.getId().getToKey());
+                         modelPubAssertion.setBusinessEntityByFromKey(beFrom);
+                         modelPubAssertion.setBusinessEntityByToKey(beTo);
 
-                                org.apache.juddi.model.BusinessEntity beFrom = em.find(org.apache.juddi.model.BusinessEntity.class, modelPubAssertion.getId().getFromKey());
-                                org.apache.juddi.model.BusinessEntity beTo = em.find(org.apache.juddi.model.BusinessEntity.class, modelPubAssertion.getId().getToKey());
-                                modelPubAssertion.setBusinessEntityByFromKey(beFrom);
-                                modelPubAssertion.setBusinessEntityByToKey(beTo);
+                         modelPubAssertion.setFromCheck(""false"");
+                         modelPubAssertion.setToCheck(""false"");
 
-                                modelPubAssertion.setFromCheck(""false"");
-                                modelPubAssertion.setToCheck(""false"");
+                         if (publisher.isOwner(modelPubAssertion.getBusinessEntityByFromKey())) {
+                         modelPubAssertion.setFromCheck(""true"");
+                         }
+                         if (publisher.isOwner(modelPubAssertion.getBusinessEntityByToKey())) {
+                         modelPubAssertion.setToCheck(""true"");
+                         }
+                         em.persist(modelPubAssertion);
 
-                                if (publisher.isOwner(modelPubAssertion.getBusinessEntityByFromKey())) {
-                                        modelPubAssertion.setFromCheck(""true"");
-                                }
-                                if (publisher.isOwner(modelPubAssertion.getBusinessEntityByToKey())) {
-                                        modelPubAssertion.setToCheck(""true"");
-                                }
-                                em.persist(modelPubAssertion);
+                         changes.add(getChangeRecord_NewAssertion(apiPubAssertion, modelPubAssertion, node));
 
-                                changes.add(getChangeRecord_NewAssertion(apiPubAssertion, modelPubAssertion, node));
-
-                        }
-
+                         }*/
                         tx.commit();
+                        if (!publisherAssertion.value.isEmpty()) {
+                                AddPublisherAssertions addPublisherAssertions = new AddPublisherAssertions();
+                                addPublisherAssertions.setAuthInfo(authInfo);
+                                addPublisherAssertions.getPublisherAssertion().addAll(publisherAssertion.value);
+                                addPublisherAssertions(addPublisherAssertions);
+                        }
                         for (int i = 0; i < changes.size(); i++) {
                                 ReplicationNotifier.Enqueue(changes.get(i));
                         }
@@ -1266,9 +1310,10 @@
 
         /**
          * this is for ""hiding"" a tmodel, not removing it entirely
+         *
          * @param entityKey
          * @param node
-         * @return 
+         * @return
          */
         public static ChangeRecord getChangeRecord_deleteTModelHide(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
@@ -1277,7 +1322,7 @@
                 cr.setRecordType(ChangeRecord.RecordType.ChangeRecordHide);
                 org.uddi.repl_v3.ChangeRecord crapi = new org.uddi.repl_v3.ChangeRecord();
                 crapi.setChangeID(new ChangeRecordIDType(node, -1L));
-                
+
                 crapi.setChangeRecordHide(new ChangeRecordHide());
                 crapi.getChangeRecordHide().setTModelKey(entityKey);
                 crapi.getChangeRecordHide().setModified(df.newXMLGregorianCalendar(new GregorianCalendar()));
@@ -1292,12 +1337,13 @@
                 }
                 return cr;
         }
-        
+
         /**
          * this is for deleting a tmodel, not hiding it
+         *
          * @param entityKey
          * @param node
-         * @return 
+         * @return
          */
         public static ChangeRecord getChangeRecord_deleteTModelDelete(String entityKey, String node) {
                 ChangeRecord cr = new ChangeRecord();
@@ -1306,7 +1352,7 @@
                 cr.setRecordType(ChangeRecord.RecordType.ChangeRecordHide);
                 org.uddi.repl_v3.ChangeRecord crapi = new org.uddi.repl_v3.ChangeRecord();
                 crapi.setChangeID(new ChangeRecordIDType(node, -1L));
-                
+
                 crapi.setChangeRecordDelete(new ChangeRecordDelete());
                 crapi.getChangeRecordDelete().setTModelKey(entityKey);
                 crapi.getChangeRecordDelete().setModified(df.newXMLGregorianCalendar(new GregorianCalendar()));
@@ -1346,11 +1392,11 @@
 
         public static ChangeRecord getChangeRecord(Tmodel modelBusinessEntity, org.uddi.api_v3.TModel apiBusinessEntity, String node) throws DispositionReportFaultMessage {
                 ChangeRecord cr = new ChangeRecord();
-                if (!apiBusinessEntity.getTModelKey().equals(modelBusinessEntity.getEntityKey()))
+                if (!apiBusinessEntity.getTModelKey().equals(modelBusinessEntity.getEntityKey())) {
                         throw new FatalErrorException(new ErrorMessage(""E_fatalError"", ""the model and api keys do not match when saving a tmodel!""));
+                }
                 cr.setEntityKey(modelBusinessEntity.getEntityKey());
                 cr.setNodeID(node);
-                
 
                 cr.setRecordType(ChangeRecord.RecordType.ChangeRecordNewData);
                 org.uddi.repl_v3.ChangeRecord crapi = new org.uddi.repl_v3.ChangeRecord();
@@ -1443,4 +1489,40 @@
                 return cr;
         }
 
+        /**
+         *
+         * @param value keep these
+         * @param existingAssertions return a list of these that are NOT in
+         * 'value'
+         * @return
+         * @throws DispositionReportFaultMessage
+         */
+        private List<org.apache.juddi.model.PublisherAssertion> diff(List<PublisherAssertion> value, List<org.apache.juddi.model.PublisherAssertion> existingAssertions) throws DispositionReportFaultMessage {
+                List<org.apache.juddi.model.PublisherAssertion> ret = new ArrayList<org.apache.juddi.model.PublisherAssertion>();
+                if (value == null || value.isEmpty()) {
+                        return existingAssertions;
+                }
+                if (existingAssertions == null) {
+                        return new ArrayList<org.apache.juddi.model.PublisherAssertion>();
+                }
+                for (org.apache.juddi.model.PublisherAssertion model : existingAssertions) {
+
+                        boolean found = false;
+                        for (PublisherAssertion paapi : value) {
+                                if (model.getBusinessEntityByFromKey().getEntityKey().equalsIgnoreCase(paapi.getFromKey())
+                                        && model.getBusinessEntityByToKey().getEntityKey().equalsIgnoreCase(paapi.getToKey())
+                                        && model.getKeyName().equals(paapi.getKeyedReference().getKeyName())
+                                        && model.getKeyValue().equals(paapi.getKeyedReference().getKeyValue())
+                                        && model.getTmodelKey().equalsIgnoreCase(paapi.getKeyedReference().getTModelKey())) {
+                                        found = true;
+                                        break;
+                                }
+                        }
+                        if (!found) {
+                                ret.add(model);
+                        }
+                }
+                return ret;
+        }
+
 }
"
juddi,2bf444ca145066136b67e0d886ef0903a0f42616,"JUDDI-904 increasing the TCK auth token time out
JUDDI-241 acting the setPublisherAssertion function to be replication api friendly. added a number of unit tests to confirm as expected functionalist. reducing log4j output for schema validation
",2015-01-10 10:28:00,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
index 742c252..da07e13 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
@@ -162,4 +162,10 @@
 	public void setToCheck(String toCheck) {
 		this.toCheck = toCheck;
 	}
+        
+        @Override
+        public boolean equals(Object compareto){
+                PublisherAssertion rhs = (PublisherAssertion) compareto;
+                return (this.id.equals(rhs.id));
+        }
 }
"
juddi,2bf444ca145066136b67e0d886ef0903a0f42616,"JUDDI-904 increasing the TCK auth token time out
JUDDI-241 acting the setPublisherAssertion function to be replication api friendly. added a number of unit tests to confirm as expected functionalist. reducing log4j output for schema validation
",2015-01-10 10:28:00,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 87e02a3..8710558 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -184,7 +184,7 @@
 
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 
@@ -204,7 +204,7 @@
                         }
                 } catch (RemoteException e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 
@@ -224,7 +224,7 @@
                         publication.saveBusiness(sb);
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 
@@ -240,7 +240,7 @@
                         assertTrue(""Signature invalid!"", sigOk);
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 
@@ -331,7 +331,7 @@
                         return beOut;
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
                 return null;
 
@@ -372,7 +372,7 @@
 
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
 
         }
@@ -391,7 +391,7 @@
 
                 } catch (Exception e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 
@@ -405,7 +405,7 @@
 
                 } catch (Exception e) {
                         logger.error(e.getMessage(), e);
-                        Assert.fail(""No exception should be thrown"");
+                        Assert.fail(""No exception should be thrown "" + e.getMessage());
                 }
         }
 }
"
juddi,2bf444ca145066136b67e0d886ef0903a0f42616,"JUDDI-904 increasing the TCK auth token time out
JUDDI-241 acting the setPublisherAssertion function to be replication api friendly. added a number of unit tests to confirm as expected functionalist. reducing log4j output for schema validation
",2015-01-10 10:28:00,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
index a7726e3..ef2b22d 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
@@ -46,20 +46,20 @@
 		this.publication = publication;
 	}
 	
-	public void saveJoePublisherPublisherAssertion(String authInfoJoe) {
-		addPublisherAssertion(authInfoJoe, JOE_ASSERT_XML);
+	public List<PublisherAssertion> saveJoePublisherPublisherAssertion(String authInfoJoe) {
+		return addPublisherAssertion(authInfoJoe, JOE_ASSERT_XML);
 	}
 	
-	public void saveSamPublisherPublisherAssertion(String authInfoSam) {
-		addPublisherAssertion(authInfoSam, SAM_ASSERT_XML);
+	public List<PublisherAssertion> saveSamPublisherPublisherAssertion(String authInfoSam) {
+		return addPublisherAssertion(authInfoSam, SAM_ASSERT_XML);
 	}
 	
-	public void saveMaryPublisherPublisherAssertion(String authInfoMary) {
-		addPublisherAssertion(authInfoMary, MARY_ASSERT_XML);
+	public List<PublisherAssertion> saveMaryPublisherPublisherAssertion(String authInfoMary) {
+		return addPublisherAssertion(authInfoMary, MARY_ASSERT_XML);
 	}
 	
-	public void saveJoePublisherPublisherAssertion2(String authInfoJoe) {
-		addPublisherAssertion(authInfoJoe, JOE_ASSERT2_XML);
+	public List<PublisherAssertion> saveJoePublisherPublisherAssertion2(String authInfoJoe) {
+		return addPublisherAssertion(authInfoJoe, JOE_ASSERT2_XML);
 	}
 	
 	public void deleteJoePublisherPublisherAssertion(String authInfoJoe) {
@@ -79,7 +79,7 @@
 	}
 
 	
-	public void addPublisherAssertion(String authInfo, String pubassertXML) {
+	public List<PublisherAssertion> addPublisherAssertion(String authInfo, String pubassertXML) {
 		try {
 			AddPublisherAssertions ap = new AddPublisherAssertions();
 			ap.setAuthInfo(authInfo);
@@ -103,13 +103,14 @@
 				assertEquals(keyRefIn.getKeyName(), keyRefOut.getKeyName());
 				assertEquals(keyRefIn.getKeyValue(), keyRefOut.getKeyValue());
 			}
+                        return paOutList;
 			
 		}
 		catch(Exception e) {
 			logger.error(e.getMessage(), e);
 			Assert.fail(""No exception should be thrown"");
 		}
-
+                return null;
 	}
 
 	public void deletePublisherAssertion(String authInfo, String pubassertXML) {
"
juddi,9be9a865dea400aa4647b5b336bc6f2799dc8b13,"JUDDI-908 adding test case
",2015-01-08 18:43:33,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
index 0db5584..a7726e3 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
@@ -33,10 +33,10 @@
  */
 public class TckPublisherAssertion 
 {
-	final static String JOE_ASSERT_XML    = ""uddi_data/joepublisher/publisherAssertion.xml"";
-	final static String MARY_ASSERT_XML    = ""uddi_data/marypublisher/publisherAssertion.xml"";
-	final static String JOE_ASSERT2_XML    = ""uddi_data/joepublisher/publisherAssertion2.xml"";
-	final static String SAM_ASSERT_XML    = ""uddi_data/samsyndicator/publisherAssertion.xml"";
+	public final static String JOE_ASSERT_XML    = ""uddi_data/joepublisher/publisherAssertion.xml"";
+	public final static String MARY_ASSERT_XML    = ""uddi_data/marypublisher/publisherAssertion.xml"";
+	public final static String JOE_ASSERT2_XML    = ""uddi_data/joepublisher/publisherAssertion2.xml"";
+	public final static String SAM_ASSERT_XML    = ""uddi_data/samsyndicator/publisherAssertion.xml"";
 	
 	private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
"
juddi,4a7e282e9a822ecdf7d65a48765b8f4a37815399,"JUDDI-873 PA updates now work via subscription
JUDDI-242 resolved
",2015-01-01 16:00:45,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
index 31095b0..a414000 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckCommon.java
@@ -325,4 +325,13 @@
                 return sb.toString();
         }
 
+        static void PrintMarker() {
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+                System.out.println("">>>>>>>>>>>>>>>>>>>>>>>>>> FAILURE MARKER <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"");
+        }
+
 }
"
juddi,4a7e282e9a822ecdf7d65a48765b8f4a37815399,"JUDDI-873 PA updates now work via subscription
JUDDI-242 resolved
",2015-01-01 16:00:45,Alex,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index ad34486..f25f32c 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -181,6 +181,7 @@
 
                 } catch (Exception e) {
                         logger.error(e.getMessage(), e);
+                        TckCommon.PrintMarker();
                         Assert.fail(""Could not obtain authInfo token."");
                 }
         }
@@ -251,11 +252,12 @@
                                 logger.warn(""Test failed, dumping service list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllServices(authInfoJoe, inquiryJoe));
-                                //if (!UDDISubscriptionListenerImpl.notifcationMap.get(0).contains(""<name xml:lang=\""en\"">Service One</name>"")) {
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service"");
                         }
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -299,10 +301,12 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service"");
                         }
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -359,11 +363,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service"");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -429,11 +435,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail(e.getMessage());
@@ -505,11 +513,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -619,11 +629,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -714,11 +726,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -745,7 +759,7 @@
          * @throws Exception
          */
         @Test
-        @Ignore
+        // @Ignore
         public void joePublisherUpdate_PUBLISHERASSERTION_DETAIL_TO() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
@@ -788,8 +802,8 @@
                         AddPublisherAssertions pa = new AddPublisherAssertions();
                         pa.setAuthInfo(authInfoMary);
                         PublisherAssertion pas = new PublisherAssertion();
-                        pas.setToKey(TckBusiness.MARY_BUSINESS_KEY);
-                        pas.setFromKey(TckBusiness.JOE_BUSINESS_KEY);
+                        pas.setToKey(TckBusiness.JOE_BUSINESS_KEY);
+                        pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
                         pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
                         pa.getPublisherAssertion().add(pas);
 
@@ -805,11 +819,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail();
@@ -836,7 +852,7 @@
          * @throws Exception
          */
         @Test
-        @Ignore
+        //@Ignore
         public void joePublisherUpdate_PUBLISHERASSERTION_DETAIL_FROM() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
@@ -879,8 +895,8 @@
                         AddPublisherAssertions pa = new AddPublisherAssertions();
                         pa.setAuthInfo(authInfoMary);
                         PublisherAssertion pas = new PublisherAssertion();
-                        pas.setToKey(TckBusiness.JOE_BUSINESS_KEY);
-                        pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
+                        pas.setFromKey(TckBusiness.JOE_BUSINESS_KEY);
+                        pas.setToKey(TckBusiness.MARY_BUSINESS_KEY);
                         pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
                         pa.getPublisherAssertion().add(pas);
 
@@ -896,14 +912,16 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -985,13 +1003,14 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
-
+                        TckCommon.PrintMarker();
                         Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
@@ -1076,11 +1095,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail(e.getMessage());
@@ -1177,17 +1198,19 @@
                         deletePublisherAssertions = new DeletePublisherAssertions();
                         deletePublisherAssertions.setAuthInfo(authInfoJoe);
                         deletePublisherAssertions.getPublisherAssertion().add(pas);
-                       // publicationJoe.deletePublisherAssertions(deletePublisherAssertions);
+                        // publicationJoe.deletePublisherAssertions(deletePublisherAssertions);
 
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail(e.getMessage());
@@ -1284,11 +1307,13 @@
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail(e.getMessage());
@@ -1316,7 +1341,6 @@
          * @throws Exception
          */
         @Test
-        //@Ignore
         public void joePublisherUpdate_FIND_BINDING_BY_CATBAG() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
@@ -1378,45 +1402,30 @@
                         Thread.sleep(1000);
                         logger.info(""dumping mary's binding before.... "");
                         JAXB.marshal(bs, System.out);
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
 
                         logger.info(""updating Mary's binding ********** "");
                         // BindingDetail after=new BindingDetail();
                         /*GetBindingDetail bindingDetail = new GetBindingDetail();
-                        bindingDetail.setAuthInfo(authInfoMary);
-                        bindingDetail.getBindingKey().add(bs.getBindingTemplates().getBindingTemplate().get(0).getBindingKey());*/
+                         bindingDetail.setAuthInfo(authInfoMary);
+                         bindingDetail.getBindingKey().add(bs.getBindingTemplates().getBindingTemplate().get(0).getBindingKey());*/
                         BindingDetail bindingDetail1 = null;//inquiryMary.getBindingDetail(bindingDetail);
                         bindingDetail1 = updatePublisherBindingAddCategory(authInfoMary, bt, publicationMary, new KeyedReference(""uddi:uddi.org:categorization:types"", UDDIConstants.CategorizationTypes_Cacheable, ""Cacheable""), bindingDetail1);
 
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
                         logger.info(""dumping mary's binding after.... "");
                         JAXB.marshal(bindingDetail1, System.out);
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
-                        System.out.println(""#####################################"");
                         boolean found = verifyDelivery(UDDIConstants.CategorizationTypes_Cacheable);
 
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
                                 logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                TckCommon.PrintMarker();
                                 Assert.fail(""Notification does not contain the correct service."");
                         }
 
                 } catch (Exception e) {
                         logger.error(""No exceptions please."");
+                        TckCommon.PrintMarker();
                         e.printStackTrace();
 
                         Assert.fail(e.getMessage());
@@ -1500,7 +1509,7 @@
                 }
                 bt.getCategoryBag().getKeyedReference().add(cat);
                 sb.getBindingTemplate().add(bt);
-                return  pub.saveBinding(sb);
+                return pub.saveBinding(sb);
                 //return UDDIConstants.CategorizationTypes_Cacheable;
         }
 
"
juddi,690bfb0157cb9c6a54f367f231326b432ecb6a33,"JUDDI-242 adding findBinding by tModel cat bag tests
JUDDI-899 fixing a bug where subscriptions were not picking up changes in binding templates due to ModifiedIncludingChildren not being set correctly for parent objects
",2015-01-01 13:09:18,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 98c6c15..b683aee 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -101,8 +101,8 @@
  * replication and several bug fixes
  */
 @WebService(serviceName = ""UDDIPublicationService"",
-     endpointInterface = ""org.uddi.v3_service.UDDIPublicationPortType"",
-     targetNamespace = ""urn:uddi-org:v3_service"")
+        endpointInterface = ""org.uddi.v3_service.UDDIPublicationPortType"",
+        targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDIPublicationImpl extends AuthenticatedService implements UDDIPublicationPortType {
 
         private static Log log = LogFactory.getLog(UDDIInquiryImpl.class);
@@ -124,7 +124,7 @@
 
         @Override
         public void addPublisherAssertions(AddPublisherAssertions body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -148,8 +148,8 @@
                                 boolean persistNewAssertion = true;
                                 if (existingPubAssertion != null) {
                                         if (modelPubAssertion.getTmodelKey().equalsIgnoreCase(existingPubAssertion.getTmodelKey())
-                                             && modelPubAssertion.getKeyName().equalsIgnoreCase(existingPubAssertion.getKeyName())
-                                             && modelPubAssertion.getKeyValue().equalsIgnoreCase(existingPubAssertion.getKeyValue())) {
+                                                && modelPubAssertion.getKeyName().equalsIgnoreCase(existingPubAssertion.getKeyName())
+                                                && modelPubAssertion.getKeyValue().equalsIgnoreCase(existingPubAssertion.getKeyValue())) {
                                                 // This pub assertion is already been ""asserted"".  Simply need to set the ""check"" value on the existing (and persistent) assertion
                                                 if (publisher.isOwner(existingPubAssertion.getBusinessEntityByFromKey())) {
                                                         existingPubAssertion.setFromCheck(""true"");
@@ -160,7 +160,7 @@
 
                                                 persistNewAssertion = false;
                                         } else {
-						// Otherwise, it is a new relationship between these entities.  Remove the old one so the new one can be added.
+                                                // Otherwise, it is a new relationship between these entities.  Remove the old one so the new one can be added.
                                                 // TODO: the model only seems to allow one assertion per two business (primary key is fromKey and toKey). Spec seems to imply as 
                                                 // many relationships as desired (the differentiator would be the keyedRef values).
                                                 em.remove(existingPubAssertion);
@@ -198,7 +198,7 @@
 
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.ADD_PUBLISHERASSERTIONS,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.ADD_PUBLISHERASSERTIONS, QueryStatus.FAILED, procTime);
@@ -212,7 +212,7 @@
         }
 
         public void deleteBinding(DeleteBinding body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -237,7 +237,7 @@
 
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_BINDING,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_BINDING, QueryStatus.FAILED, procTime);
@@ -271,7 +271,7 @@
         }
 
         public void deleteBusiness(DeleteBusiness body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -322,7 +322,7 @@
         }
 
         public void deletePublisherAssertions(DeletePublisherAssertions body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -347,7 +347,7 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_PUBLISHERASSERTIONS,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_PUBLISHERASSERTIONS, QueryStatus.FAILED, procTime);
@@ -375,7 +375,7 @@
         }
 
         public void deleteService(DeleteService body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -400,7 +400,7 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_SERVICE,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.DELETE_SERVICE, QueryStatus.FAILED, procTime);
@@ -428,7 +428,7 @@
         }
 
         public void deleteTModel(DeleteTModel body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -481,8 +481,8 @@
         }
 
         public List<AssertionStatusItem> getAssertionStatusReport(String authInfo,
-             CompletionStatus completionStatus)
-             throws DispositionReportFaultMessage {
+                CompletionStatus completionStatus)
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -497,7 +497,7 @@
                         tx.commit();
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.GET_ASSERTIONSTATUSREPORT,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
@@ -513,7 +513,7 @@
         }
 
         public List<PublisherAssertion> getPublisherAssertions(String authInfo)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -542,12 +542,12 @@
                         tx.commit();
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.GET_PUBLISHERASSERTIONS,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.GET_PUBLISHERASSERTIONS,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -558,7 +558,7 @@
         }
 
         public RegisteredInfo getRegisteredInfo(GetRegisteredInfo body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -618,13 +618,13 @@
                         tx.commit();
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.GET_REGISTEREDINFO,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.GET_REGISTEREDINFO,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -635,7 +635,7 @@
         }
 
         public BindingDetail saveBinding(SaveBinding body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -662,7 +662,7 @@
 
                                 MappingApiToModel.mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService);
 
-                                setOperationalInfo(em, modelBindingTemplate, publisher, false);
+                                setOperationalInfo(em, modelBindingTemplate, publisher, true);
 
                                 em.persist(modelBindingTemplate);
 
@@ -679,13 +679,13 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BINDING,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BINDING,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -696,7 +696,7 @@
         }
 
         public BusinessDetail saveBusiness(SaveBusiness body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
                 if (!body.getBusinessEntity().isEmpty()) {
                         log.debug(""Inbound save business request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
@@ -739,13 +739,13 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BUSINESS,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_BUSINESS,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } catch (Exception ex) {
                         StringWriter sw = new StringWriter();
@@ -763,7 +763,7 @@
         }
 
         public ServiceDetail saveService(SaveService body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -803,13 +803,13 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_SERVICE,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_SERVICE,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -820,7 +820,7 @@
         }
 
         public TModelDetail saveTModel(SaveTModel body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -857,13 +857,13 @@
                         }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_TMODEL,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                         return result;
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SAVE_TMODEL,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -875,8 +875,8 @@
 
         @Override
         public void setPublisherAssertions(String authInfo,
-             Holder<List<PublisherAssertion>> publisherAssertion)
-             throws DispositionReportFaultMessage {
+                Holder<List<PublisherAssertion>> publisherAssertion)
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -892,7 +892,6 @@
                         businessKeysFound = FindBusinessByPublisherQuery.select(em, null, publisher, businessKeysFound);
 
                         //TODO this has to be reworked to record what was deleted.
-                        
                         // First, wipe out all previous assertions associated with this publisher
                         DeletePublisherAssertionByBusinessQuery.delete(em, businessKeysFound);
 
@@ -914,7 +913,6 @@
                                 modelPubAssertion.setFromCheck(""false"");
                                 modelPubAssertion.setToCheck(""false"");
 
-                                
                                 if (publisher.isOwner(modelPubAssertion.getBusinessEntityByFromKey())) {
                                         modelPubAssertion.setFromCheck(""true"");
                                 }
@@ -923,21 +921,21 @@
                                 }
                                 em.persist(modelPubAssertion);
 
-                                
                                 changes.add(getChangeRecord_NewAssertion(apiPubAssertion, modelPubAssertion, node));
 
                         }
 
                         tx.commit();
-                        for (int i=0; i < changes.size(); i++)
+                        for (int i = 0; i < changes.size(); i++) {
                                 ReplicationNotifier.Enqueue(changes.get(i));
+                        }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SET_PUBLISHERASSERTIONS,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(PublicationQuery.SET_PUBLISHERASSERTIONS,
-                             QueryStatus.FAILED, procTime);
+                                QueryStatus.FAILED, procTime);
                         throw drfm;
                 } finally {
                         if (tx.isActive()) {
@@ -1029,16 +1027,24 @@
                 uddiEntity.setModified(now);
                 uddiEntity.setModifiedIncludingChildren(now);
 
-                if (!isChild) {
-                        org.apache.juddi.model.BusinessService parent = em.find(org.apache.juddi.model.BusinessService.class, uddiEntity.getBusinessService().getEntityKey());
+                //if (!isChild) {
+                org.apache.juddi.model.BusinessService parent = em.find(org.apache.juddi.model.BusinessService.class, uddiEntity.getBusinessService().getEntityKey());
+                if (parent != null) {
                         parent.setModifiedIncludingChildren(now);
                         em.persist(parent);
 
                         // JUDDI-421:  now the businessEntity parent will have it's modifiedIncludingChildren set
                         org.apache.juddi.model.BusinessEntity businessParent = em.find(org.apache.juddi.model.BusinessEntity.class, parent.getBusinessEntity().getEntityKey());
-                        businessParent.setModifiedIncludingChildren(now);
-                        em.persist(businessParent);
+                        if (businessParent != null) {
+                                businessParent.setModifiedIncludingChildren(now);
+                                em.persist(businessParent);
+                        } else {
+                                logger.warn(""Parent business is null for saved binding template!"");
+                        }
+                } else {
+                        logger.warn(""Parent service is null for saved binding template!"");
                 }
+                // }
 
                 String nodeId = """";
                 try {
"
juddi,690bfb0157cb9c6a54f367f231326b432ecb6a33,"JUDDI-242 adding findBinding by tModel cat bag tests
JUDDI-899 fixing a bug where subscriptions were not picking up changes in binding templates due to ModifiedIncludingChildren not being set correctly for parent objects
",2015-01-01 13:09:18,Alex,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index eb0c72a..ad34486 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
+import javax.xml.bind.JAXB;
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Holder;
@@ -34,6 +35,7 @@
 import org.junit.Test;
 import org.uddi.api_v3.AccessPoint;
 import org.uddi.api_v3.AddPublisherAssertions;
+import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessEntity;
@@ -419,7 +421,7 @@
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
                         logger.info(""updating Mary's business ********** "");
-                        updatePublisherBusiness(authInfoMary, saveMaryPublisherBusiness, publicationMary);
+                        updatePublisherBusiness(authInfoMary, saveMaryPublisherBusiness, publicationMary, ""Updated Name"");
 
                         boolean found = verifyDelivery(""Updated Name"");
 
@@ -434,7 +436,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -547,8 +549,8 @@
          * @param biz
          * @param pub
          */
-        public static void updatePublisherBusiness(String auth, BusinessEntity biz, UDDIPublicationPortType pub) throws Exception {
-                biz.getName().add(new Name(""Updated Name"", ""en""));
+        public static void updatePublisherBusiness(String auth, BusinessEntity biz, UDDIPublicationPortType pub, String name) throws Exception {
+                biz.getName().add(new Name(name, null));
                 SaveBusiness sb = new SaveBusiness();
                 sb.setAuthInfo(auth);
                 sb.getBusinessEntity().add(biz);
@@ -918,10 +920,8 @@
 
                 }
         }
-        
-        
-        
-         /**
+
+        /**
          * PUBLISHERASSERTION tests joe want's updates on mary's binding
          *
          * @throws Exception
@@ -957,7 +957,7 @@
                         sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
                         sub.setSubscriptionFilter(new SubscriptionFilter());
                         sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
-                       
+
                         holder.value.add(sub);
                         subscriptionJoe.saveSubscription(authInfoJoe, holder);
                         logger.info(""subscription saved for "" + holder.value.get(0).getSubscriptionKey());
@@ -992,7 +992,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -1083,7 +1083,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -1103,9 +1103,8 @@
 
         //
         /**
-         * find related businesses 
-         * i.e. setup subscriptions for all related businesses to joe's biz
-         * then setup PA between Joe and Mary
+         * find related businesses i.e. setup subscriptions for all related
+         * businesses to joe's biz then setup PA between Joe and Mary
          *
          * @throws Exception
          */
@@ -1122,9 +1121,9 @@
                         String before = TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe);
 
                         tckTModelJoe.saveJoePublisherTmodel(authInfoJoe);
-              
+
                         tckTModelMary.saveMaryPublisherTmodel(authInfoMary);
-              
+
                         BusinessEntity saveMaryPublisherBusiness = tckBusinessMary.saveMaryPublisherBusiness(authInfoMary);
                         tckBusinessJoe.saveJoePublisherBusiness(authInfoJoe);
                         tckBusinessServiceJoe.saveJoePublisherService(authInfoJoe);
@@ -1147,7 +1146,7 @@
                         //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
-                        
+
                         logger.info(""saving Mary's publisher assertion********** "");
                         AddPublisherAssertions pa = new AddPublisherAssertions();
                         pa.setAuthInfo(authInfoMary);
@@ -1156,8 +1155,7 @@
                         pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
                         pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
                         pa.getPublisherAssertion().add(pas);
-                        
-                      
+
                         publicationMary.addPublisherAssertions(pa);
                         logger.info(""saving Joe's publisher assertion********** "");
                         pa = new AddPublisherAssertions();
@@ -1169,18 +1167,18 @@
                         pa.getPublisherAssertion().add(pas);
                         publicationJoe.addPublisherAssertions(pa);
 
-                          //expecting that Joe gets notified that joe's and mary's businesses are now ""related""
+                        //expecting that Joe gets notified that joe's and mary's businesses are now ""related""
                         boolean found = verifyDelivery(TckBusiness.MARY_BUSINESS_KEY);
                         DeletePublisherAssertions deletePublisherAssertions = new DeletePublisherAssertions();
                         deletePublisherAssertions.setAuthInfo(authInfoMary);
                         deletePublisherAssertions.getPublisherAssertion().add(pas);
                         publicationMary.deletePublisherAssertions(deletePublisherAssertions);
-                        
-                         deletePublisherAssertions = new DeletePublisherAssertions();
+
+                        deletePublisherAssertions = new DeletePublisherAssertions();
                         deletePublisherAssertions.setAuthInfo(authInfoJoe);
                         deletePublisherAssertions.getPublisherAssertion().add(pas);
                        // publicationJoe.deletePublisherAssertions(deletePublisherAssertions);
-                        
+
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
@@ -1192,7 +1190,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -1237,7 +1235,7 @@
                         bs.setBusinessKey(saveMaryPublisherBusiness.getBusinessKey());
                         bs.setServiceKey(TckTModel.MARY_KEY_PREFIX + UUID.randomUUID().toString());
                         bs.getName().add(new Name(""Mary's service for "" + getTransport(), null));
-                        
+
                         bs.setBindingTemplates(new BindingTemplates());
                         BindingTemplate bt = new BindingTemplate();
                         bt.setAccessPoint(new AccessPoint(""http://localhost"", ""endPoint""));
@@ -1264,11 +1262,10 @@
                         sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
                         sub.setSubscriptionFilter(new SubscriptionFilter());
                         sub.getSubscriptionFilter().setFindBinding(new FindBinding());
-                       //FAIL sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
+                        //FAIL sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
                         sub.getSubscriptionFilter().getFindBinding().setTModelBag(new TModelBag());
-                         
+
                         //At least one of either a tModelBag or a find_tModel argument SHOULD be supplied, unless a categoryBag based search is being used.
-                        
                         sub.getSubscriptionFilter().getFindBinding().getTModelBag().getTModelKey().add(WSDMQosConstants.METRIC_FAULT_COUNT_KEY);
                         //joe wants updates to mary's binding
 
@@ -1279,7 +1276,7 @@
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
                         logger.info(""updating Mary's binding ********** "");
-                       String newcontent= updatePublisherBindingAddTMI(authInfoMary, bt, publicationMary);
+                        String newcontent = updatePublisherBindingAddTMI(authInfoMary, bt, publicationMary);
 
                         boolean found = verifyDelivery(newcontent);
 
@@ -1294,7 +1291,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -1311,11 +1308,16 @@
 
                 }
         }
-        
-        
+
+        /**
+         * joe wants updates on all services with wsdm qos tmi. mary updates a
+         * binding to trigger the call back
+         *
+         * @throws Exception
+         */
         @Test
-        @Ignore
-         public void joePublisherUpdate_FIND_BINDING_BY_CATBAG() throws Exception {
+        //@Ignore
+        public void joePublisherUpdate_FIND_BINDING_BY_CATBAG() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
                 logger.info(""joePublisherUpdate_"" + getTransport() + ""_FIND_BINDING_BY_CATBAG"");
@@ -1336,7 +1338,7 @@
                         bs.setBusinessKey(saveMaryPublisherBusiness.getBusinessKey());
                         bs.setServiceKey(TckTModel.MARY_KEY_PREFIX + UUID.randomUUID().toString());
                         bs.getName().add(new Name(""Mary's service for "" + getTransport(), null));
-                        
+
                         bs.setBindingTemplates(new BindingTemplates());
                         BindingTemplate bt = new BindingTemplate();
                         bt.setAccessPoint(new AccessPoint(""http://localhost"", ""endPoint""));
@@ -1363,13 +1365,10 @@
                         sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
                         sub.setSubscriptionFilter(new SubscriptionFilter());
                         sub.getSubscriptionFilter().setFindBinding(new FindBinding());
-                        //sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
-                        sub.getSubscriptionFilter().getFindBinding().setTModelBag(new TModelBag());
-                        
+
                         //At least one of either a tModelBag or a find_tModel argument SHOULD be supplied, unless a categoryBag based search is being used.
-                        
-                        sub.getSubscriptionFilter().getFindBinding().getTModelBag().getTModelKey().add(""uddi:uddi.org:categorization:types"");
-                        
+                        sub.getSubscriptionFilter().getFindBinding().setCategoryBag(new CategoryBag());
+                        sub.getSubscriptionFilter().getFindBinding().getCategoryBag().getKeyedReference().add(new KeyedReference(""uddi:uddi.org:categorization:types"", UDDIConstants.CategorizationTypes_Cacheable, ""Cacheable""));
 
                         holder.value.add(sub);
                         subscriptionJoe.saveSubscription(authInfoJoe, holder);
@@ -1377,10 +1376,37 @@
                         //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
-                        logger.info(""updating Mary's binding ********** "");
-                       String newcontent= updatePublisherBindingAddCategory(authInfoMary, bt, publicationMary,""uddi:uddi.org:categorization:types"");
+                        logger.info(""dumping mary's binding before.... "");
+                        JAXB.marshal(bs, System.out);
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
 
-                        boolean found = verifyDelivery(newcontent);
+                        logger.info(""updating Mary's binding ********** "");
+                        // BindingDetail after=new BindingDetail();
+                        /*GetBindingDetail bindingDetail = new GetBindingDetail();
+                        bindingDetail.setAuthInfo(authInfoMary);
+                        bindingDetail.getBindingKey().add(bs.getBindingTemplates().getBindingTemplate().get(0).getBindingKey());*/
+                        BindingDetail bindingDetail1 = null;//inquiryMary.getBindingDetail(bindingDetail);
+                        bindingDetail1 = updatePublisherBindingAddCategory(authInfoMary, bt, publicationMary, new KeyedReference(""uddi:uddi.org:categorization:types"", UDDIConstants.CategorizationTypes_Cacheable, ""Cacheable""), bindingDetail1);
+
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        logger.info(""dumping mary's binding after.... "");
+                        JAXB.marshal(bindingDetail1, System.out);
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        System.out.println(""#####################################"");
+                        boolean found = verifyDelivery(UDDIConstants.CategorizationTypes_Cacheable);
 
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
@@ -1393,7 +1419,7 @@
                         logger.error(""No exceptions please."");
                         e.printStackTrace();
 
-                        Assert.fail();
+                        Assert.fail(e.getMessage());
                 } finally {
                         //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
                         DeleteSubscription ds = new DeleteSubscription();
@@ -1410,8 +1436,6 @@
 
                 }
         }
-         
-         
 
         //find binding
         private void updatePublisherService(String authInfo, BusinessService bs, UDDIPublicationPortType pub) throws Exception {
@@ -1424,11 +1448,12 @@
 
         /**
          * returns a string used to confirm delivery of an update
+         *
          * @param authInfo
          * @param bt
          * @param pub
          * @return
-         * @throws Exception 
+         * @throws Exception
          */
         private String updatePublisherBinding(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub) throws Exception {
                 SaveBinding sb = new SaveBinding();
@@ -1439,43 +1464,44 @@
                 pub.saveBinding(sb);
                 return ret;
         }
-        
+
         /**
          * returns a string used to confirm delivery of an update
+         *
          * @param authInfo
          * @param bt
          * @param pub
          * @param cat
          * @return
-         * @throws Exception 
+         * @throws Exception
          */
         private String updatePublisherBindingAddTMI(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub) throws Exception {
                 SaveBinding sb = new SaveBinding();
                 sb.setAuthInfo(authInfo);
-               if (bt.getTModelInstanceDetails()==null)
-                       bt.setTModelInstanceDetails(new TModelInstanceDetails());
-                 TModelInstanceInfo tii = new TModelInstanceInfo();
+                if (bt.getTModelInstanceDetails() == null) {
+                        bt.setTModelInstanceDetails(new TModelInstanceDetails());
+                }
+                TModelInstanceInfo tii = new TModelInstanceInfo();
                 tii.setTModelKey(WSDMQosConstants.METRIC_FAULT_COUNT_KEY);
                 tii.setInstanceDetails(new InstanceDetails());
                 tii.getInstanceDetails().setInstanceParms(""400"");
-               bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tii);
-               sb.getBindingTemplate().add(bt);
+                bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tii);
+                sb.getBindingTemplate().add(bt);
                 pub.saveBinding(sb);
                 return WSDMQosConstants.METRIC_FAULT_COUNT_KEY;
         }
-        
-        //TODO potential test case This argument specifies the filtering criteria which limits the scope of a subscription to a subset of registry records. It is required except when renewing an existing subscription.
 
-        private String updatePublisherBindingAddCategory(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub, String cat)  throws Exception{
-                 SaveBinding sb = new SaveBinding();
+        //TODO potential test case This argument specifies the filtering criteria which limits the scope of a subscription to a subset of registry records. It is required except when renewing an existing subscription.
+        private BindingDetail updatePublisherBindingAddCategory(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub, KeyedReference cat, BindingDetail outSaveBinding) throws Exception {
+                SaveBinding sb = new SaveBinding();
                 sb.setAuthInfo(authInfo);
-             if (bt.getCategoryBag()==null)
-                     bt.setCategoryBag(new CategoryBag());
-             bt.getCategoryBag().getKeyedReference().add(new KeyedReference(cat, UDDIConstants.CategorizationTypes_Cacheable, ""Cacheable""));
-               sb.getBindingTemplate().add(bt);
-                pub.saveBinding(sb);
-                return UDDIConstants.CategorizationTypes_Cacheable;
+                if (bt.getCategoryBag() == null) {
+                        bt.setCategoryBag(new CategoryBag());
+                }
+                bt.getCategoryBag().getKeyedReference().add(cat);
+                sb.getBindingTemplate().add(bt);
+                return  pub.saveBinding(sb);
+                //return UDDIConstants.CategorizationTypes_Cacheable;
         }
-        
 
 }
"
juddi,7ccb68295ace2e1ce5bb98f026a3645448c47de3,"JUDDI-899 adding test cases for this issue. It appears to be a non-issue.
JUDDI-881 adding additional checks to ensure correct operation in openjpa and hibernate
",2014-12-26 22:18:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/Registry.java b/juddi-core/src/main/java/org/apache/juddi/Registry.java
index 60477ef..eaaff53 100644
--- a/juddi-core/src/main/java/org/apache/juddi/Registry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/Registry.java
@@ -81,6 +81,7 @@
                         log.info(""Starting jUDDI registry..."");
                         registry = new Registry();
                         replicationNotifier = new ReplicationNotifier();
+                        AppConfig.triggerReload();
                         if (AppConfig.getConfiguration().getBoolean(Property.JUDDI_SUBSCRIPTION_NOTIFICATION, true)) {
                                 subscriptionNotifier = new SubscriptionNotifier();
                         }
"
juddi,7ccb68295ace2e1ce5bb98f026a3645448c47de3,"JUDDI-899 adding test cases for this issue. It appears to be a non-issue.
JUDDI-881 adding additional checks to ensure correct operation in openjpa and hibernate
",2014-12-26 22:18:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 90e4eb8..1b3b9b9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -234,11 +234,13 @@
                 
                 boolean enabled = true;
                 try {
-                        AppConfig.getConfiguration().getBoolean(Property.JUDDI_ENABLE_FIND_BUSINESS_TMODEL_BAG_FILTERING, true);
+                        //AppConfig.reloadConfig();
+                       enabled= AppConfig.getConfiguration().getBoolean(Property.JUDDI_ENABLE_FIND_BUSINESS_TMODEL_BAG_FILTERING, true);
                 } catch (ConfigurationException ex) {
                         logger.error(ex);
                 }
                 if (enabled) {
+                        logger.info(""FindBusiness by tModelBag is enabled! Loaded from "" + AppConfig.getConfigFileURL());
                         List<?> serviceResults = null;
                         for (int i = 0; i < queryResults.size(); i++) {
                                 org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
"
juddi,7ccb68295ace2e1ce5bb98f026a3645448c47de3,"JUDDI-899 adding test cases for this issue. It appears to be a non-issue.
JUDDI-881 adding additional checks to ensure correct operation in openjpa and hibernate
",2014-12-26 22:18:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index c043298..2f47e43 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -20,6 +20,8 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import javax.jws.WebService;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
@@ -190,6 +192,14 @@
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
+                        try {
+                                //AppConfig.reloadConfig();
+                                logger.info(""FindBusiness with tModel bag filtering is enabled: "" +
+                                        AppConfig.getConfiguration().getBoolean(Property.JUDDI_ENABLE_FIND_BUSINESS_TMODEL_BAG_FILTERING,true)
+                                + "" loaded from "" + AppConfig.getConfigFileURL());
+                        } catch (ConfigurationException ex) {
+                                ex.printStackTrace();
+                        }
 			tx.begin();
 
 			if (isAuthenticated())
"
juddi,7ccb68295ace2e1ce5bb98f026a3645448c47de3,"JUDDI-899 adding test cases for this issue. It appears to be a non-issue.
JUDDI-881 adding additional checks to ensure correct operation in openjpa and hibernate
",2014-12-26 22:18:43,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index fcfaeaf..47c11a9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -21,8 +21,6 @@
 import java.net.URL;
 import java.util.List;
 import java.util.Properties;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
@@ -31,7 +29,6 @@
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.MapConfiguration;
-import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.commons.configuration.SystemConfiguration;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
@@ -88,7 +85,7 @@
 	}
 	/**
 	 * Does the actual work of reading the configuration from System
-	 * Properties and/or juddiv3.properties file. When the juddiv3.properties
+	 * Properties and/or juddiv3.xml file. When the juddiv3.xml
 	 * file is updated the file will be reloaded. By default the reloadDelay is
 	 * set to 1 second to prevent excessive date stamp checking.
 	 */
@@ -249,6 +246,10 @@
 		getInstance().loadConfiguration();
 		Registry.start();
 	}
+        
+        public static void triggerReload() throws ConfigurationException{
+                getInstance().loadConfiguration();
+        }
 	/**
 	 * The object from which property values can be obtained.
 	 * @return the commons Configuration interface
"
juddi,7ccb68295ace2e1ce5bb98f026a3645448c47de3,"JUDDI-899 adding test cases for this issue. It appears to be a non-issue.
JUDDI-881 adding additional checks to ensure correct operation in openjpa and hibernate
",2014-12-26 22:18:43,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index 97e85ad..fce76e0 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -149,7 +149,7 @@
 		}
 		catch(Exception e) {
 			logger.error(e.getMessage(), e);
-			Assert.fail(""No exception should be thrown."");
+			Assert.fail(""No exception should be thrown."" + e.getMessage());
 		}
 	}
 	
"
juddi,32fd00534079181b8fef1bfdd2adfab26569c579,"JUDDI-881 filtering is now togglable, load tests are now performed during junit test executing with filtering disabled. For best performance with larger data sets, it is recommended to disable this.
",2014-12-25 14:08:54,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index af5e6ee..90e4eb8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -19,12 +19,17 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.xml.ws.Holder;
+import org.apache.commons.configuration.ConfigurationException;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.query.FetchBindingTemplatesQuery;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
@@ -226,28 +231,36 @@
 
 		// Sort and retrieve the final results taking paging into account
 		List<?> queryResults = FetchBusinessEntitiesQuery.select(em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
-		List<?> serviceResults = null;
-		for (int i = 0; i<queryResults.size(); i++) {
-			org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
-			
-			List<Object> keysIn = new ArrayList<Object>();
-			List<org.apache.juddi.model.BusinessService> services = be.getBusinessServices();
-			for (int j = 0; j<services.size(); j++) {
-				keysIn.add(services.get(j).getEntityKey());
-			}
-
-			serviceResults = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), null, keysIn);
-			if (serviceResults == null) {
-				be.setBusinessServices(null);
-			} else { 
-				ListDescription ldesc = new ListDescription();
-				result.setListDescription(listDesc);
-				List<?> srvcs = FetchBusinessServicesQuery.select(em, findQualifiers, serviceResults, body.getMaxRows(), 
-						body.getListHead(), ldesc);
-				be.setBusinessServices((List<org.apache.juddi.model.BusinessService>)srvcs);
-			}
+                
+                boolean enabled = true;
+                try {
+                        AppConfig.getConfiguration().getBoolean(Property.JUDDI_ENABLE_FIND_BUSINESS_TMODEL_BAG_FILTERING, true);
+                } catch (ConfigurationException ex) {
+                        logger.error(ex);
                 }
+                if (enabled) {
+                        List<?> serviceResults = null;
+                        for (int i = 0; i < queryResults.size(); i++) {
+                                org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
 
+                                List<Object> keysIn = new ArrayList<Object>();
+                                List<org.apache.juddi.model.BusinessService> services = be.getBusinessServices();
+                                for (int j = 0; j < services.size(); j++) {
+                                        keysIn.add(services.get(j).getEntityKey());
+                                }
+
+                                serviceResults = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), null, keysIn);
+                                if (serviceResults == null) {
+                                        be.setBusinessServices(null);
+                                } else {
+                                        ListDescription ldesc = new ListDescription();
+                                        result.setListDescription(listDesc);
+                                        List<?> srvcs = FetchBusinessServicesQuery.select(em, findQualifiers, serviceResults, body.getMaxRows(),
+                                                body.getListHead(), ldesc);
+                                        be.setBusinessServices((List<org.apache.juddi.model.BusinessService>) srvcs);
+                                }
+                        }
+                }
                 
                 
 		if (queryResults != null && queryResults.size() > 0)
"
juddi,32fd00534079181b8fef1bfdd2adfab26569c579,"JUDDI-881 filtering is now togglable, load tests are now performed during junit test executing with filtering disabled. For best performance with larger data sets, it is recommended to disable this.
",2014-12-25 14:08:54,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index 2960c5c..ae8b355 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -190,4 +190,10 @@
      * @since 3.2.1
      */
     public final static String JUDDI_LOGGING_FindApiCalls = ""juddi.logging.logInquirySearchPayloads"";
+    /**
+     * The UDDI v3 spec specifically calls for supporting this, however it creates significant performance problems in jUDDI when there
+     * are a large number of business and services. Defaults to true if not defined
+     * @since 3.3
+     */
+        public static String JUDDI_ENABLE_FIND_BUSINESS_TMODEL_BAG_FILTERING=""juddi.preformance.enableFindBusinessTModelBagFiltering"";
 }
"
juddi,32fd00534079181b8fef1bfdd2adfab26569c579,"JUDDI-881 filtering is now togglable, load tests are now performed during junit test executing with filtering disabled. For best performance with larger data sets, it is recommended to disable this.
",2014-12-25 14:08:54,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
index 032e8ef..bb4e836 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
@@ -35,8 +35,8 @@
  */
 public class TckBindingTemplate 
 {
-	final static String JOE_BINDING_XML               = ""uddi_data/joepublisher/bindingTemplate.xml"";
-    final static String JOE_BINDING_KEY               = ""uddi:uddi.joepublisher.com:bindingtwo"";
+	public final static String JOE_BINDING_XML               = ""uddi_data/joepublisher/bindingTemplate.xml"";
+   public final static String JOE_BINDING_KEY               = ""uddi:uddi.joepublisher.com:bindingtwo"";
   
 	private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
"
juddi,8f7c669da1bfb76c63be3cb03a45832c45787fa9,"JUDDI-881 filtering is now reenabled, load tests are now performed during junit test executing and are still skipped during the tck tests. Performance doesn't appeared to be too affected
",2014-12-24 15:52:28,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index b9c91e0..af5e6ee 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -225,9 +225,31 @@
 		result.setListDescription(listDesc);
 
 		// Sort and retrieve the final results taking paging into account
-		List<?> queryResults = FetchBusinessEntitiesQuery.select(
-				em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
+		List<?> queryResults = FetchBusinessEntitiesQuery.select(em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
+		List<?> serviceResults = null;
+		for (int i = 0; i<queryResults.size(); i++) {
+			org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
 			
+			List<Object> keysIn = new ArrayList<Object>();
+			List<org.apache.juddi.model.BusinessService> services = be.getBusinessServices();
+			for (int j = 0; j<services.size(); j++) {
+				keysIn.add(services.get(j).getEntityKey());
+			}
+
+			serviceResults = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), null, keysIn);
+			if (serviceResults == null) {
+				be.setBusinessServices(null);
+			} else { 
+				ListDescription ldesc = new ListDescription();
+				result.setListDescription(listDesc);
+				List<?> srvcs = FetchBusinessServicesQuery.select(em, findQualifiers, serviceResults, body.getMaxRows(), 
+						body.getListHead(), ldesc);
+				be.setBusinessServices((List<org.apache.juddi.model.BusinessService>)srvcs);
+			}
+                }
+
+                
+                
 		if (queryResults != null && queryResults.size() > 0)
 			result.setBusinessInfos(new org.uddi.api_v3.BusinessInfos());
 		
"
juddi,8f7c669da1bfb76c63be3cb03a45832c45787fa9,"JUDDI-881 filtering is now reenabled, load tests are now performed during junit test executing and are still skipped during the tck tests. Performance doesn't appeared to be too affected
",2014-12-24 15:52:28,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index f632973..87e02a3 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -168,6 +168,16 @@
                                 beIn.getName().get(0).setValue(businessName + ""-"" + i);
                                 beIn.setBusinessKey(businessKey + ""-"" + i);
                                 sb.getBusinessEntity().add(beIn);
+                               /* if (beIn.getBusinessServices()!=null){
+                                        for (int x=0; x < beIn.getBusinessServices().getBusinessService().size(); x++){
+                                                beIn.getBusinessServices().getBusinessService().get(x).setBusinessKey(businessKey + ""-"" + i);
+                                                if (beIn.getBusinessServices().getBusinessService().get(x).getBindingTemplates()!=null){
+                                                        for (int y=0; y < beIn.getBusinessServices().getBusinessService().get(x).getBindingTemplates().getBindingTemplate().size(); y++){
+                                                                beIn.getBusinessServices().getBusinessService().get(x).getBindingTemplates().getBindingTemplate().get(y).
+                                                        }
+                                                }
+                                        }
+                                }*/
                                 publication.saveBusiness(sb);
                                 logger.info(""Saved business with key "" + businessName + ""-"" + i);
                         }
"
juddi,8f7c669da1bfb76c63be3cb03a45832c45787fa9,"JUDDI-881 filtering is now reenabled, load tests are now performed during junit test executing and are still skipped during the tck tests. Performance doesn't appeared to be too affected
",2014-12-24 15:52:28,Alex,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
index fa4a19d..ab012b4 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
@@ -123,7 +123,7 @@
 				ss = new SaveService();
 				ss.setAuthInfo(authInfo);
 				bsIn.getName().get(0).setValue(serviceName + ""-"" + i);
-				bsIn.setBusinessKey(parentBusinessKey);
+				bsIn.setBusinessKey(parentBusinessKey +""-"" + businessInt);
 				bsIn.setServiceKey(serviceKey + ""-"" + businessInt + ""-"" + i);
 				bsIn.getBindingTemplates().getBindingTemplate().get(0).setBindingKey(bindingKey + ""-"" + businessInt + ""-"" + i);
 				bsIn.getBindingTemplates().getBindingTemplate().get(0).setServiceKey(serviceKey + ""-"" + businessInt + ""-"" + i);
"
juddi,15ed423ba60de94a2253a87d73b4b6e49fb35339,"JUDDI-256 cleaning up the test case
",2014-12-22 21:36:31,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
index 9af0093..465fdb5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
@@ -184,7 +184,8 @@
                                 x.notifyChangeRecordsAvailable(req);
                                 log.debug(""Successfully sent change record available message to "" + s);
                         } catch (Exception ex) {
-                                log.warn(""Unable to send change notification to "" + s, ex);
+                                log.warn(""Unable to send change notification to "" + s   );
+                                log.debug(""Unable to send change notification to "" + s, ex);
                         }
                 }
         }
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
index 2bb21f2..2c5d295 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
@@ -16,7 +16,9 @@
  */
 package org.apache.juddi.api.impl;
 
+import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.UUID;
@@ -31,6 +33,7 @@
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.datatype.XMLGregorianCalendar;
+import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Holder;
 
 import org.apache.commons.configuration.ConfigurationException;
@@ -38,18 +41,22 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api.util.CustodyTransferQuery;
 import org.apache.juddi.api.util.QueryStatus;
-import org.apache.juddi.api.util.ValueSetValidationQuery;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
+import org.apache.juddi.mapping.MappingApiToModel;
+import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.model.BindingTemplate;
 import org.apache.juddi.model.BusinessEntity;
 import org.apache.juddi.model.BusinessService;
+import org.apache.juddi.model.Operator;
+import org.apache.juddi.model.Tmodel;
 import org.apache.juddi.model.TransferTokenKey;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.replication.ReplicationNotifier;
+import org.apache.juddi.v3.client.UDDIService;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.validation.ValidateCustodyTransfer;
@@ -57,16 +64,22 @@
 import org.uddi.custody_v3.DiscardTransferToken;
 import org.uddi.custody_v3.KeyBag;
 import org.uddi.custody_v3.TransferEntities;
+import org.uddi.custody_v3.TransferOperationalInfo;
+import org.uddi.repl_v3.ChangeRecord;
+import org.uddi.repl_v3.ChangeRecordIDType;
+import org.uddi.repl_v3.ChangeRecordNewData;
+import org.uddi.repl_v3.TransferCustody;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
+import org.uddi.v3_service.UDDIReplicationPortType;
 
 /**
  * This implements the UDDI v3 Custody Transfer API web service
  *
  */
 @WebService(serviceName = ""UDDICustodyTransferService"",
-     endpointInterface = ""org.uddi.v3_service.UDDICustodyTransferPortType"",
-     targetNamespace = ""urn:uddi-org:v3_service"")
+        endpointInterface = ""org.uddi.v3_service.UDDICustodyTransferPortType"",
+        targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDICustodyTransferImpl extends AuthenticatedService implements UDDICustodyTransferPortType {
 
         public static final String TRANSFER_TOKEN_PREFIX = ""transfertoken:"";
@@ -77,7 +90,7 @@
         private static DatatypeFactory df = null;
         private UDDIServiceCounter serviceCounter;
 
-        public UDDICustodyTransferImpl()  {
+        public UDDICustodyTransferImpl() {
                 super();
                 serviceCounter = ServiceCounterLifecycleResource.getServiceCounter(this.getClass());
                 if (df == null) {
@@ -90,8 +103,9 @@
         }
 
         @SuppressWarnings(""unchecked"")
+        @Override
         public void discardTransferToken(DiscardTransferToken body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -119,8 +133,8 @@
                                 for (String key : keyList) {
                                         // Creating parameters for key-checking query
                                         DynamicQuery.Parameter param = new DynamicQuery.Parameter(""UPPER(ttk.entityKey)"",
-                                             key.toUpperCase(),
-                                             DynamicQuery.PREDICATE_EQUALS);
+                                                key.toUpperCase(),
+                                                DynamicQuery.PREDICATE_EQUALS);
 
                                         params.add(param);
                                 }
@@ -142,7 +156,7 @@
                         tx.commit();
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(CustodyTransferQuery.DISCARD_TRANSFERTOKEN,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                 } finally {
                         if (tx.isActive()) {
@@ -152,9 +166,10 @@
                 }
         }
 
+        @Override
         public void getTransferToken(String authInfo, KeyBag keyBag,
-             Holder<String> nodeID, Holder<XMLGregorianCalendar> expirationTime,
-             Holder<byte[]> opaqueToken) throws DispositionReportFaultMessage {
+                Holder<String> nodeID, Holder<XMLGregorianCalendar> expirationTime,
+                Holder<byte[]> opaqueToken) throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
@@ -206,7 +221,7 @@
 
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(CustodyTransferQuery.GET_TRANSFERTOKEN,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                 } finally {
                         if (tx.isActive()) {
@@ -216,111 +231,124 @@
                 }
         }
 
+        @Override
         public void transferEntities(TransferEntities body)
-             throws DispositionReportFaultMessage {
+                throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
 
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
+                 List<ChangeRecord> changes = new ArrayList<ChangeRecord>();
                 try {
                         tx.begin();
 
                         UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
 
-                        new ValidateCustodyTransfer(publisher).validateTransferEntities(em, body);
+                        ValidateCustodyTransfer verifier = new ValidateCustodyTransfer(publisher);
 
-                        // Once validated, the ownership transfer is as simple as switching the publisher
-                        KeyBag keyBag = body.getKeyBag();
-                        List<String> keyList = keyBag.getKey();
-                        //used for the change journal
-                        List<OperationalInfo> op_info = new ArrayList<OperationalInfo>();
-                        for (String key : keyList) {
-                                UddiEntity uddiEntity = em.find(UddiEntity.class, key);
-                                uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
-                                OperationalInfo o = new OperationalInfo();
-                                o.setAuthorizedName(publisher.getAuthorizedName());
+                        //if the destination transfer is to a different node, 
+                        if (!verifier.validateTransferEntities(em, body)) {
+                                //i don't own these entities, so tell the ower to transfer to me.
 
-                                GregorianCalendar gcal = new GregorianCalendar();
-                                gcal.setTime(uddiEntity.getCreated());
-                                o.setCreated(df.newXMLGregorianCalendar(gcal));
+                                //look up the replication config endpoint for that node and trigger the transfer, then return
+                                //ok this is a node to node transfer, first up a replication client to the destination node
+                                String sourceNode = null;
+                                try {
+                                        KeyBag keyBag = body.getKeyBag();
+                                        List<String> keyList = keyBag.getKey();
+                                        for (String key : keyList) {
+                                                UddiEntity uddiEntity = em.find(UddiEntity.class, key);
+                                                if (sourceNode != null
+                                                        && !uddiEntity.getNodeId().equals(sourceNode)) {
+                                                        throw new Exception(""All entities to be transfer must be transfered to the same source and destination node"");
+                                                }
+                                                sourceNode = uddiEntity.getNodeId();
+                                        }
 
-                                o.setEntityKey(uddiEntity.getEntityKey());
+                                        UDDIReplicationPortType replicationClient = getReplicationClient(sourceNode);
+                                        if (replicationClient == null) {
+                                                throw new Exception(""Unknown node. is it in the replication graph?"" + sourceNode);
+                                        }
+                                        TransferCustody transferCustody = new TransferCustody();
+                                        transferCustody.setTransferToken(body.getTransferToken());
+                                        transferCustody.setKeyBag(body.getKeyBag());
+                                        transferCustody.setTransferOperationalInfo(new TransferOperationalInfo());
+                                        transferCustody.getTransferOperationalInfo().setAuthorizedName(publisher.getAuthorizedName());
+                                        transferCustody.getTransferOperationalInfo().setNodeID(node);
 
-                                gcal = new GregorianCalendar();
-                                gcal.setTime(uddiEntity.getModified());
-                                o.setModified(df.newXMLGregorianCalendar(gcal));
+                                        replicationClient.transferCustody(transferCustody);
+                                } catch (Exception ex) {
+                                        logger.error(""Unable to transfer entities to node "" + sourceNode + ""."", ex);
+                                }
+                                //and trigger the transfer
+                        } else {
 
-                                gcal = new GregorianCalendar();
-                                gcal.setTime(uddiEntity.getModifiedIncludingChildren());
-                                o.setModifiedIncludingChildren(df.newXMLGregorianCalendar(gcal));
-                                o.setNodeID(uddiEntity.getNodeId());
-                                op_info.add(o);
+                                // Once validated, the ownership transfer is as simple as switching the publisher
+                                KeyBag keyBag = body.getKeyBag();
+                                List<String> keyList = keyBag.getKey();
+                                //used for the change journal
+                               
+                                for (String key : keyList) {
+                                        UddiEntity uddiEntity = em.find(UddiEntity.class, key);
+                                        uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+                                        Date now = new Date();
+                                        uddiEntity.setModified(now);
+                                        uddiEntity.setModifiedIncludingChildren(now);
+                                        
+                                        if (uddiEntity instanceof BusinessEntity) {
+                                                BusinessEntity be = (BusinessEntity) uddiEntity;
 
-                                if (uddiEntity instanceof BusinessEntity) {
-                                        BusinessEntity be = (BusinessEntity) uddiEntity;
+                                                List<BusinessService> bsList = be.getBusinessServices();
+                                                for (BusinessService bs : bsList) {
+                                                        bs.setAuthorizedName(publisher.getAuthorizedName());
+                                                        bs.setModified(now);
+                                                        bs.setModifiedIncludingChildren(now);
 
-                                        List<BusinessService> bsList = be.getBusinessServices();
-                                        for (BusinessService bs : bsList) {
-                                                bs.setAuthorizedName(publisher.getAuthorizedName());
-                                                OperationalInfo o2 = new OperationalInfo();
-                                                o2.setAuthorizedName(bs.getAuthorizedName());
-
-                                                gcal = new GregorianCalendar();
-                                                gcal.setTime(bs.getCreated());
-                                                o2.setCreated(df.newXMLGregorianCalendar(gcal));
-
-                                                o2.setEntityKey(bs.getEntityKey());
-
-                                                gcal = new GregorianCalendar();
-                                                gcal.setTime(bs.getModified());
-                                                o2.setModified(df.newXMLGregorianCalendar(gcal));
-
-                                                gcal = new GregorianCalendar();
-                                                gcal.setTime(bs.getModifiedIncludingChildren());
-                                                o2.setModifiedIncludingChildren(df.newXMLGregorianCalendar(gcal));
-                                                o2.setNodeID(bs.getNodeId());
-                                                op_info.add(o2);
-
-                                                List<BindingTemplate> btList = bs.getBindingTemplates();
-                                                for (BindingTemplate bt : btList) {
-                                                        bt.setAuthorizedName(publisher.getAuthorizedName());
-                                                        OperationalInfo o3 = new OperationalInfo();
-                                                        o3.setAuthorizedName(bt.getAuthorizedName());
-
-                                                        gcal = new GregorianCalendar();
-                                                        gcal.setTime(bt.getCreated());
-                                                        o3.setCreated(df.newXMLGregorianCalendar(gcal));
-
-                                                        o3.setEntityKey(bt.getEntityKey());
-
-                                                        gcal = new GregorianCalendar();
-                                                        gcal.setTime(bt.getModified());
-                                                        o3.setModified(df.newXMLGregorianCalendar(gcal));
-
-                                                        gcal = new GregorianCalendar();
-                                                        gcal.setTime(bt.getModifiedIncludingChildren());
-                                                        o3.setModifiedIncludingChildren(df.newXMLGregorianCalendar(gcal));
-                                                        o3.setNodeID(bt.getNodeId());
-                                                        op_info.add(o3);
+                                                        List<BindingTemplate> btList = bs.getBindingTemplates();
+                                                        for (BindingTemplate bt : btList) {
+                                                                bt.setAuthorizedName(publisher.getAuthorizedName());
+                                                                bt.setModified(now);
+                                                                bt.setModifiedIncludingChildren(now);
+                                                       
+                                                        }
                                                 }
                                         }
+                                        ChangeRecord cr = new ChangeRecord();
+                                        cr.setChangeRecordNewData(new ChangeRecordNewData());
+                                        if (uddiEntity instanceof BusinessEntity) {
+                                                cr.getChangeRecordNewData().setBusinessEntity(new org.uddi.api_v3.BusinessEntity());
+                                                MappingModelToApi.mapBusinessEntity((BusinessEntity) uddiEntity, cr.getChangeRecordNewData().getBusinessEntity());
+                                        }
+                                        if (uddiEntity instanceof Tmodel) {
+                                                cr.getChangeRecordNewData().setTModel(new org.uddi.api_v3.TModel());
+                                                MappingModelToApi.mapTModel((Tmodel) uddiEntity, cr.getChangeRecordNewData().getTModel());
+                                        }
+                                        changes.add(cr);
+                                        em.persist(uddiEntity);
+
                                 }
+
+                                // After transfer is finished, the token can be removed
+                                org.uddi.custody_v3.TransferToken apiTransferToken = body.getTransferToken();
+                                String transferTokenId = new String(apiTransferToken.getOpaqueToken());
+                                org.apache.juddi.model.TransferToken modelTransferToken = em.find(org.apache.juddi.model.TransferToken.class, transferTokenId);
+                                em.remove(modelTransferToken);
                         }
-
-                        // After transfer is finished, the token can be removed
-                        org.uddi.custody_v3.TransferToken apiTransferToken = body.getTransferToken();
-                        String transferTokenId = new String(apiTransferToken.getOpaqueToken());
-                        org.apache.juddi.model.TransferToken modelTransferToken = em.find(org.apache.juddi.model.TransferToken.class, transferTokenId);
-                        em.remove(modelTransferToken);
-
                         tx.commit();
-                        //TODO do we need to do something for replication purposes here?
-                        //OperationalInfoWrapper t = new OperationalInfoWrapper();
-                        //t.data = op_info;
-                        //ReplicationNotifier.Enqueue(UDDIPublicationImpl.);
+                        //we need to do something for replication purposes here
+                        //enqueue notifications and storage of the changed records
+                        for (ChangeRecord c: changes)
+                                 try {
+                                         c.setChangeID(new ChangeRecordIDType());
+                                         c.getChangeID().setNodeID(node);
+                                         c.getChangeID().setOriginatingUSN(null);
+                                         ReplicationNotifier.Enqueue(MappingApiToModel.mapChangeRecord(c));
+                                } catch (UnsupportedEncodingException ex) {
+                                        Logger.getLogger(UDDICustodyTransferImpl.class.getName()).log(Level.SEVERE, null, ex);
+                                }
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(CustodyTransferQuery.TRANSFER_ENTITIES,
-                             QueryStatus.SUCCESS, procTime);
+                                QueryStatus.SUCCESS, procTime);
 
                 } finally {
                         if (tx.isActive()) {
@@ -331,8 +359,40 @@
 
         }
 
-        public class OperationalInfoWrapper {
+        private synchronized UDDIReplicationPortType getReplicationClient(String node) {
 
-                public List<OperationalInfo> data;
+                UDDIService svc = new UDDIService();
+                UDDIReplicationPortType replicationClient = svc.getUDDIReplicationPort();
+
+                EntityManager em = PersistenceManager.getEntityManager();
+                EntityTransaction tx = em.getTransaction();
+                try {
+                        StringBuilder sql = new StringBuilder();
+                        sql.append(""select c from ReplicationConfiguration c order by c.serialNumber desc"");
+                        sql.toString();
+                        Query qry = em.createQuery(sql.toString());
+                        qry.setMaxResults(1);
+
+                        org.apache.juddi.model.ReplicationConfiguration resultList = (org.apache.juddi.model.ReplicationConfiguration) qry.getSingleResult();
+                        for (Operator o : resultList.getOperator()) {
+                                if (o.getOperatorNodeID().equalsIgnoreCase(node)) {
+                                        ((BindingProvider) replicationClient).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, o.getSoapReplicationURL());
+
+                                        return replicationClient;
+                                }
+                        }
+                        tx.rollback();
+
+                } catch (Exception ex) {
+                        logger.fatal(""Node not found (or there isn't a replication config)!"" + node, ex);
+                } finally {
+                        if (tx.isActive()) {
+                                tx.rollback();
+                        }
+                        em.close();
+                }
+                //em.close();
+                return null;
+
         }
 }
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index ee48bd5..af3a46b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -54,14 +54,18 @@
 import org.apache.juddi.model.PublisherAssertion;
 import org.apache.juddi.model.PublisherAssertionId;
 import org.apache.juddi.model.Tmodel;
+import org.apache.juddi.replication.ReplicationNotifier;
 import static org.apache.juddi.replication.ReplicationNotifier.FetchEdges;
 import org.apache.juddi.v3.client.UDDIService;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.TransferNotAllowedException;
+import org.apache.juddi.validation.ValidateCustodyTransfer;
 import org.apache.juddi.validation.ValidateReplication;
 import org.uddi.api_v3.OperationalInfo;
 import org.uddi.custody_v3.DiscardTransferToken;
 import org.uddi.repl_v3.ChangeRecord;
+import org.uddi.repl_v3.ChangeRecordAcknowledgement;
 import org.uddi.repl_v3.ChangeRecordIDType;
 import org.uddi.repl_v3.ChangeRecords;
 import org.uddi.repl_v3.DoPing;
@@ -218,8 +222,9 @@
                 @Override
                 public void run() {
 
-                        if (!queue.isEmpty())
+                        if (!queue.isEmpty()) {
                                 logger.info(""Replication change puller thread started. Queue size: "" + queue.size());
+                        }
                         //ok someone told me there's a change available
                         while (!queue.isEmpty()) {
                                 NotifyChangeRecordsAvailable poll = queue.poll();
@@ -469,12 +474,105 @@
 
                                 }
 //</editor-fold>
+
+                                if (rec.isAcknowledgementRequested()) {
+                                        ChangeRecord posack = new ChangeRecord();
+                                        posack.setChangeRecordAcknowledgement(new ChangeRecordAcknowledgement());
+                                        posack.getChangeRecordAcknowledgement().setAcknowledgedChange(rec.getChangeID());
+                                        posack.setAcknowledgementRequested(false);
+                                        ReplicationNotifier.Enqueue(MappingApiToModel.mapChangeRecord(posack));
+                                }
                                 if (rec.getChangeRecordNewDataConditional() != null) {
-                                        //TODO
+
+                                        if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo().getNodeID() == null) {
+                                                throw new Exception(""Inbound replication data is missiong node id!"");
+                                        }
+
+                                        //The operationalInfo element MUST contain the operational information associated with the indicated new data.
+                                        if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo() == null) {
+                                                logger.warn(""Inbound replication data does not have the required OperationalInfo element and is NOT spec compliant. Data will be ignored"");
+                                        } else {
+                                                if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBindingTemplate() != null) {
+                                                        //fetch the binding template if it exists already
+                                                        //if it exists, 
+                                                        //      confirm the owning node, it shouldn't be the local node id, if it is, throw
+                                                        //      the owning node should be the same as it was before
+
+                                                        BusinessService model = em.find(org.apache.juddi.model.BusinessService.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBindingTemplate().getServiceKey());
+                                                        if (model == null) {
+                                                                logger.error(""Replication error, attempting to insert a binding where the service doesn't exist yet"");
+                                                        } else {
+                                                                ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+
+                                                                org.apache.juddi.model.BindingTemplate bt = em.find(org.apache.juddi.model.BindingTemplate.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBindingTemplate().getBindingKey());
+                                                                if (bt != null) {
+                                                                        em.remove(bt);
+                                                                }
+                                                                bt = new BindingTemplate();
+                                                                MappingApiToModel.mapBindingTemplate(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBindingTemplate(), bt, model);
+                                                                MappingApiToModel.mapOperationalInfo(bt, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                // MappingApiToModel.mapOperationalInfoIncludingChildren(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                em.persist(bt);
+                                                        }
+
+                                                } else if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessEntity() != null) {
+
+                                                        BusinessEntity model = em.find(org.apache.juddi.model.BusinessEntity.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessEntity().getBusinessKey());
+                                                        if (model != null) {
+                                                                ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                //TODO revisit access control rules
+                                                                em.remove(model);
+                                                        }
+                                                        model = new BusinessEntity();
+                                                        MappingApiToModel.mapBusinessEntity(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessEntity(), model);
+                                                        // MappingApiToModel.mapOperationalInfo(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+
+                                                        MappingApiToModel.mapOperationalInfoIncludingChildren(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                        logger.warn(""Name size on save is "" + model.getBusinessNames().size());
+                                                        em.persist(model);
+
+                                                }
+                                                if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessService() != null) {
+                                                        BusinessEntity find = em.find(org.apache.juddi.model.BusinessEntity.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessService().getBusinessKey());
+                                                        if (find == null) {
+                                                                logger.error(""Replication error, attempting to insert a service where the business doesn't exist yet"");
+                                                        } else {
+
+                                                                org.apache.juddi.model.BusinessService model = null;
+                                                                model = em.find(org.apache.juddi.model.BusinessService.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessService().getServiceKey());
+                                                                if (model != null) {
+                                                                        ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                        em.remove(model);
+                                                                }
+
+                                                                model = new org.apache.juddi.model.BusinessService();
+                                                                MappingApiToModel.mapBusinessService(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getBusinessService(), model, find);
+                                                                MappingApiToModel.mapOperationalInfo(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                MappingApiToModel.mapOperationalInfoIncludingChildren(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+
+                                                                em.persist(model);
+                                                        }
+
+                                                } else if (rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getTModel() != null) {
+
+                                                        Tmodel model = em.find(org.apache.juddi.model.Tmodel.class, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getTModel().getTModelKey());
+                                                        if (model != null) {
+                                                                ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+                                                                em.remove(model);
+                                                        }
+                                                        model = new Tmodel();
+                                                        MappingApiToModel.mapTModel(rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getTModel(), model);
+
+                                                        MappingApiToModel.mapOperationalInfo(model, rec.getChangeRecordNewDataConditional().getChangeRecordNewData().getOperationalInfo());
+
+                                                        em.persist(model);
+                                                }
+
+                                        }
 
                                 }
                                 if (rec.getChangeRecordNull() != null) {
-                                        //TODO
+                                        //No action required
 
                                 }
                                 if (rec.getChangeRecordCorrection() != null) {
@@ -832,23 +930,30 @@
         public void notifyChangeRecordsAvailable(NotifyChangeRecordsAvailable body)
                 throws DispositionReportFaultMessage {
                 long startTime = System.currentTimeMillis();
-                long procTime = System.currentTimeMillis() - startTime;
-                serviceCounter.update(ReplicationQuery.NOTIFY_CHANGERECORDSAVAILABLE,
-                        QueryStatus.SUCCESS, procTime);
+
                 //some other node just told us there's new records available, call
                 //getChangeRecords from the remote node asynch
-
                 new ValidateReplication(null).validateNotifyChangeRecordsAvailable(body, ctx);
 
                 queue.add(body);
                 logger.info(body.getNotifyingNode() + "" just told me that there are change records available, enqueuing...size is "" + queue.size());
                 //ValidateReplication.unsupportedAPICall();
+                long procTime = System.currentTimeMillis() - startTime;
+                serviceCounter.update(ReplicationQuery.NOTIFY_CHANGERECORDSAVAILABLE,
+                        QueryStatus.SUCCESS, procTime);
         }
         private static Queue<NotifyChangeRecordsAvailable> queue = null;
 
         /**
          * transfers custody of an entity from node1/user1 to node2/user2
-         *
+         * 
+         * assume this node is node 2.
+         * 
+         * user1 on node1 requests a transfer token. node 1 issues the token.
+         * 
+         * user1 now has a transfer token for their stuff
+         * user now takes the token to node 2 and calls transferEntities
+         *<img src=""http://www.uddi.org/pubs/uddi-v3.0.2-20041019_files/image086.gif""> 
          * @param body
          * @throws DispositionReportFaultMessage
          */
@@ -858,12 +963,35 @@
                 long startTime = System.currentTimeMillis();
 
                 //*this node is transfering data to another node
-                //body.getTransferOperationalInfo().
-                ValidateReplication.unsupportedAPICall();
+                //ValidateReplication.unsupportedAPICall();
 
+                //a remote node just told me to give up control of some of my entities
                 EntityManager em = PersistenceManager.getEntityManager();
                 //EntityTransaction tx = em.getTransaction();
-
+                //confirm i have a replication config
+                boolean ok =false;
+                ReplicationConfiguration FetchEdges = ReplicationNotifier.FetchEdges();
+                for (int i=0; i<FetchEdges.getOperator().size(); i++){
+                        //confirm that the destination node is in the replication config
+                        if (FetchEdges.getOperator().get(i).getOperatorNodeID().equals(body.getTransferOperationalInfo().getNodeID()))
+                        {
+                                ok = true;
+                                break;
+                        }
+                }
+                if (!ok){
+                        throw new TransferNotAllowedException(new ErrorMessage(""E_transferNotAllowedUnknownNode""));
+                }
+                
+                
+                
+                new ValidateReplication(null).validateTransfer(em,body);
+                
+                
+                //make the change
+                //enqueue in replication notifier
+                //discard the token
+                
                 /**
                  * The custodial node must verify that it has granted permission
                  * to transfer the entities identified and that this permission
@@ -903,6 +1031,9 @@
                 dtt.setKeyBag(body.getKeyBag());
                 dtt.setTransferToken(body.getTransferToken());
                 new UDDICustodyTransferImpl().discardTransferToken(dtt);
+                long procTime = System.currentTimeMillis() - startTime;
+                serviceCounter.update(ReplicationQuery.TRANSFER_CUSTODY,
+                        QueryStatus.SUCCESS, procTime);
         }
 
 }
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
index 255ed5f..20c9aed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
@@ -97,20 +97,19 @@
          * @return true/false
          */
 	public boolean isOwner(UddiEntity entity){
-            boolean ret = false;
             try {
                 AppConfig instance = AppConfig.getInstance();
 
                 if (entity != null) {
                     if (entity.getAuthorizedName().equals(getAuthorizedName())
                             && entity.getNodeId().equals((AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID)))) {
-                        ret = true;
+                        return true;
                     }
                 }
             } catch (Exception ex) {
                 logger.log(Level.WARNING, ""Error caught determining node id! Defaulting to access denied"", ex);
             }
-            return ret;
+            return false;
 	}
 
 	
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
index b724ae5..9af0093 100644
--- a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
@@ -17,7 +17,6 @@
 package org.apache.juddi.replication;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Queue;
 import java.util.Timer;
@@ -40,7 +39,6 @@
 import org.apache.juddi.model.ReplicationConfiguration;
 import org.apache.juddi.v3.client.UDDIService;
 import org.uddi.repl_v3.ChangeRecordIDType;
-import org.uddi.repl_v3.CommunicationGraph;
 import org.uddi.repl_v3.HighWaterMarkVectorType;
 import org.uddi.repl_v3.NotifyChangeRecordsAvailable;
 import org.uddi.repl_v3.Operator;
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
index 4b399ff..14b6d56 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
@@ -123,9 +123,9 @@
 				throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", key));
 			
 			// Creating parameters for key-checking query
-			DynamicQuery.Parameter param = new DynamicQuery.Parameter(""UPPER(ttk.entityKey)"", 
-																	  key.toUpperCase(), 
-																	  DynamicQuery.PREDICATE_EQUALS);
+			DynamicQuery.Parameter param = new DynamicQuery.Parameter(""UPPER(ttk.entityKey)"",   
+                                key.toUpperCase(), 
+                                DynamicQuery.PREDICATE_EQUALS);
 			params.add(param);
 
 		}
@@ -142,8 +142,16 @@
 
 	}
 	
-	public void validateTransferEntities(EntityManager em, TransferEntities body) throws DispositionReportFaultMessage {
+        /**
+         * returns true if all items to be transfered are within this node (no node to node transfers)
+         * @param em
+         * @param body
+         * @return
+         * @throws DispositionReportFaultMessage 
+         */
+	public boolean validateTransferEntities(EntityManager em, TransferEntities body) throws DispositionReportFaultMessage {
 
+                boolean ret = true;
 		// No null input
 		if (body == null)
 			throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
@@ -193,10 +201,11 @@
 			UddiEntity uddiEntity = em.find(UddiEntity.class, key);
 			if (uddiEntity == null)
 				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.EntityNotFound"", key));
-			
+			if (!uddiEntity.getNodeId().equalsIgnoreCase(nodeID))
+                                ret = false;
 			count++;
 		}
 
+                return ret;
 	}
-
 }
"
juddi,70903c27054e1ebb8c064cc3a1afce9842c07cb5,"JUDDI-256 adding basic unit test for transfer to/from publishers on the same node
JUDDI-272 adding hooks for node to node transfer
",2014-12-22 21:09:26,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
index df5a436..717b691 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
@@ -26,11 +26,13 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.InvalidValueException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
+import org.uddi.custody_v3.TransferEntities;
 import org.uddi.repl_v3.CommunicationGraph.Edge;
 import org.uddi.repl_v3.HighWaterMarkVectorType;
 import org.uddi.repl_v3.NotifyChangeRecordsAvailable;
 import org.uddi.repl_v3.Operator;
 import org.uddi.repl_v3.ReplicationConfiguration;
+import org.uddi.repl_v3.TransferCustody;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
@@ -177,4 +179,32 @@
                 return false;
         }
 
+        public void validateTransfer(EntityManager em, TransferCustody body) throws DispositionReportFaultMessage {
+                
+                 if (body == null)
+			throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+		if (body.getTransferToken()==null)
+                        throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+                if (body.getKeyBag()==null)
+                        throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+                if (body.getTransferOperationalInfo()==null)
+                        throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+                
+                 if (body.getTransferOperationalInfo().getNodeID()==null)
+                        throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+                 if (body.getTransferOperationalInfo().getAuthorizedName()==null)
+                        throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+                
+                 
+                //confirm i own the records in question
+                //confirm i issued the transfer token
+                
+                TransferEntities x = new TransferEntities();
+                x.setKeyBag(body.getKeyBag());
+                x.setTransferToken(body.getTransferToken());
+                new ValidateCustodyTransfer(null).validateTransferEntities(em, x);
+                
+               
+        }
+
 }
"
juddi,c674214cb109f69b6eeef136da83cf9f3398bf06,"JUDDI-903 jpa typo
",2014-12-21 19:18:21,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index 6425f2b..d1e93f7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -254,11 +254,11 @@
                                         }
                                 }
                                 log.info(""remove all persisted AuthTokens for publisher "" + entityKey + ""."");
-                                Query q1 = em.createQuery(""DELETE FROM AuthToken auth WHERE auth.authorizedName = ?"");
+                                Query q1 = em.createQuery(""DELETE FROM AuthToken auth WHERE auth.authorizedName = ?1"");
                                 q1.setParameter(1, entityKey);
                                 q1.executeUpdate();
                                 log.info(""remove all subscriptions for publisher "" + entityKey + ""."");
-                                q1 = em.createQuery(""DELETE FROM Subscription s WHERE s.authorizedName = ?"");
+                                q1 = em.createQuery(""DELETE FROM Subscription s WHERE s.authorizedName = ?1"");
                                 q1.setParameter(1, entityKey);
                                 q1.executeUpdate();
 
"
juddi,0806d36d9fd610bd8e6d45fe4b809b44a5a0ecc7,"JUDDI-881 adding example find business by service/binding/tmodelInstanceInfo keys via tmodelBag
",2014-12-14 12:05:32,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
index 8b38575..aecdbb1 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
@@ -41,6 +41,7 @@
                         System.out.println("" 2) Compare Two Binding/tModelInstanceInfo - QOS Example"");
                         System.out.println("" 3) jUDDI Admin service - Register a Node (quick add of the jUDDI cloud server)"");
                         System.out.println("" 4) Find Binding by QOS Parameters (Binding/tModelInstanceInfo)"");
+                        System.out.println("" 4.4) Find Business by QOS Parameters (Binding/tModelInstanceInfo)"");
                         System.out.println("" 5) Find Service by QOS Parameters (Binding/tModelInstanceInfo)"");
                         System.out.println("" 6) UDDI Create Bulk (makes N business/services"");
                         System.out.println("" 7) UDDI Custody Transfer (within a single node)"");
@@ -125,6 +126,9 @@
                 if (input.equals(""4"")) {
                         SearchByQos.doFindBinding(authtoken);
                 }
+                 if (input.equals(""4.5"")) {
+                        SearchByQos.doFindBusiness(authtoken);
+                }
                 if (input.equals(""5"")) {
                         SearchByQos.doFindService(authtoken);
                 }
"
juddi,0806d36d9fd610bd8e6d45fe4b809b44a5a0ecc7,"JUDDI-881 adding example find business by service/binding/tmodelInstanceInfo keys via tmodelBag
",2014-12-14 12:05:32,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/SearchByQos.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/SearchByQos.java
index 6b96e66..025e617 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/SearchByQos.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/SearchByQos.java
@@ -33,6 +33,8 @@
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
+import org.uddi.api_v3.BusinessInfos;
+import org.uddi.api_v3.BusinessList;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.BusinessServices;
 import org.uddi.api_v3.CategoryBag;
@@ -43,6 +45,7 @@
 import org.uddi.api_v3.DiscoveryURL;
 import org.uddi.api_v3.DiscoveryURLs;
 import org.uddi.api_v3.FindBinding;
+import org.uddi.api_v3.FindBusiness;
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
 import org.uddi.api_v3.GetAuthToken;
@@ -170,7 +173,7 @@
                 System.out.println(""saving..."");
                 SaveTM(createKeyGenator, uddi);
 
-                System.out.println(""fetching business list"");
+                System.out.println(""fetching binding list"");
                 BindingDetail before = getBindingList(uddi);
                 if (before.getBindingTemplate() == null) {
                         System.out.println(""before no service returned!"");
@@ -178,6 +181,7 @@
                 } else {
                         System.out.println(before.getBindingTemplate().size() + "" service returned before"");
                 }
+             
 
                 System.out.println(""saving mary"");
                 SaveMary(uddi);
@@ -201,6 +205,75 @@
                         System.out.println(p.print(before));
                         System.out.println(p.print(after));
                 }
+                
+                
+                
+
+        }
+
+        
+        
+        public static void doFindBusiness(String token) throws Exception {
+        // create a manager and read the config in the archive; 
+                // you can use your config file name
+                UDDIClient clerkManager = new UDDIClient(""META-INF/simple-publish-uddi.xml"");
+                Transport transport = clerkManager.getTransport();
+                // Now you create a reference to the UDDI API
+                security = transport.getUDDISecurityService();
+                publish = transport.getUDDIPublishService();
+                inquiry = transport.getUDDIInquiryService();
+        //step one, get a token
+                // GetAuthToken getAuthTokenRoot = new GetAuthToken();
+                //getAuthTokenRoot.setUserID(""uddi"");
+                //getAuthTokenRoot.setCred(""uddi"");
+
+        // Making API call that retrieves the authentication token for the 'root' user.
+                //String rootAuthToken = clerk.getAuthToken(clerk.getUDDINode().getSecurityUrl());
+                String uddi = token;//security.getAuthToken(getAuthTokenRoot).getAuthInfo();
+
+                System.out.println(""killing mary's business if it exists"");
+                //first check is Mary's business exists and delete
+                DeleteIfExists(""uddi:uddi.marypublisher.com:marybusinessone"", uddi);
+
+                System.out.println(""making mary's tmodel key gen"");
+                //make the key gen since our test case uses some custom keys
+                TModel createKeyGenator = UDDIClerk.createKeyGenator(""uddi.marypublisher.com"", ""mary key gen"", ""en"");
+                //clerk.register(createKeyGenator);
+                System.out.println(""saving..."");
+                SaveTM(createKeyGenator, uddi);
+
+              
+                 System.out.println(""fetching business list"");
+                 BusinessList before2 = getBusinessList(uddi);
+                  if (before2.getBusinessInfos()== null) {
+                        System.out.println(""before no service returned!"");
+                        // before.setServiceInfos(new ServiceInfos());
+                } else {
+                        System.out.println(before2.getBusinessInfos().getBusinessInfo().size() + "" business returned before"");
+                }
+
+                System.out.println(""saving mary"");
+                SaveMary(uddi);
+
+                
+                
+                
+                    BusinessList after2 = getBusinessList(uddi);
+               
+                PrintUDDI<BusinessList> p2 = new PrintUDDI<BusinessList>();
+                if (before2.getBusinessInfos()==null )
+                        before2.setBusinessInfos(new BusinessInfos());
+                if ((before2.getBusinessInfos().getBusinessInfo().size()
+                        < after2.getBusinessInfos().getBusinessInfo().size())) {
+                        System.out.println(""hey it worked as advertised. Here's all the business with QOS parameters"");
+                        System.out.println(p2.print(after2));
+
+                } else {
+
+                        System.out.println(""something's not right, here's the before business listing"");
+                        System.out.println(p2.print(before2));
+                        System.out.println(p2.print(after2));
+                }
 
         }
 
@@ -229,6 +302,21 @@
                         }
                 }
         }
+        
+        private static BusinessList getBusinessList(String token) throws Exception {
+                FindBusiness fb = new FindBusiness();
+                fb.setAuthInfo(token);
+                org.uddi.api_v3.FindQualifiers fq = new org.uddi.api_v3.FindQualifiers();
+                fq.getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
+                fq.getFindQualifier().add(UDDIConstants.OR_ALL_KEYS);
+                fb.setFindQualifiers(fq);
+                fb.getName().add((new Name(UDDIConstants.WILDCARD, null)));
+
+                fb.setTModelBag(new TModelBag());
+                fb.getTModelBag().getTModelKey().addAll(WSDMQosConstants.getAllQOSKeys());
+
+                return inquiry.findBusiness(fb);
+        }
 
         private static ServiceList getServiceList(String token) throws Exception {
                 FindService fb = new FindService();
"
juddi,c6bab253ff37d0ea1d1dcc86cbeed98d8e6f1249,"JUDDI-242 additional tests added
JUDDI-873 PA subscription alerts work for complete and deleted Pas but not for incomplete ones.
",2014-12-14 11:11:29,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index ee0627b..c043298 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -154,8 +154,8 @@
         			String serviceKey = body.getServiceKey();
         			org.apache.juddi.model.BusinessService modelBusinessService = null;
         			try {
-        				em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
-        			} catch (ClassCastException e) {}
+        				modelBusinessService=em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+        			} catch (Exception e) {}
 	                if (modelBusinessService == null)
 	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
 
"
juddi,c6bab253ff37d0ea1d1dcc86cbeed98d8e6f1249,"JUDDI-242 additional tests added
JUDDI-873 PA subscription alerts work for complete and deleted Pas but not for incomplete ones.
",2014-12-14 11:11:29,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 5012ce5..ff3bff6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -253,8 +253,8 @@
 					// Setting the start index to the chunkData
 					Holder<Integer> subscriptionStartIndex = new Holder<Integer>(chunkData);
 					
-					BindingDetail bindingDetail = InquiryHelper.getBindingDetailFromKeys(fb, findQualifiers, em, currentMatchingKeys,
-																						 startPointDate, endPointDate, subscriptionStartIndex, modelSubscription.getMaxEntities());
+					BindingDetail bindingDetail = InquiryHelper.getBindingDetailFromKeys(fb, findQualifiers, em, currentMatchingKeys,              
+						startPointDate, endPointDate, subscriptionStartIndex, modelSubscription.getMaxEntities());
 							
 					// Upon exiting above function, if more results are to be had, the subscriptionStartIndex will contain the latest value (or null
 					// if no more results)
"
juddi,c6bab253ff37d0ea1d1dcc86cbeed98d8e6f1249,"JUDDI-242 additional tests added
JUDDI-873 PA subscription alerts work for complete and deleted Pas but not for incomplete ones.
",2014-12-14 11:11:29,Alex,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index 66eb64c..eb0c72a 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -26,6 +26,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.UDDIConstants;
 import org.apache.juddi.v3.client.config.UDDIClient;
+import org.apache.juddi.v3.client.ext.wsdm.WSDMQosConstants;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.junit.Assert;
 import org.junit.Assume;
@@ -37,6 +38,7 @@
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
+import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.CompletionStatus;
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.Description;
@@ -48,6 +50,7 @@
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.GetTModelDetail;
+import org.uddi.api_v3.InstanceDetails;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.PublisherAssertion;
@@ -57,6 +60,8 @@
 import org.uddi.api_v3.SaveTModel;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelBag;
+import org.uddi.api_v3.TModelInstanceDetails;
+import org.uddi.api_v3.TModelInstanceInfo;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.Subscription;
 import org.uddi.sub_v3.SubscriptionFilter;
@@ -913,6 +918,97 @@
 
                 }
         }
+        
+        
+        
+         /**
+         * PUBLISHERASSERTION tests joe want's updates on mary's binding
+         *
+         * @throws Exception
+         */
+        @Test
+        public void joePublisherUpdate_PUBLISHERASSERTION_DETAIL_NULL() throws Exception {
+                Assume.assumeTrue(TckPublisher.isEnabled());
+                Assume.assumeNotNull(getHostame());
+                logger.info(""joePublisherUpdate_"" + getTransport() + ""_PUBLISHERASSERTION_DETAIL_NULL"");
+                TckCommon.removeAllExistingSubscriptions(authInfoJoe, subscriptionJoe);
+                Holder<List<Subscription>> holder = null;
+                try {
+                        reset();
+
+                        String before = TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe);
+
+                        tckTModelJoe.saveJoePublisherTmodel(authInfoJoe);
+                        //tckTModelJoe.saveTModels(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                        tckTModelMary.saveMaryPublisherTmodel(authInfoMary);
+                        BusinessEntity saveMaryPublisherBusiness = tckBusinessMary.saveMaryPublisherBusiness(authInfoMary);
+
+                        tckBusinessJoe.saveJoePublisherBusiness(authInfoJoe);
+                        tckBusinessServiceJoe.saveJoePublisherService(authInfoJoe);
+                        //Saving the Listener Service
+                        String bindingkey = tckSubscriptionListenerJoe.saveService(authInfoJoe, getXMLLocationOfServiceForDelivery(), getPort(), getHostame());
+
+                        //Saving the Subscription
+                        holder = new Holder<List<Subscription>>();
+                        holder.value = new ArrayList<Subscription>();
+                        Subscription sub = new Subscription();
+                        sub.setBindingKey(bindingkey);
+                        sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
+                        sub.setSubscriptionFilter(new SubscriptionFilter());
+                        sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                       
+                        holder.value.add(sub);
+                        subscriptionJoe.saveSubscription(authInfoJoe, holder);
+                        logger.info(""subscription saved for "" + holder.value.get(0).getSubscriptionKey());
+                        //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
+                        //Changing the service we subscribed to ""JoePublisherService""
+                        Thread.sleep(1000);
+                        logger.info(""saving Mary's publisher assertion********** "");
+                        AddPublisherAssertions pa = new AddPublisherAssertions();
+                        pa.setAuthInfo(authInfoMary);
+                        PublisherAssertion pas = new PublisherAssertion();
+                        pas.setToKey(TckBusiness.JOE_BUSINESS_KEY);
+                        pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
+                        pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
+                        pa.getPublisherAssertion().add(pas);
+
+                        publicationMary.addPublisherAssertions(pa);
+
+                        boolean found = verifyDelivery(TckBusiness.MARY_BUSINESS_KEY);
+
+                        DeletePublisherAssertions deletePublisherAssertions = new DeletePublisherAssertions();
+                        deletePublisherAssertions.setAuthInfo(authInfoMary);
+                        deletePublisherAssertions.getPublisherAssertion().add(pas);
+                        publicationMary.deletePublisherAssertions(deletePublisherAssertions);
+                        if (!found) {
+                                logger.warn(""Test failed, dumping business list"");
+                                logger.warn(""BEFORE "" + before);
+                                logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                Assert.fail(""Notification does not contain the correct service."");
+                        }
+
+                } catch (Exception e) {
+                        logger.error(""No exceptions please."");
+                        e.printStackTrace();
+
+                        Assert.fail();
+                } finally {
+                        //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
+                        DeleteSubscription ds = new DeleteSubscription();
+                        ds.setAuthInfo(authInfoJoe);
+                        ds.getSubscriptionKey().add(holder.value.get(0).getSubscriptionKey());
+                        subscriptionJoe.deleteSubscription(ds);
+                        tckBusinessMary.deleteMaryPublisherBusiness(authInfoMary);
+                        tckTModelMary.deleteMaryPublisherTmodel(authInfoMary);
+
+                        tckBusinessServiceJoe.deleteJoePublisherService(authInfoJoe);
+                        tckBusinessJoe.deleteJoePublisherBusiness(authInfoJoe);
+                        tckTModelJoe.deleteJoePublisherTmodel(authInfoJoe);
+                        tckTModelJoe.deleteTModel(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_SUBSCRIPTION3_TMODEL_KEY, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                }
+        }
 
         /**
          * PUBLISHERASSERTION2 tests joe want's updates on mary's binding
@@ -920,7 +1016,6 @@
          * @throws Exception
          */
         @Test
-        @Ignore
         public void joePublisherUpdate_PUBLISHERASSERTION_DETAIL_COMPLETE() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
@@ -1008,12 +1103,13 @@
 
         //
         /**
-         * find related businesses tests joe want's updates on mary's binding
+         * find related businesses 
+         * i.e. setup subscriptions for all related businesses to joe's biz
+         * then setup PA between Joe and Mary
          *
          * @throws Exception
          */
         @Test
-        @Ignore
         public void joePublisherUpdate_FIND_RELATED_BIZ() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
@@ -1026,11 +1122,10 @@
                         String before = TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe);
 
                         tckTModelJoe.saveJoePublisherTmodel(authInfoJoe);
-                        //tckTModelJoe.saveTModels(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
-
+              
                         tckTModelMary.saveMaryPublisherTmodel(authInfoMary);
+              
                         BusinessEntity saveMaryPublisherBusiness = tckBusinessMary.saveMaryPublisherBusiness(authInfoMary);
-
                         tckBusinessJoe.saveJoePublisherBusiness(authInfoJoe);
                         tckBusinessServiceJoe.saveJoePublisherService(authInfoJoe);
                         //Saving the Listener Service
@@ -1044,7 +1139,7 @@
                         sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
                         sub.setSubscriptionFilter(new SubscriptionFilter());
                         sub.getSubscriptionFilter().setFindRelatedBusinesses(new FindRelatedBusinesses());
-                        sub.getSubscriptionFilter().getFindRelatedBusinesses().setBusinessKey(TckBusiness.JOE_BUSINESS_KEY);
+                        sub.getSubscriptionFilter().getFindRelatedBusinesses().setBusinessKey(TckBusiness.MARY_BUSINESS_KEY);
 
                         holder.value.add(sub);
                         subscriptionJoe.saveSubscription(authInfoJoe, holder);
@@ -1052,6 +1147,7 @@
                         //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
+                        
                         logger.info(""saving Mary's publisher assertion********** "");
                         AddPublisherAssertions pa = new AddPublisherAssertions();
                         pa.setAuthInfo(authInfoMary);
@@ -1060,17 +1156,31 @@
                         pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
                         pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
                         pa.getPublisherAssertion().add(pas);
-
+                        
+                      
                         publicationMary.addPublisherAssertions(pa);
                         logger.info(""saving Joe's publisher assertion********** "");
+                        pa = new AddPublisherAssertions();
                         pa.setAuthInfo(authInfoJoe);
+                        pas = new PublisherAssertion();
+                        pas.setToKey(TckBusiness.JOE_BUSINESS_KEY);
+                        pas.setFromKey(TckBusiness.MARY_BUSINESS_KEY);
+                        pas.setKeyedReference(new KeyedReference(UDDIConstants.RELATIONSHIPS, ""parent"", ""parent-child""));
+                        pa.getPublisherAssertion().add(pas);
                         publicationJoe.addPublisherAssertions(pa);
 
+                          //expecting that Joe gets notified that joe's and mary's businesses are now ""related""
                         boolean found = verifyDelivery(TckBusiness.MARY_BUSINESS_KEY);
                         DeletePublisherAssertions deletePublisherAssertions = new DeletePublisherAssertions();
                         deletePublisherAssertions.setAuthInfo(authInfoMary);
                         deletePublisherAssertions.getPublisherAssertion().add(pas);
                         publicationMary.deletePublisherAssertions(deletePublisherAssertions);
+                        
+                         deletePublisherAssertions = new DeletePublisherAssertions();
+                        deletePublisherAssertions.setAuthInfo(authInfoJoe);
+                        deletePublisherAssertions.getPublisherAssertion().add(pas);
+                       // publicationJoe.deletePublisherAssertions(deletePublisherAssertions);
+                        
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
                                 logger.warn(""BEFORE "" + before);
@@ -1106,11 +1216,10 @@
          * @throws Exception
          */
         @Test
-        @Ignore
-        public void joePublisherUpdate_FIND_BINDING() throws Exception {
+        public void joePublisherUpdate_FIND_BINDING_BY_SERVICEKEY_AND_TMI() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
-                logger.info(""joePublisherUpdate_"" + getTransport() + ""_FIND_BINDING"");
+                logger.info(""joePublisherUpdate_"" + getTransport() + ""_FIND_BINDING_BY_SERVICEKEY_AND_TMI"");
                 TckCommon.removeAllExistingSubscriptions(authInfoJoe, subscriptionJoe);
                 Holder<List<Subscription>> holder = null;
                 try {
@@ -1155,10 +1264,13 @@
                         sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
                         sub.setSubscriptionFilter(new SubscriptionFilter());
                         sub.getSubscriptionFilter().setFindBinding(new FindBinding());
-                        sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
+                       //FAIL sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
                         sub.getSubscriptionFilter().getFindBinding().setTModelBag(new TModelBag());
-                        sub.getSubscriptionFilter().getFindBinding().getTModelBag().getTModelKey().add(""uddi:uddi.org:categorization:types"");
+                         
+                        //At least one of either a tModelBag or a find_tModel argument SHOULD be supplied, unless a categoryBag based search is being used.
                         
+                        sub.getSubscriptionFilter().getFindBinding().getTModelBag().getTModelKey().add(WSDMQosConstants.METRIC_FAULT_COUNT_KEY);
+                        //joe wants updates to mary's binding
 
                         holder.value.add(sub);
                         subscriptionJoe.saveSubscription(authInfoJoe, holder);
@@ -1167,9 +1279,9 @@
                         //Changing the service we subscribed to ""JoePublisherService""
                         Thread.sleep(1000);
                         logger.info(""updating Mary's binding ********** "");
-                        updatePublisherBinding(authInfoMary, bt, publicationMary);
+                       String newcontent= updatePublisherBindingAddTMI(authInfoMary, bt, publicationMary);
 
-                        boolean found = verifyDelivery(""wsdlDeployment"");
+                        boolean found = verifyDelivery(newcontent);
 
                         if (!found) {
                                 logger.warn(""Test failed, dumping business list"");
@@ -1199,6 +1311,107 @@
 
                 }
         }
+        
+        
+        @Test
+        @Ignore
+         public void joePublisherUpdate_FIND_BINDING_BY_CATBAG() throws Exception {
+                Assume.assumeTrue(TckPublisher.isEnabled());
+                Assume.assumeNotNull(getHostame());
+                logger.info(""joePublisherUpdate_"" + getTransport() + ""_FIND_BINDING_BY_CATBAG"");
+                TckCommon.removeAllExistingSubscriptions(authInfoJoe, subscriptionJoe);
+                Holder<List<Subscription>> holder = null;
+                try {
+                        reset();
+
+                        String before = TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe);
+
+                        tckTModelJoe.saveJoePublisherTmodel(authInfoJoe);
+                        tckTModelJoe.saveTModels(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                        tckTModelMary.saveMaryPublisherTmodel(authInfoMary);
+                        BusinessEntity saveMaryPublisherBusiness = tckBusinessMary.saveMaryPublisherBusiness(authInfoMary);
+
+                        BusinessService bs = new BusinessService();
+                        bs.setBusinessKey(saveMaryPublisherBusiness.getBusinessKey());
+                        bs.setServiceKey(TckTModel.MARY_KEY_PREFIX + UUID.randomUUID().toString());
+                        bs.getName().add(new Name(""Mary's service for "" + getTransport(), null));
+                        
+                        bs.setBindingTemplates(new BindingTemplates());
+                        BindingTemplate bt = new BindingTemplate();
+                        bt.setAccessPoint(new AccessPoint(""http://localhost"", ""endPoint""));
+                        bt.setBindingKey(TckTModel.MARY_KEY_PREFIX + UUID.randomUUID().toString());
+                        bt.setServiceKey(bs.getServiceKey());
+                        bt = UDDIClient.addSOAPtModels(bt);
+
+                        bs.getBindingTemplates().getBindingTemplate().add(bt);
+                        SaveService ss = new SaveService();
+                        ss.getBusinessService().add(bs);
+                        ss.setAuthInfo(authInfoMary);
+                        bs = publicationMary.saveService(ss).getBusinessService().get(0);
+
+                        tckBusinessJoe.saveJoePublisherBusiness(authInfoJoe);
+                        tckBusinessServiceJoe.saveJoePublisherService(authInfoJoe);
+                        //Saving the Listener Service
+                        String bindingkey = tckSubscriptionListenerJoe.saveService(authInfoJoe, getXMLLocationOfServiceForDelivery(), getPort(), getHostame());
+
+                        //Saving the Subscription
+                        holder = new Holder<List<Subscription>>();
+                        holder.value = new ArrayList<Subscription>();
+                        Subscription sub = new Subscription();
+                        sub.setBindingKey(bindingkey);
+                        sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
+                        sub.setSubscriptionFilter(new SubscriptionFilter());
+                        sub.getSubscriptionFilter().setFindBinding(new FindBinding());
+                        //sub.getSubscriptionFilter().getFindBinding().setServiceKey(bs.getServiceKey());
+                        sub.getSubscriptionFilter().getFindBinding().setTModelBag(new TModelBag());
+                        
+                        //At least one of either a tModelBag or a find_tModel argument SHOULD be supplied, unless a categoryBag based search is being used.
+                        
+                        sub.getSubscriptionFilter().getFindBinding().getTModelBag().getTModelKey().add(""uddi:uddi.org:categorization:types"");
+                        
+
+                        holder.value.add(sub);
+                        subscriptionJoe.saveSubscription(authInfoJoe, holder);
+                        logger.info(""subscription saved for "" + holder.value.get(0).getSubscriptionKey());
+                        //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
+                        //Changing the service we subscribed to ""JoePublisherService""
+                        Thread.sleep(1000);
+                        logger.info(""updating Mary's binding ********** "");
+                       String newcontent= updatePublisherBindingAddCategory(authInfoMary, bt, publicationMary,""uddi:uddi.org:categorization:types"");
+
+                        boolean found = verifyDelivery(newcontent);
+
+                        if (!found) {
+                                logger.warn(""Test failed, dumping business list"");
+                                logger.warn(""BEFORE "" + before);
+                                logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                Assert.fail(""Notification does not contain the correct service."");
+                        }
+
+                } catch (Exception e) {
+                        logger.error(""No exceptions please."");
+                        e.printStackTrace();
+
+                        Assert.fail();
+                } finally {
+                        //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
+                        DeleteSubscription ds = new DeleteSubscription();
+                        ds.setAuthInfo(authInfoJoe);
+                        ds.getSubscriptionKey().add(holder.value.get(0).getSubscriptionKey());
+                        subscriptionJoe.deleteSubscription(ds);
+                        tckBusinessMary.deleteMaryPublisherBusiness(authInfoMary);
+                        tckTModelMary.deleteMaryPublisherTmodel(authInfoMary);
+
+                        tckBusinessServiceJoe.deleteJoePublisherService(authInfoJoe);
+                        tckBusinessJoe.deleteJoePublisherBusiness(authInfoJoe);
+                        tckTModelJoe.deleteJoePublisherTmodel(authInfoJoe);
+                        tckTModelJoe.deleteTModel(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_SUBSCRIPTION3_TMODEL_KEY, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                }
+        }
+         
+         
 
         //find binding
         private void updatePublisherService(String authInfo, BusinessService bs, UDDIPublicationPortType pub) throws Exception {
@@ -1209,12 +1422,60 @@
                 pub.saveService(ss);
         }
 
-        private void updatePublisherBinding(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub) throws Exception {
+        /**
+         * returns a string used to confirm delivery of an update
+         * @param authInfo
+         * @param bt
+         * @param pub
+         * @return
+         * @throws Exception 
+         */
+        private String updatePublisherBinding(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub) throws Exception {
                 SaveBinding sb = new SaveBinding();
                 sb.setAuthInfo(authInfo);
-                bt.getAccessPoint().setUseType(""wsdlDeployment"");
+                String ret = ""http://"" + UUID.randomUUID().toString();
+                bt.getAccessPoint().setValue(ret);
                 sb.getBindingTemplate().add(bt);
                 pub.saveBinding(sb);
+                return ret;
         }
+        
+        /**
+         * returns a string used to confirm delivery of an update
+         * @param authInfo
+         * @param bt
+         * @param pub
+         * @param cat
+         * @return
+         * @throws Exception 
+         */
+        private String updatePublisherBindingAddTMI(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub) throws Exception {
+                SaveBinding sb = new SaveBinding();
+                sb.setAuthInfo(authInfo);
+               if (bt.getTModelInstanceDetails()==null)
+                       bt.setTModelInstanceDetails(new TModelInstanceDetails());
+                 TModelInstanceInfo tii = new TModelInstanceInfo();
+                tii.setTModelKey(WSDMQosConstants.METRIC_FAULT_COUNT_KEY);
+                tii.setInstanceDetails(new InstanceDetails());
+                tii.getInstanceDetails().setInstanceParms(""400"");
+               bt.getTModelInstanceDetails().getTModelInstanceInfo().add(tii);
+               sb.getBindingTemplate().add(bt);
+                pub.saveBinding(sb);
+                return WSDMQosConstants.METRIC_FAULT_COUNT_KEY;
+        }
+        
+        //TODO potential test case This argument specifies the filtering criteria which limits the scope of a subscription to a subset of registry records. It is required except when renewing an existing subscription.
+
+        private String updatePublisherBindingAddCategory(String authInfo, BindingTemplate bt, UDDIPublicationPortType pub, String cat)  throws Exception{
+                 SaveBinding sb = new SaveBinding();
+                sb.setAuthInfo(authInfo);
+             if (bt.getCategoryBag()==null)
+                     bt.setCategoryBag(new CategoryBag());
+             bt.getCategoryBag().getKeyedReference().add(new KeyedReference(cat, UDDIConstants.CategorizationTypes_Cacheable, ""Cacheable""));
+               sb.getBindingTemplate().add(bt);
+                pub.saveBinding(sb);
+                return UDDIConstants.CategorizationTypes_Cacheable;
+        }
+        
 
 }
"
juddi,7806a1129a9a2e069b7cc837699e273858e3fe72,"JUDDI-898 resolved
",2014-12-13 09:58:27,Alex,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index e78dd48..dd29f9e 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -492,7 +492,7 @@
      * wildcard characters to be interpreted literally, and as such should not
      * also be combined with the escape character.
      */
-    public static String WILDCARD = ""%"";
+    public static final String  WILDCARD = ""%"";
     /**
      * Presents any SINGLE character<br> Wildcards, when they are allowed, may
      * occur at any position in the string of characters that constitutes the
@@ -504,13 +504,13 @@
      * findQualifier will cause wildcard characters to be interpreted literally,
      * and as such should not also be combined with the escape character.
      */
-    public static String WILDCARD_CHAR = ""_"";
+    public static final String  WILDCARD_CHAR = ""_"";
     /**
      * unchecked: Marking a tModel with this categorization asserts that it
      * represents a value set or category group system whose use, through
      * keyedReferences, is not checked.
      */
-    public static String TMODEL_GENERAL_KEYWORDS = ""uddi:uddi.org:categorization:general_keywords"";
+    public static final String  TMODEL_GENERAL_KEYWORDS = ""uddi:uddi.org:categorization:general_keywords"";
     /**
      * An unchecked value set is one that allows unrestricted references to its
      * values. A UDDI registry is REQUIRED to have a policy to differentiate
@@ -519,14 +519,14 @@
      * that represent unchecked value sets SHOULD be categorized with the
      * unchecked value from the uddi-org:types category system.
      */
-    public static String UNCHECKED = ""uddi-org:types:unchecked"";
+    public static final String  UNCHECKED = ""uddi-org:types:unchecked"";
     /**
      * checked: Marking a tModel with this categorization asserts that it
      * represents a value set or category group system whose use, through
      * keyedReferences, may be checked. Registry, and possibly node policy
      * determines when and how a checked value set is supported.
      */
-    public static String CHECKED = ""uddi-org:types:checked"";
+    public static final String  CHECKED = ""uddi-org:types:checked"";
     /**
      * uncacheable: Marking a tModel with this categorization asserts that it
      * represents a checked value set or category group system whose values must
@@ -535,11 +535,11 @@
      * tModel marked with this categorization and may consider contextual
      * criteria involving the entity associated with the reference.
      */
-    public static String UNCACHEABLE = ""uddi-org:types:uncacheable"";
+    public static final String  UNCACHEABLE = ""uddi-org:types:uncacheable"";
     /**
      * Basic types of business relationships
      */
-    public static String RELATIONSHIPS = ""uddi:uddi.org:relationships"";
+    public static final String  RELATIONSHIPS = ""uddi:uddi.org:relationships"";
     /**
      * ""uddi:uddi.org:keygenerator"" keyGenerator: Marking a tModel with this
      * categorization designates it as one whose tModelKey identifies a key
@@ -548,7 +548,7 @@
      * tModels. Any attempt to use this categorization for something other than
      * a key generator tModel will fail with E_valueNotAllowed returned.
      */
-    public static String KEY_GENERATOR_TMODEL = ""uddi:uddi.org:keygenerator"";
+    public static final String  KEY_GENERATOR_TMODEL = ""uddi:uddi.org:keygenerator"";
     /**
      * ""uddi.org:keygenerator"" keyGenerator: Marking a tModel with this
      * categorization designates it as one whose tModelKey identifies a key
@@ -557,7 +557,7 @@
      * tModels. Any attempt to use this categorization for something other than
      * a key generator tModel will fail with E_valueNotAllowed returned.
      */
-    public static String KEY_GENERATOR = ""uddi.org:keygenerator"";
+    public static final String  KEY_GENERATOR = ""uddi.org:keygenerator"";
     /**
      * ""keyGenerator"" keyGenerator: Marking a tModel with this categorization
      * designates it as one whose tModelKey identifies a key generator partition
@@ -566,117 +566,126 @@
      * use this categorization for something other than a key generator tModel
      * will fail with E_valueNotAllowed returned.
      */
-    public static String KEY_GENERATOR_VALUE = ""keyGenerator"";
+    public static final String  KEY_GENERATOR_VALUE = ""keyGenerator"";
     /**
      * Identifier system used to point to the UDDI entity, using UDDI keys, that
      * is the logical replacement for the one in which isReplacedBy is used.
      */
-    public static String IS_REPLACED_BY = ""uddi:uddi.org:identifier:isreplacedby"";
+    public static final String  IS_REPLACED_BY = ""uddi:uddi.org:identifier:isreplacedby"";
     /**
      * Category system used to point a value set or category group system tModel
      * to associated value set Web service implementations.
      * used for keyedReference tmodel key<br>
      * hint: use the ValueSetValidation binding template key as the value
      */
-    public static String IS_VALIDATED_BY = ""uddi:uddi.org:categorization:validatedby"";
+    public static final String  IS_VALIDATED_BY = ""uddi:uddi.org:categorization:validatedby"";
     /**
      * Category system used to point a value set or category group system tModel
      * to associated value set Web service implementations.
      * used for keyedReference key name<br>
      * hint: use the ValueSetValidation binding template key as the value
      */
-    public static String IS_VALIDATED_BY_KEY_NAME = ""uddi-org:validatedBy"";
+    public static final String  IS_VALIDATED_BY_KEY_NAME = ""uddi-org:validatedBy"";
     /**
      * Category system for referring tModels to other tModels for the purpose of
      * reuse.
      */
-    public static String IS_DERIVED_FROM = ""uddi:uddi.org:categorization:derivedfrom"";
+    public static final String  IS_DERIVED_FROM = ""uddi:uddi.org:categorization:derivedfrom"";
     /**
      * Category system used to declare that a value set uses entity keys as
      * valid values.
      */
-    public static String ENTITY_KEY_VALUES = ""uddi:uddi.org:categorization:entitykeyvalues"";
+    public static final String  ENTITY_KEY_VALUES = ""uddi:uddi.org:categorization:entitykeyvalues"";
     /**
      * Category system used to point to the businessEntity associated with the
      * publisher of the tModel.
      */
-    public static String OWNING_BUSINESS = ""uddi:uddi.org:categorization:owningbusiness"";
+    public static final String  OWNING_BUSINESS = ""uddi:uddi.org:categorization:owningbusiness"";
     /**
      * Secure Sockets Layer Version 3.0 with Server Authentication
      */
-    public static String PROTOCOL_SSLv3 = ""uddi:uddi.org:protocol:serverauthenticatedssl3"";
+    public static final String  PROTOCOL_SSLv3 = ""uddi:uddi.org:protocol:serverauthenticatedssl3"";
     /**
      * Secure Sockets Layer Version 3.0 with Mutual Authentication
      */
-    public static String PROTOCOL_SSLv3_CLIENT_CERT = ""uddi:uddi.org:protocol:mutualauthenticatedssl3"";
+    public static final String  PROTOCOL_SSLv3_CLIENT_CERT = ""uddi:uddi.org:protocol:mutualauthenticatedssl3"";
     /**
      * A Web service that uses HTTP transport -
      */
-    public static String TRANSPORT_HTTP = ""uddi:uddi.org:transport:http"";
+    public static final String  TRANSPORT_HTTP = ""uddi:uddi.org:transport:http"";
     /**
      * E-mail based Web service
      */
-    public static String TRANSPORT_EMAIL = ""uddi:uddi.org:transport:smtp"";
+    public static final String  TRANSPORT_EMAIL = ""uddi:uddi.org:transport:smtp"";
     /**
      * File Transfer Protocol (FTP) based Web service
      */
-    public static String TRANSPORT_FTP = ""uddi:uddi.org:transport:ftp"";
+    public static final String  TRANSPORT_FTP = ""uddi:uddi.org:transport:ftp"";
     /**
      * Fax-based Web service
      */
-    public static String TRANSPORT_FAX = ""uddi:uddi.org:transport:fax"";
+    public static final String  TRANSPORT_FAX = ""uddi:uddi.org:transport:fax"";
     /**
      * Telephone based service
      */
-    public static String TRANSPORT_POTS = ""uddi:uddi.org:transport:telephone"";
+    public static final String  TRANSPORT_POTS = ""uddi:uddi.org:transport:telephone"";
     /**
      * Java RMI based service registered to the Java Registry
      */
-    public static String TRANSPORT_RMI = ""uddi:uddi.org:transport:rmi"";
+    public static final String  TRANSPORT_RMI = ""uddi:uddi.org:transport:rmi"";
     /**
      * A Java RMI based service registered to a JNDI Registry
      */
-    public static String TRANSPORT_JNDI_RMI = ""uddi:uddi.org:transport:jndi-rmi"";
+    public static final String  TRANSPORT_JNDI_RMI = ""uddi:uddi.org:transport:jndi-rmi"";
     /**
      * A Web service that uses the AMQP transport
      */
-    public static String TRANSPORT_AMQP = ""uddi:uddi.org:transport:amqp"";
+    public static final String  TRANSPORT_AMQP = ""uddi:uddi.org:transport:amqp"";
     /**
      * A Web service that uses the OMG DDS transport
      */
-    public static String TRANSPORT_OMGDDS = ""uddi:uddi.org:transport:omgdds"";
+    public static final String  TRANSPORT_OMGDDS = ""uddi:uddi.org:transport:omgdds"";
     /**
      * A Web service that uses UDP
      */
-    public static String TRANSPORT_UDP = ""uddi:uddi.org:transport:udp"";
+    public static final String  TRANSPORT_UDP = ""uddi:uddi.org:transport:udp"";
     /**
      * A Web service that uses the JMS API
      */
-    public static String TRANSPORT_JMS = ""uddi:uddi.org:transport:jms"";
+    public static final String  TRANSPORT_JMS = ""uddi:uddi.org:transport:jms"";
     /**
      * A tModel that represents the Representational State Transfer
      * architectural style
      */
-    public static String PROTOCOL_REST = ""uddi:uddi.org:protocol:rest"";
+    public static final String  PROTOCOL_REST = ""uddi:uddi.org:protocol:rest"";
     /**
      * A tModel that represents the SOAP 1.1 protocol
      */
-    public static String PROTOCOL_SOAP = ""uddi:uddi.org:protocol:soap"";
+    public static final String  PROTOCOL_SOAP = ""uddi:uddi.org:protocol:soap"";
     /**
      * A tModel that represents the SOAP 1.2 protocol
      */
-    public static String PROTOCOL_SOAP12 = ""uddi:uddi.org:protocol:soap12"";
+    public static final String  PROTOCOL_SOAP12 = ""uddi:uddi.org:protocol:soap12"";
     
     
     
-     public static String INQUIRY=""uddi:uddi.org:v3_inquiry"";
-        public static String PUBLISH=""uddi:uddi.org:v3_publication"";
-         public static String SECURITY=""uddi:uddi.org:v3_security"";
-         public static String REPLICATION=""uddi:uddi.org:v3_replication"";
-        public static String CUSTODY_TRANSFER=""uddi:uddi.org:v3_ownership_transfer"";
-        public static String NODE_TRANSFER=""uddi:uddi.org:v3_node_custody_transfer"";
-         public static String VSV_CACHE=""uddi:uddi.org:v3_valuesetcaching"";
-         public static String VSV_VALIDATE=""uddi:uddi.org:v3_valuesetvalidation"";
-         public static String SUBSCRIPTION=""uddi:uddi.org:v3_subscription"";
-         public static String SUBSCRIPTION_LISTENER=""uddi:uddi.org:v3_subscriptionlistener"";
+     public static final String  INQUIRY=""uddi:uddi.org:v3_inquiry"";
+        public static final String  PUBLISH=""uddi:uddi.org:v3_publication"";
+         public static final String  SECURITY=""uddi:uddi.org:v3_security"";
+         public static final String  REPLICATION=""uddi:uddi.org:v3_replication"";
+        public static final String  CUSTODY_TRANSFER=""uddi:uddi.org:v3_ownership_transfer"";
+        public static final String  NODE_TRANSFER=""uddi:uddi.org:v3_node_custody_transfer"";
+         public static final String  VSV_CACHE=""uddi:uddi.org:v3_valuesetcaching"";
+         public static final String  VSV_VALIDATE=""uddi:uddi.org:v3_valuesetvalidation"";
+         public static final String  SUBSCRIPTION=""uddi:uddi.org:v3_subscription"";
+         public static final String  SUBSCRIPTION_LISTENER=""uddi:uddi.org:v3_subscriptionlistener"";
+         /**
+          * @since 3.3
+          */
+        public static final String  CategorizationTypes_Cacheable=""uddi-org:types:cacheable"";
+           /**
+          * @since 3.3
+          */
+        public static final String  CategorizationTypes=""uddi-org:categorization:types"";
+        
 }
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 80e4082..c7d1192 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -51,6 +51,8 @@
 import org.apache.juddi.model.BusinessEntity;
 import org.apache.juddi.model.BusinessService;
 import org.apache.juddi.model.Operator;
+import org.apache.juddi.model.PublisherAssertion;
+import org.apache.juddi.model.PublisherAssertionId;
 import org.apache.juddi.model.Tmodel;
 import static org.apache.juddi.replication.ReplicationNotifier.FetchEdges;
 import org.apache.juddi.v3.client.UDDIService;
@@ -229,7 +231,7 @@
                                                         //get the high water marks for this node
                                                         //ok now get all the changes
 
-                                                        //done TODO replace with last known record from the given node
+                                                        //done  replace with last known record from the given node
                                                         //for (int xx = 0; xx < poll.getChangesAvailable().getHighWaterMark().size(); xx++) {
                                                         //        logger.info(""Node "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getNodeID()
                                                         //                + "" USN "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getOriginatingUSN());
@@ -451,10 +453,37 @@
 
                                 //<editor-fold defaultstate=""collapsed"" desc=""changeRecordPublisherAssertion"">
                                 if (rec.getChangeRecordPublisherAssertion() != null) {
-//TODO implement
+
+                                        //TODO are publisher assertions owned by a given node?
+                                        PublisherAssertionId paid = new PublisherAssertionId(rec.getChangeRecordPublisherAssertion().getPublisherAssertion().getFromKey(), rec.getChangeRecordPublisherAssertion().getPublisherAssertion().getToKey());
+                                        org.apache.juddi.model.PublisherAssertion model = em.find(org.apache.juddi.model.PublisherAssertion.class, paid);
+                                        if (model != null) {
+                                                //permission check?
+                                        }
+                                        model = new PublisherAssertion();
+
+                                        MappingApiToModel.mapPublisherAssertion(rec.getChangeRecordPublisherAssertion().getPublisherAssertion(), model);
+                                        model.setModified(rec.getChangeRecordPublisherAssertion().getModified().toGregorianCalendar().getTime());
+                                        em.persist(model);
+
                                 }
 //</editor-fold>
+                                if (rec.getChangeRecordNewDataConditional() != null) {
+                                        //TODO
 
+                                }
+                                if (rec.getChangeRecordNull() != null) {
+                                        //TODO
+
+                                }
+                                if (rec.getChangeRecordCorrection() != null) {
+                                        //TODO
+
+                                }
+                                if (rec.getChangeRecordConditionFailed() != null) {
+                                        //TODO
+
+                                }
                                 tx.commit();
 
                         } catch (Exception drfm) {
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index ac5d19e..5012ce5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -42,9 +42,11 @@
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.model.PublisherAssertion;
 import org.apache.juddi.model.SubscriptionChunkToken;
 import org.apache.juddi.model.SubscriptionMatch;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.query.FindBusinessByPublisherQuery;
 import org.apache.juddi.query.FindSubscriptionByPublisherQuery;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
@@ -725,12 +727,30 @@
 				// The coverage period doesn't apply here (basically because publisher assertions don't keep operational info).
 				// TODO, JUDDI-873 edit they do now, rewrite this query
 				GetAssertionStatusReport getAssertionStatusReport = subscriptionFilter.getGetAssertionStatusReport();
-				
-				List<AssertionStatusItem> assertionList = PublicationHelper.getAssertionStatusItemList(publisher, getAssertionStatusReport.getCompletionStatus(), em);
-	
-				AssertionStatusReport assertionStatusReport  = new AssertionStatusReport();
-				for(AssertionStatusItem asi : assertionList)
-					assertionStatusReport.getAssertionStatusItem().add(asi);
+                                List<?> businessKeysFound = null;
+                                businessKeysFound = FindBusinessByPublisherQuery.select(em, null, publisher, businessKeysFound);
+		
+                                AssertionStatusReport assertionStatusReport  = new AssertionStatusReport();
+                                
+				List<org.apache.juddi.model.PublisherAssertion> pubAssertionList = org.apache.juddi.query.FindPublisherAssertionByBusinessQuery.select(em, businessKeysFound, getAssertionStatusReport.getCompletionStatus());
+                                //if (pubAssertionList==null)
+                                //    return result;
+                                for (org.apache.juddi.model.PublisherAssertion modelPubAssertion : pubAssertionList) {
+
+                                        if (startPointDate.after(modelPubAssertion.getModified())) {
+                                                continue;
+                                        }
+
+                                        if (endPointDate.before(modelPubAssertion.getModified())) {
+                                                continue;
+                                        }
+                                        org.uddi.api_v3.AssertionStatusItem apiAssertionStatusItem = new org.uddi.api_v3.AssertionStatusItem();
+
+                                        MappingModelToApi.mapAssertionStatusItem(modelPubAssertion, apiAssertionStatusItem, businessKeysFound);
+
+                                        assertionStatusReport.getAssertionStatusItem().add(apiAssertionStatusItem);
+                                }
+
 				
 				result.setAssertionStatusReport(assertionStatusReport);
 			}
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
index d71f2bd..b724ae5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/replication/ReplicationNotifier.java
@@ -120,7 +120,7 @@
                         em.close();
                 }
 
-                log.info(""ChangeRecord: "" + j.getId() + "","" + j.getEntityKey() + "","" + j.getNodeID() + "","" + j.getOriginatingUSN() + "","" + j.getRecordType().toString());
+                log.debug(""ChangeRecord: "" + j.getId() + "","" + j.getEntityKey() + "","" + j.getNodeID() + "","" + j.getOriginatingUSN() + "","" + j.getRecordType().toString());
                 org.uddi.repl_v3.ReplicationConfiguration repcfg = FetchEdges();
 
                 //TODO figure out what this statement means 7.5.3
@@ -131,7 +131,7 @@
                  * of the registry.
                  */
                 if (repcfg == null) {
-                        log.info(""No replication configuration is defined!"");
+                        log.debug(""No replication configuration is defined!"");
                         return;
 
                 }
@@ -184,7 +184,7 @@
 
                         try {
                                 x.notifyChangeRecordsAvailable(req);
-                                log.info(""Successfully sent change record available message to "" + s);
+                                log.debug(""Successfully sent change record available message to "" + s);
                         } catch (Exception ex) {
                                 log.warn(""Unable to send change notification to "" + s, ex);
                         }
@@ -196,11 +196,14 @@
                 if (queue == null) {
                         queue = new ConcurrentLinkedQueue();
                 }
+                //TODO revisie this
+                if (!queue.isEmpty())
+                        log.info(""Replication, Notifying nodes of new change records. "" + queue.size() + "" queued"");
+
                 //TODO check for replication config changes
                 while (!queue.isEmpty()) {
                         //for each change at this node
-                        log.info(""Replication, Notifying nodes of new change records. "" + queue.size() + "" remaining"");
-
+                        
                         ChangeRecord j = queue.poll();
                         ProcessChangeRecord(j);
 
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 3dc0771..cdfd79d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -280,7 +280,8 @@
                 if (resultList.getBindingDetail() != null || resultList.getBusinessDetail() != null
                         || resultList.getBusinessList() != null || resultList.getServiceDetail() != null
                         || resultList.getServiceList() != null || resultList.getTModelDetail() != null
-                        || resultList.getTModelList() != null || resultList.getRelatedBusinessesList() != null) {
+                        || resultList.getTModelList() != null || resultList.getRelatedBusinessesList() != null
+                        || resultList.getAssertionStatusReport() !=null) {
                         return true;
                 }
                 //When the response is 'brief', or when there are deleted only keyBags are used.
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribe.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribe.java
index 3541a0c..38306ab 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribe.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribe.java
@@ -139,16 +139,64 @@
 
                 System.out.println(""Registered FindTModel subscription key: "" + (subscriptionTM.getSubscriptionKey()) + "" bindingkey: "" + subscriptionTM.getBindingKey());
 
+                sub = new Subscription();
+                sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
+                sub.setBindingKey(start.getBindingKey());
+                sub.setSubscriptionFilter(new SubscriptionFilter());
+                sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.STATUS_COMPLETE);
+
+                Subscription subscriptionPA = clerk.register(sub, clerk.getUDDINode().getApiNode());
+
+                System.out.println(""Registered Completed PublisherAssertion subscription key: "" + (subscriptionPA.getSubscriptionKey()) + "" bindingkey: "" + subscriptionTM.getBindingKey());
+
+                sub = new Subscription();
+                sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
+                sub.setBindingKey(start.getBindingKey());
+                sub.setSubscriptionFilter(new SubscriptionFilter());
+                sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.STATUS_FROM_KEY_INCOMPLETE);
+
+                Subscription subscriptionPA2 = clerk.register(sub, clerk.getUDDINode().getApiNode());
+
+                System.out.println(""Registered FROM incomplete PublisherAssertion subscription key: "" + (subscriptionPA2.getSubscriptionKey()) + "" bindingkey: "" + subscriptionTM.getBindingKey());
+
+                sub = new Subscription();
+                sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
+                sub.setBindingKey(start.getBindingKey());
+                sub.setSubscriptionFilter(new SubscriptionFilter());
+                sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.STATUS_TO_KEY_INCOMPLETE);
+
+                Subscription subscriptionPA3 = clerk.register(sub, clerk.getUDDINode().getApiNode());
+
+                System.out.println(""Registered TO incomplete PublisherAssertion subscription key: "" + (subscriptionPA3.getSubscriptionKey()) + "" bindingkey: "" + subscriptionTM.getBindingKey());
+
+                sub = new Subscription();
+                sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(1000));
+                sub.setBindingKey(start.getBindingKey());
+                sub.setSubscriptionFilter(new SubscriptionFilter());
+                sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.STATUS_BOTH_INCOMPLETE);
+
+                Subscription subscriptionPA4 = clerk.register(sub, clerk.getUDDINode().getApiNode());
+
+                System.out.println(""Registered recently deleted PublisherAssertion subscription key: "" + (subscriptionPA4.getSubscriptionKey()) + "" bindingkey: "" + subscriptionTM.getBindingKey());
+
                 System.out.println(""Waiting for callbacks. Now would be a good time to launch either another program or juddi-gui to make some changes. Press any key to stop!"");
                 //Thread hook = new Thread(this);
-              //  Runtime.getRuntime().addShutdownHook(hook);
-                
-                        System.in.read();
-                
+                //  Runtime.getRuntime().addShutdownHook(hook);
+
+                System.in.read();
+
                 SubscriptionCallbackListener.stop(client, ""default"", start.getBindingKey());
                 clerk.unRegisterSubscription(subscriptionBiz.getSubscriptionKey());
                 clerk.unRegisterSubscription(subscriptionSvc.getSubscriptionKey());
                 clerk.unRegisterSubscription(subscriptionTM.getSubscriptionKey());
+                clerk.unRegisterSubscription(subscriptionPA.getSubscriptionKey());
+                clerk.unRegisterSubscription(subscriptionPA2.getSubscriptionKey());
+                clerk.unRegisterSubscription(subscriptionPA3.getSubscriptionKey());
+                clerk.unRegisterSubscription(subscriptionPA4.getSubscriptionKey());
 
                 clerk.unRegisterTModel(createKeyGenator.getTModelKey());
 
"
juddi,bacfa9353a1c6bd29093c4c4652044cb4fae3f64,"JUDDI-873 fixed
JUDDI-242 stubbing out remaining replication items
",2014-12-12 18:36:22,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribeAssertionStatus.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribeAssertionStatus.java
index 19839d9..58f241f 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribeAssertionStatus.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiSubscribeAssertionStatus.java
@@ -105,8 +105,9 @@
                 sub.setBindingKey(start.getBindingKey());
                 sub.setSubscriptionFilter(new SubscriptionFilter());
                 sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
+                //it's optional
                 
-
+                //sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.STATUS_COMPLETE);
                 Subscription subscriptionBiz = clerk.register(sub, clerk.getUDDINode().getApiNode());
 
                 System.out.println(""Registered GetAssertionStatus subscription key: "" + (subscriptionBiz.getSubscriptionKey()) + "" bindingkey: "" + subscriptionBiz.getBindingKey());
"
juddi,4429dadd5325128521122bfebf84b8df24bad1a8,"JUDDI-891 fixing some of the unit tests that were affected by the root business entity change
",2014-12-08 22:13:05,Alex,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index ef90b62..66eb64c 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -738,7 +738,7 @@
          * @throws Exception
          */
         @Test
-        //@Ignore
+        @Ignore
         public void joePublisherUpdate_PUBLISHERASSERTION_DETAIL_TO() throws Exception {
                 Assume.assumeTrue(TckPublisher.isEnabled());
                 Assume.assumeNotNull(getHostame());
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 767cbee..fb0e00e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -49,7 +49,10 @@
 	public static final int AUTHTOKEN_ACTIVE = 1;
 	public static final int AUTHTOKEN_RETIRED = 0;
 	static final Log logger = LogFactory.getLog(AuthenticatedService.class);
-	protected String node = ""UNDEFINED_NODE_NAME"";
+        /**
+         * the node id of this server instance, as loaded from the config file
+         */
+	protected static String node = ""UNDEFINED_NODE_NAME"";
         protected String baseUrlSSL=""UNDEFINED"";
          protected String baseUrl=""UNDEFINED"";
         
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index dd201fe..1b6b019 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -125,7 +125,7 @@
  */
 @WebService(serviceName = ""JUDDIApiService"",
         endpointInterface = ""org.apache.juddi.v3_service.JUDDIApiPortType"",
-        targetNamespace = ""urn:juddi-apache-org:v3_service"", wsdlLocation =  ""classpath:/juddi_api_v1.wsdl"")
+        targetNamespace = ""urn:juddi-apache-org:v3_service"", wsdlLocation = ""classpath:/juddi_api_v1.wsdl"")
 public class JUDDIApiImpl extends AuthenticatedService implements JUDDIApiPortType {
 
         private Log log = LogFactory.getLog(this.getClass());
@@ -1276,6 +1276,7 @@
                 try {
                         tx.begin();
 
+                        org.uddi.repl_v3.ReplicationConfiguration oldConfig = null;
                         UddiEntityPublisher publisher = this.getEntityPublisher(em, authInfo);
                         if (!((Publisher) publisher).isAdmin()) {
                                 throw new UserMismatchException(new ErrorMessage(""errors.AdminReqd""));
@@ -1289,9 +1290,9 @@
                         }
                         SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMddkkmmZ"");
                         if (model == null) {
-                                //this is a brand new configuration
+                                //this is a brand new configuration and we didn't have one before
                                 model = new ReplicationConfiguration();
-                                MappingApiToModel.mapReplicationConfiguration(replicationConfiguration, model,em);
+                                MappingApiToModel.mapReplicationConfiguration(replicationConfiguration, model, em);
                                 model.setSerialNumber(System.currentTimeMillis());
                                 model.setTimeOfConfigurationUpdate(sdf.format(new Date()));
                                 em.persist(model);
@@ -1305,17 +1306,20 @@
                                 //spec doesn't appear to mention if recording a change history on the config is required
                                 //assuming not.
                                 //em.remove(model);
-                                model = new ReplicationConfiguration();
-                                MappingApiToModel.mapReplicationConfiguration(replicationConfiguration, model, em);
-                                model.setSerialNumber(System.currentTimeMillis());
+                                oldConfig = new org.uddi.repl_v3.ReplicationConfiguration();
+                                MappingModelToApi.mapReplicationConfiguration(model, oldConfig);
 
-                                model.setTimeOfConfigurationUpdate(sdf.format(new Date()));
-                                em.merge(model);
+                                ReplicationConfiguration model2 = new ReplicationConfiguration();
+                                MappingApiToModel.mapReplicationConfiguration(replicationConfiguration, model2, em);
+                                model2.setSerialNumber(System.currentTimeMillis());
+
+                                model2.setTimeOfConfigurationUpdate(sdf.format(new Date()));
+                                em.persist(model2);
 
                         }
 
                         tx.commit();
-                        //UDDIReplicationImpl.notifyConfigurationChange(replicationConfiguration);
+                        UDDIReplicationImpl.notifyConfigurationChange(oldConfig, replicationConfiguration);
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(JUDDIQuery.SET_REPLICATION_NODES,
                                 QueryStatus.SUCCESS, procTime);
@@ -1324,12 +1328,11 @@
                         serviceCounter.update(JUDDIQuery.SET_REPLICATION_NODES,
                                 QueryStatus.FAILED, procTime);
                         throw drfm;
-                } catch (Exception ex){
-                        logger.error(ex,ex);
+                } catch (Exception ex) {
+                        logger.error(ex, ex);
                         JAXB.marshal(replicationConfiguration, System.out);
                         throw new FatalErrorException(new ErrorMessage(""E_fatalError"", ex.getMessage()));
-                }
-                finally {
+                } finally {
                         if (tx.isActive()) {
                                 tx.rollback();
                         }
@@ -1381,11 +1384,11 @@
                         op.setOperatorNodeID(node);
                         op.setSoapReplicationURL(baseUrlSSL + ""/services/replication"");
                         //TODO lookup from the root business
-                       
+
                         op.getContact().add(new Contact());
                         op.getContact().get(0).getPersonName().add(new PersonName(""Unknown"", null));
                         op.setOperatorStatus(OperatorStatusType.NORMAL);
-                        
+
                         r.getOperator().add(op);
                         r.getCommunicationGraph().getNode().add(node);
                         r.getCommunicationGraph().getControlledMessage().add(""*"");
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 5c3b22c..bb2d17c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -21,10 +21,12 @@
 import java.rmi.RemoteException;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Queue;
+import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.ConcurrentLinkedDeque;
@@ -104,6 +106,55 @@
         static void notifyConfigurationChange(ReplicationConfiguration oldConfig, ReplicationConfiguration newConfig) {
 
                 //if the config is different
+                Set<String> oldnodes = getNodes(oldConfig);
+                Set<String> newNodes = getNodes(newConfig);
+
+                Set<String> addedNodes = diffNodeList(oldnodes, newNodes);
+                if (queue == null) {
+                        queue = new ConcurrentLinkedDeque<NotifyChangeRecordsAvailable>();
+                }
+                for (String s : addedNodes) {
+                        if (!s.equals(node)) {
+                                logger.info(""This node: "" + node + "". New replication node queue for synchronization: "" + s);
+                                HighWaterMarkVectorType highWaterMarkVectorType = new HighWaterMarkVectorType();
+                                highWaterMarkVectorType.getHighWaterMark().add(new ChangeRecordIDType(s, 0L));
+                                queue.add(new NotifyChangeRecordsAvailable(s, highWaterMarkVectorType));
+                        }
+                }
+
+        }
+
+        private static Set<String> getNodes(ReplicationConfiguration oldConfig) {
+                Set<String> ret = new HashSet<String>();
+                if (oldConfig == null) {
+                        return ret;
+                }
+                for (org.uddi.repl_v3.Operator o : oldConfig.getOperator()) {
+                        ret.add(o.getOperatorNodeID());
+                }
+                if (oldConfig.getCommunicationGraph() != null) {
+                        ret.addAll(oldConfig.getCommunicationGraph().getNode());
+                }
+                return ret;
+        }
+
+        private static Set<String> diffNodeList(Set<String> oldnodes, Set<String> newNodes) {
+                Set<String> diff = new HashSet<String>();
+                Iterator<String> iterator = null;
+                /*oldnodes.iterator();
+                 while (iterator.hasNext()){
+                 String lhs=iterator.next();
+                 if (!newNodes.contains(lhs))
+                 diff.add(lhs);
+                 }*/
+                iterator = newNodes.iterator();
+                while (iterator.hasNext()) {
+                        String lhs = iterator.next();
+                        if (!oldnodes.contains(lhs)) {
+                                diff.add(lhs);
+                        }
+                }
+                return diff;
         }
 
         private UDDIServiceCounter serviceCounter;
@@ -179,17 +230,19 @@
                                                 try {
                                                         //get the high water marks for this node
                                                         //ok now get all the changes
-                                                        logger.info(""fetching updates on, since "");
-                                                        for (int xx = 0; xx < poll.getChangesAvailable().getHighWaterMark().size(); xx++) {
-                                                                logger.info(""Node "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getNodeID()
-                                                                        + "" USN "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getOriginatingUSN());
-                                                        }
-                                                        //JAXB.marshal(poll, System.out);
+
+                                                        //done TODO replace with last known record from the given node
+                                                        //for (int xx = 0; xx < poll.getChangesAvailable().getHighWaterMark().size(); xx++) {
+                                                        //        logger.info(""Node "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getNodeID()
+                                                        //                + "" USN "" + poll.getChangesAvailable().getHighWaterMark().get(xx).getOriginatingUSN());
+                                                        //}
                                                         GetChangeRecords body = new GetChangeRecords();
                                                         body.setRequestingNode(node);
                                                         body.setResponseLimitCount(BigInteger.valueOf(100));
-                                                        //indexing is screwed up
-                                                        body.setChangesAlreadySeen(poll.getChangesAvailable());
+
+                                                        body.setChangesAlreadySeen(getLastChangeRecordFrom(poll.getNotifyingNode()));
+                                                        logger.info(""fetching updates from "" + poll.getNotifyingNode() + "" since "" + body.getChangesAlreadySeen().getHighWaterMark().get(0).getOriginatingUSN());
+
                                                         List<ChangeRecord> records
                                                                 = replicationClient.getChangeRecords(body).getChangeRecord();
                                                         //ok now we need to persist the change records
@@ -235,9 +288,9 @@
                          * a USN is less than the USN specified in the
                          * changesAlreadySeen highWaterMarkVector.
                          */
-                        StringWriter sw = new StringWriter();
-                        JAXB.marshal(rec, sw);
-                        logger.info(""_______________________Remote change request "" + sw.toString());
+                        // StringWriter sw = new StringWriter();
+                        //JAXB.marshal(rec, sw);
+                        logger.info(""_______________________Remote change request "" + rec.getChangeID().getNodeID() + "":"" + rec.getChangeID().getOriginatingUSN());
 
                         try {
                                 tx.begin();
@@ -245,6 +298,9 @@
                                 org.apache.juddi.model.ChangeRecord mapChangeRecord = MappingApiToModel.mapChangeRecord(rec);
                                 mapChangeRecord.setId(null);
                                 em.persist(mapChangeRecord);
+                                tx.commit();
+                                tx = em.getTransaction();
+                                tx.begin();
                                 //<editor-fold defaultstate=""collapsed"" desc=""delete a record"">
 
                                 if (rec.getChangeRecordDelete() != null) {
@@ -304,10 +360,10 @@
                                                         } else {
                                                                 ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewData().getOperationalInfo());
 
-                                                               org.apache.juddi.model.BindingTemplate bt= em.find(org.apache.juddi.model.BindingTemplate.class,rec.getChangeRecordNewData().getBindingTemplate().getBindingKey() );
-                                                               if (bt!=null){
-                                                                       em.remove(bt);
-                                                               }
+                                                                org.apache.juddi.model.BindingTemplate bt = em.find(org.apache.juddi.model.BindingTemplate.class, rec.getChangeRecordNewData().getBindingTemplate().getBindingKey());
+                                                                if (bt != null) {
+                                                                        em.remove(bt);
+                                                                }
                                                                 bt = new BindingTemplate();
                                                                 MappingApiToModel.mapBindingTemplate(rec.getChangeRecordNewData().getBindingTemplate(), bt, model);
                                                                 MappingApiToModel.mapOperationalInfo(bt, rec.getChangeRecordNewData().getOperationalInfo());
@@ -322,7 +378,7 @@
                                                                 ValidateNodeIdMatches(model.getNodeId(), rec.getChangeRecordNewData().getOperationalInfo());
                                                                 //TODO revisit access control rules
                                                                 em.remove(model);
-                                                        } 
+                                                        }
                                                         model = new BusinessEntity();
                                                         MappingApiToModel.mapBusinessEntity(rec.getChangeRecordNewData().getBusinessEntity(), model);
                                                         // MappingApiToModel.mapOperationalInfo(model, rec.getChangeRecordNewData().getOperationalInfo());
@@ -413,15 +469,68 @@
                         }
                 }
 
+                private HighWaterMarkVectorType getLastChangeRecordFrom(String notifyingNode) {
+                        HighWaterMarkVectorType ret = new HighWaterMarkVectorType();
+                        ChangeRecordIDType cid = new ChangeRecordIDType();
+                        cid.setNodeID(notifyingNode);
+                        cid.setOriginatingUSN(0L);
+                        EntityManager em = PersistenceManager.getEntityManager();
+                        EntityTransaction tx = em.getTransaction();
+                        try {
+                                tx.begin();
+                                Long id = 0L;
+                                try {
+                                        cid.setOriginatingUSN((Long) em.createQuery(""select e.originatingUSN from ChangeRecord e where e.nodeID = :node order by e.originatingUSN desc"").setParameter(""node"", notifyingNode).setMaxResults(1).getSingleResult());
+                                } catch (Exception ex) {
+                                        logger.info(ex);
+                                }
+
+                                tx.rollback();
+
+                        } catch (Exception drfm) {
+                                logger.warn(""error caught fetching newest record from node "" + notifyingNode, drfm);
+                        } finally {
+                                if (tx.isActive()) {
+                                        tx.rollback();
+                                }
+                                em.close();
+                        }
+
+                        ret.getHighWaterMark().add(cid);
+
+                        return ret;
+                }
         }
 
-        private static void ValidateNodeIdMatches(String nodeId, OperationalInfo operationalInfo) throws Exception {
-                if (nodeId == null || operationalInfo == null) {
+        // private void ValidateDontChangeMyRecordsAtAnotherNode(String )
+        private void ValidateNodeIdMatches(String modelNodeId, OperationalInfo newDataOperationalInfo) throws Exception {
+                if (modelNodeId == null || newDataOperationalInfo == null) {
                         throw new Exception(""either the local node ID is null or the inbound replication data's node id is null"");
                 }
-                if (!nodeId.equals(operationalInfo.getNodeID())) {
+                //only time this is allowed is custody transfer
+                if (!modelNodeId.equals(newDataOperationalInfo.getNodeID())) {
                         throw new Exception(""node id mismatch!"");
                 }
+
+                //if i already have a record and ""own it"" and the remote node has a record with the same key, reject the update
+                //1.5.8 
+                /**
+                 * Each node has custody of a portion of the aggregate data
+                 * managed by the registry of which it is a part. Each datum is
+                 * by definition in the custody of exactly one such node. A
+                 * datum in this context can be a businessEntity, a
+                 * businessService, a bindingTemplate, a tModel, or a
+                 * publisherAssertion. Changes to a datum in the registry MUST
+                 * originate at the node which is the custodian of the datum.
+                 * The registry defines the policy for data custody and, if
+                 * allowed, the custodian node for a given datum can be changed;
+                 * such custody transfer processes are discussed in Section 5.4
+                 * Custody and Ownership Transfer API.
+                 */
+                //so someone else attempted to update one of my records, reject it
+                if (modelNodeId.equals(node)) {
+                        throw new Exception(""node id mismatch! this node already has a record for key "" + newDataOperationalInfo.getEntityKey() + "" and I'm the authority for it."");
+                }
         }
 
         private synchronized UDDIReplicationPortType getReplicationClient(String node) {
@@ -482,6 +591,7 @@
         @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
         @WebResult(name = ""changeRecords"", targetNamespace = ""urn:uddi-org:repl_v3"", partName = ""body"")
         // @WebMethod(operationName = ""get_changeRecords"", action = ""get_changeRecords"")
+        @Override
         public org.uddi.repl_v3.ChangeRecords getChangeRecords(
                 @WebParam(partName = ""body"", name = ""get_changeRecords"", targetNamespace = ""urn:uddi-org:repl_v3"") org.uddi.repl_v3.GetChangeRecords body
         ) throws DispositionReportFaultMessage, RemoteException {/*
@@ -625,6 +735,7 @@
 
                 EntityManager em = PersistenceManager.getEntityManager();
                 EntityTransaction tx = em.getTransaction();
+                HashMap<String, Long> map = new HashMap<String, Long>();
                 try {
                         tx.begin();
                         if (FetchEdges != null) {
@@ -632,26 +743,26 @@
                                 while (it.hasNext()) {
                                         String nextNode = it.next();
                                         if (!nextNode.equals(node)) {
+                                                if (!map.containsKey(nextNode)) {
+                                                        Long id = 0L;
+                                                        try {
+                                                                id = (Long) em.createQuery(""select e.originatingUSN from ChangeRecord e where e.nodeID = :node order by e.originatingUSN desc"").setParameter(""node"", nextNode).setMaxResults(1).getSingleResult();
+                                                        } catch (Exception ex) {
+                                                                logger.debug(ex);
+                                                        }
+                                                        if (id == null) {
+                                                                id = 0L;
+                                                                //per the spec
+                                                        }
+                                                        map.put(nextNode, id);
 
-                                                Long id = 0L;
-                                                try {
-                                                        id = (Long) em.createQuery(""select e.originatingUSN from ChangeRecord e where e.nodeID = :node order by e.originatingUSN desc"").setParameter(""node"", nextNode).setMaxResults(1).getSingleResult();
-                                                } catch (Exception ex) {
-                                                        logger.debug(ex);
                                                 }
-                                                if (id == null) {
-                                                        id = 0L;
-                                                        //per the spec
-                                                }
-                                                ChangeRecordIDType x = new ChangeRecordIDType(nextNode, id);
-
-                                                ret.add(x);
-
                                         }
                                 }
                         }
                         //dont forget this node
-                        Long id = (Long) em.createQuery(""select (e.id) from ChangeRecord e where e.nodeID = :node  order by e.id desc"").setParameter(""node"", node).setMaxResults(1).getSingleResult();
+                        Long id = (Long) em.createQuery(""select (e.id) from ChangeRecord e where e.nodeID = :node  order by e.id desc"")
+                                .setParameter(""node"", node).setMaxResults(1).getSingleResult();
                         if (id == null) {
                                 id = 0L;
                         }
@@ -674,6 +785,11 @@
                         em.close();
                 }
 
+                Iterator<Map.Entry<String, Long>> iterator = map.entrySet().iterator();
+                while (iterator.hasNext()) {
+                        Map.Entry<String, Long> next = iterator.next();
+                        ret.add(new ChangeRecordIDType(next.getKey(), next.getValue()));
+                }
                 return ret;
         }
 
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index f3df32f..64ebdb9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -117,8 +117,9 @@
 
         /**
          * used from Install class
+         *
          * @param publisher
-         * @param nodeid 
+         * @param nodeid
          * @see Install
          */
         public ValidatePublish(UddiEntityPublisher publisher, String nodeid) {
@@ -284,14 +285,20 @@
 
         private void AccessCheck(Object obj, String entityKey) throws UserMismatchException {
                 boolean accessCheck = false; //assume access denied
-                //TODO revisit access control rules in a replicated environment
+                if (!((UddiEntity) obj).getNodeId().equals(nodeID)) {
+                        //prevent changes to data owned by another node in a replicated environment
+                        //even if you're the boss
+                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidNode"", entityKey + "" Owning Node: "" +((UddiEntity) obj).getNodeId()
+                        + "", this node: "" + nodeID));
+                }
+
                 if (publisher.isOwner((UddiEntity) obj)) {
                         accessCheck = true;
 
                 }
                 //if i'm an admin, let me edit stuff on this node, but only stuff that's owned by this node
                 if (((Publisher) publisher).isAdmin()
-                     && nodeID.equals(((UddiEntity) obj).getNodeId())) {
+                        && nodeID.equals(((UddiEntity) obj).getNodeId())) {
                         accessCheck = true;
                 }
 
@@ -331,8 +338,8 @@
                                 }
 
                                 if (!pubAssertion.getTmodelKey().equalsIgnoreCase(keyedRef.getTModelKey())
-                                     || !pubAssertion.getKeyName().equalsIgnoreCase(keyedRef.getKeyName())
-                                     || !pubAssertion.getKeyValue().equalsIgnoreCase(keyedRef.getKeyValue())) {
+                                        || !pubAssertion.getKeyName().equalsIgnoreCase(keyedRef.getKeyName())
+                                        || !pubAssertion.getKeyValue().equalsIgnoreCase(keyedRef.getKeyValue())) {
                                         throw new AssertionNotFoundException(new ErrorMessage(""errors.pubassertion.AssertionNotFound"", entity.getFromKey() + "", "" + entity.getToKey()));
                                 }
 
@@ -363,9 +370,9 @@
 
                 for (org.uddi.api_v3.BusinessEntity entity : entityList) {
                         validateBusinessEntity(em, entity, config, publisher);
-                       
+
                 }
-                 validateCheckedTModelsBE(entityList, config);
+                validateCheckedTModelsBE(entityList, config);
         }
 
         public void validateSaveBusinessMax(EntityManager em) throws DispositionReportFaultMessage {
@@ -473,7 +480,7 @@
 
                 for (org.uddi.api_v3.BindingTemplate entity : entityList) {
                         validateBindingTemplate(em, entity, null, config, publisher);
-                        
+
                 }
                 validateCheckedTModelsBT(entityList, config);
         }
@@ -527,7 +534,7 @@
 
                 for (org.uddi.api_v3.TModel entity : entityList) {
                         validateTModel(em, entity, config, publisher);
-                        
+
                 }
                 validateCheckedTModelsTM(entityList, config);
         }
@@ -604,17 +611,17 @@
                 if (item.getBusinessServices() != null && !item.getSignature().isEmpty()) {
                         for (int i = 0; i < item.getBusinessServices().getBusinessService().size(); i++) {
                                 if (item.getBusinessServices().getBusinessService().get(i).getBusinessKey() == null
-                                     || item.getBusinessServices().getBusinessService().get(i).getBusinessKey().length() == 0) {
+                                        || item.getBusinessServices().getBusinessService().get(i).getBusinessKey().length() == 0) {
                                         throw new ValueNotAllowedException(new ErrorMessage(""errors.entity.SignedButNoKey"", ""business/Service("" + i + "")/businessKey""));
                                 }
                                 if (item.getBusinessServices().getBusinessService().get(i).getServiceKey() == null
-                                     || item.getBusinessServices().getBusinessService().get(i).getServiceKey().length() == 0) {
+                                        || item.getBusinessServices().getBusinessService().get(i).getServiceKey().length() == 0) {
                                         throw new ValueNotAllowedException(new ErrorMessage(""errors.entity.SignedButNoKey"", ""business/Service("" + i + "")/serviceKey""));
                                 }
                                 if (item.getBusinessServices().getBusinessService().get(i).getBindingTemplates() != null) {
                                         for (int k = 0; k < item.getBusinessServices().getBusinessService().get(i).getBindingTemplates().getBindingTemplate().size(); k++) {
                                                 if (item.getBusinessServices().getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey() == null
-                                                     || item.getBusinessServices().getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey().length() == 0) {
+                                                        || item.getBusinessServices().getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey().length() == 0) {
                                                         throw new ValueNotAllowedException(new ErrorMessage(""errors.entity.SignedButNoKey"", ""business/Service("" + i + "")/bindingTemplate)"" + k + "")/bindingKey""));
                                                 }
                                         }
@@ -658,7 +665,7 @@
                 if (item.getBindingTemplates() != null && !item.getSignature().isEmpty()) {
                         for (int i = 0; i < item.getBindingTemplates().getBindingTemplate().size(); i++) {
                                 if (item.getBindingTemplates().getBindingTemplate().get(i).getBindingKey() == null
-                                     || item.getBindingTemplates().getBindingTemplate().get(i).getBindingKey().length() == 0) {
+                                        || item.getBindingTemplates().getBindingTemplate().get(i).getBindingKey().length() == 0) {
                                         throw new ValueNotAllowedException(new ErrorMessage(""errors.entity.SignedButNoKey"", ""businessService/bindingTemplate("" + i + "")/bindingKey""));
                                 }
                         }
@@ -666,7 +673,7 @@
         }
 
         public void validateBusinessEntity(EntityManager em, org.uddi.api_v3.BusinessEntity businessEntity,
-             Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+                Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 // A supplied businessEntity can't be null
                 if (businessEntity == null) {
@@ -724,8 +731,8 @@
         }
 
         public void validateBusinessServices(EntityManager em, org.uddi.api_v3.BusinessServices businessServices,
-             org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
-             throws DispositionReportFaultMessage {
+                org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
+                throws DispositionReportFaultMessage {
                 // Business services is optional
                 if (businessServices == null) {
                         return;
@@ -742,8 +749,8 @@
         }
 
         public void validateBusinessService(EntityManager em, org.uddi.api_v3.BusinessService businessService,
-             org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
-             throws DispositionReportFaultMessage {
+                org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
+                throws DispositionReportFaultMessage {
 
                 // A supplied businessService can't be null
                 if (businessService == null) {
@@ -894,8 +901,8 @@
         }
 
         public void validateBindingTemplates(EntityManager em, org.uddi.api_v3.BindingTemplates bindingTemplates,
-             org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
-             throws DispositionReportFaultMessage {
+                org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
+                throws DispositionReportFaultMessage {
                 // Binding templates is optional
                 if (bindingTemplates == null) {
                         return;
@@ -909,13 +916,12 @@
                 for (org.uddi.api_v3.BindingTemplate bindingTemplate : bindingTemplateList) {
                         validateBindingTemplate(em, bindingTemplate, parent, config, publisher);
                 }
-                
 
         }
 
         public void validateBindingTemplate(EntityManager em, org.uddi.api_v3.BindingTemplate bindingTemplate,
-             org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
-             throws DispositionReportFaultMessage {
+                org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
+                throws DispositionReportFaultMessage {
 
                 // A supplied bindingTemplate can't be null
                 if (bindingTemplate == null) {
@@ -1125,7 +1131,7 @@
 
                 // TODO: validate ""checked"" categories or category groups (see section 5.2.3 of spec)? optional to support
                 if (tModel.getName() == null || tModel.getName().getValue() == null
-                     || tModel.getName().getValue().equals("""")) {
+                        || tModel.getName().getValue().equals("""")) {
                         throw new ValueNotAllowedException(new ErrorMessage(""errors.tmodel.NoName""));
                 }
 
@@ -1152,9 +1158,9 @@
                 // The keyedRef must not be blank and every field must contain data.
                 org.uddi.api_v3.KeyedReference keyedRef = pubAssertion.getKeyedReference();
                 if (keyedRef == null
-                     || keyedRef.getTModelKey() == null || keyedRef.getTModelKey().length() == 0
-                     || keyedRef.getKeyName() == null || keyedRef.getKeyName().length() == 0
-                     || keyedRef.getKeyValue() == null || keyedRef.getKeyValue().length() == 0) {
+                        || keyedRef.getTModelKey() == null || keyedRef.getTModelKey().length() == 0
+                        || keyedRef.getKeyName() == null || keyedRef.getKeyName().length() == 0
+                        || keyedRef.getKeyValue() == null || keyedRef.getKeyValue().length() == 0) {
                         throw new ValueNotAllowedException(new ErrorMessage(""errors.pubassertion.BlankKeyedRef""));
                 }
 
@@ -1577,21 +1583,22 @@
         }
 
         public void validateSaveSubscriptionAdmin(EntityManager em, String publisherOrUsername, List<Subscription> subscriptions) throws DispositionReportFaultMessage {
-            
-            // No null input
+
+                // No null input
                 if (subscriptions == null || subscriptions.isEmpty()) {
                         throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
                 }
-                
+
                 if (!((Publisher) publisher).isAdmin()) {
-                    throw new UserMismatchException(new ErrorMessage(""errors.deletepublisher.AdminReqd""));
+                        throw new UserMismatchException(new ErrorMessage(""errors.deletepublisher.AdminReqd""));
                 }
                 UddiEntityPublisher user = new UddiEntityPublisher(publisherOrUsername);
                 ValidateSubscription vsub = new ValidateSubscription(user);
-                for (int i=0; i < subscriptions.size(); i++){
-                    vsub.validateSubscriptions(em, subscriptions, user);
+                for (int i = 0; i < subscriptions.size(); i++) {
+                        vsub.validateSubscriptions(em, subscriptions, user);
                 }
         }
+
         public void validateSavePublisher(EntityManager em, SavePublisher body) throws DispositionReportFaultMessage {
 
                 // No null input
@@ -1815,7 +1822,7 @@
                         for (int i = 0; i < phone.size(); i++) {
                                 validateUseType(phone.get(i).getUseType());
                                 if (phone.get(i).getValue() == null
-                                     || phone.get(i).getValue().length() == 0) {
+                                        || phone.get(i).getValue().length() == 0) {
                                         throw new ValueNotAllowedException(new ErrorMessage(""errors.phone.noinput""));
                                 }
                                 if (phone.get(i).getValue().length() > ValidationConstants.MAX_phone) {
@@ -2198,15 +2205,15 @@
                 for (int i = 0; i < addressLine.size(); i++) {
 
                         if (addressLine.get(i).getKeyName() == null
-                             || addressLine.get(i).getKeyName().trim().length() == 0) {
+                                || addressLine.get(i).getKeyName().trim().length() == 0) {
                                 err += ""addressLine("" + i + "").keyName,"";
                         }
                         if (addressLine.get(i).getKeyValue() == null
-                             || addressLine.get(i).getKeyValue().trim().length() == 0) {
+                                || addressLine.get(i).getKeyValue().trim().length() == 0) {
                                 err += ""addressLine("" + i + "").keyValue,"";
                         }
                         if (addressLine.get(i).getValue() == null
-                             || addressLine.get(i).getValue().trim().length() == 0) {
+                                || addressLine.get(i).getValue().trim().length() == 0) {
                                 err += ""addressLine("" + i + "").value,"";
                         }
                 }
@@ -2385,20 +2392,23 @@
                         throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.NoInput""));
                 }
                 //get the latest replication config
-                if (cfg!=null){
-                    if (cfg.getCommunicationGraph()!=null){
-                        for (String node : cfg.getCommunicationGraph().getNode()) {
-                            if (node.equals(nodeID.getNodeID()))
-                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
+                if (cfg != null) {
+                        if (cfg.getCommunicationGraph() != null) {
+                                for (String node : cfg.getCommunicationGraph().getNode()) {
+                                        if (node.equals(nodeID.getNodeID())) {
+                                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
+                                        }
+                                }
+                                for (int i = 0; i < cfg.getCommunicationGraph().getEdge().size(); i++) {
+                                        if (nodeID.getNodeID().equals(cfg.getCommunicationGraph().getEdge().get(i).getMessageReceiver())) {
+                                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
+                                        }
+                                        if (nodeID.getNodeID().equals(cfg.getCommunicationGraph().getEdge().get(i).getMessageSender())) {
+                                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
+                                        }
+
+                                }
                         }
-                        for (int i=0; i <cfg.getCommunicationGraph().getEdge().size(); i++){
-                            if (nodeID.getNodeID().equals(cfg.getCommunicationGraph().getEdge().get(i).getMessageReceiver()))
-                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
-                            if (nodeID.getNodeID().equals(cfg.getCommunicationGraph().getEdge().get(i).getMessageSender()))
-                                throw new InvalidKeyPassedException(new ErrorMessage(""errors.deleteNode.InReplicationConfig"", nodeID.getNodeID()));
-                            
-                        }
-                    }
                 }
 
         }
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
index 97da3ff..df5a436 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateReplication.java
@@ -58,9 +58,9 @@
                         //This is the unique key for the calling node and SHOULD be specified within the Replication Configuration Structure.
                         throw new FatalErrorException(new ErrorMessage(""errors.replication.nodeNotSpecified""));
                 }
-                if (!ContainsNode(requestingNode, FetchEdges)) {
-                        throw new FatalErrorException(new ErrorMessage(""errors.replication.unknownNode""));
-                }
+                //if (!ContainsNode(requestingNode, FetchEdges)) {
+                //        throw new FatalErrorException(new ErrorMessage(""errors.replication.unknownNode""));
+                //}
 
                 if (changesAlreadySeen != null) {
                         // changesAlreadySeen: The changesAlreadySeen element, if present, indicates changes from each
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
index 3d0dacd..8b38575 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
@@ -133,7 +133,7 @@
                         int biz = Integer.parseInt(System.console().readLine());
                         System.out.print(""servicesPerBusiness: "");
                         int svc = Integer.parseInt(System.console().readLine());
-                        new UddiCreatebulk().publishBusiness(authtoken, biz, svc);
+                        new UddiCreatebulk(""default"").publishBusiness(authtoken, biz, svc);
                 }
                 if (input.equals(""7"")) {
                         UDDISecurityPortType security = null;
@@ -439,22 +439,25 @@
                 }
                 if (input.equals(""magic"")) {
                         //secret menu, setups up replication between juddi8080 and 9080 and adds a record or two on 8080
-                        UDDISecurityPortType security = null;
-                        UDDIClient clerkManager = new UDDIClient(""META-INF/simple-publish-uddi.xml"");
+                        //UDDISecurityPortType security = null;
+                        //UDDIClient clerkManager = new UDDIClient(""META-INF/simple-publish-uddi.xml"");
                         
-                        Transport transport = clerkManager.getTransport(""default"");
+                       /* Transport transport = clerkManager.getTransport(""default"");
                         security = transport.getUDDISecurityService();
                        
-                        String uname = ""root"";
+                       String uname = ""root"";
                        
                         GetAuthToken getAuthTokenRoot = new GetAuthToken();
                         getAuthTokenRoot.setUserID(uname);
                         getAuthTokenRoot.setCred(""root"");
                         authtoken = security.getAuthToken(getAuthTokenRoot).getAuthInfo();
-                        System.out.println(""Success!"");
+                        System.out.println(""Success!"");*/
+                        
+                        //this setups up a replication config between the two nodes
                         new JuddiAdminService().autoMagic();
 
-                        new UddiCreatebulk().publishBusiness(authtoken, 1, 1);
+                        new UddiCreatebulk(""default"").publishBusiness(null, 1, 1);
+                        new UddiCreatebulk(""uddi:another.juddi.apache.org:node2"").publishBusiness(null, 1, 1);
                 }
 
         }
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiCreatebulk.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiCreatebulk.java
index 696c8b7..7825e79 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiCreatebulk.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiCreatebulk.java
@@ -41,12 +41,12 @@
         private static UDDISecurityPortType security = null;
         private static UDDIPublicationPortType publish = null;
 
-        public UddiCreatebulk() {
+        public UddiCreatebulk(String node) {
                 try {
                         // create a manager and read the config in the archive; 
                         // you can use your config file name
                         UDDIClient clerkManager = new UDDIClient(""META-INF/simple-publish-uddi.xml"");
-                        Transport transport = clerkManager.getTransport();
+                        Transport transport = clerkManager.getTransport(node);
                         // Now you create a reference to the UDDI API
                         security = transport.getUDDISecurityService();
                         publish = transport.getUDDIPublishService();
@@ -186,7 +186,7 @@
         }
 
         public static void main(String args[]) {
-                UddiCreatebulk sp = new UddiCreatebulk();
+                UddiCreatebulk sp = new UddiCreatebulk(null);
                 sp.publishBusiness(null, 15, 20);
         }
 }
"
juddi,9d22690eee0aae19f98191c00a00833bf6a28f5c,"JUDDI-896 resolved a number of typos and formatting issues
JUDDI-241 business, service, binding templates and models now replicate
",2014-12-08 19:43:11,Alex,"diff --git a/uddi-ws/src/main/java/org/uddi/repl_v3/NotifyChangeRecordsAvailable.java b/uddi-ws/src/main/java/org/uddi/repl_v3/NotifyChangeRecordsAvailable.java
index f1fcfaa..dc5300d 100644
--- a/uddi-ws/src/main/java/org/uddi/repl_v3/NotifyChangeRecordsAvailable.java
+++ b/uddi-ws/src/main/java/org/uddi/repl_v3/NotifyChangeRecordsAvailable.java
@@ -55,6 +55,11 @@
 })
 @XmlRootElement(name = ""notify_changeRecordsAvailable"")
 public class NotifyChangeRecordsAvailable implements Serializable{
+        public NotifyChangeRecordsAvailable(){}
+        public NotifyChangeRecordsAvailable(String node, HighWaterMarkVectorType changesAvailable){
+                this.notifyingNode = node;
+                this.changesAvailable = changesAvailable;
+        }
 	@XmlTransient
 	private static final long serialVersionUID = -8280288001706059769L;
 	@XmlElement(required = true)
"
juddi,197e1d1d6ba0780e395dd5ce4915276c39becbbb,"JUDDI-890 fixed an issue with juddi-gui from the saveConfiguration code change. Adding test cases for configuration loading
",2014-11-12 22:22:25,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index e842772..2bb4a3d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -86,7 +86,9 @@
         /**
          * Attempts to save any changes made to the configuration back to disk
          * Revised in 3.2.1 to reconstruct the file from the in memory data
-         * structure, enable you to programmatically add nodes
+         * structure, enable you to programmatically add nodes.
+         * <br><br>
+         * For previous functionality see, saveConfigRaw()
          *
          * @throws ConfigurationException
          */
@@ -127,7 +129,29 @@
 
                 saveConfiguration.save(configurationFile);
         }
+        
+        /**
+         * Use this method to attempt to save the jUDDI configuration file after
+         * you've modified it using the Apache Commons Configuration settings.
+         * This is especially useful if you've constructed a user interface for manipulating
+         * the configuration like a properties sheet and is used by the juddi-gui (web ui)
+         * @since 3.2.1
+         * @throws org.apache.commons.configuration.ConfigurationException
+         */
+        public void saveConfigRaw() throws ConfigurationException{
+         XMLConfiguration saveConfiguration = new XMLConfiguration(configurationFile);
+            Configuration cc = new CompositeConfiguration(saveConfiguration);
+            Iterator<String> keys = this.config.getKeys();
+            while (keys.hasNext()){
+                String key = keys.next();
+                if (key.startsWith(""client"") || key.startsWith(""config""))
+                {
+                    cc.setProperty(key, config.getProperty(key));
+                }
+            }
+            saveConfiguration.save();
 
+        }
         protected void readConfig(Properties properties) throws ConfigurationException {
                 uddiNodes = readNodeConfig(config, properties);
                 uddiClerks = readClerkConfig(config, uddiNodes);
"
juddi,36661e1577004764a3ab26cfef324c28ca6823cb,"JUDDI-890 fixed the build
",2014-11-12 21:37:17,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index bb8d6f9..e842772 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -16,6 +16,7 @@
  */
 package org.apache.juddi.v3.client.config;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -24,8 +25,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.xml.crypto.dsig.CanonicalizationMethod;
 
@@ -57,8 +56,8 @@
         public final static String DEFAULT_UDDI_CONFIG = ""META-INF/uddi.xml"";
         private Log log = LogFactory.getLog(ClientConfig.class);
         private Configuration config = null;
-        
-	private Map<String, UDDINode> uddiNodes = null;
+
+        private Map<String, UDDINode> uddiNodes = null;
         private Map<String, UDDIClerk> uddiClerks = null;
         private Set<XRegistration> xBusinessRegistrations = null;
         private Set<XRegistration> xServiceBindingRegistrations = null;
@@ -86,18 +85,21 @@
 
         /**
          * Attempts to save any changes made to the configuration back to disk
+         * Revised in 3.2.1 to reconstruct the file from the in memory data
+         * structure, enable you to programmatically add nodes
          *
          * @throws ConfigurationException
          */
         public void saveConfig() throws ConfigurationException {
 
-                /*System.out.println(""DEBUG dumping current cfg"");
-                Iterator<String> keys = config.getKeys();
-                while(keys.hasNext())
-                {
-                        String k=keys.next();
-                        System.out.println(k +"" = "" + config.getProperty(k));
-                }*/
+                if (log.isDebugEnabled()) {
+                        System.out.println(""DEBUG dumping current cfg"");
+                        Iterator<String> keys = config.getKeys();
+                        while (keys.hasNext()) {
+                                String k = keys.next();
+                                System.out.println(k + "" = "" + config.getProperty(k));
+                        }
+                }
                 XMLConfiguration saveConfiguration = new XMLConfiguration();
                 Configuration cc = new CompositeConfiguration(saveConfiguration);
 
@@ -112,16 +114,16 @@
                         throw new ConfigurationException(""error"", ex);
                 }
                 addSubscriptionCallback(cc);
-                
-                /*log.de(""DEBUG dumping NEW cfg"");
-              keys=  cc.getKeys();
-                 
-                while(keys.hasNext())
-                {
-                        String k=keys.next();
-                        System.out.println(k +"" = "" + config.getProperty(k));
-                }*/
                 addXRegistration(cc);
+                if (log.isDebugEnabled()) {
+                        System.out.println(""DEBUG dumping NEW cfg"");
+                        Iterator<String> keys = cc.getKeys();
+
+                        while (keys.hasNext()) {
+                                String k = keys.next();
+                                System.out.println(k + "" = "" + config.getProperty(k));
+                        }
+                }
 
                 saveConfiguration.save(configurationFile);
         }
@@ -209,9 +211,13 @@
                                 if (numberOfWslds > 0) {
                                         UDDIClerk.WSDL[] wsdls = new UDDIClerk.WSDL[numberOfWslds];
                                         for (int w = 0; w < wsdls.length; w++) {
+
                                                 UDDIClerk.WSDL wsdl = uddiClerk.new WSDL();
                                                 String fileName = config.getString(""client.clerks.clerk("" + i + "").wsdl("" + w + "")"");
                                                 wsdl.setFileName(fileName);
+                                                if (!new File(fileName).exists()) {
+                                                        log.warn(""The wsdl file referenced in the config at '"" + fileName + ""' doesn't exist!"");
+                                                }
                                                 String businessKey = config.getString(""client.clerks.clerk("" + i + "").wsdl("" + w + "")[@businessKey]"");
                                                 String businessName = config.getString(""client.clerks.clerk("" + i + "").wsdl("" + w + "")[@businessName]"");
                                                 String keyDomain = config.getString(""client.clerks.clerk("" + i + "").wsdl("" + w + "")[@keyDomain]"");
@@ -248,7 +254,7 @@
                                                         }
                                                 }
                                                 if (!businessKey.toLowerCase().startsWith(""uddi:"") || !businessKey.substring(5).contains("":"")) {
-                                                        throw new ConfigurationException(""The businessKey "" + businessKey + "" does not implement a valid UDDI v3 key format."");
+                                                        throw new ConfigurationException(""The businessKey '"" + businessKey + ""' does not implement a valid UDDI v3 key format. See config file at client.clerks.clerk("" + i + "").wsdl("" + w + "")[@businessKey]"");
                                                 }
                                                 wsdl.setBusinessKey(businessKey);
                                                 if (keyDomain == null) {
@@ -413,15 +419,18 @@
                 if (uddiNodes.values().size() == 1) {
                         return uddiNodes.values().iterator().next();
                 }
-                UDDINode ret=null;
+                UDDINode ret = null;
                 for (UDDINode uddiNode : uddiNodes.values()) {
                         if (uddiNode.isHomeJUDDI()) {
-                                if (ret!=null){
+                                if (ret != null) {
                                         throw new ConfigurationException(""Only one of the node elements in the client configuration needs to a 'isHomeJUDDI=\""true\""' attribute."");
                                 }
-                                ret= uddiNode;
+                                ret = uddiNode;
                         }
                 }
+                if (ret != null) {
+                        return ret;
+                }
                 throw new ConfigurationException(""One of the node elements in the client configuration needs to a 'isHomeJUDDI=\""true\""' attribute."");
         }
 
@@ -558,7 +567,6 @@
                         node.setClientName(this.clientName);
                 }
                 this.uddiNodes.put(node.getClientName(), node);
-                
 
         }
 
@@ -602,14 +610,15 @@
 
         private void addCurrentNodeConfig(Configuration cc) {
 
-                cc.addProperty(""client(0)[@name]"",clientName);
+                cc.addProperty(""[@xmlns]"", config.getProperty(""[@xmlns]""));
+                cc.addProperty(""client(0)[@name]"", clientName);
                 Iterator<Map.Entry<String, UDDINode>> iterator = uddiNodes.entrySet().iterator();
                 int i = 0;
                 while (iterator.hasNext()) {
                         log.debug(""node names="" + uddiNodes.size());
 
                         UDDINode uddiNode = iterator.next().getValue();
-                        
+
                         Properties properties = uddiNode.getProperties();
 
                         if (properties == null) {
@@ -627,7 +636,6 @@
                                 x++;
                         }
 
-                        
                         cc.addProperty(""client(0).nodes.node("" + i + "")[@isHomeJUDDI]"", uddiNode.isHomeJUDDI());
                         cc.addProperty(""client(0).nodes.node("" + i + "").name"", uddiNode.getName());
                         cc.addProperty(""client(0).nodes.node("" + i + "").description"", uddiNode.getDescription());
@@ -656,7 +664,7 @@
                 clientName = config.getString(""client[@name]"");
                 clientCallbackUrl = config.getString(""client(0)[@callbackUrl]"");
 
-                cc.addProperty(""client(0).clerks[@registerOnStartup"", isRegisterOnStartup()) ;
+                cc.addProperty(""client(0).clerks[@registerOnStartup]"", isRegisterOnStartup());
                 int i = 0;
                 while (iterator.hasNext()) {
 
@@ -689,26 +697,26 @@
                         }
                         i++;
                 }
-                
-                if (xBusinessRegistrations!=null){
+
+                if (xBusinessRegistrations != null) {
                         Iterator<XRegistration> iterator1 = xBusinessRegistrations.iterator();
-                        int x=0;
-                        while (iterator1.hasNext()){
+                        int x = 0;
+                        while (iterator1.hasNext()) {
                                 XRegistration next = iterator1.next();
-                                cc.addProperty(""client(0).clerks.business(""+x+"")[@fromClerk]"" ,next.getFromClerk().name );
-                                cc.addProperty(""client(0).clerks.business(""+x+"")[@toClerk]"" ,next.getToClerk().name );
-                                cc.addProperty(""client(0).clerks.business(""+x+"")[@entityKey]"" ,next.getEntityKey() );
+                                cc.addProperty(""client(0).clerks.business("" + x + "")[@fromClerk]"", next.getFromClerk().name);
+                                cc.addProperty(""client(0).clerks.business("" + x + "")[@toClerk]"", next.getToClerk().name);
+                                cc.addProperty(""client(0).clerks.business("" + x + "")[@entityKey]"", next.getEntityKey());
                                 x++;
                         }
                 }
-                 if (xServiceBindingRegistrations!=null){
+                if (xServiceBindingRegistrations != null) {
                         Iterator<XRegistration> iterator1 = xServiceBindingRegistrations.iterator();
-                        int x=0;
-                        while (iterator1.hasNext()){
+                        int x = 0;
+                        while (iterator1.hasNext()) {
                                 XRegistration next = iterator1.next();
-                                cc.addProperty(""client(0).clerks.servicebinding(""+x+"")[@fromClerk]"" ,next.getFromClerk().name );
-                                cc.addProperty(""client(0).clerks.servicebinding(""+x+"")[@toClerk]"" ,next.getToClerk().name );
-                                cc.addProperty(""client(0).clerks.servicebinding(""+x+"")[@entityKey]"" ,next.getEntityKey() );
+                                cc.addProperty(""client(0).clerks.servicebinding("" + x + "")[@fromClerk]"", next.getFromClerk().name);
+                                cc.addProperty(""client(0).clerks.servicebinding("" + x + "")[@toClerk]"", next.getToClerk().name);
+                                cc.addProperty(""client(0).clerks.servicebinding("" + x + "")[@entityKey]"", next.getEntityKey());
                                 x++;
                         }
                 }
@@ -742,8 +750,9 @@
                         Map.Entry<Object, Object> next = it.next();
                         String key = (String) next.getKey();
                         Object val = next.getValue();
-                        if (val==null)
+                        if (val == null) {
                                 continue;
+                        }
                         if (key.equalsIgnoreCase(DigSigUtil.CANONICALIZATIONMETHOD)) {
                                 cc.addProperty(""client(0).signature.canonicalizationMethod"", val);
                         } else if (key.equalsIgnoreCase(DigSigUtil.CHECK_TIMESTAMPS)) {
@@ -794,7 +803,6 @@
 
                 }
 
-                
                 if (p.getProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD_WASENC, ""false"").equalsIgnoreCase(""true"")) {
                         cc.addProperty(""client(0).signature.signingKeyStoreFilePassword"", p.getProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD_CIPHER));
                 } else {
@@ -817,7 +825,7 @@
 
         private void addXRegistration(Configuration cc) {
 
-                cc.addProperty(""client.XtoWsdl.IgnoreSSLErrors"",                 isX_To_Wsdl_Ignore_SSL_Errors());
+                cc.addProperty(""client.XtoWsdl.IgnoreSSLErrors"", isX_To_Wsdl_Ignore_SSL_Errors());
         }
 
 }
"
juddi,a0bfccd6af1a25ddb3ca78d4f99d56bb580e8ff4,"JUDDI-866 subscription notifier may fail to send messages under certain conditions. added null checks, updated readme to reflect recent (since 3.2) build parameter changes
",2014-10-19 12:06:59,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index d6e9d5f..7d06b0c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -384,6 +384,8 @@
 								getSubscriptionResults.setChunkToken(chunkToken);
 								resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
 								body.setSubscriptionResultsList(resultList);
+                                                                if (resultListContainsChanges(resultList))
+                                                                //if (!IsEmpty(resultList))
 								notifier.notifySubscriptionListener(body);
 								chunkToken=body.getSubscriptionResultsList().getChunkToken();
 							}
"
juddi,df037b02fbb92624996e004ae84cfca43f87a769,"JUDDI-840 adding the ability to specify a full path
",2014-09-24 09:54:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
index 5264885..8b3ad5c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
@@ -17,11 +17,12 @@
 
 package org.apache.juddi.v3.auth;
 
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
 import java.util.HashMap;
-import java.util.Hashtable;
 import java.util.Map;
 
 import javax.persistence.EntityManager;
@@ -100,16 +101,22 @@
 	{
             
 		userTable = new HashMap<String, User> ();
-                String usersFileName = getFilename();
-                if (usersFileName==null || usersFileName.length()==0)
-                    throw new ConfigurationException(""usersFileName value is null!"");
-		//log.info(""Reading jUDDI Users File: "" + usersFileName + ""..."");
-                URL resource = ClassUtil.getResource(usersFileName, this.getClass());
-                if (resource!=null)
-                    log.info(""Reading jUDDI Users File: "" + usersFileName + ""...from "" + resource.toExternalForm());
-                else
-                    log.info(""Reading jUDDI Users File: "" + usersFileName + ""..."");
-		InputStream stream = ClassUtil.getResource(usersFileName, this.getClass()).openStream();
+        String usersFileName = getFilename();
+        if (usersFileName==null || usersFileName.length()==0)
+           throw new ConfigurationException(""usersFileName value is null!"");
+        File file = new File(usersFileName);
+        InputStream stream = null;
+        if (file.exists()) {
+        	log.info(""Reading jUDDI Users File: "" + usersFileName + ""..."");
+        	stream = new FileInputStream(file);
+        } else {
+            URL resource = ClassUtil.getResource(usersFileName, this.getClass());
+            if (resource!=null)
+                log.info(""Reading jUDDI Users File: "" + usersFileName + ""...from "" + resource.toExternalForm());
+            else
+                log.info(""Reading jUDDI Users File: "" + usersFileName + ""..."");
+            stream = ClassUtil.getResource(usersFileName, this.getClass()).openStream();
+        }
 		JAXBContext jaxbContext=JAXBContext.newInstance(JuddiUsers.class);
 		Unmarshaller unMarshaller = jaxbContext.createUnmarshaller();
 		JAXBElement<JuddiUsers> element = unMarshaller.unmarshal(new StreamSource(stream),JuddiUsers.class);
"
juddi,c807b057d687eb4b3026485cc46d63eb0c2ad47b,"JUDDI-880 fixed
",2014-06-27 15:38:50,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index 5796ff7..f0cf125 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -58,7 +58,7 @@
 
 	public UDDIInquiryService() {
 		super();
-		clientName = System.getProperty(""org.apache.juddi.v3.client.client.name"");
+		clientName = System.getProperty(""org.apache.juddi.v3.client.name"");
 		nodeName    = System.getProperty(""org.apache.juddi.v3.client.node.name"",DEFAULT_NODE_NAME);
 		operations = new HashMap<String, Handler>();
 		operations.put(""find_business"", new Handler(""findBusiness"", FindBusiness.class));
"
juddi,c807b057d687eb4b3026485cc46d63eb0c2ad47b,"JUDDI-880 fixed
",2014-06-27 15:38:50,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 7183fd2..60f0e14 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -54,7 +54,7 @@
 
 	  public UDDIPublicationService() {
 		super();
-		clientName = System.getProperty(""org.apache.juddi.v3.client.client.name"");
+		clientName = System.getProperty(""org.apache.juddi.v3.client.name"");
 		nodeName    = System.getProperty(""org.apache.juddi.v3.client.node.name"",DEFAULT_NODE_NAME);
 		operations = new HashMap<String, Handler>();
 		operations.put(""get_registeredInfo"", new Handler(""getRegisteredInfo"", GetRegisteredInfo.class));
"
juddi,c807b057d687eb4b3026485cc46d63eb0c2ad47b,"JUDDI-880 fixed
",2014-06-27 15:38:50,alexoree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
index 685eedf..2752e43 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/EntryPoint.java
@@ -49,7 +49,7 @@
                         System.out.println(""14) Get the details of a service"");
                         System.out.println(""15) Make a Key Generator tModel"");
                         System.out.println(""16) Create a Business Relationship Between two users and two Businesses"");
-                        System.out.println(""17) Subscriptions - Asynchronous, listens for all business changes"");
+                        System.out.println(""17) Subscriptions - Asynchronous, listens for all changes"");
                         System.out.println(""18) Subscriptions - Synchronous"");
                         System.out.println(""19) WSDL2UDDI - Register a service from a WSDL document"");
                         System.out.println(""20) WADL2UDDI - Register a service from a WADL document"");
@@ -58,6 +58,7 @@
                         System.out.println(""23) Print Subscriptions"");
                         System.out.println(""24) Delete a subscription"");
                         System.out.println(""25) Delete all subscriptions"");
+                        System.out.println(""26) Subscriptions - Asynchronous, publisher assertion subscriptions"");
                         System.out.println(""q) quit"");
                         System.out.print(""Selection: "");
                         input = System.console().readLine();
@@ -255,6 +256,10 @@
                 if (input.equals(""25"")) {
                         new UddiSubscriptionManagement().DeleteAllSubscriptions(authtoken);
                 }
+                 if (input.equals(""26"")) {
+                        new UddiSubscribeAssertionStatus().Fire();
+
+                }
 
         }
 }
"
juddi,0f8e9eeafef28247c7790c7bdf6e4b9a84d1a3ae,"JUDDI-864 removing finalizier
JUDDI-198 adding javadoc and usage scenarios
",2014-03-05 20:15:46,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
index a872ac6..e1dd5c2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
@@ -407,13 +407,6 @@
 
         }
 
-        @Override
-        protected void finalize() throws Throwable {
-                run();
-                super.finalize();
-
-        }
-
         /**
          * shutdown hook
          */
"
juddi,0f8e9eeafef28247c7790c7bdf6e4b9a84d1a3ae,"JUDDI-864 removing finalizier
JUDDI-198 adding javadoc and usage scenarios
",2014-03-05 20:15:46,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
index dfec221..e7642a1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
@@ -28,6 +28,7 @@
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
+import org.apache.juddi.validation.vsv.AbstractSimpleValidator;
 import org.apache.juddi.validation.vsv.ValueSetValidator;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
@@ -43,9 +44,29 @@
 import org.uddi.v3_service.UDDIValueSetValidationPortType;
 import org.uddi.vs_v3.ValidateValues;
 
-//@WebService(serviceName=""UDDIValueSetValidationService"", 
-//			endpointInterface=""org.uddi.v3_service.UDDIValueSetValidationPortType"",
-//			targetNamespace = ""urn:uddi-org:v3_service"")
+/**
+ * Implementation the UDDI v3 spec for Value Set Validation This is basically
+ * used to validate Keyed Reference value sets and offers validation via jUDDI's
+ * VSV extensibility framework.<Br><BR>
+ * To use this, define a tModel containing the following 
+ * <pre>&lt;categoryBag&gt;
+ * &lt;keyedReference keyName=&quot;&quot;
+ * keyValue=&quot;uddi:juddi.apache.org:servicebindings-valueset-cp&quot;
+ * tModelKey=&quot;uddi:uddi.org:identifier:validatedby&quot;/&gt;
+ * &lt;/categoryBag&gt;
+ * </pre>Where uddi:juddi.apache.org:servicebindings-valueset-cp
+ * is the binding key of the service implementing the VSV API (this service).
+ * <Br><BR>
+ * From there, you need to create a class that either implements
+ * {@link ValueSetValidator} or extends {@link AbstractSimpleValidator}. It must
+ * be in the package named org.apache.juddi.validation.vsv and must by named
+ * following the convention outlined in {@link #ConvertKeyToClass(java.lang.String)
+ * }
+ *
+ * @see ValueSetValidator
+ * @see AbstractSimpleValidator
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
+ */
 public class UDDIValueSetValidationImpl extends AuthenticatedService implements
      UDDIValueSetValidationPortType {
 
@@ -272,16 +293,20 @@
 
         public static String ConvertKeyToClass(String tmodelkey) {
 
-                if (tmodelkey==null)return null;
-                if (tmodelkey.length() < 2) return null;
-                
-                String key =new String(new char[]{tmodelkey.charAt(0)}).toUpperCase() + tmodelkey.substring(1).toLowerCase();
+                if (tmodelkey == null) {
+                        return null;
+                }
+                if (tmodelkey.length() < 2) {
+                        return null;
+                }
+
+                String key = new String(new char[]{tmodelkey.charAt(0)}).toUpperCase() + tmodelkey.substring(1).toLowerCase();
                 key = key.replaceAll(""[^a-zA-Z0-9 -]"", """");
-                
+
                 String clazz = ""org.apache.juddi.validation.vsv."" + key;
-                
+
                 return clazz;
-                
+
         }
 
         public static List<String> getValidValues(String modelKey) {
"
juddi,bc46aeb136a7d7920a021faa446758c685d294cc,"JUDDI-867 fixed
JUDDI-868 fixed
JUDDI-865 fixed (again)
JUDDI-869 done
",2014-03-02 16:50:24,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index d637a3e..d06dca2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -183,7 +183,17 @@
         public UDDINode getUDDINode() {
                 return this.uddiNode;
         }
-
+        
+        public UDDINode getUDDINode(Node apinode) {
+                if (apinode==null)
+                        return this.uddiNode;
+                if (nodecache.containsKey(apinode.getClientName() + apinode+getName()))
+                        return nodecache.get(apinode.getClientName() + apinode+getName());
+                UDDINode node = new UDDINode(apinode);
+                nodecache.put(apinode.getClientName() + apinode+getName(),node);
+                return node;
+        }
+        Map <String, UDDINode> nodecache = new HashMap<String, UDDINode>();
         /**
          * A list of classes defined in the config file that have UDDI
          * Annotations on them for automated registration
@@ -387,7 +397,7 @@
                         List<Subscription> subscriptions = new ArrayList<Subscription>();
                         subscriptions.add(subscription);
                         holder.value = subscriptions;
-                        getUDDINode().getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).
+                        getUDDINode(node).getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).
                                 saveSubscription(getAuthToken(node.getSecurityUrl()), holder);
                         if (log.isDebugEnabled()) {
                                 log.debug(""Registering subscription "" + subscription.getSubscriptionKey() + "" completed."");
@@ -429,7 +439,7 @@
                         SaveTModel saveTModel = new SaveTModel();
                         saveTModel.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         saveTModel.getTModel().add(tModel);
-                        tModelDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveTModel(saveTModel);
+                        tModelDetail = getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).saveTModel(saveTModel);
                         if (log.isDebugEnabled()) {
                                 log.debug(""Registering tModel "" + tModel.getTModelKey() + "" completed."");
                         }
@@ -470,7 +480,7 @@
                         SaveBinding saveBinding = new SaveBinding();
                         saveBinding.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         saveBinding.getBindingTemplate().add(binding);
-                        BindingDetail bindingDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBinding(saveBinding);
+                        BindingDetail bindingDetail = getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).saveBinding(saveBinding);
                         bindingTemplate = bindingDetail.getBindingTemplate().get(0);
                         if (log.isDebugEnabled()) {
                                 log.debug(""Registering template binding "" + bindingTemplate.getBindingKey() + "" completed."");
@@ -519,7 +529,7 @@
                         SaveService saveService = new SaveService();
                         saveService.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         saveService.getBusinessService().add(service);
-                        ServiceDetail serviceDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveService(saveService);
+                        ServiceDetail serviceDetail = getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).saveService(saveService);
                         businessService = serviceDetail.getBusinessService().get(0);
                         if (log.isDebugEnabled()) {
                                 log.debug(""Registering service "" + service.getName().get(0).getValue() + "" completed."");
@@ -565,7 +575,7 @@
                         SaveBusiness saveBusiness = new SaveBusiness();
                         saveBusiness.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         saveBusiness.getBusinessEntity().add(business);
-                        BusinessDetail businessDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBusiness(saveBusiness);
+                        BusinessDetail businessDetail = getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).saveBusiness(saveBusiness);
                         businessEntity = businessDetail.getBusinessEntity().get(0);
                         if (log.isDebugEnabled()) {
                                 log.debug(""Registering businessEntity "" + businessEntity.getName().get(0).getValue() + "" completed."");
@@ -604,7 +614,7 @@
                         DeleteBusiness deleteBusiness = new DeleteBusiness();
                         deleteBusiness.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         deleteBusiness.getBusinessKey().add(businessKey);
-                        getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBusiness(deleteBusiness);
+                        getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBusiness(deleteBusiness);
                 } catch (Exception e) {
                         log.error(""Unable to register service "" + businessKey
                                 + "" ."" + e.getMessage(), e);
@@ -634,7 +644,7 @@
                         DeleteService deleteService = new DeleteService();
                         deleteService.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         deleteService.getServiceKey().add(serviceKey);
-                        getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteService(deleteService);
+                        getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).deleteService(deleteService);
                 } catch (Exception e) {
                         log.error(""Unable to register service "" + serviceKey
                                 + "" ."" + e.getMessage(), e);
@@ -665,7 +675,7 @@
                         DeleteBinding deleteBinding = new DeleteBinding();
                         deleteBinding.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         deleteBinding.getBindingKey().add(bindingKey);
-                        getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBinding(deleteBinding);
+                        getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBinding(deleteBinding);
                 } catch (Exception e) {
                         log.error(""Unable to unregister bindingkey "" + bindingKey
                                 + "" ."" + e.getMessage(), e);
@@ -698,7 +708,7 @@
                         DeleteTModel deleteTModel = new DeleteTModel();
                         deleteTModel.setAuthInfo(authToken);
                         deleteTModel.getTModelKey().add(tModelKey);
-                        getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteTModel(deleteTModel);
+                        getUDDINode(node).getTransport().getUDDIPublishService(node.getPublishUrl()).deleteTModel(deleteTModel);
                 } catch (Exception e) {
                         log.error(""Unable to unregister tModelkey "" + tModelKey
                                 + "" ."" + e.getMessage(), e);
@@ -729,7 +739,7 @@
                         DeleteSubscription deleteSubscription = new DeleteSubscription();
                         deleteSubscription.setAuthInfo(authToken);
                         deleteSubscription.getSubscriptionKey().add(subscriptionKey);
-                        getUDDINode().getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).deleteSubscription(deleteSubscription);
+                        getUDDINode(node).getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).deleteSubscription(deleteSubscription);
                 } catch (Exception e) {
                         log.error(""Unable to unregister subscription key "" + subscriptionKey
                                 + "" ."" + e.getMessage(), e);
@@ -764,7 +774,7 @@
 
                 findTModel.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                 try {
-                        TModelList tModelList = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).findTModel(findTModel);
+                        TModelList tModelList = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).findTModel(findTModel);
                         return tModelList;
                 } catch (DispositionReportFaultMessage dr) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
@@ -826,7 +836,7 @@
 
                 getTModelDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                 try {
-                        TModelDetail tModelDetail = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getTModelDetail(getTModelDetail);
+                        TModelDetail tModelDetail = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).getTModelDetail(getTModelDetail);
                         return tModelDetail;
                 } catch (DispositionReportFaultMessage dr) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
@@ -906,7 +916,7 @@
                 getServiceDetail.getServiceKey().add(serviceKey);
                 getServiceDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                 try {
-                        ServiceDetail sd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getServiceDetail);
+                        ServiceDetail sd = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getServiceDetail);
                         List<BusinessService> businessServiceList = sd.getBusinessService();
                         if (businessServiceList.size() == 0) {
                                 throw new ConfigurationException(""Could not find Service with key="" + serviceKey);
@@ -991,7 +1001,7 @@
                 getBindingDetail.getBindingKey().add(bindingKey);
                 getBindingDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                 try {
-                        BindingDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBindingDetail(getBindingDetail);
+                        BindingDetail bd = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBindingDetail(getBindingDetail);
                         List<BindingTemplate> bindingTemplateList = bd.getBindingTemplate();
                         if (bindingTemplateList.size() == 0) {
                                 throw new ConfigurationException(""Could not find ServiceBinding with key="" + bindingKey);
@@ -1076,7 +1086,7 @@
                 getBusinessDetail.getBusinessKey().add(businessKey);
                 getBusinessDetail.setAuthInfo(node.getSecurityUrl());
                 try {
-                        BusinessDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBusinessDetail(getBusinessDetail);
+                        BusinessDetail bd = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBusinessDetail(getBusinessDetail);
                         return bd.getBusinessEntity().get(0);
                 } catch (DispositionReportFaultMessage dr) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
@@ -1111,7 +1121,7 @@
                 findRelatedBusinesses.setBusinessKey(businessKey);
                 findRelatedBusinesses.setAuthInfo(node.getSecurityUrl());
                 try {
-                        RelatedBusinessesList rbl = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).findRelatedBusinesses(findRelatedBusinesses);
+                        RelatedBusinessesList rbl = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).findRelatedBusinesses(findRelatedBusinesses);
                         return rbl;
                 } catch (DispositionReportFaultMessage dr) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
@@ -1264,11 +1274,11 @@
         public NodeDetail saveNode(Node node) {
                 NodeDetail nodeDetail = null;
                 try {
-                        log.info(""Sending Node "" + node.getName() + "" info to jUDDI "" + getUDDINode().getName());
+                        log.info(""Sending Node "" + node.getName() + "" info to jUDDI "" + getUDDINode(node).getName());
                         SaveNode saveNode = new SaveNode();
                         saveNode.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                         saveNode.getNode().add(node);
-                        nodeDetail = getUDDINode().getTransport().getJUDDIApiService(node.getJuddiApiUrl()).saveNode(saveNode);
+                        nodeDetail = getUDDINode(node).getTransport().getJUDDIApiService(node.getJuddiApiUrl()).saveNode(saveNode);
                 } catch (Exception e) {
                         log.error(""Unable to save node "" + node.getName()
                                 + "" ."" + e.getMessage(), e);
@@ -1823,7 +1833,7 @@
 
                 getDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
                 try {
-                        ServiceDetail tModelDetail = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getDetail);
+                        ServiceDetail tModelDetail = getUDDINode(node).getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getDetail);
                         return tModelDetail;
                 } catch (DispositionReportFaultMessage dr) {
                         DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
"
juddi,bc46aeb136a7d7920a021faa446758c685d294cc,"JUDDI-867 fixed
JUDDI-868 fixed
JUDDI-865 fixed (again)
JUDDI-869 done
",2014-03-02 16:50:24,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index 37d8053..4ffd763 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -16,6 +16,7 @@
 package org.apache.juddi.v3.client.config;
 
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.Map;
 
 import org.apache.commons.configuration.ConfigurationException;
@@ -40,8 +41,15 @@
 			if (clients.containsKey(clientName)) {
 				return (clients.get(clientName));
 			} else {
+                                StringBuilder sb = new StringBuilder();
+                                Iterator<String> iterator = clients.keySet().iterator();
+                                while (iterator.hasNext()){
+                                        sb.append(iterator.next());
+                                        if (iterator.hasNext())
+                                                sb.append("","");
+                                }
 				throw new ConfigurationException(""No client by name "" + clientName + "" was found. "" +
-						"" Please check your client uddi.xml files, and make sure this client was started"");
+						"" Please check your client uddi.xml files, and make sure this client was started. Available clients: "" + sb.toString());
 			}
 		} else throw new IllegalArgumentException(""clientName is a required argument"");
 	}
"
juddi,bc46aeb136a7d7920a021faa446758c685d294cc,"JUDDI-867 fixed
JUDDI-868 fixed
JUDDI-865 fixed (again)
JUDDI-869 done
",2014-03-02 16:50:24,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index c9b4b15..2148827 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -1076,6 +1076,7 @@
                         modelNode.setPublishUrl(apiNode.getPublishUrl());
                         modelNode.setSecurityUrl(apiNode.getSecurityUrl());
                         modelNode.setSubscriptionUrl(apiNode.getSubscriptionUrl());
+                        modelNode.setSubscriptionListenerUrl(apiNode.getSubscriptionListenerUrl());
                         modelNode.setReplicationUrl(apiNode.getReplicationUrl());
                         modelNode.setFactoryInitial(apiNode.getFactoryInitial());
                         modelNode.setFactoryNamingProvider(apiNode.getFactoryNamingProvider());
"
juddi,bc46aeb136a7d7920a021faa446758c685d294cc,"JUDDI-867 fixed
JUDDI-868 fixed
JUDDI-865 fixed (again)
JUDDI-869 done
",2014-03-02 16:50:24,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 63b3a83..8821922 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -1133,6 +1133,8 @@
 		apiNode.setPublishUrl(modelNode.getPublishUrl());
 		apiNode.setSecurityUrl(modelNode.getSecurityUrl());
 		apiNode.setSubscriptionUrl(modelNode.getSubscriptionUrl());
+                apiNode.setSubscriptionListenerUrl(modelNode.getSubscriptionListenerUrl());
+                apiNode.setReplicationUrl(modelNode.getReplicationUrl());
 	}
 
     private static Object convertDataToTransformContent(String type, byte[] xformBytes) throws RuntimeException {
"
juddi,bc46aeb136a7d7920a021faa446758c685d294cc,"JUDDI-867 fixed
JUDDI-868 fixed
JUDDI-865 fixed (again)
JUDDI-869 done
",2014-03-02 16:50:24,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Node.java b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
index 287e541..a085536 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Node.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
@@ -45,6 +45,9 @@
 	private String custodyTransferUrl;
 	@Column(name=""subscription_url"", nullable = false, length=255)
 	private String subscriptionUrl;
+        
+        @Column(name=""subscriptionlist_url"", nullable = false, length=255)
+	private String subscriptionListenerUrl;
         @Column(name=""replication_url"", nullable = true, length=255)
 	private String replicationUrl;
         @Column(name=""proxy_transport"", nullable = false, length=255)
@@ -139,6 +142,14 @@
 	public void setSubscriptionUrl(String subscriptionUrl) {
 		this.subscriptionUrl = subscriptionUrl;
 	}
+        
+        public String getSubscriptionListenerUrl() {
+		return subscriptionListenerUrl;
+	}
+
+	public void setSubscriptionListenerUrl(String subscriptionUrl) {
+		this.subscriptionListenerUrl = subscriptionUrl;
+	}
         public String getReplicationUrl() {
 		return replicationUrl;
 	}
"
juddi,37c6b3685751bd67c44da5f70f51e654ce5ae9c0,"JUDDI-865 fixed, added support for replicationUrl mapping too
JUDDI-725 adding help functions for tmodel instance info
",2014-03-01 18:20:01,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 22e6ad6..54249a5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -262,6 +262,7 @@
 			uddiNode.setPublishUrl(             TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").publishUrl""),properties));
 			uddiNode.setCustodyTransferUrl(     TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").custodyTransferUrl""),properties));
 			uddiNode.setSecurityUrl(            TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").securityUrl""),properties));
+                        uddiNode.setReplicationUrl(         TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").replicationUrl""),properties));
 			uddiNode.setSubscriptionUrl(        TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").subscriptionUrl""),properties));
 			uddiNode.setSubscriptionListenerUrl(TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").subscriptionListenerUrl""),properties));
 			uddiNode.setJuddiApiUrl(            TokenResolver.replaceTokens(config.getString(""client.nodes.node("" + i +"").juddiApiUrl""),properties));
"
juddi,37c6b3685751bd67c44da5f70f51e654ce5ae9c0,"JUDDI-865 fixed, added support for replicationUrl mapping too
JUDDI-725 adding help functions for tmodel instance info
",2014-03-01 18:20:01,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index 46e57ee..490ebb2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -45,6 +45,7 @@
 	private String inquiryRESTUrl;
 	private String publishUrl;
 	private String securityUrl;
+        private String replicationUrl;
 	private String subscriptionUrl;
 	private String subscriptionListenerUrl;
 	private String juddiApiUrl;
@@ -70,6 +71,7 @@
 		securityUrl = node.getSecurityUrl();
 		subscriptionUrl = node.getSubscriptionUrl();
 		subscriptionListenerUrl = node.getSubscriptionListenerUrl();
+                replicationUrl=node.getReplicationUrl();
 		juddiApiUrl = node.getJuddiApiUrl();
 		proxyTransport = node.getProxyTransport();
 		factoryInitial = node.getFactoryInitial();
@@ -87,20 +89,23 @@
 	
 	public Node getApiNode() {
 		Node apiNode = new Node();
-		apiNode.setCustodyTransferUrl(custodyTransferUrl);
+		apiNode.setClientName(clientName);
+                apiNode.setCustodyTransferUrl(custodyTransferUrl);
 		apiNode.setDescription(description);
 		apiNode.setFactoryInitial(factoryInitial);
 		apiNode.setFactoryNamingProvider(factoryNamingProvider);
 		apiNode.setFactoryURLPkgs(factoryURLPkgs);
 		apiNode.setInquiryUrl(inquiryUrl);
-                //apiNode.setInquiryRESTUrl(name);
+                //no mapping for this apiNode.setInquiryRESTUrl(name);
 		apiNode.setJuddiApiUrl(juddiApiUrl);
-		apiNode.setClientName(clientName);
+		
 		apiNode.setName(name);
 		apiNode.setProxyTransport(proxyTransport);
 		apiNode.setPublishUrl(publishUrl);
+                apiNode.setReplicationUrl(replicationUrl);
 		apiNode.setSecurityUrl(securityUrl);
 		apiNode.setSubscriptionUrl(subscriptionUrl);
+                apiNode.setSubscriptionListenerUrl(subscriptionListenerUrl);
 		return apiNode;
 	}
 	
@@ -154,6 +159,20 @@
 	public String getInquiryUrl() {
 		return inquiryUrl;
 	}
+        /**
+         * @since 3.2.1
+         * @return 
+         */
+        public String getReplicationUrl() {
+		return replicationUrl;
+	}
+        /**
+         * @since 3.2.1
+         * @param value 
+         */
+        public void setReplicationUrl(String value) {
+		replicationUrl=value;
+	}
         
         /**
          * used ONLY for UDDI's HTTP GET (REST) endpoint
"
juddi,ba7c8357641404235bc37825880c03e722993b24,"JUDDI-242 adding getServiceDetails
",2014-02-28 18:14:27,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index 821a74b..812953d 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -53,6 +53,7 @@
         final static String JOE_PUBLISHER_TMODEL_KEY = ""uddi:uddi.joepublisher.com:keygenerator"";
         final static String MARY_PUBLISHER_TMODEL_XML = ""uddi_data/marypublisher/tModelKeyGen.xml"";
         final static String MARY_PUBLISHER_TMODEL_KEY = ""uddi:uddi.marypublisher.com:keygenerator"";
+        public final static String MARY_KEY_PREFIX=""uddi:uddi.marypublisher.com:"";
         final static String SAM_SYNDICATOR_TMODEL_XML = ""uddi_data/samsyndicator/tModelKeyGen.xml"";
         final static String SAM_SYNDICATOR_TMODEL_KEY = ""uddi:www.samco.com:keygenerator"";
         final static String TMODEL_PUBLISHER_TMODEL_XML = ""uddi_data/tmodels/tModelKeyGen.xml"";
"
juddi,ba7c8357641404235bc37825880c03e722993b24,"JUDDI-242 adding getServiceDetails
",2014-02-28 18:14:27,alexoree,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index ba7d0bc..95cbcbe 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -17,6 +17,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Holder;
@@ -25,18 +26,20 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.config.UDDIClient;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Assume;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.uddi.api_v3.BusinessEntity;
+import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.Description;
 import org.uddi.api_v3.GetBusinessDetail;
+import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.GetTModelDetail;
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.SaveBusiness;
+import org.uddi.api_v3.SaveService;
 import org.uddi.api_v3.SaveTModel;
+import org.uddi.api_v3.ServiceDetail;
 import org.uddi.api_v3.TModel;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.Subscription;
@@ -491,11 +494,7 @@
                 }
         }
 
-        //get service detail
-        //get binding detail
-        //get pub assertion
-        //find publisher assertions
-        //find binding
+        
         //TODO If a subscriber specifies a maximum number of entries to be returned with a subscription and the amount of data to be returned exceeds 
 //this limit, or if the node determines based on its policy that there are too many entries to be returned in a single group, 
         //then the node SHOULD provide a chunkToken with results.  
@@ -522,4 +521,109 @@
                 pub.saveBusiness(sb);
         }
 
+
+        /**
+         * getService tests joe want's updates on mary's service
+         *
+         * @throws Exception
+         */
+        @Test
+        public void joePublisherUpdate_GET_SERVICE_DETAIL() throws Exception {
+                Assume.assumeTrue(TckPublisher.isEnabled());
+                Assume.assumeNotNull(getHostame());
+                logger.info(""joePublisherUpdate_"" + getTransport() + ""_GET_SERVICE_DETAIL"");
+                TckCommon.removeAllExistingSubscriptions(authInfoJoe, subscriptionJoe);
+                Holder<List<Subscription>> holder = null;
+                try {
+                        reset();
+
+                        String before = TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe);
+
+                        tckTModelJoe.saveJoePublisherTmodel(authInfoJoe);
+                        tckTModelJoe.saveTModels(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                        tckTModelMary.saveMaryPublisherTmodel(authInfoMary);
+                        BusinessEntity saveMaryPublisherBusiness = tckBusinessMary.saveMaryPublisherBusiness(authInfoMary);
+                        
+                        BusinessService bs = new BusinessService();
+                        bs.setBusinessKey(saveMaryPublisherBusiness.getBusinessKey());
+                        bs.setServiceKey(TckTModel.MARY_KEY_PREFIX + UUID.randomUUID().toString());
+                        bs.getName().add(new Name(""Mary's service for "" + getTransport(),null));
+                        SaveService ss = new SaveService();
+                        ss.getBusinessService().add(bs);
+                        ss.setAuthInfo(authInfoMary);
+                        bs= publicationMary.saveService(ss).getBusinessService().get(0);
+                        
+
+                        tckBusinessJoe.saveJoePublisherBusiness(authInfoJoe);
+                        tckBusinessServiceJoe.saveJoePublisherService(authInfoJoe);
+                        //Saving the Listener Service
+                        String bindingkey = tckSubscriptionListenerJoe.saveService(authInfoJoe, getXMLLocationOfServiceForDelivery(), getPort(), getHostame());
+
+                        //Saving the Subscription
+                        holder = new Holder<List<Subscription>>();
+                        holder.value = new ArrayList<Subscription>();
+                        Subscription sub = new Subscription();
+                        sub.setBindingKey(bindingkey);
+                        sub.setNotificationInterval(DatatypeFactory.newInstance().newDuration(5000));
+                        sub.setSubscriptionFilter(new SubscriptionFilter());
+                        sub.getSubscriptionFilter().setGetServiceDetail(new GetServiceDetail());
+                        sub.getSubscriptionFilter().getGetServiceDetail().getServiceKey().add(bs.getServiceKey());
+
+                        holder.value.add(sub);
+                        subscriptionJoe.saveSubscription(authInfoJoe, holder);
+                        logger.info(""subscription saved for "" + holder.value.get(0).getSubscriptionKey());
+                        //tckSubscriptionListenerJoe.saveNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION3_XML);
+                        //Changing the service we subscribed to ""JoePublisherService""
+                        Thread.sleep(1000);
+                        logger.info(""updating Mary's business ********** "");
+                        updatePublisherService(authInfoMary, bs, publicationMary);
+
+                        boolean found = verifyDelivery(""Updated Name"");
+
+                        if (!found) {
+                                logger.warn(""Test failed, dumping business list"");
+                                logger.warn(""BEFORE "" + before);
+                                logger.warn(""After "" + TckCommon.DumpAllBusinesses(authInfoJoe, inquiryJoe));
+                                Assert.fail(""Notification does not contain the correct service."");
+                        }
+
+                } catch (Exception e) {
+                        logger.error(""No exceptions please."");
+                        e.printStackTrace();
+
+                        Assert.fail();
+                } finally {
+                        //tckSubscriptionListenerJoe.deleteNotifierSubscription(authInfoJoe, TckSubscriptionListener.SUBSCRIPTION_KEY);
+                        DeleteSubscription ds = new DeleteSubscription();
+                        ds.setAuthInfo(authInfoJoe);
+                        ds.getSubscriptionKey().add(holder.value.get(0).getSubscriptionKey());
+                        subscriptionJoe.deleteSubscription(ds);
+                        tckBusinessMary.deleteMaryPublisherBusiness(authInfoMary);
+                        tckTModelMary.deleteMaryPublisherTmodel(authInfoMary);
+
+                        tckBusinessServiceJoe.deleteJoePublisherService(authInfoJoe);
+                        tckBusinessJoe.deleteJoePublisherBusiness(authInfoJoe);
+                        tckTModelJoe.deleteJoePublisherTmodel(authInfoJoe);
+                        tckTModelJoe.deleteTModel(authInfoJoe, TckTModel.JOE_PUBLISHER_TMODEL_SUBSCRIPTION3_TMODEL_KEY, TckTModel.JOE_PUBLISHER_TMODEL_XML_SUBSCRIPTION3);
+
+                }
+        }
+        
+        //get binding detail
+        //get pub assertion
+        //get publisher assertion status
+        //find publisher assertions
+        //find binding
+
+        private void updatePublisherService(String authInfo, BusinessService bs, UDDIPublicationPortType pub) throws Exception{
+                bs.getName().add(new Name(""Updated name"", null));
+                SaveService ss = new SaveService();
+                ss.getBusinessService().add(bs);
+                ss.setAuthInfo(authInfo);
+                pub.saveService(ss);
+        }
+
+        
+        
 }
"
juddi,8eff90e467ad2ab439299c7b96ff57fdcaacf634,"JUDDI-841 adding hooks to check for key generator max lengths when pulled from the publisher profile
",2014-02-28 12:34:10,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
index 80c61d0..f6b59ca 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
@@ -25,6 +25,7 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.client.UDDIConstants;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -69,7 +70,7 @@
 			while (iter.hasNext()) {
 				String thisDomain = iter.next();
 				String[] parts = thisDomain.split("":"");
-				if (domain == null || (2 <= parts.length && parts.length < partsMax)) {
+				if ((domain == null || (2 <= parts.length && parts.length < partsMax)) && thisDomain.length() + 37 < 255) {
 					partsMax = parts.length;
 					domain = thisDomain;
 				}
"
juddi,2c06b736e0b911441888e1b150ba47ec170e3676,"JUDDI-841 revised test cases to fix max key length problems
JUDDI-751 completed
JUDDI-863 fixed
",2014-02-27 23:07:03,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 2f896ce..2e1fdbb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.api.impl;
 
+import java.io.StringWriter;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
@@ -25,6 +26,7 @@
 import javax.jws.WebService;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
+import javax.xml.bind.JAXB;
 import javax.xml.ws.Holder;
 
 import org.uddi.api_v3.AddPublisherAssertions;
@@ -593,6 +595,7 @@
 				MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity);
 
 				setOperationalInfo(em, modelBusinessEntity, publisher);
+                                log.debug(""Saving business "" + modelBusinessEntity.getEntityKey());
 	
 				em.persist(modelBusinessEntity);
 	
@@ -613,7 +616,13 @@
                     serviceCounter.update(PublicationQuery.SAVE_BUSINESS, 
                             QueryStatus.FAILED, procTime);                      
                     throw drfm;                                                                 	
-		} finally {
+		} catch (Exception ex){
+                        StringWriter sw = new StringWriter();
+                        if (body!=null)
+                        JAXB.marshal(body, sw);
+                  log.fatal(""unexpected error!"" + sw.toString(), ex);
+                  throw new FatalErrorException(new ErrorMessage(""E_fatalError"", ex.getMessage()));
+                } finally {
 			if (tx.isActive()) {
 				tx.rollback();
 			}
"
juddi,2c06b736e0b911441888e1b150ba47ec170e3676,"JUDDI-841 revised test cases to fix max key length problems
JUDDI-751 completed
JUDDI-863 fixed
",2014-02-27 23:07:03,alexoree,"diff --git a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
index 54e624a..ba7d0bc 100644
--- a/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
+++ b/uddi-tck/src/test/java/org/apache/juddi/v3/tck/UDDI_090_SubscriptionListenerIntegrationBase.java
@@ -25,7 +25,6 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.config.UDDIClient;
 import org.apache.juddi.v3.client.transport.Transport;
-import static org.apache.juddi.v3.tck.UDDI_090_SubscriptionListenerExternalTest.updatePublisherBusiness;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Assume;
@@ -35,6 +34,8 @@
 import org.uddi.api_v3.Description;
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetTModelDetail;
+import org.uddi.api_v3.Name;
+import org.uddi.api_v3.SaveBusiness;
 import org.uddi.api_v3.SaveTModel;
 import org.uddi.api_v3.TModel;
 import org.uddi.sub_v3.DeleteSubscription;
@@ -506,4 +507,19 @@
                 stm.getTModel().add(saveMaryPublisherTmodel);
                 publicationMary.saveTModel(stm);
         }
+                /**
+         * adds a new name to the business, then resaves it
+         *
+         * @param auth
+         * @param biz
+         * @param pub
+         */
+        public static void updatePublisherBusiness(String auth, BusinessEntity biz, UDDIPublicationPortType pub) throws Exception {
+                biz.getName().add(new Name(""Updated Name"", ""en""));
+                SaveBusiness sb = new SaveBusiness();
+                sb.setAuthInfo(auth);
+                sb.getBusinessEntity().add(biz);
+                pub.saveBusiness(sb);
+        }
+
 }
"
juddi,6eda22894c15585a6cc9d013d45b531b1d2920b9,"JUDDI-863 fixed
JUDDI-751 complete all test pass via mvn and tck-runner
",2014-02-27 06:57:17,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 413ecb4..184a68e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -1660,7 +1660,7 @@
                 }
         }
 
-        private static void validateKeyLength(String value) throws ValueNotAllowedException {
+        public static void validateKeyLength(String value) throws ValueNotAllowedException {
                 if (value != null && value.length() > ValidationConstants.MAX_Key) {
                         throw new ValueNotAllowedException(new ErrorMessage(""errors.keys.TooLong""));
                 }
"
juddi,6eda22894c15585a6cc9d013d45b531b1d2920b9,"JUDDI-863 fixed
JUDDI-751 complete all test pass via mvn and tck-runner
",2014-02-27 06:57:17,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index f334f78..f067a1e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -91,7 +91,7 @@
             // Per section 4.4: keys must be case-folded
             entityKey = entityKey.toLowerCase();
             subscription.setSubscriptionKey(entityKey);
-
+            ValidatePublish.validateKeyLength(entityKey);
             Object obj = em.find(org.apache.juddi.model.Subscription.class, entityKey);
             if (obj != null) {
                 entityExists = true;
@@ -106,6 +106,7 @@
 
                 // Validate key and then check to see that the proposed key is valid for this publisher
                 ValidateUDDIKey.validateUDDIv3Key(entityKey);
+                
                 if (!publisher.isValidPublisherKey(em, entityKey)) {
                     throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
                 }
"
juddi,6eda22894c15585a6cc9d013d45b531b1d2920b9,"JUDDI-863 fixed
JUDDI-751 complete all test pass via mvn and tck-runner
",2014-02-27 06:57:17,alexoree,"diff --git a/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java b/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
index d192a2b..9de092c 100644
--- a/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
+++ b/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
@@ -86,10 +86,11 @@
                                 org.apache.juddi.v3.tck.UDDI_080_SubscriptionIntegrationTest.class,
                                 //note that this is different, there is an IntegrationTest version
                                 //however it's for hosting our own mail server and reconfiguring juddi
-                                org.apache.juddi.v3.tck.UDDI_090_SubscriptionListenerExternalTest.class,
+                                //org.apache.juddi.v3.tck.UDDI_090_SubscriptionListenerExternalTest.class,
                                 org.apache.juddi.v3.tck.UDDI_090_HttpExternalTest.class,
                                 org.apache.juddi.v3.tck.UDDI_090_Smtp_ExternalTest.class,
-                                org.apache.juddi.v3.tck.JUDDI_091_RMISubscriptionListenerIntegrationTest.class,
+                                org.apache.juddi.v3.tck.UDDI_090_RMIIntegrationTest.class,
+                                //org.apache.juddi.v3.tck.JUDDI_091_RMISubscriptionListenerIntegrationTest.class,
                                 org.apache.juddi.v3.tck.JUDDI_100_ClientSubscriptionInfoIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_110_FindBusinessIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_120_CombineCategoryBagsFindServiceIntegrationTest.class,
@@ -137,7 +138,7 @@
                 bw.write(""Failed Test cases"");
                 bw.newLine();
                 bw.write(""____________________________________________"");
-
+                bw.newLine();
                 for (int i = 0; i < result.getFailures().size(); i++) {
                         try {
                                 try {
"
juddi,5ee04c732a855c5afade8f67a6c038d70cc12100,"JUDDI-852 juddi-gui updated to support null listDescriptions
",2014-02-22 08:46:23,alex,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index e91e5d0..fb519d7 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -157,7 +157,7 @@
 
         public String verifyLogin() {
                 EnsureConfig();
-                token=null;
+                token = null;
                 if (style != AuthStyle.UDDI_AUTH) {
                         if (WS_Transport) {
                                 BindingProvider bp = null;
@@ -212,7 +212,7 @@
                          context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));*/
                         return null;
                 } else {
-                        
+
                         if (WS_Transport) {
                                 BindingProvider bp = null;
                                 Map<String, Object> context = null;
@@ -307,9 +307,9 @@
                         hub.locale = (String) _session.getAttribute(""locale"");
                         return hub;
                 }
-                UddiHub hub=(UddiHub) j;
+                UddiHub hub = (UddiHub) j;
                 hub.locale = (String) _session.getAttribute(""locale"");
-                return  hub;
+                return hub;
         }
         String locale = ""en"";
 
@@ -319,12 +319,14 @@
          * @return something like ""en"" or ""es""
          */
         public String getLocale() {
-                if (session!=null){
-                        if (session.getAttribute(""locale"")!=null)
-                                locale = (String)session.getAttribute(""locale"");
+                if (session != null) {
+                        if (session.getAttribute(""locale"") != null) {
+                                locale = (String) session.getAttribute(""locale"");
+                        }
                 }
-                if (locale==null)
-                        locale=""en"";
+                if (locale == null) {
+                        locale = ""en"";
+                }
                 return locale;
         }
 
@@ -348,7 +350,7 @@
                                         nodename = clientConfig.getConfiguration().getString(PROP_CONFIG_NODE);
                                 }
                                 if (nodename == null || nodename.equals("""")) {
-                                        log.warn(""'node' is not defined in the config! defaulting to '"" + DEFAULT_NODE_NAME +""'"");
+                                        log.warn(""'node' is not defined in the config! defaulting to '"" + DEFAULT_NODE_NAME + ""'"");
                                         nodename = DEFAULT_NODE_NAME;
                                 }
                                 UDDINode uddiNode = clientConfig.getUDDINode(nodename);
@@ -373,9 +375,9 @@
                                              && (uddiNode.getCustodyTransferUrl() != null && uddiNode.getCustodyTransferUrl().toLowerCase().startsWith(""https://""))
                                              && (uddiNode.getSubscriptionUrl() != null && uddiNode.getSubscriptionUrl().toLowerCase().startsWith(""https://""))) {
                                                 WS_securePorts = true;
+                                        } else {
+                                                WS_securePorts = false;
                                         }
-                                        else
-                                                WS_securePorts=false;
                                 }
                         } catch (Exception ex) {
                                 HandleException(ex);
@@ -900,8 +902,9 @@
                         return null;
                 }
 
-                if (serviceid.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit"")))
+                if (serviceid.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
                         return null;
+                }
                 try {
                         GetServiceDetail gbd = new GetServiceDetail();
                         gbd.setAuthInfo(GetToken());
@@ -942,20 +945,20 @@
                         SaveBinding sb = new SaveBinding();
                         sb.setAuthInfo(GetToken());
                         sb.getBindingTemplate().add(be);
-                        BindingDetail saveBinding=null;
+                        BindingDetail saveBinding = null;
                         try {
-                                 saveBinding = publish.saveBinding(sb);
+                                saveBinding = publish.saveBinding(sb);
                         } catch (Exception ex) {
                                 if (isExceptionExpiration(ex)) {
                                         token = null;
                                         sb.setAuthInfo(GetToken());
-                                        saveBinding =  publish.saveBinding(sb);
+                                        saveBinding = publish.saveBinding(sb);
 
                                 } else {
                                         throw ex;
                                 }
                         }
-                                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
                              + ""<a href=\""bindingEditor.jsp?id="" + URLEncoder.encode(saveBinding.getBindingTemplate().get(0).getBindingKey(), ""UTF8"")
                              + ""\"">"" + StringEscapeUtils.escapeHtml(saveBinding.getBindingTemplate().get(0).getBindingKey()) + ""</a>"";
                 } catch (Exception ex) {
@@ -986,15 +989,15 @@
                 be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
                 //JUDDI-806get existing service details and copy over binding templates
                 BusinessService GetServiceDetail = GetServiceDetail(request.getParameter(PostBackConstants.SERVICEKEY).trim());
-                if (GetServiceDetail!=null){
+                if (GetServiceDetail != null) {
                         be.setBindingTemplates(GetServiceDetail.getBindingTemplates());
                 }
                 /*JUDDI-806
-                BindingTemplates bt = new BindingTemplates();
-                bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
-                if (!bt.getBindingTemplate().isEmpty()) {
-                        be.setBindingTemplates(bt);
-                }*/
+                 BindingTemplates bt = new BindingTemplates();
+                 bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+                 if (!bt.getBindingTemplate().isEmpty()) {
+                 be.setBindingTemplates(bt);
+                 }*/
 
                 be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
@@ -1126,8 +1129,9 @@
                 if (bizid == null || bizid.isEmpty()) {
                         return null;
                 }
-                if (bizid.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit"")))
+                if (bizid.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
                         return null;
+                }
 
                 try {
                         GetBusinessDetail gbd = new GetBusinessDetail();
@@ -1170,7 +1174,7 @@
         }
 
         private String deleteBinding(List<String> serviceId) {
-                
+
                 if (serviceId == null || serviceId.isEmpty()) {
                         return ResourceLoader.GetResource(session, ""errors.noinput"");
                 }
@@ -1194,7 +1198,7 @@
                         return HandleException(ex);
                 }
                 return ResourceLoader.GetResource(session, ""actions.delete.binding"");
-                
+
         }
 
         /**
@@ -1263,8 +1267,13 @@
                                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");
                                 return ret;
                         }
-                        ret.displaycount = findService.getListDescription().getIncludeCount();
-                        ret.totalrecords = findService.getListDescription().getActualCount();
+                        if (findService.getListDescription() != null) {
+                                ret.displaycount = findService.getListDescription().getIncludeCount();
+                                ret.totalrecords = findService.getListDescription().getActualCount();
+                        } else {
+                                ret.displaycount = findService.getServiceInfos().getServiceInfo().size();
+                                ret.totalrecords = findService.getServiceInfos().getServiceInfo().size();
+                        }
                         ret.renderedHtml = Printers.ServiceListAsHtml(findService, isChooser, session);
 
                         //  ret.renderedHtml = sb.toString();
@@ -1428,15 +1437,15 @@
                                 ret.displaycount = findTModel.getListDescription().getIncludeCount();
                                 ret.totalrecords = findTModel.getListDescription().getActualCount();
                         }
+                        else
+                        {
+                                ret.displaycount = findTModel.getTModelInfos().getTModelInfo().size();
+                                ret.totalrecords = findTModel.getTModelInfos().getTModelInfo().size();
+                        }
                         if (findTModel.getTModelInfos() == null || findTModel.getTModelInfos().getTModelInfo().isEmpty()) {
                                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");//""No tModels are defined"";
                         } else {
-                                // if (!isChooser) {
                                 ret.renderedHtml = Printers.PrintTModelListAsHtml(findTModel, session, isChooser);
-                                // } else {
-                                //     ret.renderedHtml = Printers.PrintTModelListAsHtmlModel(findTModel, session);
-                                // }
-
                         }
                 } catch (Exception ex) {
                         ret.renderedHtml = HandleException(ex);
@@ -3016,9 +3025,13 @@
                                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");
                                 return ret;
                         }
-                        ret.displaycount = findService.getListDescription().getIncludeCount();
-                        ret.totalrecords = findService.getListDescription().getActualCount();
-
+                        if (findService.getListDescription() != null) {
+                                ret.displaycount = findService.getListDescription().getIncludeCount();
+                                ret.totalrecords = findService.getListDescription().getActualCount();
+                        } else {
+                                ret.displaycount = findService.getServiceInfos().getServiceInfo().size();
+                                ret.totalrecords = findService.getServiceInfos().getServiceInfo().size();
+                        }
                         GetServiceDetail gs = new GetServiceDetail();
                         gs.setAuthInfo(GetToken());
                         for (int i = 0; i < findService.getServiceInfos().getServiceInfo().size(); i++) {
@@ -3871,7 +3884,7 @@
         public boolean isAdminLocalhostOnly() {
                 return clientConfig.getConfiguration().getBoolean(PROP_ADMIN_LOCALHOST_ONLY, true);
         }
-        
+
         public String SaveBindingTemplate(HttpServletRequest request) {
 
                 BindingTemplate be = new BindingTemplate();
@@ -3906,18 +3919,18 @@
                 if (ap.getValue() != null) {
                         be.setAccessPoint(ap);
                 }
-                
+
                 be.setTModelInstanceDetails(Builders.BuildTmodelInstanceDetails(
-                     Builders.MapFilter(map, PostBackConstants.TMODELINSTANCE), 
+                     Builders.MapFilter(map, PostBackConstants.TMODELINSTANCE),
                      PostBackConstants.TMODELINSTANCE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
                 //JAXB.marshal(be, System.out);
                 return SaveBindingTemplate(be);
         }
-        
-        public String deleteBinding(String id){
 
-                 if (id == null || id.length() == 0) {
+        public String deleteBinding(String id) {
+
+                if (id == null || id.length() == 0) {
                         return ResourceLoader.GetResource(session, ""errors.noinput"");
                 }
                 List<String> x = new ArrayList<String>();
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/PublicationHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/PublicationHelper.java
index eb99196..d2589ab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/PublicationHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/PublicationHelper.java
@@ -17,6 +17,7 @@
 package org.apache.juddi.api.impl;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
 import javax.persistence.EntityManager;
@@ -55,5 +56,7 @@
 		
 		return result;
 	}
+	
+
 
 }
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 946becc..2f896ce 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -18,6 +18,7 @@
 package org.apache.juddi.api.impl;
 
 import java.util.Date;
+import java.util.Iterator;
 import java.util.List;
 import java.util.ArrayList;
 
@@ -48,7 +49,6 @@
 import org.uddi.api_v3.TModelDetail;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIPublicationPortType;
-
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -521,9 +521,9 @@
 			tx.begin();
 			
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
-			
+			publisher.populateKeyGeneratorKeys(em);
 			ValidatePublish validator = new ValidatePublish(publisher);
-			validator.validateSaveBinding(em, body, null);
+			validator.validateSaveBinding(em, body, null, publisher);
 	
 			BindingDetail result = new BindingDetail();
                         result.setListDescription(new ListDescription());
@@ -579,9 +579,9 @@
 			tx.begin();
 			
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
-			
+			publisher.populateKeyGeneratorKeys(em);
 			ValidatePublish validator = new ValidatePublish(publisher);
-			validator.validateSaveBusiness(em, body, null);
+			validator.validateSaveBusiness(em, body, null, publisher);
 	
 			BusinessDetail result = new BusinessDetail();
 			
@@ -632,9 +632,9 @@
 			tx.begin();
 	
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
-			
+			publisher.populateKeyGeneratorKeys(em);
 			ValidatePublish validator = new ValidatePublish(publisher);
-			validator.validateSaveService(em, body, null);
+			validator.validateSaveService(em, body, null, publisher);
 			
 			ServiceDetail result = new ServiceDetail();
 	
@@ -687,8 +687,8 @@
 			tx.begin();
 	
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
-	
-			new ValidatePublish(publisher).validateSaveTModel(em, body, null);
+			publisher.populateKeyGeneratorKeys(em);
+			new ValidatePublish(publisher).validateSaveTModel(em, body, null, publisher);
 	
 			TModelDetail result = new TModelDetail();
 	
@@ -920,6 +920,5 @@
 			em.remove(existingUddiEntity);
 		
 	}
-
 	
 }
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 9936d08..435d236 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -22,6 +22,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.UUID;
+
 import javax.jws.WebService;
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
@@ -29,6 +30,7 @@
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.ws.Holder;
+
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -838,7 +840,8 @@
 			tx.begin();
 	
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, authInfo);
-			new ValidateSubscription(publisher).validateSubscriptions(em, subscription.value);
+			publisher.populateKeyGeneratorKeys(em);
+			new ValidateSubscription(publisher).validateSubscriptions(em, subscription.value, publisher);
 			
 			List<org.uddi.sub_v3.Subscription> apiSubscriptionList = subscription.value;
 			for (org.uddi.sub_v3.Subscription apiSubscription : apiSubscriptionList) {
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
index 9ca875a..80c61d0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
@@ -17,11 +17,14 @@
 
 package org.apache.juddi.keygen;
 
+import java.util.Iterator;
+import java.util.List;
 import java.util.UUID;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
+import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -29,19 +32,51 @@
 /**
  * The default jUDDI key generator.  Generates a key like this:
  * 
+ * uddiScheme : domain : UUID
+ * 
+ * where domain is the shortest keyGenerator domain. 
+ * 
+ * If no domain is set for this publihser, or the publisher is 'uddi' then
+ * it defaults to the RootDomain:
+ * 
  * uddiScheme : RootDomain : UUID
  * 
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public class DefaultKeyGenerator implements KeyGenerator {
 
-	public String generate() throws DispositionReportFaultMessage {
-		String rootPartition = """";
-		try 
-		{ rootPartition = AppConfig.getConfiguration().getString(Property.JUDDI_ROOT_PARTITION); }
-		catch(ConfigurationException ce) 
-		{ throw new FatalErrorException(new ErrorMessage(""errors.configuration.Retrieval"", Property.JUDDI_ROOT_PARTITION));}
-		
-		return rootPartition + PARTITION_SEPARATOR + UUID.randomUUID();
+	public String generate(UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+		String domain = getDomain(publisher);
+		if (domain==null) {
+			String rootPartition = """";
+			try 
+			{ rootPartition = AppConfig.getConfiguration().getString(Property.JUDDI_ROOT_PARTITION); }
+			catch(ConfigurationException ce) 
+			{ throw new FatalErrorException(new ErrorMessage(""errors.configuration.Retrieval"", Property.JUDDI_ROOT_PARTITION));}
+			domain = rootPartition;
+		}
+		return domain + PARTITION_SEPARATOR + UUID.randomUUID();
 	}
+	
+	public static String getDomain(UddiEntityPublisher publisher) {
+		String domain = null;
+		if (publisher==null || ""uddi"".equalsIgnoreCase(publisher.getAuthorizedName())) return domain; //default to the rootPartition
+		List<String> domains = publisher.getKeyGeneratorKeys();
+		if (domains!=null && !domains.isEmpty()) {
+			Iterator<String> iter = domains.iterator();
+			int partsMax = 1000;
+			//pick the KeyGenerator with the fewest amount of parts, ignoring the subdomain keys. 
+			while (iter.hasNext()) {
+				String thisDomain = iter.next();
+				String[] parts = thisDomain.split("":"");
+				if (domain == null || (2 <= parts.length && parts.length < partsMax)) {
+					partsMax = parts.length;
+					domain = thisDomain;
+				}
+			}
+			domain = domain.substring(0, domain.lastIndexOf("":""));
+		}
+		return domain;
+	}
+
 }
\ No newline at end of file
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGenerator.java b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGenerator.java
index 4e6073c..f9705fa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGenerator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGenerator.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.keygen;
 
+import org.apache.juddi.model.UddiEntityPublisher;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
@@ -30,5 +31,5 @@
 	/*
 	 * Generates a key that is used to save a UDDI entity.
 	 */
-	public String generate() throws DispositionReportFaultMessage;
+	public String generate(UddiEntityPublisher publisher) throws DispositionReportFaultMessage;
 }
\ No newline at end of file
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index c6e4c3b..be89d4d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -326,7 +326,7 @@
                 }
         }
 
-        public void validateSaveBusiness(EntityManager em, SaveBusiness body, Configuration config) throws DispositionReportFaultMessage {
+        public void validateSaveBusiness(EntityManager em, SaveBusiness body, Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 if (config == null) {
                         try {
@@ -347,7 +347,7 @@
                 }
 
                 for (org.uddi.api_v3.BusinessEntity entity : entityList) {
-                        validateBusinessEntity(em, entity, config);
+                        validateBusinessEntity(em, entity, config, publisher);
                 }
         }
 
@@ -379,7 +379,7 @@
 
         }
 
-        public void validateSaveService(EntityManager em, SaveService body, Configuration config) throws DispositionReportFaultMessage {
+        public void validateSaveService(EntityManager em, SaveService body, Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 if (config == null) {
                         try {
@@ -401,7 +401,7 @@
 
                 for (org.uddi.api_v3.BusinessService entity : entityList) {
                         // Entity specific data validation
-                        validateBusinessService(em, entity, null, config);
+                        validateBusinessService(em, entity, null, config, publisher);
                 }
         }
 
@@ -432,7 +432,7 @@
                 }
         }
 
-        public void validateSaveBinding(EntityManager em, SaveBinding body, Configuration config) throws DispositionReportFaultMessage {
+        public void validateSaveBinding(EntityManager em, SaveBinding body, Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 if (config == null) {
                         try {
@@ -453,7 +453,7 @@
                 }
 
                 for (org.uddi.api_v3.BindingTemplate entity : entityList) {
-                        validateBindingTemplate(em, entity, null, config);
+                        validateBindingTemplate(em, entity, null, config, publisher);
                 }
         }
 
@@ -484,7 +484,7 @@
                 }
         }
 
-        public void validateSaveTModel(EntityManager em, SaveTModel body, Configuration config) throws DispositionReportFaultMessage {
+        public void validateSaveTModel(EntityManager em, SaveTModel body, Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 if (config == null) {
                         try {
@@ -505,7 +505,7 @@
                 }
 
                 for (org.uddi.api_v3.TModel entity : entityList) {
-                        validateTModel(em, entity, config);
+                        validateTModel(em, entity, config, publisher);
                 }
         }
 
@@ -642,7 +642,8 @@
                 }
         }
 
-        public void validateBusinessEntity(EntityManager em, org.uddi.api_v3.BusinessEntity businessEntity, Configuration config) throws DispositionReportFaultMessage {
+        public void validateBusinessEntity(EntityManager em, org.uddi.api_v3.BusinessEntity businessEntity, 
+        		Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
                 // A supplied businessEntity can't be null
                 if (businessEntity == null) {
@@ -654,7 +655,7 @@
                 String entityKey = businessEntity.getBusinessKey();
                 if (entityKey == null || entityKey.length() == 0) {
                         KeyGenerator keyGen = KeyGeneratorFactory.getKeyGenerator();
-                        entityKey = keyGen.generate();
+                        entityKey = keyGen.generate(publisher);
                         businessEntity.setBusinessKey(entityKey);
                 } else {
                         // Per section 4.4: keys must be case-folded
@@ -696,11 +697,12 @@
                 validateCategoryBag(businessEntity.getCategoryBag(), config, false);
                 validateIdentifierBag(businessEntity.getIdentifierBag(), config, false);
                 validateDescriptions(businessEntity.getDescription());
-                validateBusinessServices(em, businessEntity.getBusinessServices(), businessEntity, config);
+                validateBusinessServices(em, businessEntity.getBusinessServices(), businessEntity, config, publisher);
 
         }
 
-        public void validateBusinessServices(EntityManager em, org.uddi.api_v3.BusinessServices businessServices, org.uddi.api_v3.BusinessEntity parent, Configuration config)
+        public void validateBusinessServices(EntityManager em, org.uddi.api_v3.BusinessServices businessServices, 
+        		org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
                 throws DispositionReportFaultMessage {
                 // Business services is optional
                 if (businessServices == null) {
@@ -712,12 +714,13 @@
                 }
 
                 for (org.uddi.api_v3.BusinessService businessService : businessServiceList) {
-                        validateBusinessService(em, businessService, parent, config);
+                        validateBusinessService(em, businessService, parent, config, publisher);
                 }
 
         }
 
-        public void validateBusinessService(EntityManager em, org.uddi.api_v3.BusinessService businessService, org.uddi.api_v3.BusinessEntity parent, Configuration config)
+        public void validateBusinessService(EntityManager em, org.uddi.api_v3.BusinessService businessService, 
+        		org.uddi.api_v3.BusinessEntity parent, Configuration config, UddiEntityPublisher publisher)
                 throws DispositionReportFaultMessage {
 
                 // A supplied businessService can't be null
@@ -781,7 +784,7 @@
                         boolean entityExists = false;
                         if (entityKey == null || entityKey.length() == 0) {
                                 KeyGenerator keyGen = KeyGeneratorFactory.getKeyGenerator();
-                                entityKey = keyGen.generate();
+                                entityKey = keyGen.generate(publisher);
                                 businessService.setServiceKey(entityKey);
                         } else {
 
@@ -866,12 +869,13 @@
                         validateNames(businessService.getName());
                         validateCategoryBag(businessService.getCategoryBag(), config, false);
                         validateDescriptions(businessService.getDescription());
-                        validateBindingTemplates(em, businessService.getBindingTemplates(), businessService, config);
+                        validateBindingTemplates(em, businessService.getBindingTemplates(), businessService, config, publisher);
                 }
 
         }
 
-        public void validateBindingTemplates(EntityManager em, org.uddi.api_v3.BindingTemplates bindingTemplates, org.uddi.api_v3.BusinessService parent, Configuration config)
+        public void validateBindingTemplates(EntityManager em, org.uddi.api_v3.BindingTemplates bindingTemplates, 
+        		org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
                 throws DispositionReportFaultMessage {
                 // Binding templates is optional
                 if (bindingTemplates == null) {
@@ -884,13 +888,13 @@
                 }
 
                 for (org.uddi.api_v3.BindingTemplate bindingTemplate : bindingTemplateList) {
-                        validateBindingTemplate(em, bindingTemplate, parent, config);
+                        validateBindingTemplate(em, bindingTemplate, parent, config, publisher);
                 }
 
         }
 
         public void validateBindingTemplate(EntityManager em, org.uddi.api_v3.BindingTemplate bindingTemplate,
-                org.uddi.api_v3.BusinessService parent, Configuration config)
+                org.uddi.api_v3.BusinessService parent, Configuration config, UddiEntityPublisher publisher)
                 throws DispositionReportFaultMessage {
 
                 // A supplied bindingTemplate can't be null
@@ -930,7 +934,7 @@
                 if (entityKey == null || entityKey.length() == 0) {
                         validateNotSigned(bindingTemplate);
                         KeyGenerator keyGen = KeyGeneratorFactory.getKeyGenerator();
-                        entityKey = keyGen.generate();
+                        entityKey = keyGen.generate(publisher);
                         bindingTemplate.setBindingKey(entityKey);
                 } else {
 
@@ -1024,7 +1028,7 @@
 
         }
 
-        public void validateTModel(EntityManager em, org.uddi.api_v3.TModel tModel, Configuration config) throws DispositionReportFaultMessage {
+        public void validateTModel(EntityManager em, org.uddi.api_v3.TModel tModel, Configuration config, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
                 // A supplied tModel can't be null
                 if (tModel == null) {
                         throw new ValueNotAllowedException(new ErrorMessage(""errors.tmodel.NullInput""));
@@ -1034,7 +1038,7 @@
                 String entityKey = tModel.getTModelKey();
                 if (entityKey == null || entityKey.length() == 0) {
                         KeyGenerator keyGen = KeyGeneratorFactory.getKeyGenerator();
-                        entityKey = keyGen.generate();
+                        entityKey = keyGen.generate(publisher);
                         validateNotSigned(tModel);
                         tModel.setTModelKey(entityKey);
                 } else {
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index 17f41f4..f334f78 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -20,8 +20,6 @@
 import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 import javax.xml.datatype.DatatypeConfigurationException;
@@ -56,7 +54,7 @@
     }
     private DatatypeFactory df = null;
 
-    public void validateSubscriptions(EntityManager em, List<org.uddi.sub_v3.Subscription> entityList) throws DispositionReportFaultMessage {
+    public void validateSubscriptions(EntityManager em, List<org.uddi.sub_v3.Subscription> entityList, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
         // No null or empty list
         if (entityList == null || entityList.size() == 0) {
@@ -64,11 +62,11 @@
         }
 
         for (org.uddi.sub_v3.Subscription entity : entityList) {
-            validateSubscription(em, entity);
+            validateSubscription(em, entity, publisher);
         }
     }
 
-    private void validateSubscription(EntityManager em, org.uddi.sub_v3.Subscription subscription) throws DispositionReportFaultMessage {
+    private void validateSubscription(EntityManager em, org.uddi.sub_v3.Subscription subscription, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
 
         // A supplied subscription can't be null
         if (subscription == null) {
@@ -86,7 +84,7 @@
         //no key specified, make a new one
         if (entityKey == null || entityKey.length() == 0) {
             KeyGenerator keyGen = KeyGeneratorFactory.getKeyGenerator();
-            entityKey = keyGen.generate();
+            entityKey = keyGen.generate(publisher);
             subscription.setSubscriptionKey(entityKey);
         } else {
             //key specified, validate it
"
juddi,034954fca5c5e6fef2b1fcd9b1c1b13809dd51cd,"https://issues.apache.org/jira/browse/JUDDI-841 fixing generated key so it uses the publisher's domain
",2014-02-21 11:52:04,Kurt Stam,"diff --git a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
index 0209aeb..44e0c6d 100644
--- a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
+++ b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
@@ -17,9 +17,11 @@
 
 import java.util.Date;
 import java.util.List;
+
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 import javax.xml.ws.WebServiceContext;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.PersistenceManager;
@@ -62,9 +64,8 @@
                         tx.begin();
 
                         UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
-
                         ValidatePublish validator = new ValidatePublish(publisher);
-                        validator.validateSaveBusiness(em, body, null);
+                        validator.validateSaveBusiness(em, body, null, publisher);
 
                         BusinessDetail result = new BusinessDetail();
 
"
juddi,8ecfc7ff4ee41a9965c00f54f9cebe436b1a0d58,"JUDDI-848 fixed
",2014-02-20 22:41:54,alex,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index c6e4c3b..4fc9958 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -988,6 +988,9 @@
                                 Object parentTemp = em.find(org.apache.juddi.model.BusinessService.class, parentKey);
                                 if (parentTemp == null) {
                                         throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ParentBusinessNotFound"", parentKey));
+                                } else if (!(parentTemp instanceof org.apache.juddi.model.BusinessService)){
+                                        //JUDDI-848
+                                        throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ParentBusinessNotFound"", parentKey));
                                 }
 
                                 // Make sure publisher owns this parent entity.
"
juddi,2ac661d618483a768d1d99ed30bd8cff29b598fe,"JUDDI-852 potentially fixed, Kurt needs to review this commit
JUDDI-851 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1568759 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-16 13:22:34,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 1e95aec..b9c91e0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -157,7 +157,9 @@
 				subscriptionStartIndex.value = null;
 			result.setTruncated(Boolean.FALSE);
 		}
-		
+		result.getListDescription().setListHead(currentIndex);
+                result.getListDescription().setActualCount(result.getBindingTemplate().size());
+                result.getListDescription().setIncludeCount(returnedRowCount);
 		return result;
 	}	
 	
"
juddi,2ac661d618483a768d1d99ed30bd8cff29b598fe,"JUDDI-852 potentially fixed, Kurt needs to review this commit
JUDDI-851 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1568759 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-16 13:22:34,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index f230b95..4b56b29 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -1078,8 +1078,12 @@
                                 } else {
                                         // If not a key generator, then simply validate key and then check to see that the proposed key is valid for this publisher
                                         ValidateUDDIKey.validateUDDIv3Key(entityKey);
-                                        if (!publisher.isValidPublisherKey(em, entityKey)) {
-                                                throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
+                                        //fix for JUDDI-851
+                                        if (!entityKey.toUpperCase().startsWith(""UUID:""))
+                                        {
+                                             if (!publisher.isValidPublisherKey(em, entityKey)) {
+                                                     throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
+                                             }
                                         }
                                 }
                         }
"
juddi,2ac661d618483a768d1d99ed30bd8cff29b598fe,"JUDDI-852 potentially fixed, Kurt needs to review this commit
JUDDI-851 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1568759 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-16 13:22:34,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
index 018300d..6d067da 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
@@ -35,7 +35,9 @@
 	public static void validateUDDIv3Key(String key) throws DispositionReportFaultMessage {
 		if (key == null)
 			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.NullKey""));
-		
+		if (key.toLowerCase().startsWith(""uuid:"")) {
+               return;
+          }
 		if (! key.contains(KeyGenerator.PARTITION_SEPARATOR)) return; //v2 style key; no other validation rules apply
 		
 		String keyToTest = key.trim();
"
juddi,a9e1cfd1d91a424c7125551fe8169385d290c25b,"JUDDI-850 minor code updates to support UDDIv2 TCK test cases. filtering out approximate Match for uddiv3 to v2

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1567766 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-12 21:58:55,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
index 87e306d..2fc0334 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
@@ -627,6 +627,9 @@
                         } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.COMBINE_CATEGORY_BAGS)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.COMBINE_CATEGORY_BAGS_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.COMBINE_CATEGORY_BAGS);
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.APPROXIMATE_MATCH)
+                             || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.APPROXIMATE_MATCH_TMODEL)) {
+                                //ignore it, not supported by UDDI v2
                         } else {
                                 r.getFindQualifier().add(findQualifiers.getFindQualifier().get(i));
                         }
"
juddi,a9e1cfd1d91a424c7125551fe8169385d290c25b,"JUDDI-850 minor code updates to support UDDIv2 TCK test cases. filtering out approximate Match for uddiv3 to v2

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1567766 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-12 21:58:55,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSv2TranslationTransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSv2TranslationTransport.java
index 593bc37..161e123 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSv2TranslationTransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSv2TranslationTransport.java
@@ -31,6 +31,8 @@
 import org.apache.juddi.v3.client.transport.wrapper.Inquiry3to2;
 import org.apache.juddi.v3.client.transport.wrapper.Publish3to2;
 import org.apache.juddi.v3.client.transport.wrapper.Security3to2;
+import org.uddi.v2_service.Inquire;
+import org.uddi.v2_service.Publish;
 import org.uddi.v3_service.UDDIInquiryPortType;
 import org.uddi.v3_service.UDDIPublicationPortType;
 import org.uddi.v3_service.UDDISecurityPortType;
@@ -181,4 +183,51 @@
                 return publishv2;
         }
 
+        
+        
+        
+        
+        
+        
+        public Inquire getUDDIv2InquiryService(String endpointURL) throws TransportException {
+                try {
+                        if (inquiryv2 == null) {
+                                inquiryv2 = new Inquiry3to2();
+
+                        }
+                        if (endpointURL == null) {
+                                UDDIClient client = UDDIClientContainer.getUDDIClient(clientName);
+                                endpointURL = client.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+                        }
+                        Map<String, Object> requestContext = ((BindingProvider) inquiryv2).getRequestContext();
+                        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
+                        setCredentials(requestContext);
+                } catch (Exception e) {
+                        throw new TransportException(e.getMessage(), e);
+                }
+                return inquiryv2.getUDDIv2WebServiceClient();
+
+        }
+
+        
+        
+        public Publish getUDDIv2PublishService(String endpointURL) throws TransportException {
+                try {
+                        if (publishv2 == null) {
+                                publishv2 = new Publish3to2();
+
+                        }
+                        if (endpointURL == null) {
+                                UDDIClient client = UDDIClientContainer.getUDDIClient(clientName);
+                                endpointURL = client.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+                        }
+
+                        Map<String, Object> requestContext = ((BindingProvider) publishv2).getRequestContext();
+                        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);
+                        setCredentials(requestContext);
+                } catch (Exception e) {
+                        throw new TransportException(e.getMessage(), e);
+                }
+                return publishv2.getUDDIv2PublishWebServiceClient();
+        }
 }
"
juddi,a9e1cfd1d91a424c7125551fe8169385d290c25b,"JUDDI-850 minor code updates to support UDDIv2 TCK test cases. filtering out approximate Match for uddiv3 to v2

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1567766 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-12 21:58:55,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
index 7f851bd..24cfad9 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
@@ -68,6 +68,10 @@
                 inquiryService = service.getInquire();
 
         }
+        
+        public Inquire getUDDIv2WebServiceClient(){
+             return inquiryService;
+        }
 
         @Override
         public BindingDetail findBinding(FindBinding body) throws DispositionReportFaultMessage, RemoteException {
"
juddi,a9e1cfd1d91a424c7125551fe8169385d290c25b,"JUDDI-850 minor code updates to support UDDIv2 TCK test cases. filtering out approximate Match for uddiv3 to v2

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1567766 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-12 21:58:55,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Publish3to2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Publish3to2.java
index 9fcde6b..e37d45a 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Publish3to2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Publish3to2.java
@@ -71,6 +71,10 @@
       publishService = service.getPublish();
 
    }
+   
+   public Publish getUDDIv2PublishWebServiceClient(){
+        return publishService;
+   }
 
    @Override
    public void addPublisherAssertions(AddPublisherAssertions body) throws DispositionReportFaultMessage, RemoteException {
"
juddi,142285223e21d4996d617a111da1afaab6dc8c47,"JUDDI-806 done note that the workflow has now changed to create business, save, create service, create bindingEditor.jsp(s), save

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566300 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-09 15:14:13,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 96d0052..ed44b08 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -940,8 +940,9 @@
                         SaveBinding sb = new SaveBinding();
                         sb.setAuthInfo(GetToken());
                         sb.getBindingTemplate().add(be);
+                        BindingDetail saveBinding=null;
                         try {
-                                publish.saveBinding(sb);
+                                 saveBinding = publish.saveBinding(sb);
                         } catch (Exception ex) {
                                 if (isExceptionExpiration(ex)) {
                                         token = null;
@@ -952,7 +953,9 @@
                                         throw ex;
                                 }
                         }
-                        return ResourceLoader.GetResource(session, ""actions.save.bindingtemplate"");
+                                        return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
+                             + ""<a href=\""bindingEditor.jsp?id="" + URLEncoder.encode(saveBinding.getBindingTemplate().get(0).getBindingKey(), ""UTF8"")
+                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveBinding.getBindingTemplate().get(0).getBindingKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
@@ -979,11 +982,17 @@
                 }
 
                 be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+                //JUDDI-806get existing service details and copy over binding templates
+                BusinessService GetServiceDetail = GetServiceDetail(request.getParameter(PostBackConstants.SERVICEKEY).trim());
+                if (GetServiceDetail!=null){
+                        be.setBindingTemplates(GetServiceDetail.getBindingTemplates());
+                }
+                /*JUDDI-806
                 BindingTemplates bt = new BindingTemplates();
                 bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
                 if (!bt.getBindingTemplate().isEmpty()) {
                         be.setBindingTemplates(bt);
-                }
+                }*/
 
                 be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
"
juddi,e162a832e6bc6ed8a33a6efbd3373c97d842b839,"JUDDI-847 done
JUDDI-806 binding editor is now separate, service editor changes are still required

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566211 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-09 04:24:50,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 0feba96..96d0052 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -307,8 +307,9 @@
                         hub.locale = (String) _session.getAttribute(""locale"");
                         return hub;
                 }
-
-                return (UddiHub) j;
+                UddiHub hub=(UddiHub) j;
+                hub.locale = (String) _session.getAttribute(""locale"");
+                return  hub;
         }
         String locale = ""en"";
 
@@ -318,6 +319,12 @@
          * @return something like ""en"" or ""es""
          */
         public String getLocale() {
+                if (session!=null){
+                        if (session.getAttribute(""locale"")!=null)
+                                locale = (String)session.getAttribute(""locale"");
+                }
+                if (locale==null)
+                        locale=""en"";
                 return locale;
         }
 
@@ -774,14 +781,14 @@
                                         sb.append(""<b>"").append(ResourceLoader.GetResource(session, ""items.name"")).append("":</b><div class=\""editable\"" id=\""ServiceName\"">"").append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(get.getBusinessService().get(i).getName()))).append(""</div><Br>"");
                                         sb.append(""<b>"").append(ResourceLoader.GetResource(session, ""items.description"")).append("":</b><div class=\""editable\"" id=\""ServiceDescription\"">"").append(StringEscapeUtils.escapeHtml((Printers.ListToDescString(get.getBusinessService().get(i).getDescription())))).append(""</div><Br>"");
                                         sb.append(""<b>"").append(ResourceLoader.GetResource(session, ""items.key"")).append("":</b><div class=\""editable\"" id=\""ServiceKey\"">"").append(StringEscapeUtils.escapeHtml((get.getBusinessService().get(i).getServiceKey()))).append(""</div><Br>"");
-                                        sb.append(""<b>"").append(ResourceLoader.GetResource(session, ""items.keyrefcat"")).append("":</b> "").append(Printers.CatBagToString(get.getBusinessService().get(i).getCategoryBag(), (String) session.getAttribute(""locale""))).append(""<Br>"");
+                                        sb.append(""<b>"").append(ResourceLoader.GetResource(session, ""items.keyrefcat"")).append("":</b> "").append(Printers.CatBagToString(get.getBusinessService().get(i).getCategoryBag(), getLocale())).append(""<Br>"");
                                         if (!get.getBusinessService().get(i).getSignature().isEmpty()) {
                                                 sb.append(ResourceLoader.GetResource(session, ""items.signed"")).append(""<Br>"");
                                         } else {
                                                 sb.append(ResourceLoader.GetResource(session, ""items.signed.not"")).append(""<Br>"");
                                         }
 
-                                        sb.append(Printers.PrintBindingTemplates(get.getBusinessService().get(i).getBindingTemplates(), locale)).append(""<Br>"");
+                                        sb.append(Printers.PrintBindingTemplates(get.getBusinessService().get(i).getBindingTemplates(), getLocale())).append(""<Br>"");
                                 }
                         } else {
                                 sb.append(ResourceLoader.GetResource(session, ""errors.nodatareturned""));
@@ -971,18 +978,18 @@
                         return ResourceLoader.GetResource(session, ""errors.noinput.businesskey"");
                 }
 
-                be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
                 BindingTemplates bt = new BindingTemplates();
-                bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
                 if (!bt.getBindingTemplate().isEmpty()) {
                         be.setBindingTemplates(bt);
                 }
 
-                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
                 CategoryBag cb = new CategoryBag();
-                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, locale));
-                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, locale));
+                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, getLocale()));
+                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, getLocale()));
 
                 if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
                         be.setCategoryBag(cb);
@@ -1081,20 +1088,20 @@
                                 be.setBusinessServices(GetBusinessDetails.getBusinessServices());
                         }
                 }
-                be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
-                be.setContacts(Builders.BuildContacts(request.getParameterMap(), ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                be.setContacts(Builders.BuildContacts(request.getParameterMap(), ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
-                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
-                be.setDiscoveryURLs(Builders.BuildDisco(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DISCOVERYURL), PostBackConstants.DISCOVERYURL, locale));
+                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+                be.setDiscoveryURLs(Builders.BuildDisco(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DISCOVERYURL), PostBackConstants.DISCOVERYURL, getLocale()));
                 CategoryBag cb = new CategoryBag();
-                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, locale));
-                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, locale));
+                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, getLocale()));
+                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, getLocale()));
 
                 if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
                         be.setCategoryBag(cb);
                 }
-                be.setIdentifierBag(Builders.BuildIdentBag(Builders.MapFilter(request.getParameterMap(), PostBackConstants.IDENT_KEY_REF), PostBackConstants.IDENT_KEY_REF, locale));
+                be.setIdentifierBag(Builders.BuildIdentBag(Builders.MapFilter(request.getParameterMap(), PostBackConstants.IDENT_KEY_REF), PostBackConstants.IDENT_KEY_REF, getLocale()));
                 return SaveBusinessDetails(be);
         }
 
@@ -1816,7 +1823,7 @@
                                         sb.append(""</a>"");
 
                                         sb.append(""</td><td>"");
-                                        sb.append(Printers.PrintPublisherAssertion(findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getSharedRelationships(), locale));
+                                        sb.append(Printers.PrintPublisherAssertion(findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getSharedRelationships(), getLocale()));
                                         sb.append(""</td></tr>"");
                                 }
                                 sb.append(""</table>"");
@@ -2217,17 +2224,17 @@
                         be.setDeleted(Boolean.FALSE);
                 }
 
-                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
-                be.getOverviewDoc().addAll(Builders.BuildOverviewDocs(Builders.MapFilter(request.getParameterMap(), PostBackConstants.OVERVIEW), PostBackConstants.OVERVIEW, ResourceLoader.GetResource(session, ""items.clicktoedit""), locale));
+                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+                be.getOverviewDoc().addAll(Builders.BuildOverviewDocs(Builders.MapFilter(request.getParameterMap(), PostBackConstants.OVERVIEW), PostBackConstants.OVERVIEW, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
 
                 CategoryBag cb = new CategoryBag();
-                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, locale));
-                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, locale));
+                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, getLocale()));
+                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, getLocale()));
 
                 if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
                         be.setCategoryBag(cb);
                 }
-                be.setIdentifierBag(Builders.BuildIdentBag(Builders.MapFilter(request.getParameterMap(), PostBackConstants.IDENT_KEY_REF), PostBackConstants.IDENT_KEY_REF, locale));
+                be.setIdentifierBag(Builders.BuildIdentBag(Builders.MapFilter(request.getParameterMap(), PostBackConstants.IDENT_KEY_REF), PostBackConstants.IDENT_KEY_REF, getLocale()));
 
                 return SaveTModel(be);
 
@@ -3823,4 +3830,47 @@
         public boolean isAdminLocalhostOnly() {
                 return clientConfig.getConfiguration().getBoolean(PROP_ADMIN_LOCALHOST_ONLY, true);
         }
+        
+        public String SaveBindingTemplate(HttpServletRequest request) {
+
+                BindingTemplate be = new BindingTemplate();
+                be.setServiceKey(request.getParameter(PostBackConstants.SERVICEKEY).trim());
+                be.setBindingKey(request.getParameter(PostBackConstants.BINDINGKEY).trim());
+                if (be.getBindingKey().equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
+                        be.setBindingKey(null);
+                }
+                be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+                CategoryBag cb = new CategoryBag();
+                cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF, getLocale()));
+                cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP, getLocale()));
+
+                if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
+                        be.setCategoryBag(cb);
+                }
+                Map map = request.getParameterMap();
+                String[] t = (String[]) map.get(PostBackConstants.HOSTINGREDIRECTOR);
+                if (t != null && t.length > 0) {
+                        be.setHostingRedirector(new HostingRedirector());
+                        be.getHostingRedirector().setBindingKey(t[0]);
+                }
+                AccessPoint ap = new AccessPoint();
+                t = (String[]) map.get(PostBackConstants.ACCESSPOINT_TYPE);
+                if (t != null && t.length > 0) {
+                        ap.setUseType(t[0]);
+                }
+                t = (String[]) map.get(PostBackConstants.ACCESSPOINT_VALUE);
+                if (t != null && t.length > 0) {
+                        ap.setValue(t[0]);
+                }
+                if (ap.getValue() != null) {
+                        be.setAccessPoint(ap);
+                }
+                
+                be.setTModelInstanceDetails(Builders.BuildTmodelInstanceDetails(
+                     Builders.MapFilter(map, PostBackConstants.TMODELINSTANCE), 
+                     PostBackConstants.TMODELINSTANCE, ResourceLoader.GetResource(session, ""items.clicktoedit""), getLocale()));
+
+                //JAXB.marshal(be, System.out);
+                return SaveBindingTemplate(be);
+        }
 }
"
juddi,e162a832e6bc6ed8a33a6efbd3373c97d842b839,"JUDDI-847 done
JUDDI-806 binding editor is now separate, service editor changes are still required

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566211 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-09 04:24:50,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
index 8a15702..59c1c08 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
@@ -450,7 +450,7 @@
          * email
          *
          * @param map
-         * @param prefix 
+         * @param prefix
          * @return list
          */
         public static List<Email> BuildEmail(Map map, String prefix, String locale) {
@@ -484,10 +484,10 @@
          *
          * @param map
          * @param prefix
-         * @param cte
+         * @param cte click to edit constant
          * @param locale
          * @return list
-         */ 
+         */
         public static List<Description> BuildDescription(Map map, String prefix, String cte, String locale) {
                 List<Description> ret = new ArrayList();
                 Iterator it = map.keySet().iterator();
@@ -595,7 +595,7 @@
          *
          * @param map
          * @param prefix
-         * @param cte
+         * @param cte click to edit constant
          * @return list
          */
         public static List<BindingTemplate> BuildBindingTemplates(Map map, String prefix, String cte, String locale) {
@@ -657,7 +657,7 @@
                 return ret;
         }
 
-        private static TModelInstanceDetails BuildTmodelInstanceDetails(Map map, String prefix, String cte, String locale) {
+        public static TModelInstanceDetails BuildTmodelInstanceDetails(Map map, String prefix, String cte, String locale) {
                 TModelInstanceDetails ret = new TModelInstanceDetails();
 
                 Iterator it = map.keySet().iterator();
@@ -671,7 +671,9 @@
                                 if (!processedIndexes.contains(index)) {
                                         TModelInstanceInfo tmi = new TModelInstanceInfo();
                                         String[] t = (String[]) map.get(prefix + index + PostBackConstants.KEYNAME);
-                                        tmi.setTModelKey(t[0]);
+                                        if (t != null && t.length > 0) {
+                                                tmi.setTModelKey(t[0]);
+                                        }
 
                                         tmi.setInstanceDetails(BuildInstanceDetails(MapFilter(map, prefix + index + PostBackConstants.INSTANCE), prefix + index + PostBackConstants.INSTANCE, cte, locale));
 
@@ -704,16 +706,27 @@
 
                                         String[] t = (String[]) map.get(prefix + index + PostBackConstants.VALUE);
                                         //pn.setValue(t[0]);
-                                        ret.setInstanceParms(t[0]);
+                                        if (t != null && t.length > 0) {
+                                                ret.setInstanceParms(t[0]);
+                                        }
+                                        if (cte.equalsIgnoreCase(ret.getInstanceParms())) {
+                                                ret.setInstanceParms(null);
+                                        }
 
                                         ret.getDescription().addAll(BuildDescription(MapFilter(map, prefix + index + PostBackConstants.INSTANCE + PostBackConstants.DESCRIPTION), prefix + index + PostBackConstants.INSTANCE + PostBackConstants.DESCRIPTION, cte, locale));
                                         ret.getOverviewDoc().addAll(BuildOverviewDocs(MapFilter(map, prefix + index + PostBackConstants.OVERVIEW), prefix + index + PostBackConstants.OVERVIEW, cte, locale));
+
                                         processedIndexes.add(index);
                                 }
                         } else {
                                 throw new IllegalArgumentException(ResourceLoader.GetResource(locale, ""errors.invaliddata""));
                         }
                 }
+                if (ret.getInstanceParms() == null
+                     && ret.getDescription().isEmpty()
+                     && ret.getOverviewDoc().isEmpty()) {
+                        return null;
+                }
                 return ret;
         }
 
@@ -745,7 +758,7 @@
                                 outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alerttypeinvalid""));
                                 return null;
                         }
-                        if (sub == null) { 
+                        if (sub == null) {
                                 return null;
                         }
 
@@ -861,7 +874,7 @@
                         }
                         if (alertCritera != null) {
                                 if (alertCritera.equalsIgnoreCase(""binding"")) {
-                    //sub.getSubscriptionFilter().setFindBinding(new FindBinding());
+                                        //sub.getSubscriptionFilter().setFindBinding(new FindBinding());
                                         //sub.getSubscriptionFilter().getFindBinding().
                                 } else if (alertCritera.equalsIgnoreCase(""service"")) {
                                         sub.getSubscriptionFilter().setFindService(new FindService());
"
juddi,0e99c78a3dc7771cb92c435ce61063ce80663f98,"JUDDI-845 fixed, also max entities was not rendered correctly
JUDDI-833 fixed
JUDDI-844 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566091 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-08 18:42:45,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 2e1d92a..0feba96 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -701,7 +701,7 @@
                         }
 
                 } catch (Exception ex) {
-                        return ToErrorAlert(HandleException(ex));
+                        return (HandleException(ex));
                 }
 
                 if (findBusiness == null || findBusiness.getBusinessInfos() == null) {
@@ -1297,12 +1297,12 @@
          * @param ex
          * @return string
          */
-        private String HandleException(Exception ex) {
+        public String HandleException(Exception ex) {
                 if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                         log.error(ex.getMessage() + (f.detail != null && f.detail.getMessage() != null ? StringEscapeUtils.escapeHtml(f.detail.getMessage()) : """"));
                         log.debug(ex.getMessage(), ex);
-                        return ResourceLoader.GetResource(session, ""errors.uddi"") + "" "" + StringEscapeUtils.escapeHtml(ex.getMessage()) + "" "" + (f.detail != null && f.detail.getMessage() != null ? StringEscapeUtils.escapeHtml(f.detail.getMessage()) : """") + "" "" + ex.getClass().getCanonicalName();
+                        return ResourceLoader.GetResource(session, ""errors.generic"") + "" "" + StringEscapeUtils.escapeHtml(ex.getMessage()) + "" "" + (f.detail != null && f.detail.getMessage() != null ? StringEscapeUtils.escapeHtml(f.detail.getMessage()) : """") + "" "" + ex.getClass().getCanonicalName();
                 } else if (ex instanceof RemoteException) {
                         RemoteException f = (RemoteException) ex;
                         log.error(""RemoteException "" + ex.getMessage());
@@ -2414,7 +2414,7 @@
          * Removes/deletes a subscription
          *
          * @param key
-         * @return sucess or failure message
+         * @return success or failure message
          */
         public String RemoveSubscription(String key) {
                 DeleteSubscription ds = new DeleteSubscription();
@@ -2706,7 +2706,7 @@
          * @param fromkey
          * @param keyname
          * @param keyvalue
-         * @return status msg
+         * @return status msg, expected value is actions.saved
          */
         public String AddPublisherAssertion(String tokey, String fromkey, String tmodelkey, String keyname, String keyvalue) {
                 // List<PublisherAssertion> x = GetPublisherAssertions();
"
juddi,0e99c78a3dc7771cb92c435ce61063ce80663f98,"JUDDI-845 fixed, also max entities was not rendered correctly
JUDDI-833 fixed
JUDDI-844 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566091 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-08 18:42:45,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
index 95134d5..353332b 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
@@ -163,6 +163,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getGetBindingDetail() != null && !sub.getSubscriptionFilter().getGetBindingDetail().getBindingKey().isEmpty()) {
             return "" active "";
@@ -174,7 +177,9 @@
         if (sub == null) {
             return """";
         }
-
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
         if (sub.getSubscriptionFilter().getGetBusinessDetail() != null && !sub.getSubscriptionFilter().getGetBusinessDetail().getBusinessKey().isEmpty()) {
             return "" active "";
         }
@@ -185,6 +190,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
         if (sub.getSubscriptionFilter().getGetServiceDetail() != null && !sub.getSubscriptionFilter().getGetServiceDetail().getServiceKey().isEmpty()) {
             return "" active "";
         }
@@ -195,7 +203,7 @@
         if (sub == null) {
             return """";
         }
-        if (sub.getSubscriptionKey() == null) {
+        if (sub.getSubscriptionFilter() == null) {
             return """";
         }
         if (sub.getSubscriptionFilter().getGetTModelDetail() != null && !sub.getSubscriptionFilter().getGetTModelDetail().getTModelKey().isEmpty()) {
@@ -208,6 +216,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getGetAssertionStatusReport() != null && sub.getSubscriptionFilter().getGetAssertionStatusReport().getCompletionStatus() != null) {
             return "" active "";
@@ -230,6 +241,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getFindBinding() != null) {
             return "" active "";
@@ -241,6 +255,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getFindRelatedBusinesses() != null) {
             return "" active "";
@@ -252,6 +269,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getFindService() != null) {
             return "" active "";
@@ -263,6 +283,9 @@
         if (sub == null) {
             return """";
         }
+        if (sub.getSubscriptionFilter() == null) {
+            return """";
+        }
 
         if (sub.getSubscriptionFilter().getFindTModel() != null) {
             return "" active "";
"
juddi,ebae76007d3cd94acfdd7ae8dfa201c408d98e88,"JUDDI-846 fixed (again)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566063 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-08 17:38:57,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
index ffe379c..8a15702 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
@@ -740,12 +740,12 @@
                         if (alertType.equalsIgnoreCase(""specificItem"")) {
                                 sub = BuildClientSubscriptionSpecificItem(map, outmsg, (String) session.getAttribute(""locale""));
                         } else if (alertType.equalsIgnoreCase(""searchResults"")) {
-                                sub = BuildClientSubscriptionSearchResults(map, outmsg);
+                                sub = BuildClientSubscriptionSearchResults(map, outmsg, session);
                         } else {
                                 outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alerttypeinvalid""));
                                 return null;
                         }
-                        if (sub == null) {
+                        if (sub == null) { 
                                 return null;
                         }
 
@@ -819,17 +819,17 @@
                                         sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
                                         sub.getSubscriptionFilter().getGetAssertionStatusReport().setCompletionStatus(CompletionStatus.valueOf(((String[]) map.get(""assertionStatus""))[0]));
                                 } else if (alertCritera.equalsIgnoreCase(""relatedBusiness"")) {
-                                        outmsg.set(""relatedBusiness is not supported for single item subscriptions"");
+                                        outmsg.set(ResourceLoader.GetResource(locale, ""errors.subscription.relatedbiz""));
                                         return null;
                                 } else if (alertCritera.equalsIgnoreCase(""tmodel"")) {
                                         sub.getSubscriptionFilter().setGetTModelDetail(new GetTModelDetail());
                                         sub.getSubscriptionFilter().getGetTModelDetail().getTModelKey().addAll(keys);
                                 } else {
-                                        outmsg.set(""alert critera invalid"");
+                                        outmsg.set(ResourceLoader.GetResource(locale, ""errors.subscription.alertcriteriainvalid""));
                                         return null;
                                 }
                         } else {
-                                outmsg.set(""alert critera not defined"");
+                                outmsg.set(ResourceLoader.GetResource(locale, ""errors.subscription.alertcriteriainvalid""));
                                 return null;
                         }
                         return sub;
@@ -840,7 +840,7 @@
                 }
         }
 
-        private static Subscription BuildClientSubscriptionSearchResults(Map map, AtomicReference<String> outmsg) {
+        private static Subscription BuildClientSubscriptionSearchResults(Map map, AtomicReference<String> outmsg, HttpSession session) {
                 try {
                         Subscription sub = new Subscription();
                         String alertCritera = ((String[]) map.get(""alertCriteraMultipleItem""))[0];
@@ -885,11 +885,11 @@
                                         sub.getSubscriptionFilter().getFindTModel().setFindQualifiers(fq);
                                         sub.getSubscriptionFilter().getFindTModel().setName(name);
                                 } else {
-                                        outmsg.set(""alert critera invalid"");
+                                        outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alertcriteriainvalid""));
                                         return null;
                                 }
                         } else {
-                                outmsg.set(""alert critera not defined"");
+                                outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alertcriteriainvalid""));
                                 return null;
                         }
                         return sub;
"
juddi,4f99a04028ff0a4ee93521498f4c16cbe1220daf,"JUDDI-846 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1566059 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-08 17:28:34,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
index 96196d0..ffe379c 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
@@ -734,7 +734,7 @@
                 try {
                         String alertType = ((String[]) map.get(""alertType""))[0];
                         if (alertType == null) {
-                                outmsg.set(""alertType not defined"");
+                                outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alerttypeinvalid""));
                                 return null;
                         }
                         if (alertType.equalsIgnoreCase(""specificItem"")) {
@@ -742,7 +742,7 @@
                         } else if (alertType.equalsIgnoreCase(""searchResults"")) {
                                 sub = BuildClientSubscriptionSearchResults(map, outmsg);
                         } else {
-                                outmsg.set(""alertType invalid"");
+                                outmsg.set(ResourceLoader.GetResource(session, ""errors.subscription.alerttypeinvalid""));
                                 return null;
                         }
                         if (sub == null) {
"
juddi,7533e3329c55ccdae284a67cd4f6460d152a0769,"JUDDI-835 fixed
JUDDI-832 added but needs testing, some minor corrections to java mappings

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565898 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-08 03:21:26,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
index 60efe65..87e306d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
@@ -109,9 +109,9 @@
  * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class MapUDDIv3Tov2 {
-        
+
         public static final String VERSION = ""2.0"";
-        
+
         public static org.uddi.api_v2.BusinessEntity MapBusiness(org.uddi.api_v3.BusinessEntity be, String operator) {
                 if (be == null) {
                         return null;
@@ -124,7 +124,7 @@
                 item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
                 item.setOperator(operator);
                 item.getDescription().addAll(MapDescription(be.getDescription()));
-                
+
                 item.getName().addAll(MapName(be.getName()));
                 if (be.getBusinessServices() != null && !be.getBusinessServices().getBusinessService().isEmpty()) {
                         item.setBusinessServices(new BusinessServices());
@@ -132,7 +132,7 @@
                 }
                 return item;
         }
-        
+
         public static org.uddi.api_v2.BusinessService MapService(org.uddi.api_v3.BusinessService be) {
                 if (be == null) {
                         return null;
@@ -149,7 +149,7 @@
                 }
                 return item;
         }
-        
+
         public static List<org.uddi.api_v2.BusinessService> MapService(List<org.uddi.api_v3.BusinessService> be) {
                 if (be == null) {
                         return null;
@@ -160,24 +160,24 @@
                 }
                 return item;
         }
-        
+
         public static org.uddi.api_v2.BindingTemplate MapBinding(org.uddi.api_v3.BindingTemplate be) {
                 if (be == null) {
                         return null;
                 }
                 BindingTemplate item = new org.uddi.api_v2.BindingTemplate();
                 item.getDescription().addAll(MapDescription(be.getDescription()));
-                
+
                 item.setBindingKey(be.getBindingKey());
                 item.setServiceKey(be.getServiceKey());
                 item.setAccessPoint(MapAccessPoint(be.getAccessPoint()));
                 item.setHostingRedirector(MapHostingRedir(be.getHostingRedirector()));
-                
+
                 item.setTModelInstanceDetails(MapTModelInstanceDetails(be.getTModelInstanceDetails()));
-                
+
                 return item;
         }
-        
+
         public static List<org.uddi.api_v2.BindingTemplate> MapBinding(List<org.uddi.api_v3.BindingTemplate> be) {
                 if (be == null) {
                         return null;
@@ -188,7 +188,7 @@
                 }
                 return item;
         }
-        
+
         public static org.uddi.api_v2.TModel MapTModel(org.uddi.api_v3.TModel be) {
                 if (be == null) {
                         return null;
@@ -202,7 +202,7 @@
                 item.setOverviewDoc(MapOverviewDoc(be.getOverviewDoc()));
                 return item;
         }
-        
+
         private static List<Name> MapName(List<org.uddi.api_v3.Name> name) {
                 List<Name> items = new ArrayList<Name>();
                 for (int i = 0; i < name.size(); i++) {
@@ -211,7 +211,7 @@
                 }
                 return items;
         }
-        
+
         private static CategoryBag MapCategoryBag(org.uddi.api_v3.CategoryBag categoryBag) {
                 if (categoryBag == null) {
                         return null;
@@ -220,7 +220,7 @@
                 c.getKeyedReference().addAll(MapKeyedReference(categoryBag.getKeyedReference()));
                 return c;
         }
-        
+
         private static List<Description> MapDescription(List<org.uddi.api_v3.Description> description) {
                 List<Description> ret = new ArrayList<Description>();
                 if (description == null || description.isEmpty()) {
@@ -230,11 +230,11 @@
                         ret.add(new Description(description.get(i).getValue(), description.get(i).getLang()));
                 }
                 return ret;
-                
+
         }
-        
+
         private static IdentifierBag MapIdentBag(org.uddi.api_v3.IdentifierBag identifierBag) {
-                
+
                 if (identifierBag == null) {
                         return null;
                 }
@@ -254,22 +254,22 @@
                         return null;
                 }
                 OverviewDoc r = new OverviewDoc();
-                
+
                 r.getDescription().addAll(MapDescription(overviewDoc.get(0).getDescription()));
                 if (overviewDoc.get(0).getOverviewURL() != null && overviewDoc.get(0).getOverviewURL().getValue() != null) {
                         r.setOverviewURL(overviewDoc.get(0).getOverviewURL().getValue());
                 }
-                
+
                 return r;
         }
-        
+
         private static AccessPoint MapAccessPoint(org.uddi.api_v3.AccessPoint accessPoint) {
                 if (accessPoint == null) {
                         return null;
                 }
                 return new AccessPoint(accessPoint.getValue(), MapURLType(accessPoint.getValue()));
         }
-        
+
         private static HostingRedirector MapHostingRedir(org.uddi.api_v3.HostingRedirector hostingRedirector) {
                 if (hostingRedirector == null) {
                         return null;
@@ -278,7 +278,7 @@
                 r.setBindingKey(hostingRedirector.getBindingKey());
                 return r;
         }
-        
+
         private static TModelInstanceDetails MapTModelInstanceDetails(org.uddi.api_v3.TModelInstanceDetails tModelInstanceDetails) {
                 if (tModelInstanceDetails == null) {
                         return new TModelInstanceDetails();
@@ -287,7 +287,7 @@
                 r.getTModelInstanceInfo().addAll(MapTModelInstanceInfo(tModelInstanceDetails.getTModelInstanceInfo()));
                 return r;
         }
-        
+
         private static List<KeyedReference> MapKeyedReference(List<org.uddi.api_v3.KeyedReference> keyedReference) {
                 List<KeyedReference> r = new ArrayList<KeyedReference>();
                 if (keyedReference == null) {
@@ -298,7 +298,7 @@
                 }
                 return r;
         }
-        
+
         private static URLType MapURLType(String url) {
                 if (url == null) {
                         return URLType.OTHER;
@@ -323,7 +323,7 @@
                 }
                 return URLType.OTHER;
         }
-        
+
         private static List<TModelInstanceInfo> MapTModelInstanceInfo(List<org.uddi.api_v3.TModelInstanceInfo> tModelInstanceInfo) {
                 List<TModelInstanceInfo> r = new ArrayList<TModelInstanceInfo>();
                 if (tModelInstanceInfo == null) {
@@ -343,7 +343,7 @@
                 }
                 return r;
         }
-        
+
         public static FindBinding MapFindBinding(org.uddi.api_v3.FindBinding body) {
                 FindBinding r = new FindBinding();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
@@ -362,9 +362,9 @@
                 }
                 r.setGeneric(VERSION);
                 return r;
-                
+
         }
-        
+
         public static FindBusiness MapFindBusiness(org.uddi.api_v3.FindBusiness body) {
                 FindBusiness r = new FindBusiness();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
@@ -380,7 +380,7 @@
                 }
                 return r;
         }
-        
+
         public static FindRelatedBusinesses MapFindRelatedBusiness(org.uddi.api_v3.FindRelatedBusinesses body) {
                 FindRelatedBusinesses r = new FindRelatedBusinesses();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
@@ -391,12 +391,12 @@
                              body.getKeyedReference().getKeyName(),
                              body.getKeyedReference().getKeyValue()));
                 }
-                
+
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static FindService MapFindService(org.uddi.api_v3.FindService body) {
                 FindService r = new FindService();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
@@ -404,57 +404,57 @@
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
-                
+
                 r.setBusinessKey(body.getBusinessKey());
                 r.getName().addAll(MapName(body.getName()));
                 return r;
         }
-        
+
         public static FindTModel MapFindTModel(org.uddi.api_v3.FindTModel body) {
                 FindTModel r = new FindTModel();
                 r.setFindQualifiers(MapFindQualifiers(body.getFindQualifiers()));
                 r.setMaxRows(body.getMaxRows());
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
-                
+
                 if (body.getName() != null) {
                         r.setName(new Name(body.getName().getValue(), body.getName().getLang()));
                 }
                 return r;
         }
-        
+
         public static org.uddi.api_v2.GetBindingDetail MapGetBindingDetail(org.uddi.api_v3.GetBindingDetail body) {
                 GetBindingDetail r = new GetBindingDetail();
                 r.getBindingKey().addAll(body.getBindingKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static org.uddi.api_v2.GetBusinessDetail MapGetBusinessDetail(org.uddi.api_v3.GetBusinessDetail body) {
                 GetBusinessDetail r = new GetBusinessDetail();
                 r.getBusinessKey().addAll(body.getBusinessKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static org.uddi.api_v2.GetServiceDetail MapGetServiceDetail(org.uddi.api_v3.GetServiceDetail body) {
                 GetServiceDetail r = new GetServiceDetail();
                 r.getServiceKey().addAll(body.getServiceKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static org.uddi.api_v2.GetTModelDetail MapGetTModelDetail(org.uddi.api_v3.GetTModelDetail body) {
                 GetTModelDetail r = new GetTModelDetail();
                 r.getTModelKey().addAll(body.getTModelKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static AddPublisherAssertions MapAddPublisherAssertions(org.uddi.api_v3.AddPublisherAssertions body) {
                 if (body == null) {
                         return null;
@@ -462,31 +462,31 @@
                 AddPublisherAssertions r = new AddPublisherAssertions();
                 r.setAuthInfo(body.getAuthInfo());
                 r.setGeneric(VERSION);
-                
+
                 r.getPublisherAssertion().addAll(MapPublisherAssertion(body.getPublisherAssertion()));
                 return r;
-                
+
         }
-        
+
         public static DeleteBinding MapDeleteBinding(org.uddi.api_v3.DeleteBinding body) {
                 DeleteBinding r = new DeleteBinding();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBindingKey().addAll(body.getBindingKey());
                 return r;
-                
+
         }
-        
+
         public static DeleteBusiness MapDeleteBusiness(org.uddi.api_v3.DeleteBusiness body) {
                 DeleteBusiness r = new DeleteBusiness();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBusinessKey().addAll(body.getBusinessKey());
                 return r;
         }
-        
+
         public static DeletePublisherAssertions MapDeletePublisherAssertions(org.uddi.api_v3.DeletePublisherAssertions body) {
                 if (body == null) {
                         return null;
@@ -496,52 +496,52 @@
                 r.getPublisherAssertion().addAll(MapPublisherAssertion(body.getPublisherAssertion()));
                 return r;
         }
-        
+
         public static DeleteService MapDeleteService(org.uddi.api_v3.DeleteService body) {
                 DeleteService r = new DeleteService();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getServiceKey().addAll(body.getServiceKey());
                 return r;
         }
-        
+
         public static DeleteTModel MapDeleteTModel(org.uddi.api_v3.DeleteTModel body) {
                 DeleteTModel r = new DeleteTModel();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getTModelKey().addAll(body.getTModelKey());
                 return r;
         }
-        
+
         public static SaveBinding MapSaveBinding(org.uddi.api_v3.SaveBinding body) {
                 SaveBinding r = new SaveBinding();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBindingTemplate().addAll(MapBinding(body.getBindingTemplate()));
                 return r;
         }
-        
+
         public static SaveBusiness MapSaveBusiness(org.uddi.api_v3.SaveBusiness body) {
                 SaveBusiness r = new SaveBusiness();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBusinessEntity().addAll(MapBusinessList(body.getBusinessEntity(), null));
                 return r;
         }
-        
+
         public static SaveService MapSaveService(org.uddi.api_v3.SaveService body) {
                 SaveService r = new SaveService();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBusinessService().addAll(MapService(body.getBusinessService()));
                 return r;
         }
-        
+
         public static SaveTModel MapSaveTModel(org.uddi.api_v3.SaveTModel body) {
                 SaveTModel r = new SaveTModel();
                 r.setGeneric(VERSION);
@@ -549,23 +549,23 @@
                 r.getTModel().addAll(MapTModelList(body.getTModel()));
                 return r;
         }
-        
+
         public static GetPublisherAssertions MapGetPublisherAssertions(String authInfo) {
                 GetPublisherAssertions r = new GetPublisherAssertions();
                 r.setAuthInfo(authInfo);
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         public static GetRegisteredInfo MapGetRegisteredInfo(org.uddi.api_v3.GetRegisteredInfo body) {
                 GetRegisteredInfo r = new GetRegisteredInfo();
                 r.setAuthInfo(body.getAuthInfo());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
-        
+
         private static FindQualifiers MapFindQualifiers(org.uddi.api_v3.FindQualifiers findQualifiers) {
                 if (findQualifiers == null || findQualifiers.getFindQualifier().isEmpty()) {
                         return null;
@@ -574,86 +574,66 @@
                 for (int i = 0; i < findQualifiers.getFindQualifier().size(); i++) {
                         if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_HTTP)) {
                                 r.getFindQualifier().add(""uuid:68DE9E80-AD09-469D-8A37-088422BFBC36"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_EMAIL)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_EMAIL)) {
                                 r.getFindQualifier().add(""uuid:93335D49-3EFB-48A0-ACEA-EA102B60DDC6"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_FTP)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_FTP)) {
                                 r.getFindQualifier().add(""uuid:5FCF5CD0-629A-4C50-8B16-F94E9CF2A674"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_FAX)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_FAX)) {
                                 r.getFindQualifier().add(""uuid:1A2B00BE-6E2C-42F5-875B-56F32686E0E7"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_POTS)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.TRANSPORT_POTS)) {
                                 r.getFindQualifier().add(""uuid:38E12427-5536-4260-A6F9-B5B530E63A07"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.IS_REPLACED_BY)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.IS_REPLACED_BY)) {
                                 r.getFindQualifier().add(""uuid:E59AE320-77A5-11D5-B898-0004AC49CC1E"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OWNING_BUSINESS)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OWNING_BUSINESS)) {
                                 r.getFindQualifier().add(""uuid:4064C064-6D14-4F35-8953-9652106476A9"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.RELATIONSHIPS)) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.RELATIONSHIPS)) {
                                 r.getFindQualifier().add(""uuid:807A2C6A-EE22-470D-ADC7-E0424A337C03"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:nodes"")) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:nodes"")) {
                                 r.getFindQualifier().add(""uuid:327A56F0-3299-4461-BC23-5CD513E95C55"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:general_keywords"")) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:general_keywords"")) {
                                 r.getFindQualifier().add(""uuid:A035A07C-F362-44dd-8F95-E2B134BF43B4"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:types"")) {
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(""uddi:uddi.org:categorization:types"")) {
                                 r.getFindQualifier().add(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.EXACT_MATCH)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.EXACT_MATCH)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.EXACT_MATCH_TMODEL)) {
                                 r.getFindQualifier().add(""exactNameMatch"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_SENSITIVE_MATCH)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_SENSITIVE_MATCH)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.CASE_SENSITIVE_MATCH_TMODEL)) {
                                 r.getFindQualifier().add(""caseSensitiveMatch"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_ALL_KEYS)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_ALL_KEYS)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_ALL_KEYS_TMODEL)) {
                                 r.getFindQualifier().add(""orAllKeys"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_LIKE_KEYS)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_LIKE_KEYS)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.OR_LIKE_KEYS_TMODEL)) {
                                 r.getFindQualifier().add(""orLikeKeys"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.AND_ALL_KEYS)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.AND_ALL_KEYS)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.AND_ALL_KEYS_TMODEL)) {
                                 r.getFindQualifier().add(""andAllKeys"");
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_ASC)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_ASC)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_ASC_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.SORT_BY_DATE_ASC);
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_DESC)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_DESC)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_DATE_DESC_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.SORT_BY_DATE_DESC);
-                        }
-                        
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_ASC)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_ASC)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_ASC_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.SORT_BY_NAME_ASC);
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_DESC)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_DESC)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SORT_BY_NAME_DESC_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.SORT_BY_NAME_DESC);
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SERVICE_SUBSET)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SERVICE_SUBSET)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.SERVICE_SUBSET_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.SERVICE_SUBSET);
-                        }
-                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.COMBINE_CATEGORY_BAGS)
+                        } else if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.COMBINE_CATEGORY_BAGS)
                              || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(UDDIConstants.COMBINE_CATEGORY_BAGS_TMODEL)) {
                                 r.getFindQualifier().add(UDDIConstants.COMBINE_CATEGORY_BAGS);
+                        } else {
+                                r.getFindQualifier().add(findQualifiers.getFindQualifier().get(i));
                         }
                 }
                 return r;
         }
-        
+
         private static TModelBag MapTModelBag(org.uddi.api_v3.TModelBag tModelBag) {
                 if (tModelBag == null || tModelBag.getTModelKey().isEmpty()) {
                         return null;
@@ -661,9 +641,9 @@
                 TModelBag r = new TModelBag();
                 r.getTModelKey().addAll(tModelBag.getTModelKey());
                 return r;
-                
+
         }
-        
+
         private static DiscoveryURLs MapDiscoveryURLs(org.uddi.api_v3.DiscoveryURLs discoveryURLs) {
                 if (discoveryURLs == null) {
                         return null;
@@ -676,9 +656,9 @@
                         r.getDiscoveryURL().add(d);
                 }
                 return r;
-                
+
         }
-        
+
         private static List<BusinessEntity> MapBusinessList(List<org.uddi.api_v3.BusinessEntity> businessEntity, String operator) {
                 List<BusinessEntity> r = new ArrayList<BusinessEntity>();
                 if (businessEntity == null) {
@@ -689,31 +669,31 @@
                 }
                 return r;
         }
-        
+
         private static List<TModel> MapTModelList(List<org.uddi.api_v3.TModel> tModel) {
                 List<TModel> r = new ArrayList<TModel>();
                 if (tModel == null) {
                         return r;
                 }
-                
+
                 for (int i = 0; i < tModel.size(); i++) {
                         r.add(MapTModel(tModel.get(i)));
                 }
                 return r;
         }
-        
+
         public static SetPublisherAssertions MapSetPublisherAssertions(List<org.uddi.api_v3.PublisherAssertion> value) {
                 if (value == null) {
                         return null;
                 }
                 SetPublisherAssertions r = new SetPublisherAssertions();
                 r.setGeneric(VERSION);
-                
+
                 r.getPublisherAssertion().addAll(MapPublisherAssertion(value));
                 return r;
-                
+
         }
-        
+
         public static BindingDetail MapBindingDetail(org.uddi.api_v3.BindingDetail findBinding, String operator) {
                 if (findBinding == null) {
                         return null;
@@ -729,7 +709,7 @@
                 r.getBindingTemplate().addAll(MapBinding(findBinding.getBindingTemplate()));
                 return r;
         }
-        
+
         public static DispositionReport MapException(DispositionReportFaultMessage ex, String operator) {
                 if (ex == null) {
                         return null;
@@ -737,7 +717,7 @@
                 DispositionReport r = new DispositionReport(ex.getMessage() + (ex.detail != null ? ex.detail.getMessage() : """"), MapDispositionReport(ex.getFaultInfo(), operator));
                 return r;
         }
-        
+
         private static org.uddi.api_v2.DispositionReport MapDispositionReport(org.uddi.api_v3.DispositionReport faultInfo, String operator) {
                 if (faultInfo == null) {
                         return null;
@@ -749,7 +729,7 @@
                 r.getResult().addAll(MapResults(faultInfo.getResult()));
                 return r;
         }
-        
+
         private static List<Result> MapResults(List<org.uddi.api_v3.Result> result) {
                 List<Result> r = new ArrayList<Result>();
                 if (result == null) {
@@ -780,12 +760,12 @@
                         x.getErrInfo().setValue(result.get(i).getErrInfo().getValue());
                         r.add(x);
                 }
-                
+
                 return r;
         }
-        
+
         public static BusinessList MapBusinessListEntity(org.uddi.api_v3.BusinessList findBusiness, String operator) {
-                
+
                 if (findBusiness == null) {
                         return null;
                 }
@@ -800,7 +780,7 @@
                 }
                 return r;
         }
-        
+
         public static RelatedBusinessesList MapRelatedBusinessList(org.uddi.api_v3.RelatedBusinessesList findRelatedBusinesses, String operator) {
                 if (findRelatedBusinesses == null) {
                         return null;
@@ -816,7 +796,7 @@
                 }
                 r.setRelatedBusinessInfos(new RelatedBusinessInfos());
                 if (findRelatedBusinesses.getRelatedBusinessInfos() != null) {
-                        
+
                         for (int i = 0; i < findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().size(); i++) {
                                 RelatedBusinessInfo x = new RelatedBusinessInfo();
                                 x.setBusinessKey(findRelatedBusinesses.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getBusinessKey());
@@ -827,7 +807,7 @@
                 }
                 return r;
         }
-        
+
         public static ServiceList MapServiceList(org.uddi.api_v3.ServiceList findService, String operator) {
                 if (findService == null) {
                         return null;
@@ -843,13 +823,13 @@
                 }
                 return r;
         }
-        
+
         public static BusinessDetailExt MapBusinessDetailExt(BusinessDetail businessDetail, String operator) {
                 if (businessDetail == null) {
                         return null;
                 }
                 BusinessDetailExt r = new BusinessDetailExt();
-                
+
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
                 if (businessDetail.isTruncated() != null && businessDetail.isTruncated().booleanValue()) {
@@ -859,14 +839,14 @@
                 }
                 for (int i = 0; i < businessDetail.getBusinessEntity().size(); i++) {
                         BusinessEntityExt x = new BusinessEntityExt();
-                        
+
                         x.setBusinessEntity(MapBusiness(businessDetail.getBusinessEntity().get(i), operator));
                         r.getBusinessEntityExt().add(x);
                 }
                 return r;
-                
+
         }
-        
+
         public static ServiceDetail MapServiceDetail(org.uddi.api_v3.ServiceDetail serviceDetail, String operator) {
                 if (serviceDetail == null) {
                         return null;
@@ -881,9 +861,9 @@
                 r.setOperator(operator);
                 r.getBusinessService().addAll(MapService(serviceDetail.getBusinessService()));
                 return r;
-                
+
         }
-        
+
         public static TModelList MapTModelListElement(org.uddi.api_v3.TModelList findTModel, String operator) {
                 TModelList r = new TModelList();
                 r.setGeneric(VERSION);
@@ -893,20 +873,20 @@
                         r.setTruncated(Truncated.FALSE);
                         return r;
                 }
-                
+
                 if (findTModel.isTruncated() != null && findTModel.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
                 }
                 if (findTModel.getTModelInfos() != null) {
-                        
+
                         r.getTModelInfos().getTModelInfo().addAll(MapTModelInfo(findTModel.getTModelInfos().getTModelInfo()));
                 }
-                
+
                 return r;
         }
-        
+
         public static org.uddi.api_v2.BusinessDetail MapBusinessDetail(BusinessDetail businessDetail, String operator) {
                 if (businessDetail == null) {
                         return null;
@@ -919,11 +899,11 @@
                 } else {
                         r.setTruncated(Truncated.FALSE);
                 }
-                
+
                 r.getBusinessEntity().addAll(MapBusinessList(businessDetail.getBusinessEntity(), operator));
                 return r;
         }
-        
+
         public static TModelDetail MapTModelDetail(org.uddi.api_v3.TModelDetail tModelDetail, String operator) {
                 if (tModelDetail == null) {
                         return null;
@@ -937,16 +917,16 @@
                         r.setTruncated(Truncated.FALSE);
                 }
                 r.getTModel().addAll(MapTModelList(tModelDetail.getTModel()));
-                
+
                 return r;
         }
-        
+
         private static BusinessInfos MapBusinessInfos(org.uddi.api_v3.BusinessInfos businessInfos) {
                 BusinessInfos r = new BusinessInfos();
                 if (businessInfos == null || businessInfos.getBusinessInfo().isEmpty()) {
                         return r;
                 }
-                
+
                 for (int i = 0; i < businessInfos.getBusinessInfo().size(); i++) {
                         BusinessInfo x = new BusinessInfo();
                         x.setBusinessKey(businessInfos.getBusinessInfo().get(i).getBusinessKey());
@@ -955,10 +935,10 @@
                         x.getName().addAll(MapName(businessInfos.getBusinessInfo().get(i).getName()));
                         r.getBusinessInfo().add(x);
                 }
-                
+
                 return r;
         }
-        
+
         private static ServiceInfos MapServiceInfos(org.uddi.api_v3.ServiceInfos serviceInfos) {
                 ServiceInfos r = new ServiceInfos();
                 if (serviceInfos == null) {
@@ -973,7 +953,7 @@
                 }
                 return r;
         }
-        
+
         private static List<TModelInfo> MapTModelInfo(List<org.uddi.api_v3.TModelInfo> tModelInfo) {
                 List<TModelInfo> r = new ArrayList<TModelInfo>();
                 if (tModelInfo == null) {
@@ -981,14 +961,14 @@
                 }
                 for (int i = 0; i < tModelInfo.size(); i++) {
                         TModelInfo x = new TModelInfo();
-                        
+
                         x.setTModelKey(tModelInfo.get(i).getTModelKey());
                         x.setName(new Name(tModelInfo.get(i).getName().getValue(), tModelInfo.get(i).getName().getValue()));
                         r.add(x);
                 }
                 return r;
         }
-        
+
         public static RegisteredInfo MapRegisteredInfo(org.uddi.api_v3.RegisteredInfo registeredInfo, String operator) {
                 if (registeredInfo == null) {
                         return null;
@@ -1015,11 +995,11 @@
                         r.setTModelInfos(new TModelInfos());
                         r.getTModelInfos().getTModelInfo().addAll(MapTModelInfo(registeredInfo.getTModelInfos().getTModelInfo()));
                 }
-                
+
                 return r;
-                
+
         }
-        
+
         public static PublisherAssertions MapPublisherAssertions(List<org.uddi.api_v3.PublisherAssertion> publisherAssertions, String operator) {
                 if (publisherAssertions == null) {
                         return null;
@@ -1030,10 +1010,10 @@
                 r.setOperator(operator);
                 return r;
         }
-        
+
         private static List<PublisherAssertion> MapPublisherAssertion(List<org.uddi.api_v3.PublisherAssertion> publisherAssertion) {
                 List<PublisherAssertion> r = new ArrayList<PublisherAssertion>();
-                
+
                 for (int i = 0; i < publisherAssertion.size(); i++) {
                         PublisherAssertion x = new PublisherAssertion();
                         x.setFromKey(publisherAssertion.get(i).getFromKey());
@@ -1047,7 +1027,7 @@
                 }
                 return r;
         }
-        
+
         private static FindQualifiers AddApproximateMatch(FindQualifiers findQualifiers) {
                 if (findQualifiers == null) {
                         findQualifiers = new FindQualifiers();
@@ -1055,7 +1035,7 @@
                 findQualifiers.getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
                 return findQualifiers;
         }
-        
+
         private static boolean ContainsWildCard(List<Name> name) {
                 for (int i = 0; i < name.size(); i++) {
                         if (name.get(i).getValue() != null && name.get(i).getValue().contains(UDDIConstants.WILDCARD)) {
@@ -1075,7 +1055,7 @@
                 }
                 return false;
         }
-        
+
         public static GetAssertionStatusReport MapGetAssertionStatusReport(String authInfo, CompletionStatus completionStatus) {
                 GetAssertionStatusReport r = new GetAssertionStatusReport();
                 r.setAuthInfo(authInfo);
@@ -1096,7 +1076,7 @@
                 r.setGeneric(VERSION);
                 return r;
         }
-        
+
         private static Contacts MapContacts(org.uddi.api_v3.Contacts contacts) {
                 if (contacts == null) {
                         return null;
@@ -1105,9 +1085,9 @@
                 c.getContact().addAll(MapContactList(contacts.getContact()));
                 return c;
         }
-        
+
         private static List<Contact> MapContactList(List<org.uddi.api_v3.Contact> contact) {
-                
+
                 List<Contact> r = new ArrayList<Contact>();
                 if (contact == null) {
                         return r;
@@ -1120,12 +1100,12 @@
                         c.getDescription().addAll(MapDescription(contact.get(i).getDescription()));
                         c.getEmail().addAll(MapEmail(contact.get(i).getEmail()));
                         c.getPhone().addAll(MapPhone(contact.get(i).getPhone()));
-                        
+
                         r.add(c);
                 }
                 return r;
         }
-        
+
         private static List<Address> MapAddress(List<org.uddi.api_v3.Address> address) {
                 List<Address> r = new ArrayList<Address>();
                 if (address == null) {
@@ -1141,7 +1121,7 @@
                 }
                 return r;
         }
-        
+
         private static List<Email> MapEmail(List<org.uddi.api_v3.Email> email) {
                 List<Email> r = new ArrayList<Email>();
                 if (email == null) {
@@ -1153,10 +1133,10 @@
                         x.setValue(email.get(i).getValue());
                         r.add(x);
                 }
-                
+
                 return r;
         }
-        
+
         private static List<Phone> MapPhone(List<org.uddi.api_v3.Phone> phone) {
                 List<Phone> r = new ArrayList<Phone>();
                 if (phone == null) {
@@ -1168,10 +1148,10 @@
                         x.setValue(phone.get(i).getValue());
                         r.add(x);
                 }
-                
+
                 return r;
         }
-        
+
         private static List<AddressLine> MapAddressLine(List<org.uddi.api_v3.AddressLine> addressLine) {
                 List<AddressLine> r = new ArrayList<AddressLine>();
                 if (addressLine == null) {
@@ -1184,7 +1164,7 @@
                         x.setValue(addressLine.get(i).getValue());
                         r.add(x);
                 }
-                
+
                 return r;
         }
 
@@ -1202,7 +1182,7 @@
                 r.setGeneric(VERSION);
                 for (int i = 0; i < assertionStatusReport.size(); i++) {
                         org.uddi.api_v2.AssertionStatusItem x = new org.uddi.api_v2.AssertionStatusItem();
-                        
+
                         switch (assertionStatusReport.get(i).getCompletionStatus()) {
                                 case STATUS_BOTH_INCOMPLETE:
                                         x.setCompletionStatus(null);
@@ -1224,13 +1204,13 @@
                                      assertionStatusReport.get(i).getKeyedReference().getKeyName(),
                                      assertionStatusReport.get(i).getKeyedReference().getKeyValue()));
                         }
-                        
+
                         x.setKeysOwned(new KeysOwned());
                         r.getAssertionStatusItem().add(x);
                         // assertionStatusReport.get(i).
                 }
-                
+
                 return r;
         }
-        
+
 }
"
juddi,5355c4bb735a9441caeffc8e819498e496a7a1f4,"JUDDI-839 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565627 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-07 12:05:48,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Common.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Common.java
index 445298d..d44ed59 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Common.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Common.java
@@ -33,31 +33,35 @@
  */
 public class Common {
 
-    public static String GetOwner(String key, String token, UDDIInquiryPortType inquiry) {
-        GetOperationalInfo goi = new GetOperationalInfo();
-        goi.setAuthInfo(token);
-        goi.getEntityKey().add(key);
-        OperationalInfos operationalInfo = null;
-        try {
-            operationalInfo = inquiry.getOperationalInfo(goi);
-            if (operationalInfo!=null && operationalInfo.getOperationalInfo()!=null &&
-                    !operationalInfo.getOperationalInfo().isEmpty())
-            return operationalInfo.getOperationalInfo().get(0).getAuthorizedName();
-        } catch (Exception ex) {
-            ex.printStackTrace();
+        public static String GetOwner(String key, String token, UDDIInquiryPortType inquiry) {
+                GetOperationalInfo goi = new GetOperationalInfo();
+                goi.setAuthInfo(token);
+                goi.getEntityKey().add(key);
+                OperationalInfos operationalInfo = null;
+                try {
+                        operationalInfo = inquiry.getOperationalInfo(goi);
+                        if (operationalInfo != null && operationalInfo.getOperationalInfo() != null
+                             && !operationalInfo.getOperationalInfo().isEmpty()) {
+                                return operationalInfo.getOperationalInfo().get(0).getAuthorizedName();
+                        }
+                } catch (Exception ex) {
+                        ex.printStackTrace();
+                }
+                return null;
         }
-        return null;
-    }
 
-    public static String GetAuthToken(String username, String password, UDDISecurityPortType sec) {
-        try {
-            GetAuthToken getAuthTokenRoot = new GetAuthToken();
-            getAuthTokenRoot.setUserID(username);
-            getAuthTokenRoot.setCred(password);
-            return sec.getAuthToken(getAuthTokenRoot).getAuthInfo();
-        } catch (Exception ex) {
-            ex.printStackTrace();
+        public static String GetAuthToken(String username, String password, UDDISecurityPortType sec) {
+                try {
+                        System.out.println(username + "" logging in"");
+                        GetAuthToken getAuthTokenRoot = new GetAuthToken();
+                        getAuthTokenRoot.setUserID(username);
+                        getAuthTokenRoot.setCred(password);
+                        String authInfo = sec.getAuthToken(getAuthTokenRoot).getAuthInfo();
+                        System.out.println(username + "" login success"");
+                        return authInfo;
+                } catch (Exception ex) {
+                        ex.printStackTrace();
+                }
+                return null;
         }
-        return null;
-    }
 }
"
juddi,5355c4bb735a9441caeffc8e819498e496a7a1f4,"JUDDI-839 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565627 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-07 12:05:48,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
index 7df119f..718576f 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
@@ -56,6 +56,7 @@
         private JUDDIApiPortType juddi;
         String token = null;
         String username = null;
+        String pass=null;
         String tmodelfile = null;
         String businessfile = null;
         String publishersfile = null;
@@ -105,12 +106,16 @@
                 juddi = transport.getJUDDIApiService();
                 token = null;
                 if (username == null || pass == null) {
-                        username = clerk.getPublisher();
-                        pass = clerk.getPassword();
+                        this.username = clerk.getPublisher();
+                        this.pass = clerk.getPassword();
                 }
-                if (username != null && pass != null) {
+                else
+                {
+                        this.username=username;
+                        this.pass=pass;
                 }
-
+                token = Common.GetAuthToken(username, pass, security);
+                
 
                 //load mapping files
                 //prompt for credentials
@@ -143,7 +148,10 @@
         }
 
         private void ImportTmodels() throws Exception {
+                
                 SaveTModel stm = JAXB.unmarshal(new File(tmodelfile), SaveTModel.class);
+                System.out.println();
+                System.out.println(""Attempting to save "" + stm.getTModel().size() + "" tModels"");
                 if (stripSig) {
                         int x=0;
                         for (int i = 0; i < stm.getTModel().size(); i++) {
@@ -269,7 +277,7 @@
                         for (int i = 0; i < stm.getPublisher().size(); i++) {
                                 if (!PublisherExists(stm.getPublisher().get(i).getAuthorizedName(), token)) {
                                         SavePublisher stm2 = new SavePublisher();
-                                        stm2.setAuthInfo(token);
+                                        stm2.setAuthInfo(Common.GetAuthToken(username, pass, security));
                                         stm2.getPublisher().add(stm.getPublisher().get(i));
                                         try {
                                                 juddi.savePublisher(stm2);
@@ -308,6 +316,7 @@
                 try {
                         FileInputStream fos = new FileInputStream(mappingsfile);
                         mapping.load(fos);
+                        System.out.println(mapping.size() + "" entity to user mappings loaded"");
                         fos.close();
                 } catch (Exception ex) {
                         ex.printStackTrace();
@@ -318,6 +327,7 @@
                 try {
                         FileInputStream fos = new FileInputStream(credFile);
                         userpwd.load(fos);
+                        System.out.println(userpwd.size() + "" user credentials loaded"");
                         fos.close();
                 } catch (Exception ex) {
                         ex.printStackTrace();
"
juddi,c180add058f565bd282e592df622e1444176b4c2,"JUDDI-839 adding export warning to prevent overwriting files

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565360 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-06 17:20:34,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
index e5bcce0..ca1f03f 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
@@ -96,7 +96,7 @@
                 System.out.println();
                 if (preserveOwnership) {
                     System.out.println(""Next step(s), Edit the "" + credFile + "" and make any adjustments that are necessary."");
-                    System.out.println(""TIP: if you're using juddi, you temporarily switch to the 'JuddiAuthenticator' which doesn't validate passwords."");
+                    System.out.println(""TIP: if you're using juddi, you can temporarily switch to the 'JuddiAuthenticator' which doesn't validate passwords."");
                 }
                 System.out.println(""Next step(s), Edit "" + config + "" to point to the next registry. Then try -import. You can also specify a different node."");
             }
"
juddi,c180add058f565bd282e592df622e1444176b4c2,"JUDDI-839 adding export warning to prevent overwriting files

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565360 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-06 17:20:34,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
index 9a6cb75..5451b2f 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
@@ -15,9 +15,9 @@
  */
 package org.apache.juddi.v3.migration.tool;
 
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
-import java.security.AuthProvider;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Properties;
@@ -29,7 +29,6 @@
 import org.apache.juddi.v3.client.UDDIConstants;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClient;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.uddi.api_v3.BusinessEntity;
@@ -140,6 +139,11 @@
         }
 
         private void ExportBusiness() throws Exception {
+                if (new File(businessfile).exists())
+                {
+                        System.err.println(businessfile + "" already exists!"");
+                        System.exit(1);
+                }
                 FileOutputStream fos = new FileOutputStream(businessfile);
                 FindBusiness req = new FindBusiness();
                 req.setAuthInfo(token);
@@ -212,6 +216,11 @@
         }
 
         private void ExportTmodels() throws Exception {
+                 if (new File(tmodelfile).exists())
+                {
+                        System.err.println(tmodelfile + "" already exists!"");
+                        System.exit(1);
+                }
                 FileOutputStream fos = new FileOutputStream(tmodelfile);
                 FindTModel req = new FindTModel();
                 req.setName(new Name(UDDIConstants.WILDCARD, null));
@@ -289,6 +298,11 @@
         }
 
         private void ExportPublishers() throws Exception {
+                 if (new File(publishersfile).exists())
+                {
+                        System.err.println(publishersfile + "" already exists!"");
+                        System.exit(1);
+                }
                 FileOutputStream fos = new FileOutputStream(publishersfile);
 
                 GetAllPublisherDetail r = new GetAllPublisherDetail();
@@ -317,6 +331,11 @@
                         }
                 }
                 mapping.put(""usernames"", sb.toString());
+                if (new File(mappingsfile).exists())
+                {
+                        System.err.println(mappingsfile + "" already exists!"");
+                        System.exit(1);
+                }
                 try {
                         FileOutputStream fos = new FileOutputStream(mappingsfile);
                         mapping.store(fos, ""no comments"");
@@ -333,6 +352,11 @@
                         String s = it.next();
                         p.setProperty(s, s);
                 }
+                if (new File(credFile).exists())
+                {
+                        System.err.println(credFile + "" already exists!"");
+                        System.exit(1);
+                }
                 try {
                         FileOutputStream fos = new FileOutputStream(credFile);
                         p.store(fos, ""no comments"");
"
juddi,c180add058f565bd282e592df622e1444176b4c2,"JUDDI-839 adding export warning to prevent overwriting files

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565360 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-06 17:20:34,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
index 38025da..7df119f 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Import.java
@@ -80,6 +80,7 @@
                 boolean preserveOwnership,
                 String mappingsfile, String credFile, boolean stripSig) throws Exception {
 
+                this.safemode = safe;
                 this.credFile = credFile;
                 this.stripSig = stripSig;
                 this.publishersfile = publishersFile;
@@ -102,7 +103,7 @@
                 publish = transport.getUDDIPublishService();
                 inquiry = transport.getUDDIInquiryService();
                 juddi = transport.getJUDDIApiService();
-                String token = null;
+                token = null;
                 if (username == null || pass == null) {
                         username = clerk.getPublisher();
                         pass = clerk.getPassword();
"
juddi,c8e7efe78d2deb7e9d192c05c250b47d58375fd4,"JUDDI-839 export now works currently

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565348 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-06 16:59:00,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
index 9942eeb..e5bcce0 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/App.java
@@ -85,7 +85,7 @@
             String credFile = line.getOptionValue(""credFile"", ""credentials.properties"");
             //key to username
             String mappings = line.getOptionValue(""mappings"", ""entityusermappings.properties"");
-            boolean preserveOwnership = false;//line.hasOption(""preserveOwnership"");
+            boolean preserveOwnership = line.hasOption(""preserveOwnership"");
             boolean juddi = line.hasOption(""isJuddi"");
             boolean myItemsOnly = line.hasOption(""myItemsOnly"");
             boolean safe = true;//line.hasOption(""safeMode"");
"
juddi,c8e7efe78d2deb7e9d192c05c250b47d58375fd4,"JUDDI-839 export now works currently

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1565348 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-06 16:59:00,alexoree,"diff --git a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
index 1af3fd7..9a6cb75 100644
--- a/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
+++ b/uddi-migration-tool/src/main/java/org/apache/juddi/v3/migration/tool/Export.java
@@ -131,7 +131,9 @@
                         ExportPublishers();
                 }
                 if (preserveOwnership) {
+                        System.out.println(""Saving user mappings file to "" + mappingsfile);
                         SaveProperties();
+                        System.out.println(""Saving user credentials template to "" + credFile);
                         SaveCredFileTemplate();
                 }
                 clerkManager.stop();
@@ -145,7 +147,7 @@
                 req.setFindQualifiers(new FindQualifiers());
                 req.getFindQualifiers().getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
                 int offset = 0;
-                int maxrows = 100;
+                int maxrows = 200;
 
                 req.setMaxRows(maxrows);
                 req.setListHead(offset);
@@ -217,7 +219,7 @@
                 req.setFindQualifiers(new FindQualifiers());
                 req.getFindQualifiers().getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
                 int offset = 0;
-                int maxrows = 100;
+                int maxrows = 200;
 
                 req.setMaxRows(maxrows);
                 req.setListHead(offset);
@@ -333,7 +335,7 @@
                 }
                 try {
                         FileOutputStream fos = new FileOutputStream(credFile);
-                        mapping.store(fos, ""no comments"");
+                        p.store(fos, ""no comments"");
                         fos.close();
                 } catch (Exception ex) {
                         ex.printStackTrace();
"
juddi,f73178d65fbc285896b6ad8c55fd09b797abe87e,"JUDDI-836 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1564754 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-05 12:57:42,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2PublishImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2PublishImpl.java
index 42a6770..1e0d72d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2PublishImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2PublishImpl.java
@@ -67,7 +67,7 @@
  * @author <a href=""mailto:alexoree.apache.org"">Alex O'Ree</a>
  * @since 3.2
  */
-@WebService(serviceName = ""Publish"", targetNamespace = ""urn:uddi-org:inquiry_v2"",
+@WebService(serviceName = ""Publish"", targetNamespace = ""urn:uddi-org:publication_v2"",
         endpointInterface = ""org.uddi.v2_service.Publish"")
 public class UDDIv2PublishImpl implements Publish {
 
"
juddi,06b69f2d2d5ba42e23e35f3e29bfbbb80fde140f,"JUDDI-242 this should fix the build

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1564133 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-03 23:44:23,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index bf56fd1..af83934 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -140,8 +140,8 @@
 				message.setFrom(new InternetAddress(getEMailProperties().getProperty(""mail.smtp.from"", ""jUDDI"")));
 				//maybe nice to use a template rather then sending raw xml.
 				String subscriptionResultXML = JAXBMarshaller.marshallToString(body, JAXBMarshaller.PACKAGE_SUBSCR_RES);
-				//message.setText(subscriptionResultXML, ""UTF-8"");
-                                message.setContent(subscriptionResultXML, ""text/xml; charset=UTF-8;"");
+				message.setText(subscriptionResultXML, ""UTF-8"");
+                                //message.setContent(subscriptionResultXML, ""text/xml; charset=UTF-8;"");
 				message.setSubject(""UDDI Subscription Notification for subscription "" 
 						+ body.getSubscriptionResultsList().getSubscription().getSubscriptionKey());
 				Transport.send(message);
"
juddi,1a95a5e186003517bdedac6c1b3a354a63c893c0,"JUDDI-242 adding smtp and http delivery test for getTModelDetails (tck runner). smtp tests should be more reliable now with proper decoding

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1564123 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-03 23:12:33,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index 84af14f..bf56fd1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -140,7 +140,8 @@
 				message.setFrom(new InternetAddress(getEMailProperties().getProperty(""mail.smtp.from"", ""jUDDI"")));
 				//maybe nice to use a template rather then sending raw xml.
 				String subscriptionResultXML = JAXBMarshaller.marshallToString(body, JAXBMarshaller.PACKAGE_SUBSCR_RES);
-				message.setText(subscriptionResultXML, ""UTF-8"");
+				//message.setText(subscriptionResultXML, ""UTF-8"");
+                                message.setContent(subscriptionResultXML, ""text/xml; charset=UTF-8;"");
 				message.setSubject(""UDDI Subscription Notification for subscription "" 
 						+ body.getSubscriptionResultsList().getSubscription().getSubscriptionKey());
 				Transport.send(message);
"
juddi,e4db942de9a69e9a54170d870f05e2b93acd6658,"JUDDI-242 adding http delivery test for getTModelDetails (ci integration only)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563757 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-03 02:10:31,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index cbd73ef..821a74b 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -74,7 +74,7 @@
         private Set<String> keyscreated = new HashSet<String>();
 
         public TckTModel(UDDIPublicationPortType publication,
-                UDDIInquiryPortType inquiry) {
+             UDDIInquiryPortType inquiry) {
                 super();
                 this.publication = publication;
                 this.inquiry = inquiry;
@@ -93,7 +93,7 @@
                         SaveTModel st = (org.uddi.api_v3.SaveTModel) EntityCreator.buildFromDoc(tModelXml, ""org.uddi.api_v3"");
 
                         for (int i = 0; i < st.getTModel().size(); i++) {
-                                saveTModel(authInfo, st.getTModel().get(i), false);
+                                 saveTModel(authInfo, st.getTModel().get(i), false);
                         }
                         //st.setAuthInfo(authInfo);
                         //publication.saveTModel(st);
@@ -104,7 +104,7 @@
                 }
         }
 
-        private void saveTModel(String authInfo, TModel tmIn, boolean force) {
+        private TModel saveTModel(String authInfo, TModel tmIn, boolean force) {
                 boolean exists = false;
                 GetTModelDetail gt1 = new GetTModelDetail();
                 gt1.getTModelKey().add(tmIn.getTModelKey());
@@ -113,9 +113,7 @@
                         if (td1 != null && !td1.getTModel().isEmpty()) {
                                 if (!td1.getTModel().get(0).isDeleted()) {
                                         exists = true;
-                                }
-                                else
-                                {
+                                } else {
                                         logger.info(""The tModel with key "" + tmIn.getTModelKey() + "" exists already, but is flagged as deleted. Overwritting"");
                                 }
                         }
@@ -152,6 +150,7 @@
                                 if (TckCommon.isDebug()) {
                                         JAXB.marshal(tmOut, System.out);
                                 }
+                                return tmOut;
 
                         } catch (Exception e) {
                                 logger.error(e.getMessage(), e);
@@ -161,13 +160,14 @@
                 } else {
                         logger.info(""The TModel "" + tmIn.getTModelKey() + "" exists already, skipping"");
                 }
+                return tmIn;
         }
 
-        public void saveTModel(String authInfo, String tModelXml, String tModelKey) {
-                saveTModel(authInfo, tModelXml, tModelKey, false);
+        public TModel saveTModel(String authInfo, String tModelXml, String tModelKey) {
+                return saveTModel(authInfo, tModelXml, tModelKey, false);
         }
 
-        public void saveTModel(String authInfo, String tModelXml, String tModelKey, boolean force) {
+        public TModel saveTModel(String authInfo, String tModelXml, String tModelKey, boolean force) {
                 logger.info(""Loading tModel from "" + tModelXml);
                 org.uddi.api_v3.TModel tmIn = null;
                 try {
@@ -178,7 +178,7 @@
                 if (tmIn == null) {
                         Assert.fail(""unable to load tmodel from file!"");
                 }
-                saveTModel(authInfo, tmIn, force);
+                return saveTModel(authInfo, tmIn, force);
         }
 
         public synchronized void deleteTModel(String authInfo, String tModelXml, String tModelKey, boolean force) {
@@ -257,12 +257,12 @@
                 return null;
         }
 
-        public void saveJoePublisherTmodel(String authInfoJoe) {
-                saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, false);
+        public TModel saveJoePublisherTmodel(String authInfoJoe) {
+                return saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, false);
         }
 
-        public void saveJoePublisherTmodel(String authInfoJoe, boolean force) {
-                saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, force);
+        public TModel saveJoePublisherTmodel(String authInfoJoe, boolean force) {
+                return saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY, force);
         }
 
         public void saveUDDIPublisherTmodel(String authInfoTM) {
@@ -285,16 +285,16 @@
                 return findJoeTModelDetail();
         }
 
-        public void saveMaryPublisherTmodel(String authInfoMary) {
-                saveTModel(authInfoMary, MARY_PUBLISHER_TMODEL_XML, MARY_PUBLISHER_TMODEL_KEY, false);
+        public TModel saveMaryPublisherTmodel(String authInfoMary) {
+                return saveTModel(authInfoMary, MARY_PUBLISHER_TMODEL_XML, MARY_PUBLISHER_TMODEL_KEY, false);
         }
 
         public void deleteMaryPublisherTmodel(String authInfoMary) {
                 deleteTModel(authInfoMary, MARY_PUBLISHER_TMODEL_XML, MARY_PUBLISHER_TMODEL_KEY);
         }
 
-        public void saveSamSyndicatorTmodel(String authInfoSam) {
-                saveTModel(authInfoSam, SAM_SYNDICATOR_TMODEL_XML, SAM_SYNDICATOR_TMODEL_KEY, false);
+        public TModel saveSamSyndicatorTmodel(String authInfoSam) {
+                return saveTModel(authInfoSam, SAM_SYNDICATOR_TMODEL_XML, SAM_SYNDICATOR_TMODEL_KEY, false);
         }
 
         public void deleteSamSyndicatorTmodel(String authInfoSam) {
@@ -328,3 +328,4 @@
 
         }
 }
+	
\ No newline at end of file
"
juddi,1464a7d2c95f939e388c825e84dc44be93f4120d,"JUDDI-828 clear out the token before attempting to login

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563656 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-02 16:32:01,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 404fb82..2e1d92a 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -157,6 +157,7 @@
 
         public String verifyLogin() {
                 EnsureConfig();
+                token=null;
                 if (style != AuthStyle.UDDI_AUTH) {
                         if (WS_Transport) {
                                 BindingProvider bp = null;
@@ -211,9 +212,7 @@
                          context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));*/
                         return null;
                 } else {
-                        if (token != null) {
-                                return token;
-                        }
+                        
                         if (WS_Transport) {
                                 BindingProvider bp = null;
                                 Map<String, Object> context = null;
"
juddi,445e6000a9cd0b6f88103a029585d6a4112f855f,"JUDDI-242 adding tests for getBusiness, fixing rest test cases

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563469 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 20:52:43,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 525b31b..f632973 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -72,25 +72,24 @@
         private Log logger = LogFactory.getLog(this.getClass());
         private UDDIPublicationPortType publication = null;
         private UDDIInquiryPortType inquiry = null;
-        
 
         public TckBusiness(UDDIPublicationPortType publication,
-                UDDIInquiryPortType inquiry) {
+             UDDIInquiryPortType inquiry) {
                 super();
                 this.publication = publication;
                 this.inquiry = inquiry;
         }
 
-        public void saveSamSyndicatorBusiness(String authInfoSam) {
-                saveBusiness(authInfoSam, SAM_BUSINESS_XML, SAM_BUSINESS_KEY);
+        public BusinessEntity saveSamSyndicatorBusiness(String authInfoSam) {
+                return saveBusiness(authInfoSam, SAM_BUSINESS_XML, SAM_BUSINESS_KEY);
         }
 
         public void saveSamSyndicatorBusinesses(String authInfoSam, int numberOfCopies) {
                 saveBusinesses(authInfoSam, SAM_BUSINESS_XML, SAM_BUSINESS_KEY, numberOfCopies);
         }
 
-        public void saveSamSyndicatorBusinessWithProjection(String authInfoSam) {
-                saveBusiness(authInfoSam, SAM_BUSINESS_WITHPROJECTION_XML, SAM_BUSINESS_KEY);
+        public BusinessEntity saveSamSyndicatorBusinessWithProjection(String authInfoSam) {
+                return saveBusiness(authInfoSam, SAM_BUSINESS_WITHPROJECTION_XML, SAM_BUSINESS_KEY);
         }
 
         public void deleteSamSyndicatorBusiness(String authInfoSam) {
@@ -111,20 +110,20 @@
                 saveBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY, TckCommon.isDebug());
         }
 
-        public void saveCombineCatBagsPublisherBusiness(String authInfoJoe) {
-                saveBusiness(authInfoJoe, COMBINE_CATBAGS_BIZ_XML, COMBINE_CATBAGS_BIZ_KEY);
+        public BusinessEntity saveCombineCatBagsPublisherBusiness(String authInfoJoe) {
+                return saveBusiness(authInfoJoe, COMBINE_CATBAGS_BIZ_XML, COMBINE_CATBAGS_BIZ_KEY);
         }
 
-        public void saveJoePublisherBusiness3(String authInfoJoe) {
-                saveBusiness(authInfoJoe, JOE_BUSINESS3_XML, JOE_BUSINESS3_KEY);
+        public BusinessEntity saveJoePublisherBusiness3(String authInfoJoe) {
+                return saveBusiness(authInfoJoe, JOE_BUSINESS3_XML, JOE_BUSINESS3_KEY);
         }
 
-        public void saveJoePublisherBusiness1to3(String authInfoJoe) {
-                saveBusiness(authInfoJoe, JOE_BUSINESS_MOVE_XML, JOE_BUSINESS3_KEY);
+        public BusinessEntity saveJoePublisherBusiness1to3(String authInfoJoe) {
+                return saveBusiness(authInfoJoe, JOE_BUSINESS_MOVE_XML, JOE_BUSINESS3_KEY);
         }
 
-        public void saveMaryPublisherBusiness(String authInfoMary) {
-                saveBusiness(authInfoMary, MARY_BUSINESS_XML, MARY_BUSINESS_KEY);
+        public BusinessEntity saveMaryPublisherBusiness(String authInfoMary) {
+                return saveBusiness(authInfoMary, MARY_BUSINESS_XML, MARY_BUSINESS_KEY);
         }
 
         public void updateJoePublisherBusiness(String authInfoJoe) {
@@ -279,11 +278,11 @@
                 }
         }
 
-        public void saveBusiness(String authInfo, String businessXML, String businessKey) {
-                saveBusiness(authInfo, businessXML, businessKey, false);
+        public BusinessEntity saveBusiness(String authInfo, String businessXML, String businessKey) {
+                return saveBusiness(authInfo, businessXML, businessKey, false);
         }
 
-        public void saveBusiness(String authInfo, String businessXML, String businessKey, boolean serialize) {
+        public BusinessEntity saveBusiness(String authInfo, String businessXML, String businessKey, boolean serialize) {
                 logger.info(""attempting to save business "" + businessKey + "" from "" + businessXML);
                 try {
                         SaveBusiness sb = new SaveBusiness();
@@ -319,10 +318,12 @@
                         TckValidator.checkContacts(beIn.getContacts(), beOut.getContacts());
                         TckValidator.checkCategories(beIn.getCategoryBag(), beOut.getCategoryBag());
                         TckValidator.checkSignatures(beIn.getSignature(), beOut.getSignature());
+                        return beOut;
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
                         Assert.fail(""No exception should be thrown"");
                 }
+                return null;
 
         }
 
@@ -359,7 +360,6 @@
                         assertNotNull(beOutNew.getBusinessServices());
                         assertEquals(2, beOutNew.getBusinessServices().getBusinessService().size());
 
-
                 } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
                         Assert.fail(""No exception should be thrown"");
@@ -398,4 +398,4 @@
                         Assert.fail(""No exception should be thrown"");
                 }
         }
-}
\ No newline at end of file
+}
"
juddi,b0490fdf91e7070d93840aeb74c152a903884e3f,"JUDDI-785 fixing javadoc references

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563451 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 18:03:11,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index bd32509..163e811 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -112,11 +112,11 @@
     /**
      * caseInsensitiveSort: signifies that the result set should be sorted
      * without regard to case. This overrides the default case sensitive sorting
-     * behavior. 
+     * behavior. <br><br>
      * 
      * WARNING: The current JPA specification does NOT support caseInsensitiveSort.
-     * jUDDI therefore *ignores* the caseInsensitive sort setting. 
-     * See also https://issues.apache.org/jira/browse/OPENJPA-1817
+     * jUDDI services therefore does not support the caseInsensitive sort setting. 
+     * See also https://issues.apache.org/jira/browse/JUDDI-785
      * A work around is to perform a caseInsensitiveMatch. 
      */
     public static final String CASE_INSENSITIVE_SORT = ""caseInsensitiveSort"";
"
juddi,d86f21608af9d758c953ade7368f50a964997f43,"JUDDI-828 fixing code to allow the config defined default value to function, adding jsp directive to minimize extra white space

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563443 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 17:01:51,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 8982de2..404fb82 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -93,7 +93,8 @@
         public static final String LOGGER_NAME = ""org.apache.juddi"";
         private static final long serialVersionUID = 1L;
         AuthStyle style = null;
-        private String nodename = ""default"";
+        private String nodename = null;
+        private static final String DEFAULT_NODE_NAME = ""default"";
         private final String clientName = ""juddigui"";
         private boolean WS_Transport = false;
         private boolean WS_securePorts = false;
@@ -341,8 +342,8 @@
                                         nodename = clientConfig.getConfiguration().getString(PROP_CONFIG_NODE);
                                 }
                                 if (nodename == null || nodename.equals("""")) {
-                                        log.warn(""'node' is not defined in the config! defaulting to 'default'"");
-                                        nodename = ""default"";
+                                        log.warn(""'node' is not defined in the config! defaulting to '"" + DEFAULT_NODE_NAME +""'"");
+                                        nodename = DEFAULT_NODE_NAME;
                                 }
                                 UDDINode uddiNode = clientConfig.getUDDINode(nodename);
 
"
juddi,7891ad0678125411537506b7c56c332c13e2a097,"JUDDI-785 enabling all CASE_INSENSITIVE_SORT tests with exclusions for juddi, adding tests for unknown find qualifiers and validators to throw on unsupported fqs

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563432 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 15:43:41,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index d76030c..e5c276d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -16,9 +16,11 @@
  */
 package org.apache.juddi.validation;
 
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Hashtable;
+import java.util.Map;
 
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetOperationalInfo;
@@ -39,11 +41,11 @@
 
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.juddi.v3.client.UDDIConstants;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.InvalidCombinationException;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.UnsupportedException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
 
 /**
@@ -214,7 +216,7 @@
                 }
 
                 if (body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null && body.getName().size() == 0
-                        && body.getIdentifierBag() == null && body.getDiscoveryURLs() == null && body.getFindRelatedBusinesses() == null) {
+                     && body.getIdentifierBag() == null && body.getDiscoveryURLs() == null && body.getFindRelatedBusinesses() == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.findbusiness.NoInput""));
                 }
 
@@ -235,10 +237,9 @@
                         throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
                 }
 
-                if (body.getCategoryBag() == null && body.getFindTModel() == null && 
-                		(body.getTModelBag() == null || body.getTModelBag().getTModelKey().size() == 0)
-                		&& body.getName().size() == 0 && body.getBusinessKey() == null) 
-                {
+                if (body.getCategoryBag() == null && body.getFindTModel() == null
+                     && (body.getTModelBag() == null || body.getTModelBag().getTModelKey().size() == 0)
+                     && body.getName().size() == 0 && body.getBusinessKey() == null) {
                         throw new FatalErrorException(new ErrorMessage(""errors.findservice.NoInput""));
                 }
 
@@ -300,8 +301,8 @@
                 }
 
                 if ((body.getBusinessKey() == null || body.getBusinessKey().length() == 0)
-                        && (body.getFromKey() == null || body.getFromKey().length() == 0)
-                        && (body.getToKey() == null || body.getToKey().length() == 0)) {
+                     && (body.getFromKey() == null || body.getFromKey().length() == 0)
+                     && (body.getToKey() == null || body.getToKey().length() == 0)) {
                         throw new FatalErrorException(new ErrorMessage(""errors.findrelatedbusiness.NoInput""));
                 }
 
@@ -334,8 +335,8 @@
                 KeyedReference keyedRef = body.getKeyedReference();
                 if (keyedRef != null) {
                         if (keyedRef.getTModelKey() == null || keyedRef.getTModelKey().length() == 0
-                                || keyedRef.getKeyName() == null || keyedRef.getKeyName().length() == 0
-                                || keyedRef.getKeyValue() == null || keyedRef.getKeyValue().length() == 0) {
+                             || keyedRef.getKeyName() == null || keyedRef.getKeyName().length() == 0
+                             || keyedRef.getKeyValue() == null || keyedRef.getKeyValue().length() == 0) {
                                 throw new ValueNotAllowedException(new ErrorMessage(""errors.findrelatedbusiness.BlankKeyedRef""));
                         }
 
@@ -484,6 +485,8 @@
                                 throw new ValueNotAllowedException(new ErrorMessage(""errors.findqualifiers.DuplicateValue"", result));
                         }
 
+                        ValidateSupportedFindQualifier(fq);
+
                         // Invalid combo: andAllKeys, orAllKeys, and orLikeKeys
                         if (fq.equalsIgnoreCase(FindQualifiers.AND_ALL_KEYS) || fq.equalsIgnoreCase(FindQualifiers.AND_ALL_KEYS_TMODEL)) {
                                 if (fqTable.get(FindQualifiers.OR_ALL_KEYS.toUpperCase()) != null || fqTable.get(FindQualifiers.OR_ALL_KEYS_TMODEL.toUpperCase()) != null) {
@@ -645,25 +648,25 @@
                         return;
                 }
                 for (int i = 0; i < findQualifiers.getFindQualifier().size(); i++) {
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.BINARY_SORT) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.BINARY_SORT_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.BINARY_SORT) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.BINARY_SORT_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.BINARY_SORT));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_INSENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_INSENSITIVE_MATCH_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_INSENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_INSENSITIVE_MATCH_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.CASE_INSENSITIVE_MATCH));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_SENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_SENSITIVE_MATCH_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_SENSITIVE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_SENSITIVE_MATCH_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.CASE_SENSITIVE_MATCH));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_INSENSITIVE_SORT) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_INSENSITIVE_SORT_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_INSENSITIVE_SORT) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_INSENSITIVE_SORT_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.CASE_INSENSITIVE_SORT));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_SENSITIVE_SORT) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.CASE_SENSITIVE_SORT_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_SENSITIVE_SORT) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.CASE_SENSITIVE_SORT_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.CASE_SENSITIVE_SORT_TMODEL));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.SORT_BY_NAME_ASC) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.SORT_BY_NAME_ASC_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.SORT_BY_NAME_ASC) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.SORT_BY_NAME_ASC_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.SORT_BY_NAME_ASC));
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.SORT_BY_NAME_DESC) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.SORT_BY_NAME_DESC_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.SORT_BY_NAME_DESC) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.SORT_BY_NAME_DESC_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.SORT_BY_NAME_DESC));
                         }
                 }
@@ -674,7 +677,7 @@
                         return;
                 }
                 for (int i = 0; i < findQualifiers.getFindQualifier().size(); i++) {
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.AND_ALL_KEYS) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.AND_ALL_KEYS_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.AND_ALL_KEYS) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.AND_ALL_KEYS_TMODEL)) {
                                 throw new InvalidCombinationException(new ErrorMessage(""errors.findqualifiers.InvalidCombo"", FindQualifiers.AND_ALL_KEYS));
                         }
                 }
@@ -687,10 +690,10 @@
                 boolean containsAPPROXIMATE_MATCH = false;
                 boolean containsCOMBINE_CATEGORY_BAGS = false;
                 for (int i = 0; i < findQualifiers.getFindQualifier().size(); i++) {
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.APPROXIMATE_MATCH) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.APPROXIMATE_MATCH_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.APPROXIMATE_MATCH) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.APPROXIMATE_MATCH_TMODEL)) {
                                 containsAPPROXIMATE_MATCH = true;
                         }
-                        if (findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.COMBINE_CATEGORY_BAGS) || findQualifiers.getFindQualifier().get(i).equals(FindQualifiers.COMBINE_CATEGORY_BAGS_TMODEL)) {
+                        if (findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.COMBINE_CATEGORY_BAGS) || findQualifiers.getFindQualifier().get(i).equalsIgnoreCase(FindQualifiers.COMBINE_CATEGORY_BAGS_TMODEL)) {
                                 containsCOMBINE_CATEGORY_BAGS = true;
                         }
                 }
@@ -699,4 +702,62 @@
                 }
 
         }
+
+        static Map<String,Boolean> supportedFindqualifiers = null;
+        private void ValidateSupportedFindQualifier(String fq) throws UnsupportedException {
+                if (supportedFindqualifiers==null || supportedFindqualifiers.isEmpty())
+                        InitFindQualifierMap();
+                if (supportedFindqualifiers.get(fq.toLowerCase())==null)
+                        throw new UnsupportedException(new ErrorMessage(""errors.Unsupported.findQualifier"", fq));
+        }
+
+        private void InitFindQualifierMap() {
+                supportedFindqualifiers = new HashMap<String, Boolean>();
+                supportedFindqualifiers.put(FindQualifiers.AND_ALL_KEYS.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.AND_ALL_KEYS_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.APPROXIMATE_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.APPROXIMATE_MATCH_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.BINARY_SORT.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.BINARY_SORT_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.BINDING_SUBSET.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.BINDING_SUBSET_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_INSENSITIVE_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_INSENSITIVE_MATCH_TMODEL.toLowerCase(), true);
+                //these are NOT supported, see JUDDI-785
+                //supportedFindqualifiers.put(FindQualifiers.CASE_INSENSITIVE_SORT.toLowerCase(), true);
+                //supportedFindqualifiers.put(FindQualifiers.CASE_INSENSITIVE_SORT_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_SENSITIVE_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_SENSITIVE_MATCH_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_SENSITIVE_SORT.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.CASE_SENSITIVE_SORT_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.COMBINE_CATEGORY_BAGS.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.COMBINE_CATEGORY_BAGS_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.DIACRITIC_INSENSITIVE_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.DIACRITIC_INSENSITIVE_MATCH_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.DIACRITIC_SENSITIVE_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.DIACRITIC_SENSITIVE_MATCH_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.EXACT_MATCH.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.EXACT_MATCH_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.OR_ALL_KEYS.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.OR_ALL_KEYS_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.OR_LIKE_KEYS.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.OR_LIKE_KEYS_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SERVICE_SUBSET.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SERVICE_SUBSET_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SIGNATURE_PRESENT.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SIGNATURE_PRESENT_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_DATE_ASC.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_DATE_ASC_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_DATE_DESC.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_DATE_DESC_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_NAME_ASC.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_NAME_ASC_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_NAME_DESC.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SORT_BY_NAME_DESC_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SUPPRESS_PROJECTED_SERVICES.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.SUPPRESS_PROJECTED_SERVICES_TMODEL.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.UTS_10.toLowerCase(), true);
+                supportedFindqualifiers.put(FindQualifiers.UTS_10_TMODEL.toLowerCase(), true);
+                
+        }
 }
"
juddi,50dd71a713cf704f1b94425ff3bd78507b19e4d6,"JUDDI-828 applying the remaining patches, correcting some javadoc issues. fixing ssl warning on juddigui

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563364 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 02:43:48,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIClientSubscriptionListenerImpl.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIClientSubscriptionListenerImpl.java
index 091acc8..241422a 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIClientSubscriptionListenerImpl.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIClientSubscriptionListenerImpl.java
@@ -48,7 +48,11 @@
 	
 	private static final Log logger = LogFactory.getLog(UDDIClientSubscriptionListenerImpl.class);
 	private UDDIServiceCache serviceCache = null;
-	
+
+	public UDDIClientSubscriptionListenerImpl() {
+		super();
+	}	
+
 	public UDDIClientSubscriptionListenerImpl(String bindingKey, UDDIServiceCache serviceCache) {
 		super();
 		this.serviceCache = serviceCache;
"
juddi,50dd71a713cf704f1b94425ff3bd78507b19e4d6,"JUDDI-828 applying the remaining patches, correcting some javadoc issues. fixing ssl warning on juddigui

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563364 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 02:43:48,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 64b6bdb..8982de2 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -246,7 +246,7 @@
                                 return HandleException(ex);
                         }
                         if (session.getAttribute(""username"") != null
-                                && session.getAttribute(""password"") != null) {
+                             && session.getAttribute(""password"") != null) {
                                 req.setUserID((String) session.getAttribute(""username""));
                                 req.setCred(AES.Decrypt((String) session.getAttribute(""password""), (String) properties.get(""key"")));
                                 log.info(""AUDIT: fetching auth token for "" + req.getUserID() + "" Auth Mode is "" + ((security == null) ? ""HTTP"" : ""AUTH_TOKEN""));
@@ -333,6 +333,10 @@
                                         log.warn(""'UDDI_AUTH' is not defined in the config ("" + PROP_AUTH_TYPE + "")! defaulting to UDDI_AUTH"");
                                         style = AuthStyle.UDDI_AUTH;
                                 }
+//                                String newNodename = clientConfig.getConfiguration().getString(PROP_CONFIG_NODE);
+//                                if (newNodename != null && !newNodename.equals("""")) {
+//                                        nodename = newNodename;
+//                                }
                                 if (nodename == null) {
                                         nodename = clientConfig.getConfiguration().getString(PROP_CONFIG_NODE);
                                 }
@@ -357,12 +361,14 @@
 
                                 if (WS_Transport) {
                                         if (uddiNode.getPublishUrl().toLowerCase().startsWith(""https://"")
-                                                && (uddiNode.getSecurityUrl() != null && uddiNode.getSecurityUrl().toLowerCase().startsWith(""https://""))
-                                                && uddiNode.getInquiryUrl().toLowerCase().startsWith(""https://"")
-                                                && (uddiNode.getCustodyTransferUrl() != null && uddiNode.getCustodyTransferUrl().toLowerCase().startsWith(""https://""))
-                                                && (uddiNode.getSubscriptionUrl() != null && uddiNode.getSubscriptionUrl().toLowerCase().startsWith(""https://""))) {
+                                             && (uddiNode.getSecurityUrl() != null && uddiNode.getSecurityUrl().toLowerCase().startsWith(""https://""))
+                                             && uddiNode.getInquiryUrl().toLowerCase().startsWith(""https://"")
+                                             && (uddiNode.getCustodyTransferUrl() != null && uddiNode.getCustodyTransferUrl().toLowerCase().startsWith(""https://""))
+                                             && (uddiNode.getSubscriptionUrl() != null && uddiNode.getSubscriptionUrl().toLowerCase().startsWith(""https://""))) {
                                                 WS_securePorts = true;
                                         }
+                                        else
+                                                WS_securePorts=false;
                                 }
                         } catch (Exception ex) {
                                 HandleException(ex);
@@ -564,7 +570,7 @@
                                 log.error(ex);
                         }
                         if (session != null && session.getAttribute(""username"") != null
-                                && session.getAttribute(""password"") != null) {
+                             && session.getAttribute(""password"") != null) {
                                 req.setUserID((String) session.getAttribute(""username""));
                                 req.setCred(AES.Decrypt((String) session.getAttribute(""password""), (String) properties.get(""key"")));
                                 log.info(""AUDIT: fetching auth token for "" + req.getUserID() + "" Auth Mode is "" + ((security == null) ? ""HTTP"" : ""AUTH_TOKEN""));
@@ -706,12 +712,12 @@
                                 sb.append(""<select id=\""businesslist\"" multiple=\""multiple\"" size=\""10\"">"");
                                 for (int i = 0; i < findBusiness.getBusinessInfos().getBusinessInfo().size(); i++) {
                                         sb.append(""<option class=\""transferable\"" id=\"""").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
-                                                append(""\"" title=\"""").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
-                                                append(""\"">"").
-                                                append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getName()))).
-                                                append(""</option>"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
+                                             append(""\"" title=\"""").
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
+                                             append(""\"">"").
+                                             append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getName()))).
+                                             append(""</option>"");
                                 }
                                 sb.append(""</select>"");
                         }
@@ -719,12 +725,12 @@
                                 sb.append(""<select id=\""tmodellist\"" multiple=\""multiple\"" size=\""10\"">"");
                                 for (int i = 0; i < findBusiness.getTModelInfos().getTModelInfo().size(); i++) {
                                         sb.append(""<option  class=\""transferable\"" id=\"""").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
-                                                append(""\"" title=\"""").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
-                                                append(""\"">"").
-                                                append(StringEscapeUtils.escapeHtml((findBusiness.getTModelInfos().getTModelInfo().get(i).getName().getValue()))).
-                                                append(""</option>"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
+                                             append(""\"" title=\"""").
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
+                                             append(""\"">"").
+                                             append(StringEscapeUtils.escapeHtml((findBusiness.getTModelInfos().getTModelInfo().get(i).getName().getValue()))).
+                                             append(""</option>"");
                                 }
                                 sb.append(""</select>"");
                         }
@@ -799,9 +805,9 @@
                 }
                 if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
-                        if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) 
-                                || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED) 
-                                || ex.getMessage().toLowerCase().contains(""expire"")) {
+                        if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED)
+                             || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED)
+                             || ex.getMessage().toLowerCase().contains(""expire"")) {
                                 return true;
                         }
                 }
@@ -862,8 +868,8 @@
                                         } else {
                                                 for (int k = 0; k < businessDetail.getBusinessEntity().get(i).getBusinessServices().getBusinessService().size(); k++) {
                                                         sb.append(""<div><a href=\""serviceEditor.jsp?id="").
-                                                                append(StringEscapeUtils.escapeHtml(businessDetail.getBusinessEntity().get(i).getBusinessServices().getBusinessService().get(k).getServiceKey())).append(""\"">"").
-                                                                append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(businessDetail.getBusinessEntity().get(i).getBusinessServices().getBusinessService().get(k).getName()))).append(""</a></div>"");
+                                                             append(StringEscapeUtils.escapeHtml(businessDetail.getBusinessEntity().get(i).getBusinessServices().getBusinessService().get(k).getServiceKey())).append(""\"">"").
+                                                             append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(businessDetail.getBusinessEntity().get(i).getBusinessServices().getBusinessService().get(k).getName()))).append(""</a></div>"");
                                                 }
                                         }
                                 }
@@ -1010,8 +1016,8 @@
                                 }
                         }
                         return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
-                                + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
-                                + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
+                             + ""<a href=\""serviceEditor.jsp?id="" + URLEncoder.encode(saveService.getBusinessService().get(0).getServiceKey(), ""UTF8"")
+                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveService.getBusinessService().get(0).getServiceKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
@@ -1043,8 +1049,8 @@
                         }
 
                         return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
-                                + ""<a href=\""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"")
-                                + ""\"">"" + StringEscapeUtils.escapeHtml(saveBusiness.getBusinessEntity().get(0).getBusinessKey()) + ""</a>"";
+                             + ""<a href=\""businessEditor2.jsp?id="" + URLEncoder.encode(saveBusiness.getBusinessEntity().get(0).getBusinessKey(), ""UTF8"")
+                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveBusiness.getBusinessEntity().get(0).getBusinessKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
@@ -1275,8 +1281,8 @@
                         st.getTModel().add(tm);
                         TModelDetail saveTModel = publish.saveTModel(st);
                         return ""<div class=\""alert alert-success\""><i class=\""icon-2x icon-thumbs-up\""></i> "" + ResourceLoader.GetResource(session, ""messages.success"") + "" <a href=\""tmodelEditor.jsp?id=""
-                                + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"") + ""\"">""
-                                + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a></div>"";
+                             + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"") + ""\"">""
+                             + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a></div>"";
                         // ""Success"";
                 } catch (Exception ex) {
                         return ToErrorAlert(HandleException(ex));
@@ -1311,7 +1317,7 @@
                         log.error(""SOAP Fault returned: "" + x.getMessage() + (x.getFault() != null ? x.getFault().getFaultString() : """"));
                         String err = null;
                         if (x.getFault() != null
-                                && x.getFault().getDetail() != null) {
+                             && x.getFault().getDetail() != null) {
                                 Iterator detailEntries = x.getFault().getDetail().getDetailEntries();
                                 while (detailEntries.hasNext()) {
                                         err += detailEntries.next().toString();
@@ -1652,8 +1658,8 @@
                                 for (int i = 0; i < findBusiness.getBindingTemplate().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(""<a href=\""serviceEditor.jsp?id="").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getBindingTemplate().get(i).getServiceKey())).
-                                                append(""\"">"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getBindingTemplate().get(i).getServiceKey())).
+                                             append(""\"">"");
                                         if (findBusiness.getBindingTemplate().get(i).getDescription().isEmpty()) {
                                                 sb.append(StringEscapeUtils.escapeHtml(findBusiness.getBindingTemplate().get(i).getBindingKey()));
                                         } else {
@@ -1743,8 +1749,8 @@
                                 for (int i = 0; i < findBusiness.getBusinessInfos().getBusinessInfo().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(""<a href=\""businessEditor2.jsp?id="").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
-                                                append(""\"">"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey())).
+                                             append(""\"">"");
                                         if (findBusiness.getBusinessInfos().getBusinessInfo().get(i).getName().isEmpty()) {
                                                 sb.append(StringEscapeUtils.escapeHtml(findBusiness.getBusinessInfos().getBusinessInfo().get(i).getBusinessKey()));
                                         } else {
@@ -1800,8 +1806,8 @@
                                 for (int i = 0; i < findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(""<a href=\""businessEditor2.jsp?id="").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getBusinessKey())).
-                                                append(""\"">"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getBusinessKey())).
+                                             append(""\"">"");
                                         if (findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getName().isEmpty()) {
                                                 sb.append(StringEscapeUtils.escapeHtml(findBusiness.getRelatedBusinessInfos().getRelatedBusinessInfo().get(i).getBusinessKey()));
                                         } else {
@@ -1890,8 +1896,8 @@
                                 for (int i = 0; i < findBusiness.getServiceInfos().getServiceInfo().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(""<a href=\""serviceEditor.jsp?id="").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getServiceInfos().getServiceInfo().get(i).getServiceKey())).
-                                                append(""\"">"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getServiceInfos().getServiceInfo().get(i).getServiceKey())).
+                                             append(""\"">"");
                                         if (findBusiness.getServiceInfos().getServiceInfo().get(i).getName().isEmpty()) {
                                                 sb.append(StringEscapeUtils.escapeHtml(findBusiness.getServiceInfos().getServiceInfo().get(i).getServiceKey()));
                                         } else {
@@ -1981,8 +1987,8 @@
                                 for (int i = 0; i < findBusiness.getTModelInfos().getTModelInfo().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(""<a href=\""tmodelEditor.jsp?id="").
-                                                append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
-                                                append(""\"">"");
+                                             append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey())).
+                                             append(""\"">"");
                                         if (findBusiness.getTModelInfos().getTModelInfo().get(i).getName() == null) {
                                                 sb.append(StringEscapeUtils.escapeHtml(findBusiness.getTModelInfos().getTModelInfo().get(i).getTModelKey()));
                                         } else {
@@ -2169,8 +2175,8 @@
                         }
                         //return ResourceLoader.GetResource(session, ""actions.saved"");
                         return ResourceLoader.GetResource(session, ""actions.saved"") + "" ""
-                                + ""<a href=\""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")
-                                + ""\"">"" + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a>"";
+                             + ""<a href=\""tmodelEditor.jsp?id="" + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"")
+                             + ""\"">"" + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
@@ -2188,7 +2194,7 @@
                 TModel be = new TModel();
                 be.setTModelKey(request.getParameter(PostBackConstants.SERVICEKEY).trim());
                 if (be.getTModelKey() != null && (be.getTModelKey().equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit"")))
-                        || be.getTModelKey().length() == 0) {
+                     || be.getTModelKey().length() == 0) {
                         be.setTModelKey(null);
                 }
                 be.setName(new Name());
@@ -2397,8 +2403,8 @@
                                 }
                         }
                         return ResourceLoader.GetResource(session, ""messages.success"")
-                                + "" <a href=\""editSubscription.jsp?id="" + URLEncoder.encode(data.value.get(0).getSubscriptionKey(), ""UTF8"")
-                                + ""\"">"" + StringEscapeUtils.escapeHtml(data.value.get(0).getSubscriptionKey()) + ""</a>"";
+                             + "" <a href=\""editSubscription.jsp?id="" + URLEncoder.encode(data.value.get(0).getSubscriptionKey(), ""UTF8"")
+                             + ""\"">"" + StringEscapeUtils.escapeHtml(data.value.get(0).getSubscriptionKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
@@ -2481,18 +2487,18 @@
                 if (info != null && !info.isEmpty()) {
                         sb.append(""<table class=\""table table-hover\"">"");
                         sb.append(""<tr><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.nodeid"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.authorizedname"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.key"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.created"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.modified"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.modifiedwithchildren"")).
-                                append(""</th></tr>"");
+                             append(ResourceLoader.GetResource(session, ""items.nodeid"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.authorizedname"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.key"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.created"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.modified"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.modifiedwithchildren"")).
+                             append(""</th></tr>"");
 
                         for (int i = 0; i < info.size(); i++) {
                                 if (info.get(i) == null) {
@@ -2500,17 +2506,17 @@
                                 }
                                 sb.append(""<tr><td>"");
                                 sb.append((info.get(i).getNodeID() != null ? StringEscapeUtils.escapeHtml(info.get(i).getNodeID()) : """"))
-                                        .append(""</td><td>"")
-                                        .append((info.get(i).getAuthorizedName() != null ? StringEscapeUtils.escapeHtml(info.get(i).getAuthorizedName()) : """"))
-                                        .append(""</td><td>"")
-                                        .append((info.get(i).getEntityKey() != null ? StringEscapeUtils.escapeHtml(info.get(i).getEntityKey()) : """"))
-                                        .append(""</td><td>"")
-                                        .append((info.get(i).getCreated() != null ? StringEscapeUtils.escapeHtml(info.get(i).getCreated().toString()) : """"))
-                                        .append(""</td><td>"")
-                                        .append((info.get(i).getModified() != null ? StringEscapeUtils.escapeHtml(info.get(i).getModified().toString()) : """"))
-                                        .append(""</td><td>"")
-                                        .append((info.get(i).getModifiedIncludingChildren() != null ? StringEscapeUtils.escapeHtml(info.get(i).getModifiedIncludingChildren().toString()) : """"))
-                                        .append(""</td></tr>"");
+                                     .append(""</td><td>"")
+                                     .append((info.get(i).getAuthorizedName() != null ? StringEscapeUtils.escapeHtml(info.get(i).getAuthorizedName()) : """"))
+                                     .append(""</td><td>"")
+                                     .append((info.get(i).getEntityKey() != null ? StringEscapeUtils.escapeHtml(info.get(i).getEntityKey()) : """"))
+                                     .append(""</td><td>"")
+                                     .append((info.get(i).getCreated() != null ? StringEscapeUtils.escapeHtml(info.get(i).getCreated().toString()) : """"))
+                                     .append(""</td><td>"")
+                                     .append((info.get(i).getModified() != null ? StringEscapeUtils.escapeHtml(info.get(i).getModified().toString()) : """"))
+                                     .append(""</td><td>"")
+                                     .append((info.get(i).getModifiedIncludingChildren() != null ? StringEscapeUtils.escapeHtml(info.get(i).getModifiedIncludingChildren().toString()) : """"))
+                                     .append(""</td></tr>"");
                         }
                         sb.append(""</table>"");
                 } else {
@@ -2808,7 +2814,7 @@
                                 //    subscriptionResults.getAssertionStatusReport().
                                 if (subscriptionResults.getAssertionStatusReport() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.assertion"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getAssertionStatusReport().getAssertionStatusItem().size(); i++) {
                                                 sb.append(""<tr><td>"");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getAssertionStatusReport().getAssertionStatusItem().get(i).getFromKey()));
@@ -2822,7 +2828,7 @@
                                 }
                                 if (subscriptionResults.getBindingDetail() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.bindings"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getBindingDetail().getBindingTemplate().size(); i++) {
                                                 sb.append(""<tr><td>"");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getBindingDetail().getBindingTemplate().get(i).getServiceKey()));
@@ -2834,7 +2840,7 @@
                                 }
                                 if (subscriptionResults.getBusinessDetail() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.business"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getBusinessDetail().getBusinessEntity().size(); i++) {
                                                 sb.append(""<tr><td><a href=\""businessEditor2.jsp?id="");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getBusinessDetail().getBusinessEntity().get(i).getBusinessKey()));
@@ -2846,7 +2852,7 @@
                                 }
                                 if (subscriptionResults.getRelatedBusinessesList() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.assertion2"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         // for (int i = 0; i < subscriptionResults.getRelatedBusinessesList().getBusinessKey().size(); i++) {
                                         sb.append(""<tr><td>"");
                                         sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getRelatedBusinessesList().getBusinessKey()));
@@ -2856,7 +2862,7 @@
                                 }
                                 if (subscriptionResults.getServiceDetail() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.services"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getServiceDetail().getBusinessService().size(); i++) {
                                                 sb.append(""<tr><td><a href=\""serviceEditor.jsp?id="");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getServiceDetail().getBusinessService().get(i).getServiceKey()));
@@ -2868,7 +2874,7 @@
                                 }
                                 if (subscriptionResults.getServiceList() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.servicelist"")).
-                                                append(""<table class=\""table table-hover\"">"");
+                                             append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getServiceList().getServiceInfos().getServiceInfo().size(); i++) {
                                                 sb.append(""<tr><td>"");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getServiceList().getServiceInfos().getServiceInfo().get(i).getServiceKey()));
@@ -2892,7 +2898,7 @@
                                 }
                                 if (subscriptionResults.getTModelList() != null) {
                                         sb.append(ResourceLoader.GetResource(session, ""items.subscriptions.tmodels2""))
-                                                .append(""<table class=\""table table-hover\"">"");
+                                             .append(""<table class=\""table table-hover\"">"");
                                         for (int i = 0; i < subscriptionResults.getTModelList().getTModelInfos().getTModelInfo().size(); i++) {
                                                 sb.append(""<tr><td><a href=\""serviceEditor.jsp?id="");
                                                 sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getTModelList().getTModelInfos().getTModelInfo().get(i).getTModelKey()));
@@ -2990,15 +2996,15 @@
 
                         StringBuilder sb = new StringBuilder();
                         sb.append(""<table class=\""table\""><tr><th>"").
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.business"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.service"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.bindingtemplate.key"")).
-                                append(""</th><th>"").
-                                append(ResourceLoader.GetResource(session, ""items.accesspoint.value"")).
-                                append(""</th></tr>"");
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.business"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.service"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.bindingtemplate.key"")).
+                             append(""</th><th>"").
+                             append(ResourceLoader.GetResource(session, ""items.accesspoint.value"")).
+                             append(""</th></tr>"");
 
                         for (int i = 0; i < serviceDetail.getBusinessService().size(); i++) {
                                 //   System.out.println(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().size());
@@ -3006,24 +3012,24 @@
                                         for (int k = 0; k < serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().size(); k++) {
                                                 //System.out.println(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getAccessPoint().getValue());
                                                 sb.append(""<tr><td><input type=\""checkbox\"" class=\""modalableBinding\"" id=\"""").
-                                                        append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey())).
-                                                        append(""\"">"").
-                                                        append(""</td><td>"").
-                                                        append(""<a href=\""businessEditor2.jsp?id="").
-                                                        append(StringEscapeUtils.escapeHtml(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey())).
-                                                        append(""\"">"").
-                                                        append(StringEscapeUtils.escapeHtml((findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()))).
-                                                        append(""</a>"").
-                                                        append(""</td><td>"").append(""<a href=\""serviceEditor.jsp?id="").
-                                                        append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getServiceKey())).
-                                                        append(""\"" title=\"""").
-                                                        append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getServiceKey())).
-                                                        append(""\"">"").
-                                                        append(Printers.ListNamesToString(serviceDetail.getBusinessService().get(i).getName())).
-                                                        append(""</a>"").
-                                                        append(""</td><td>"").
-                                                        append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey())).
-                                                        append(""</td><td>"");
+                                                     append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey())).
+                                                     append(""\"">"").
+                                                     append(""</td><td>"").
+                                                     append(""<a href=\""businessEditor2.jsp?id="").
+                                                     append(StringEscapeUtils.escapeHtml(findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey())).
+                                                     append(""\"">"").
+                                                     append(StringEscapeUtils.escapeHtml((findService.getServiceInfos().getServiceInfo().get(i).getBusinessKey()))).
+                                                     append(""</a>"").
+                                                     append(""</td><td>"").append(""<a href=\""serviceEditor.jsp?id="").
+                                                     append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getServiceKey())).
+                                                     append(""\"" title=\"""").
+                                                     append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getServiceKey())).
+                                                     append(""\"">"").
+                                                     append(Printers.ListNamesToString(serviceDetail.getBusinessService().get(i).getName())).
+                                                     append(""</a>"").
+                                                     append(""</td><td>"").
+                                                     append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getBindingKey())).
+                                                     append(""</td><td>"");
                                                 if (serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getAccessPoint() != null) {
                                                         sb.append(StringEscapeUtils.escapeHtml(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().get(k).getAccessPoint().getValue()));
                                                 }
"
juddi,bf4183dacf36062b2eda5c90d641ed983b9ca65b,"JUDDI-829 fixed via the mapper, fixing NPE for save binding list info
JUDDI-828 apply web.xml fix

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563359 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 00:57:08,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
index 32922e0..0541c56 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
@@ -280,7 +280,7 @@
         }
 
         private static TModelInstanceDetails MapTModelInstanceDetails(org.uddi.api_v2.TModelInstanceDetails tModelInstanceDetails) {
-                if (tModelInstanceDetails == null) {
+                if (tModelInstanceDetails == null | tModelInstanceDetails.getTModelInstanceInfo().isEmpty()) {
                         return null;
                 }
                 TModelInstanceDetails r = new TModelInstanceDetails();
"
juddi,bf4183dacf36062b2eda5c90d641ed983b9ca65b,"JUDDI-829 fixed via the mapper, fixing NPE for save binding list info
JUDDI-828 apply web.xml fix

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563359 13f79535-47bb-0310-9956-ffa450edef68
",2014-02-01 00:57:08,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 3c32f98..946becc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -72,6 +72,7 @@
 import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
+import org.uddi.api_v3.ListDescription;
 
 /**
  * This class implements the UDDI Publication Service
@@ -525,7 +526,7 @@
 			validator.validateSaveBinding(em, body, null);
 	
 			BindingDetail result = new BindingDetail();
-			
+                        result.setListDescription(new ListDescription());
 			List<org.uddi.api_v3.BindingTemplate> apiBindingTemplateList = body.getBindingTemplate();
 			for (org.uddi.api_v3.BindingTemplate apiBindingTemplate : apiBindingTemplateList) {
 				
@@ -541,7 +542,8 @@
 				em.persist(modelBindingTemplate);
 				
 				result.getBindingTemplate().add(apiBindingTemplate);
-				
+                                result.getListDescription().setActualCount(result.getListDescription().getActualCount()+1);
+                                result.getListDescription().setIncludeCount(result.getListDescription().getIncludeCount()+1);
 				validator.validateSaveBindingMax(em, modelBindingTemplate.getBusinessService().getEntityKey());
 			}
 	
"
juddi,6f95825a92fbf14a5ab8ce7230d1ae2f1a3fc9f9,"JUDDI-828 altering the callback endpoint to prevent name clashes on jboss. Javadoc updates

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563128 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-31 12:40:00,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index 9de996f..bd32509 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -1,9 +1,15 @@
 package org.apache.juddi.v3.client;
 
+import org.apache.juddi.v3.client.config.Property;
+import org.apache.juddi.v3.client.ext.wsdm.WSDMQosConstants;
+
 /**
  * This file was borrowed from juddi-core's constants file with modifications
  *
  * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
+ * @see WSDMQosConstants
+ * @see Property
+ * 
  */
 public interface UDDIConstants {
 
"
juddi,6f95825a92fbf14a5ab8ce7230d1ae2f1a3fc9f9,"JUDDI-828 altering the callback endpoint to prevent name clashes on jboss. Javadoc updates

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563128 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-31 12:40:00,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
index 06356e5..72645c3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ServiceLocator.java
@@ -29,6 +29,7 @@
 import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIKeyConvention;
+import org.apache.juddi.v3.client.subscription.SubscriptionCallbackListener;
 import org.apache.juddi.v3.client.transport.TransportException;
 import org.uddi.api_v3.AccessPoint;
 import org.uddi.api_v3.BindingTemplate;
@@ -36,9 +37,11 @@
 import org.uddi.api_v3.BusinessService;
 
 /**
- * The ServiceLocator contacts the UDDI registry to lookup an Endpoint given a UDDI ServiceKey.
- *
- * @see UDDIClerk.getEndpoints
+ * The ServiceLocator contacts the UDDI registry to lookup an Endpoint given a UDDI ServiceKey.<br>
+ * This class does NOT chase down WSDL, hosting redirectors or other binding references from
+ * access point useType values. See 
+ * {@link org.apache.juddi.v3.client.config.UDDIClerk#getEndpoints UDDIClerk.getEndpoints}
+ * @see SubscriptionCallbackListener
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  */
 public class ServiceLocator {
@@ -137,6 +140,7 @@
 		try {
 			if (selectionPolicy==null) {
 				if (policy==null) {
+                                        //TODO move this constant to Property.class
 					policy = properties.getProperty(""juddi.client.selection.policy"", ""org.apache.juddi.v3.client.mapping.PolicyLocalFirst"");
 				}
 				@SuppressWarnings(""unchecked"")
"
juddi,6f95825a92fbf14a5ab8ce7230d1ae2f1a3fc9f9,"JUDDI-828 altering the callback endpoint to prevent name clashes on jboss. Javadoc updates

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563128 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-31 12:40:00,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
index 5a91f37..e25aa53 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
@@ -64,14 +64,18 @@
  * The Cache also registers an MBean which allows the 
  * 
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
- */
+ * @see UDDIClientSubscriptionListenerService
+ * @see UDDIServiceCacheMBean
+ * @see UDDISubscriptionListenerPortType
+ * @see ServiceLocator
+  */
 public class UDDIServiceCache implements UDDIServiceCacheMBean {
 	
-	public static String UDDI_ORG_NS                       = ""urn:uddi-org:v3_service"";
-	public static String UDDI_CLIENT_SUBSCRIPTION_LISTENER = ""UDDIClientSubscriptionListenerService"";
-	public static QName  SUBSCRIPTION_LISTENER_SERVICE_NAME= new QName(UDDI_ORG_NS, UDDI_CLIENT_SUBSCRIPTION_LISTENER);
-	public static String SUBSCRIPTION_LISTENER_PORT_NAME   = ""UDDIClientSubscriptionListenerImplPort"";
-	public static String DEFAULT_SUBSCRIPTION_LISTENER_URL = ""http://localhost:8080/subscriptionlistener_uddi_client"";
+	public static final String UDDI_ORG_NS                       = ""urn:uddi-org:v3_service"";
+	public static final String UDDI_CLIENT_SUBSCRIPTION_LISTENER = ""UDDIClientSubscriptionListenerService"";
+	public static final QName  SUBSCRIPTION_LISTENER_SERVICE_NAME= new QName(UDDI_ORG_NS, UDDI_CLIENT_SUBSCRIPTION_LISTENER);
+	public static final String SUBSCRIPTION_LISTENER_PORT_NAME   = ""UDDIClientSubscriptionListenerImplPort"";
+	public static final String DEFAULT_SUBSCRIPTION_LISTENER_URL = ""http://localhost:8080/subscriptionlistener_uddi_client"";
 	
 	private Log log = LogFactory.getLog(this.getClass());
 	
"
juddi,6f95825a92fbf14a5ab8ce7230d1ae2f1a3fc9f9,"JUDDI-828 altering the callback endpoint to prevent name clashes on jboss. Javadoc updates

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1563128 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-31 12:40:00,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
index 3b52f3b..596abb0 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
@@ -82,7 +82,7 @@
  * @since 3.2
  */
 
-@WebService(serviceName=""UDDISubscriptionListenerService"", 
+@WebService(serviceName=""UDDISubscriptionListenerClientService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISubscriptionListenerPortType"",
 			targetNamespace = ""urn:uddi-org:v3_service"")
 public class SubscriptionCallbackListener implements org.uddi.v3_service.UDDISubscriptionListenerPortType, Runnable {
"
juddi,b19232cb5b7acd1b66b7026b4c5746a4b2b3eac2,"JUDDI-809 adding finding all services for a businessKey

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561820 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-27 20:00:43,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 901f99f..1e95aec 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -61,6 +61,7 @@
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
 import org.uddi.api_v3.ListDescription;
+import org.uddi.api_v3.Name;
 import org.uddi.api_v3.RelatedBusinessesList;
 import org.uddi.api_v3.ServiceList;
 import org.uddi.api_v3.TModelBag;
@@ -296,6 +297,14 @@
 			keysFound = FindServiceByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
 		}
 		keysFound = FindServiceByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
+		
+		if (body.getFindTModel()==null && body.getCategoryBag()==null && 
+				( body.getTModelBag()==null || body.getTModelBag().getTModelKey().size() == 0) 
+				&& body.getName().size() == 0 && body.getBusinessKey() != null) {
+			//support searching for all services for a business
+			findQualifiers.setApproximateMatch(true);
+			body.getName().add(new Name(""%"", null));
+		}
 		keysFound = FindServiceByNameQuery.select(em, findQualifiers, body.getName(), body.getBusinessKey(), keysFound);
 		
 		if (body.getTModelBag().getTModelKey().size()==0) body.setTModelBag(null);
"
juddi,b19232cb5b7acd1b66b7026b4c5746a4b2b3eac2,"JUDDI-809 adding finding all services for a businessKey

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561820 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-27 20:00:43,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index 668c605..d76030c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -235,7 +235,10 @@
                         throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
                 }
 
-                if (body.getCategoryBag() == null && body.getFindTModel() == null && body.getTModelBag() == null && body.getName().size() == 0) {
+                if (body.getCategoryBag() == null && body.getFindTModel() == null && 
+                		(body.getTModelBag() == null || body.getTModelBag().getTModelKey().size() == 0)
+                		&& body.getName().size() == 0 && body.getBusinessKey() == null) 
+                {
                         throw new FatalErrorException(new ErrorMessage(""errors.findservice.NoInput""));
                 }
 
"
juddi,0ee76293f663c603490cd6b53cdd7b47f555088a,"JUDDI-794 fixed
JUDDI-819 done

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561432 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-26 01:34:54,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/package-info.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/package-info.java
index ffa3716..4623b6c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/package-info.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/package-info.java
@@ -4,6 +4,8 @@
 // Any modifications to this file will be lost upon recompilation of the source schema. 
 // Generated on: 2013.05.27 at 06:54:03 PM EDT 
 //
-
+/**
+ * JAXB Generated classes for WADL and WADL2UDDI parser
+ */
 @javax.xml.bind.annotation.XmlSchema(namespace = ""http://wadl.dev.java.net/2009/02"", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
 package org.apache.juddi.v3.client.mapping.wadl;
"
juddi,0ee76293f663c603490cd6b53cdd7b47f555088a,"JUDDI-794 fixed
JUDDI-819 done

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561432 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-26 01:34:54,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index ee5b78d..daf78a5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -320,8 +320,9 @@
         /**
          * Completely deletes a tModel from the persistence layer.
          * Administrative privilege required. All entities that reference this tModel
-         * will no longer be able to use the tModel if jUDDI Option Enforce referential Integrity is enabled.
-         * @see Property.JUDDI_ENFORCE_REFERENTIAL_INTEGRITY
+         * will no longer be able to use the tModel if jUDDI Option Enforce referential Integrity is enabled.<br>
+         * Required permission, you must be am administrator
+         * {@link Property#JUDDI_ENFORCE_REFERENTIAL_INTEGRITY}
          * @param body
          * @throws DispositionReportFaultMessage 
          */
"
juddi,0ee76293f663c603490cd6b53cdd7b47f555088a,"JUDDI-794 fixed
JUDDI-819 done

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561432 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-26 01:34:54,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index b4d2769..c9c8eb9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -340,7 +340,7 @@
 				throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
 		}
 
-		ValidatePublish validatePublish = new ValidatePublish(rootPublisher);
+		ValidatePublish validatePublish = new ValidatePublish(rootPublisher, config.getString(Property.JUDDI_NODE_ID));
 		
 		validatePublish.validateNames(businessEntity.getName());
 		validatePublish.validateDiscoveryUrls(businessEntity.getDiscoveryURLs());
@@ -395,7 +395,7 @@
 				throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
 		}
 		
-		ValidatePublish validatePublish = new ValidatePublish(rootPublisher);
+		ValidatePublish validatePublish = new ValidatePublish(rootPublisher, config.getString(Property.JUDDI_NODE_ID));
 		
 		validatePublish.validateNames(businessService.getName());
 		validatePublish.validateCategoryBag(businessService.getCategoryBag(), config,true);
@@ -446,7 +446,7 @@
 				throw new KeyUnavailableException(new ErrorMessage(""errors.keyunavailable.BadPartition"", entityKey));
 		}
 		
-		ValidatePublish validatePublish = new ValidatePublish(rootPublisher);
+		ValidatePublish validatePublish = new ValidatePublish(rootPublisher, config.getString(Property.JUDDI_NODE_ID));
 		
 		validatePublish.validateCategoryBag(bindingTemplate.getCategoryBag(), config,true);
 		validatePublish.validateTModelInstanceDetails(bindingTemplate.getTModelInstanceDetails(),config,true);
"
juddi,0ee76293f663c603490cd6b53cdd7b47f555088a,"JUDDI-794 fixed
JUDDI-819 done

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561432 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-26 01:34:54,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 7e5e9e3..8f1c6df 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -107,7 +107,11 @@
          */
         private Log log = LogFactory.getLog(this.getClass());
 
-        public ValidatePublish(UddiEntityPublisher publisher) {
+        public ValidatePublish(UddiEntityPublisher publisher, String nodeid) {
+                super(publisher,nodeid);
+        }
+        
+         public ValidatePublish(UddiEntityPublisher publisher) {
                 super(publisher);
         }
 
@@ -181,10 +185,11 @@
                                 throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", entityKey));
                         }
 
-                        if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin() ) {
-                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                        }
-
+                         //if you're are the owner, access granted
+                        //if you are an admin && this item belongs to this node, access granted
+                        //else denied
+                        
+                        AccessCheck(obj, entityKey);
                         i++;
                 }
         }
@@ -220,10 +225,8 @@
                         if (obj == null) {
                                 throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BindingTemplateNotFound"", entityKey));
                         }
-
-                        if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin() ) {
-                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                        }
+                        
+                        AccessCheck(obj, entityKey);
 
                         i++;
                 }
@@ -260,13 +263,28 @@
                                 throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.TModelNotFound"", entityKey));
                         }
 
-                        if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin() ) {
-                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                        }
+                        AccessCheck(obj, entityKey);
 
                         i++;
                 }
         }
+        
+        private void AccessCheck(Object obj, String entityKey) throws UserMismatchException{
+                        boolean accessCheck=false; //assume access denied
+                        if (publisher.isOwner((UddiEntity) obj)){
+                           accessCheck=true;
+                                
+                        }
+                        if (((Publisher) publisher).isAdmin() && 
+                                nodeID.equals(((UddiEntity) obj).getNodeId())){
+                           accessCheck=true;
+                        }
+                
+                        if (!accessCheck ) {
+                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
+                        }
+
+        }
 
         public void validateDeletePublisherAssertions(EntityManager em, DeletePublisherAssertions body) throws DispositionReportFaultMessage {
 
@@ -648,9 +666,8 @@
                                 entityExists = true;
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin()) {
-                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                                }
+                                AccessCheck(obj, entityKey);
+                                
                         } else {
                                 // Inside this block, we have a key proposed by the publisher on a new entity
 
@@ -783,10 +800,9 @@
                                                 businessService.setBusinessKey(parentKey);
                                         }
 
+                                        
                                         // Make sure publisher owns this entity.
-                                        if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin()) {
-                                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                                        }
+                                        AccessCheck(obj, entityKey);
 
                                         // If existing service trying to be saved has a different parent key, then we have a problem
                                         if (!parentKey.equalsIgnoreCase(bs.getBusinessEntity().getEntityKey())) {
@@ -831,9 +847,10 @@
                                         }
 
                                         // Make sure publisher owns this parent entity.
-                                        if (!publisher.isOwner((UddiEntity) parentTemp)) {
-                                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwnerParent"", parentKey));
-                                        }
+                                        AccessCheck(parentTemp, parentKey);
+                                       // if (!publisher.isOwner((UddiEntity) parentTemp)) {
+                                        //        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwnerParent"", parentKey));
+                                        //}
                                 }
                         }
 
@@ -939,9 +956,10 @@
                                 }
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
-                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                                }
+                                 AccessCheck(obj, entityKey);
+                                //if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
+//                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
+  //                              }
 
                         } else {
                                 // Inside this block, we have a key proposed by the publisher on a new entity
@@ -973,9 +991,10 @@
                                 }
 
                                 // Make sure publisher owns this parent entity.
-                                if (!publisher.isOwner((UddiEntity) parentTemp)) {
-                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwnerParent"", parentKey));
-                                }
+                                AccessCheck(parentTemp, parentKey);
+//                                if (!publisher.isOwner((UddiEntity) parentTemp)) {
+//                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwnerParent"", parentKey));
+//                                }
 
                         }
                 }
@@ -1028,9 +1047,10 @@
                                 entityExists = true;
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
-                                        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                                }
+                                AccessCheck(obj, entityKey);
+                                //if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
+                                //        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
+                               // }
                         } else {
                                 // Inside this block, we have a key proposed by the publisher on a new entity
 
@@ -1600,9 +1620,9 @@
                                 throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.TModelNotFound"", entityKey));
                         }
 
-                        if (!publisher.isOwner((UddiEntity) obj)) {
-                                throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
-                        }
+                        //if (!publisher.isOwner((UddiEntity) obj)) {
+                        //        throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
+                        //}
 
                 }
         }
"
juddi,0ee76293f663c603490cd6b53cdd7b47f555088a,"JUDDI-794 fixed
JUDDI-819 done

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561432 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-26 01:34:54,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
index c0ff5f7..6ffcfeb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
@@ -18,7 +18,12 @@
 package org.apache.juddi.validation;
 
 
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import javax.persistence.EntityManager;
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 
 import org.apache.juddi.model.Subscription;
 import org.apache.juddi.model.UddiEntity;
@@ -33,9 +38,26 @@
 public abstract class ValidateUDDIApi {
 
 	protected UddiEntityPublisher publisher;
+   protected String nodeID=null;
 		
-	public ValidateUDDIApi(UddiEntityPublisher publisher) {
+   /**
+    * This is used only during the install process to prevent infinite loops
+    * @param publisher
+    * @param nodeid 
+    */
+	public ValidateUDDIApi(UddiEntityPublisher publisher, String nodeid) {
 		this.publisher = publisher;
+      this.nodeID = nodeid;
+	}
+   
+   public ValidateUDDIApi(UddiEntityPublisher publisher) {
+		this.publisher = publisher;
+      try {
+         this.nodeID = AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID);
+      } catch (ConfigurationException ex) {
+         Logger.getLogger(ValidateUDDIApi.class.getName()).log(Level.SEVERE, ""unable to get the current node id, this may cause access control problems""
+                 + "" and must be fixed. set "" + Property.JUDDI_NODE_ID + "" in juddiv3.xml"", ex);
+      }
 	}
 
 	public UddiEntityPublisher getPublisher() {
"
juddi,e86f5f9d48c00a6949f13c11ba1c8aff2e5d5aa2,"JUDDI-816 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1561422 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-25 23:07:03,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index a1d95dd..e0dc647 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -798,7 +798,9 @@
                 }
                 if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
-                        if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().toLowerCase().contains(""expired"")) {
+                        if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) 
+                                || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED) 
+                                || ex.getMessage().toLowerCase().contains(""expire"")) {
                                 return true;
                         }
                 }
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
index e6954bb..24df42b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv2Tov3.java
@@ -24,14 +24,13 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.AccessPointType;
 import org.apache.juddi.v3.client.UDDIConstants;
-import org.apache.juddi.v3.client.transport.JAXWSv2TranslationTransport;
 import org.uddi.api_v2.AssertionStatusReport;
 import org.uddi.api_v2.GetBusinessDetailExt;
-import org.uddi.api_v2.GetPublisherAssertions;
 import org.uddi.api_v2.GetTModelDetail;
 import org.uddi.api_v2.SetPublisherAssertions;
 import org.uddi.api_v2.Truncated;
 import org.uddi.api_v3.AccessPoint;
+import org.uddi.api_v3.Address;
 import org.uddi.api_v3.AssertionStatusItem;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
@@ -44,6 +43,8 @@
 import org.uddi.api_v3.BusinessServices;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.CompletionStatus;
+import org.uddi.api_v3.Contact;
+import org.uddi.api_v3.Contacts;
 import org.uddi.api_v3.DeleteBinding;
 import org.uddi.api_v3.DeleteBusiness;
 import org.uddi.api_v3.DeletePublisherAssertions;
@@ -53,6 +54,7 @@
 import org.uddi.api_v3.Direction;
 import org.uddi.api_v3.DiscoveryURL;
 import org.uddi.api_v3.DiscoveryURLs;
+import org.uddi.api_v3.Email;
 import org.uddi.api_v3.ErrInfo;
 import org.uddi.api_v3.FindBinding;
 import org.uddi.api_v3.FindBusiness;
@@ -75,6 +77,8 @@
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.OverviewDoc;
 import org.uddi.api_v3.OverviewURL;
+import org.uddi.api_v3.PersonName;
+import org.uddi.api_v3.Phone;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
 import org.uddi.api_v3.RelatedBusinessInfo;
@@ -117,6 +121,11 @@
                 BusinessEntity item = new org.uddi.api_v3.BusinessEntity();
                 item.setBusinessKey(be.getBusinessKey());
                 item.getName().addAll(MapName(be.getName()));
+                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
+                item.setDiscoveryURLs(MapDiscoveryURLs(be.getDiscoveryURLs()));
+                item.getDescription().addAll(MapDescription(be.getDescription()));
+                item.setContacts(MapContacts(be.getContacts()));
+                item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
                 if (be.getBusinessServices() != null && !be.getBusinessServices().getBusinessService().isEmpty()) {
                         item.setBusinessServices(new BusinessServices());
                         item.getBusinessServices().getBusinessService().addAll(MapService(be.getBusinessServices().getBusinessService()));
@@ -136,6 +145,8 @@
                         item.setBindingTemplates(new BindingTemplates());
                         item.getBindingTemplates().getBindingTemplate().addAll(MapBinding(be.getBindingTemplates().getBindingTemplate()));
                 }
+                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
+                item.getDescription().addAll(MapDescription(be.getDescription()));
                 return item;
         }
 
@@ -157,6 +168,7 @@
                 BindingTemplate item = new org.uddi.api_v3.BindingTemplate();
                 item.setBindingKey(be.getBindingKey());
                 item.setServiceKey(be.getServiceKey());
+                
                 item.setAccessPoint(MapAccessPoint(be.getAccessPoint()));
                 item.setHostingRedirector(MapHostingRedir(be.getHostingRedirector()));
                 item.getDescription().addAll(MapDescription(be.getDescription()));
@@ -192,7 +204,7 @@
         private static List<Name> MapName(List<org.uddi.api_v2.Name> name) {
                 List<Name> items = new ArrayList<Name>();
                 for (int i = 0; i < name.size(); i++) {
-                        Name n = new Name(name.get(i).getValue(), name.get(i).getValue());
+                        Name n = new Name(name.get(i).getValue(), name.get(i).getLang());
                         items.add(n);
                 }
                 return items;
@@ -243,6 +255,7 @@
                 r.getDescription().addAll(MapDescription(overviewDoc.getDescription()));
                 if (overviewDoc.getOverviewURL() != null) {
                         r.setOverviewURL(new OverviewURL());
+                        overviewDoc.getDescription();
                         r.getOverviewURL().setValue(overviewDoc.getOverviewURL());
                 }
                 return r;
@@ -744,7 +757,7 @@
                                 && name.get(i).getLang().contains(UDDIConstants.WILDCARD)) {
                                 return true;
                         }
-                         if (name.get(i).getLang() != null
+                        if (name.get(i).getLang() != null
                                 && name.get(i).getLang().contains(UDDIConstants.WILDCARD_CHAR)) {
                                 return true;
                         }
@@ -996,49 +1009,153 @@
         }
 
         private static boolean ContainsWildCardSingle(Name name) {
-                if (name!=null){
-                        if (name.getValue()!=null && name.getValue().contains(UDDIConstants.WILDCARD))
+                if (name != null) {
+                        if (name.getValue() != null && name.getValue().contains(UDDIConstants.WILDCARD)) {
                                 return true;
-                         if (name.getValue()!=null && name.getValue().contains(UDDIConstants.WILDCARD_CHAR))
+                        }
+                        if (name.getValue() != null && name.getValue().contains(UDDIConstants.WILDCARD_CHAR)) {
                                 return true;
-                        if (name.getLang()!=null && name.getLang().contains(UDDIConstants.WILDCARD))
+                        }
+                        if (name.getLang() != null && name.getLang().contains(UDDIConstants.WILDCARD)) {
                                 return true;
-                         if (name.getLang()!=null && name.getLang().contains(UDDIConstants.WILDCARD_CHAR))
+                        }
+                        if (name.getLang() != null && name.getLang().contains(UDDIConstants.WILDCARD_CHAR)) {
                                 return true;
+                        }
                 }
                 return false;
         }
 
         public static List<AssertionStatusItem> MapAssertionStatusItems(AssertionStatusReport assertionStatusReport) {
                 List<AssertionStatusItem> r = new ArrayList<AssertionStatusItem>();
-                if (assertionStatusReport==null)return r;
-                for (int i=0; i < assertionStatusReport.getAssertionStatusItem().size(); i++){
+                if (assertionStatusReport == null) {
+                        return r;
+                }
+                for (int i = 0; i < assertionStatusReport.getAssertionStatusItem().size(); i++) {
                         AssertionStatusItem x = new AssertionStatusItem();
                         x.setFromKey(assertionStatusReport.getAssertionStatusItem().get(i).getFromKey());
                         x.setToKey(assertionStatusReport.getAssertionStatusItem().get(i).getToKey());
-                        if (""status:complete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus()))
+                        if (""status:complete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus())) {
                                 x.setCompletionStatus(CompletionStatus.STATUS_COMPLETE);
-                        else if ("" status:toKey_incomplete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus()))
+                        } else if (""status:toKey_incomplete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus())) {
                                 x.setCompletionStatus(CompletionStatus.STATUS_TO_KEY_INCOMPLETE);
-                        else if ("" status:fromKey_incomplete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus()))
+                        } else if (""status:fromKey_incomplete"".equalsIgnoreCase(assertionStatusReport.getAssertionStatusItem().get(i).getCompletionStatus())) {
                                 x.setCompletionStatus(CompletionStatus.STATUS_FROM_KEY_INCOMPLETE);
-                        else 
-                                        x.setCompletionStatus(CompletionStatus.STATUS_BOTH_INCOMPLETE);
+                        } else {
+                                x.setCompletionStatus(CompletionStatus.STATUS_BOTH_INCOMPLETE);
+                        }
                         x.setKeysOwned(MapKeysOwned(assertionStatusReport.getAssertionStatusItem().get(i).getKeysOwned()));
-                        if (assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference()!=null)
-                        x.setKeyedReference(new KeyedReference(assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getTModelKey(),
-                                assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getKeyName(),
-                                assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getKeyValue()));
+                        if (assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference() != null) {
+                                x.setKeyedReference(new KeyedReference(assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getTModelKey(),
+                                        assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getKeyName(),
+                                        assertionStatusReport.getAssertionStatusItem().get(i).getKeyedReference().getKeyValue()));
+                        }
                 }
                 return r;
         }
 
         private static KeysOwned MapKeysOwned(org.uddi.api_v2.KeysOwned keysOwned) {
-                if (keysOwned==null)return null;
+                if (keysOwned == null) {
+                        return null;
+                }
                 KeysOwned r = new KeysOwned();
                 r.setFromKey(keysOwned.getFromKey());
                 r.setToKey(keysOwned.getToKey());
                 return r;
         }
 
+        private static Contacts MapContacts(org.uddi.api_v2.Contacts contacts) {
+                if (contacts == null) {
+                        return null;
+                }
+                Contacts c = new Contacts();
+                c.getContact().addAll(MapContactList(contacts.getContact()));
+                return c;
+
+        }
+
+        private static List<Contact> MapContactList(List<org.uddi.api_v2.Contact> contact) {
+                List<Contact> r = new ArrayList<Contact>();
+                if (contact == null) {
+                        return r;
+                }
+                for (int i = 0; i < contact.size(); i++) {
+                        Contact c = new Contact();
+                        c.setUseType(contact.get(i).getUseType());
+                        if (contact.get(i).getPersonName() != null) {
+                                c.getPersonName().add(new PersonName(contact.get(i).getPersonName(), null));
+                        }
+                        c.getAddress().addAll(MapAddress(contact.get(i).getAddress()));
+                        c.getDescription().addAll(MapDescription(contact.get(i).getDescription()));
+                        c.getEmail().addAll(MapEmail(contact.get(i).getEmail()));
+                        c.getPhone().addAll(MapPhone(contact.get(i).getPhone()));
+
+                        r.add(c);
+                }
+                return r;
+        }
+
+        private static Collection<? extends Address> MapAddress(List<org.uddi.api_v2.Address> address) {
+                List<Address> r = new ArrayList<Address>();
+                if (address == null) {
+                        return r;
+                }
+                for (int i = 0; i < address.size(); i++) {
+                        Address x = new Address();
+                        x.setSortCode(address.get(i).getSortCode());
+                        x.setTModelKey(address.get(i).getTModelKey());
+                        x.setUseType(address.get(i).getUseType());
+                        x.getAddressLine().addAll(MapAddressLine(address.get(i).getAddressLine()));
+                        r.add(x);
+                }
+                return r;
+
+        }
+
+        private static Collection<? extends Email> MapEmail(List<org.uddi.api_v2.Email> email) {
+                List<Email> r = new ArrayList<Email>();
+                if (email == null) {
+                        return r;
+                }
+                for (int i = 0; i < email.size(); i++) {
+                        Email x = new Email();
+                        x.setUseType(email.get(i).getUseType());
+                        x.setValue(email.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
+        }
+
+        private static Collection<? extends Phone> MapPhone(List<org.uddi.api_v2.Phone> phone) {
+                List<Phone> r = new ArrayList<Phone>();
+                if (phone == null) {
+                        return r;
+                }
+                for (int i = 0; i < phone.size(); i++) {
+                        Phone x = new Phone();
+                        x.setUseType(phone.get(i).getUseType());
+                        x.setValue(phone.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
+        }
+
+        private static List<org.uddi.api_v3.AddressLine> MapAddressLine(List<org.uddi.api_v2.AddressLine> addressLine) {
+                List<org.uddi.api_v3.AddressLine> r = new ArrayList<org.uddi.api_v3.AddressLine>();
+                if (addressLine == null) {
+                        return r;
+                }
+                for (int i = 0; i < addressLine.size(); i++) {
+                        org.uddi.api_v3.AddressLine x = new org.uddi.api_v3.AddressLine();
+                        x.setKeyName(addressLine.get(i).getKeyName());
+                        x.setKeyValue(addressLine.get(i).getKeyValue());
+                        x.setValue(addressLine.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
+        }
+
 }
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
index d5cbbf0..ac571f0 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MapUDDIv3Tov2.java
@@ -16,12 +16,13 @@
 package org.apache.juddi.v3.client.mapping;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
-import javax.xml.ws.Holder;
+import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.juddi.v3.client.UDDIConstants;
 import org.uddi.api_v2.AccessPoint;
 import org.uddi.api_v2.AddPublisherAssertions;
+import org.uddi.api_v2.Address;
+import org.uddi.api_v2.AddressLine;
 import org.uddi.api_v2.BindingDetail;
 import org.uddi.api_v2.BindingTemplate;
 import org.uddi.api_v2.BindingTemplates;
@@ -34,6 +35,8 @@
 import org.uddi.api_v2.BusinessService;
 import org.uddi.api_v2.BusinessServices;
 import org.uddi.api_v2.CategoryBag;
+import org.uddi.api_v2.Contact;
+import org.uddi.api_v2.Contacts;
 import org.uddi.api_v2.DeleteBinding;
 import org.uddi.api_v2.DeleteBusiness;
 import org.uddi.api_v2.DeletePublisherAssertions;
@@ -42,6 +45,7 @@
 import org.uddi.api_v2.Description;
 import org.uddi.api_v2.DiscoveryURL;
 import org.uddi.api_v2.DiscoveryURLs;
+import org.uddi.api_v2.Email;
 import org.uddi.api_v2.ErrInfo;
 import org.uddi.api_v2.FindBinding;
 import org.uddi.api_v2.FindQualifiers;
@@ -73,6 +77,7 @@
 import org.uddi.api_v2.GetServiceDetail;
 import org.uddi.api_v2.GetTModelDetail;
 import org.uddi.api_v2.KeyType;
+import org.uddi.api_v2.Phone;
 import org.uddi.api_v2.PublisherAssertion;
 import org.uddi.api_v2.PublisherAssertions;
 import org.uddi.api_v2.RegisteredInfo;
@@ -104,12 +109,19 @@
 
         public static final String VERSION = ""2.0"";
 
-        public static org.uddi.api_v2.BusinessEntity MapBusiness(org.uddi.api_v3.BusinessEntity be) {
+        public static org.uddi.api_v2.BusinessEntity MapBusiness(org.uddi.api_v3.BusinessEntity be, String operator) {
                 if (be == null) {
                         return null;
                 }
                 BusinessEntity item = new org.uddi.api_v2.BusinessEntity();
                 item.setBusinessKey(be.getBusinessKey());
+                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
+                item.setContacts(MapContacts(be.getContacts()));
+                item.setDiscoveryURLs(MapDiscoveryURLs(be.getDiscoveryURLs()));
+                item.setIdentifierBag(MapIdentBag(be.getIdentifierBag()));
+                item.setOperator(operator);
+                item.getDescription().addAll(MapDescription(be.getDescription()));
+
                 item.getName().addAll(MapName(be.getName()));
                 if (be.getBusinessServices() != null && !be.getBusinessServices().getBusinessService().isEmpty()) {
                         item.setBusinessServices(new BusinessServices());
@@ -123,6 +135,8 @@
                         return null;
                 }
                 BusinessService item = new org.uddi.api_v2.BusinessService();
+                item.setCategoryBag(MapCategoryBag(be.getCategoryBag()));
+                item.getDescription().addAll(MapDescription(be.getDescription()));
                 item.setBusinessKey(be.getBusinessKey());
                 item.setServiceKey(be.getServiceKey());
                 item.getName().addAll(MapName(be.getName()));
@@ -149,11 +163,13 @@
                         return null;
                 }
                 BindingTemplate item = new org.uddi.api_v2.BindingTemplate();
+                item.getDescription().addAll(MapDescription(be.getDescription()));
+
                 item.setBindingKey(be.getBindingKey());
                 item.setServiceKey(be.getServiceKey());
                 item.setAccessPoint(MapAccessPoint(be.getAccessPoint()));
                 item.setHostingRedirector(MapHostingRedir(be.getHostingRedirector()));
-                item.getDescription().addAll(MapDescription(be.getDescription()));
+
                 item.setTModelInstanceDetails(MapTModelInstanceDetails(be.getTModelInstanceDetails()));
 
                 return item;
@@ -234,10 +250,12 @@
                         return null;
                 }
                 OverviewDoc r = new OverviewDoc();
+                
                 r.getDescription().addAll(MapDescription(overviewDoc.get(0).getDescription()));
-                if (overviewDoc.get(0).getOverviewURL() != null) {
+                if (overviewDoc.get(0).getOverviewURL() != null && overviewDoc.get(0).getOverviewURL().getValue()!=null) {
                         r.setOverviewURL(overviewDoc.get(0).getOverviewURL().getValue());
                 }
+                
                 return r;
         }
 
@@ -259,7 +277,7 @@
 
         private static TModelInstanceDetails MapTModelInstanceDetails(org.uddi.api_v3.TModelInstanceDetails tModelInstanceDetails) {
                 if (tModelInstanceDetails == null) {
-                        return null;
+                        return new TModelInstanceDetails();
                 }
                 TModelInstanceDetails r = new TModelInstanceDetails();
                 r.getTModelInstanceInfo().addAll(MapTModelInstanceInfo(tModelInstanceDetails.getTModelInstanceInfo()));
@@ -314,7 +332,7 @@
                         if (tModelInstanceInfo.get(i).getInstanceDetails() != null) {
                                 t.setInstanceDetails(new InstanceDetails());
                                 t.getInstanceDetails().getDescription().addAll(MapDescription(tModelInstanceInfo.get(i).getInstanceDetails().getDescription()));
-                                t.getInstanceDetails().setInstanceParms(tModelInstanceInfo.get(i).getInstanceDetails().getInstanceParms());
+                                t.getInstanceDetails().setInstanceParms(StringEscapeUtils.escapeXml(tModelInstanceInfo.get(i).getInstanceDetails().getInstanceParms()));
                                 t.getInstanceDetails().setOverviewDoc(MapOverviewDoc(tModelInstanceInfo.get(i).getInstanceDetails().getOverviewDoc()));
                         }
                         r.add(t);
@@ -372,7 +390,7 @@
                 r.setTModelBag(MapTModelBag(body.getTModelBag()));
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
-                
+
                 r.setBusinessKey(body.getBusinessKey());
                 r.getName().addAll(MapName(body.getName()));
                 return r;
@@ -384,7 +402,7 @@
                 r.setMaxRows(body.getMaxRows());
                 r.setCategoryBag(MapCategoryBag(body.getCategoryBag()));
                 r.setGeneric(VERSION);
-                
+
                 if (body.getName() != null) {
                         r.setName(new Name(body.getName().getValue(), body.getName().getLang()));
                 }
@@ -395,7 +413,7 @@
                 GetBindingDetail r = new GetBindingDetail();
                 r.getBindingKey().addAll(body.getBindingKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -403,7 +421,7 @@
                 GetBusinessDetail r = new GetBusinessDetail();
                 r.getBusinessKey().addAll(body.getBusinessKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -411,7 +429,7 @@
                 GetServiceDetail r = new GetServiceDetail();
                 r.getServiceKey().addAll(body.getServiceKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -419,7 +437,7 @@
                 GetTModelDetail r = new GetTModelDetail();
                 r.getTModelKey().addAll(body.getTModelKey());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -430,7 +448,7 @@
                 AddPublisherAssertions r = new AddPublisherAssertions();
                 r.setAuthInfo(body.getAuthInfo());
                 r.setGeneric(VERSION);
-                
+
                 r.getPublisherAssertion().addAll(MapPublisherAssertion(body.getPublisherAssertion()));
                 return r;
 
@@ -439,7 +457,7 @@
         public static DeleteBinding MapDeleteBinding(org.uddi.api_v3.DeleteBinding body) {
                 DeleteBinding r = new DeleteBinding();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBindingKey().addAll(body.getBindingKey());
                 return r;
@@ -449,7 +467,7 @@
         public static DeleteBusiness MapDeleteBusiness(org.uddi.api_v3.DeleteBusiness body) {
                 DeleteBusiness r = new DeleteBusiness();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBusinessKey().addAll(body.getBusinessKey());
                 return r;
@@ -468,7 +486,7 @@
         public static DeleteService MapDeleteService(org.uddi.api_v3.DeleteService body) {
                 DeleteService r = new DeleteService();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getServiceKey().addAll(body.getServiceKey());
                 return r;
@@ -477,7 +495,7 @@
         public static DeleteTModel MapDeleteTModel(org.uddi.api_v3.DeleteTModel body) {
                 DeleteTModel r = new DeleteTModel();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getTModelKey().addAll(body.getTModelKey());
                 return r;
@@ -486,7 +504,7 @@
         public static SaveBinding MapSaveBinding(org.uddi.api_v3.SaveBinding body) {
                 SaveBinding r = new SaveBinding();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
                 r.getBindingTemplate().addAll(MapBinding(body.getBindingTemplate()));
                 return r;
@@ -495,9 +513,9 @@
         public static SaveBusiness MapSaveBusiness(org.uddi.api_v3.SaveBusiness body) {
                 SaveBusiness r = new SaveBusiness();
                 r.setGeneric(VERSION);
-                
+
                 r.setAuthInfo(body.getAuthInfo());
-                r.getBusinessEntity().addAll(MapBusinessList(body.getBusinessEntity()));
+                r.getBusinessEntity().addAll(MapBusinessList(body.getBusinessEntity(), null));
                 return r;
         }
 
@@ -522,7 +540,7 @@
                 GetPublisherAssertions r = new GetPublisherAssertions();
                 r.setAuthInfo(authInfo);
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -530,7 +548,7 @@
                 GetRegisteredInfo r = new GetRegisteredInfo();
                 r.setAuthInfo(body.getAuthInfo());
                 r.setGeneric(VERSION);
-                
+
                 return r;
         }
 
@@ -647,13 +665,13 @@
 
         }
 
-        private static List<BusinessEntity> MapBusinessList(List<org.uddi.api_v3.BusinessEntity> businessEntity) {
+        private static List<BusinessEntity> MapBusinessList(List<org.uddi.api_v3.BusinessEntity> businessEntity, String operator) {
                 List<BusinessEntity> r = new ArrayList<BusinessEntity>();
                 if (businessEntity == null) {
                         return r;
                 }
                 for (int i = 0; i < businessEntity.size(); i++) {
-                        r.add(MapBusiness(businessEntity.get(i)));
+                        r.add(MapBusiness(businessEntity.get(i), operator));
                 }
                 return r;
         }
@@ -663,7 +681,7 @@
                 if (tModel == null) {
                         return r;
                 }
-                
+
                 for (int i = 0; i < tModel.size(); i++) {
                         r.add(MapTModel(tModel.get(i)));
                 }
@@ -676,7 +694,7 @@
                 }
                 SetPublisherAssertions r = new SetPublisherAssertions();
                 r.setGeneric(VERSION);
-                
+
                 r.getPublisherAssertion().addAll(MapPublisherAssertion(value));
                 return r;
 
@@ -702,7 +720,7 @@
                 if (ex == null) {
                         return null;
                 }
-                DispositionReport r = new DispositionReport(""err"", MapDispositionReport(ex.getFaultInfo(),  operator));
+                DispositionReport r = new DispositionReport(""err"", MapDispositionReport(ex.getFaultInfo(), operator));
                 return r;
         }
 
@@ -760,7 +778,7 @@
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
                 r.setBusinessInfos(MapBusinessInfos(findBusiness.getBusinessInfos()));
-                if (findBusiness.isTruncated()!=null && findBusiness.isTruncated()) {
+                if (findBusiness.isTruncated() != null && findBusiness.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -774,7 +792,7 @@
                 }
                 RelatedBusinessesList r = new RelatedBusinessesList();
                 r.setBusinessKey(findRelatedBusinesses.getBusinessKey());
-                if (findRelatedBusinesses.isTruncated()!=null && findRelatedBusinesses.isTruncated()) {
+                if (findRelatedBusinesses.isTruncated() != null && findRelatedBusinesses.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -800,7 +818,7 @@
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
                 r.setServiceInfos(MapServiceInfos(findService.getServiceInfos()));
-                if (findService.isTruncated()!=null && findService.isTruncated()) {
+                if (findService.isTruncated() != null && findService.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -816,7 +834,7 @@
 
                 for (int i = 0; i < businessDetail.getBusinessEntity().size(); i++) {
                         BusinessEntityExt x = new BusinessEntityExt();
-                        x.setBusinessEntity(MapBusiness(businessDetail.getBusinessEntity().get(i)));
+                        x.setBusinessEntity(MapBusiness(businessDetail.getBusinessEntity().get(i), null));
                         r.getBusinessEntityExt().add(x);
                 }
                 return r;
@@ -828,7 +846,7 @@
                         return null;
                 }
                 ServiceDetail r = new ServiceDetail();
-                if (serviceDetail.isTruncated()!=null && serviceDetail.isTruncated()) {
+                if (serviceDetail.isTruncated() != null && serviceDetail.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -845,7 +863,7 @@
                         return null;
                 }
                 TModelList r = new TModelList();
-                if (findTModel.isTruncated()!=null && findTModel.isTruncated()) {
+                if (findTModel.isTruncated() != null && findTModel.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -866,13 +884,13 @@
                 org.uddi.api_v2.BusinessDetail r = new org.uddi.api_v2.BusinessDetail();
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
-                if (businessDetail.isTruncated()!=null && businessDetail.isTruncated()) {
+                if (businessDetail.isTruncated() != null && businessDetail.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
                 }
 
-                r.getBusinessEntity().addAll(MapBusinessList(businessDetail.getBusinessEntity()));
+                r.getBusinessEntity().addAll(MapBusinessList(businessDetail.getBusinessEntity(), operator));
                 return r;
         }
 
@@ -883,7 +901,7 @@
                 TModelDetail r = new TModelDetail();
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
-                if (tModelDetail.isTruncated()!=null && tModelDetail.isTruncated()) {
+                if (tModelDetail.isTruncated() != null && tModelDetail.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -932,6 +950,7 @@
                 }
                 for (int i = 0; i < tModelInfo.size(); i++) {
                         TModelInfo x = new TModelInfo();
+                        
                         x.setTModelKey(tModelInfo.get(i).getTModelKey());
                         x.setName(new Name(tModelInfo.get(i).getName().getValue(), tModelInfo.get(i).getName().getValue()));
                         r.add(x);
@@ -946,7 +965,7 @@
                 RegisteredInfo r = new RegisteredInfo();
                 r.setGeneric(VERSION);
                 r.setOperator(operator);
-                if (registeredInfo.isTruncated()!=null && registeredInfo.isTruncated()) {
+                if (registeredInfo.isTruncated() != null && registeredInfo.isTruncated()) {
                         r.setTruncated(Truncated.TRUE);
                 } else {
                         r.setTruncated(Truncated.FALSE);
@@ -1018,7 +1037,7 @@
                                 && name.get(i).getLang().contains(UDDIConstants.WILDCARD)) {
                                 return true;
                         }
-                         if (name.get(i).getLang() != null
+                        if (name.get(i).getLang() != null
                                 && name.get(i).getLang().contains(UDDIConstants.WILDCARD_CHAR)) {
                                 return true;
                         }
@@ -1027,7 +1046,115 @@
         }
 
         public static GetAssertionStatusReport MapGetAssertionStatusReport(String authInfo, CompletionStatus completionStatus) {
-                throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
+                GetAssertionStatusReport r = new GetAssertionStatusReport();
+                r.setAuthInfo(authInfo);
+                switch (completionStatus) {
+                        case STATUS_BOTH_INCOMPLETE:
+                                r.setCompletionStatus(null);
+                                break;
+                        case STATUS_COMPLETE:
+                                r.setCompletionStatus(""status:complete"");
+                                break;
+                        case STATUS_FROM_KEY_INCOMPLETE:
+                                r.setCompletionStatus(""status:fromKey_incomplete"");
+                                break;
+                        case STATUS_TO_KEY_INCOMPLETE:
+                                r.setCompletionStatus(""status:toKey_incomplete"");
+                                break;
+                }
+                r.setGeneric(VERSION);
+                return r;
+        }
+
+        private static Contacts MapContacts(org.uddi.api_v3.Contacts contacts) {
+                if (contacts == null) {
+                        return null;
+                }
+                Contacts c = new Contacts();
+                c.getContact().addAll(MapContactList(contacts.getContact()));
+                return c;
+        }
+
+        private static List<Contact> MapContactList(List<org.uddi.api_v3.Contact> contact) {
+
+                List<Contact> r = new ArrayList<Contact>();
+                if (contact == null) {
+                        return r;
+                }
+                for (int i = 0; i < contact.size(); i++) {
+                        Contact c = new Contact();
+                        c.setUseType(contact.get(i).getUseType());
+                        c.setPersonName(contact.get(i).getPersonName().get(0).getValue());
+                        c.getAddress().addAll(MapAddress(contact.get(i).getAddress()));
+                        c.getDescription().addAll(MapDescription(contact.get(i).getDescription()));
+                        c.getEmail().addAll(MapEmail(contact.get(i).getEmail()));
+                        c.getPhone().addAll(MapPhone(contact.get(i).getPhone()));
+
+                        r.add(c);
+                }
+                return r;
+        }
+
+        private static List<Address> MapAddress(List<org.uddi.api_v3.Address> address) {
+                List<Address> r = new ArrayList<Address>();
+                if (address == null) {
+                        return r;
+                }
+                for (int i = 0; i < address.size(); i++) {
+                        Address x = new Address();
+                        x.setSortCode(address.get(i).getSortCode());
+                        x.setTModelKey(address.get(i).getTModelKey());
+                        x.setUseType(address.get(i).getUseType());
+                        x.getAddressLine().addAll(MapAddressLine(address.get(i).getAddressLine()));
+                        r.add(x);
+                }
+                return r;
+        }
+
+        private static List<Email> MapEmail(List<org.uddi.api_v3.Email> email) {
+                List<Email> r = new ArrayList<Email>();
+                if (email == null) {
+                        return r;
+                }
+                for (int i = 0; i < email.size(); i++) {
+                        Email x = new Email();
+                        x.setUseType(email.get(i).getUseType());
+                        x.setValue(email.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
+        }
+
+        private static List<Phone> MapPhone(List<org.uddi.api_v3.Phone> phone) {
+                List<Phone> r = new ArrayList<Phone>();
+                if (phone == null) {
+                        return r;
+                }
+                for (int i = 0; i < phone.size(); i++) {
+                        Phone x = new Phone();
+                        x.setUseType(phone.get(i).getUseType());
+                        x.setValue(phone.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
+        }
+
+        private static List<AddressLine> MapAddressLine(List<org.uddi.api_v3.AddressLine> addressLine) {
+                List<AddressLine> r = new ArrayList<AddressLine>();
+                if (addressLine == null) {
+                        return r;
+                }
+                for (int i = 0; i < addressLine.size(); i++) {
+                        AddressLine x = new AddressLine();
+                        x.setKeyName(addressLine.get(i).getKeyName());
+                        x.setKeyValue(addressLine.get(i).getKeyValue());
+                        x.setValue(addressLine.get(i).getValue());
+                        r.add(x);
+                }
+
+                return r;
         }
 
 }
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
index 775b715..532b7e3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/Inquiry3to2.java
@@ -83,13 +83,7 @@
         public BusinessList findBusiness(FindBusiness body) throws DispositionReportFaultMessage, RemoteException {
                 try {
                         org.uddi.api_v2.FindBusiness MapFindBusiness = MapUDDIv3Tov2.MapFindBusiness(body);
-                        StringWriter sw = new StringWriter();
-                        JAXB.marshal(MapFindBusiness, sw);
-                        logger.info(sw.toString());
                         org.uddi.api_v2.BusinessList s = inquiryService.findBusiness(MapFindBusiness);
-                        sw = new StringWriter();
-                        JAXB.marshal(s, sw);
-                        logger.info(sw.toString());
                         return MapUDDIv2Tov3.MapBusinessList(s);
                 } catch (DispositionReport ex) {
                         throw MapUDDIv2Tov3.MapException(ex);
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2InquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2InquiryImpl.java
index 3e952f5..27403d1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2InquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIv2InquiryImpl.java
@@ -15,7 +15,9 @@
  */
 package org.apache.juddi.api.impl;
 
+import java.io.StringWriter;
 import javax.jws.WebService;
+import javax.xml.bind.JAXB;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -138,7 +140,11 @@
         @Override
         public BusinessDetail getBusinessDetail(GetBusinessDetail body) throws DispositionReport {
                 try {
-                        return MapUDDIv3Tov2.MapBusinessDetail(inquiryService.getBusinessDetail(MapUDDIv2Tov3.MapGetBusinessDetail(body)), getNodeID());
+                        BusinessDetail MapBusinessDetail = MapUDDIv3Tov2.MapBusinessDetail(inquiryService.getBusinessDetail(MapUDDIv2Tov3.MapGetBusinessDetail(body)), getNodeID());
+                        StringWriter sw = new StringWriter();
+                        JAXB.marshal(MapBusinessDetail, sw);
+                        logger.info(sw.toString());
+                        return MapBusinessDetail;
                 } catch (DispositionReportFaultMessage ex) {
                         throw MapUDDIv3Tov2.MapException(ex, getNodeID());
                 }
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/AddressLine.java b/uddi-ws/src/main/java/org/uddi/api_v3/AddressLine.java
index 07dec4d..d460de5 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/AddressLine.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/AddressLine.java
@@ -51,6 +51,12 @@
     ""value""
 })
 public class AddressLine implements Serializable{
+        public AddressLine(){}
+        public AddressLine(String keyname, String keyval,String val){
+                value=val;
+                keyName=keyname;
+                keyValue=keyval;
+        }
 	@XmlTransient
 	private static final long serialVersionUID = -1219407731100892960L;
 	@XmlValue
"
juddi,c7af4ebc809ccac62e1b52b96240f30da50ab627,"JUDDI-805 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560885 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-24 02:04:07,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/Email.java b/uddi-ws/src/main/java/org/uddi/api_v3/Email.java
index f4b24bf..d57c761 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/Email.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/Email.java
@@ -50,6 +50,11 @@
     ""value""
 })
 public class Email implements Serializable{
+        public Email(){}
+        public Email(String val, String type){
+                value=val;
+                useType=type;
+        }
 	@XmlTransient
 	private static final long serialVersionUID = -1865977988663098552L;
 	@XmlValue
"
juddi,b63fa2c461d8a721cef6e71d60cace7658e40fc6,"JUDDI-803 fixed
JUDDI-804 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560572 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-23 01:56:39,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 0ac726f..9e22d7e 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -417,12 +417,13 @@
                 return nodename;
         }
 
-        private boolean NodeExists(String newnode){
+        private boolean NodeExists(String newnode) {
                 try {
                         List<Node> uddiNodeList = GetJuddiClientConfig().getUDDINodeList();
-                        for (int i=0; i < uddiNodeList.size(); i++){
-                                if (uddiNodeList.get(i).getName().equals(newnode))
+                        for (int i = 0; i < uddiNodeList.size(); i++) {
+                                if (uddiNodeList.get(i).getName().equals(newnode)) {
                                         return true;
+                                }
                         }
                 } catch (ConfigurationException ex) {
                         log.error(ex);
@@ -430,13 +431,15 @@
                 }
                 return false;
         }
+
         public String switchNodes(String newnode) {
                 if (!this.nodename.equalsIgnoreCase(newnode) && NodeExists(newnode)) {
                         this.die();
                         clientConfig = null;
                         this.nodename = newnode;
+                } else {
+                        return ResourceLoader.GetResource(session, ""error.nodeexists"");
                 }
-                else return ResourceLoader.GetResource(session, ""error.nodeexists"");
                 EnsureConfig();
                 return this.nodename;
         }
@@ -535,7 +538,7 @@
                         } catch (Exception ex) {
                                 log.error(ex);
                         }
-                        if (session!=null && session.getAttribute(""username"") != null
+                        if (session != null && session.getAttribute(""username"") != null
                                 && session.getAttribute(""password"") != null) {
                                 req.setUserID((String) session.getAttribute(""username""));
                                 req.setCred(AES.Decrypt((String) session.getAttribute(""password""), (String) properties.get(""key"")));
@@ -1204,12 +1207,15 @@
          * @return string
          */
         public String AddTmodelKenGenerator(String partitionName, String name, String lang) {
+                if (partitionName == null || partitionName.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
+                        return ToErrorAlert(ResourceLoader.GetResource(session, ""errors.noinput""));
+                }
                 try {
-                        if (!partitionName.startsWith(""uddi:"")) {
+                        if (!partitionName.toLowerCase().startsWith(""uddi:"")) {
                                 return ResourceLoader.GetResource(session, ""errors.tmodel.prefix"");
 
                         }
-                        if (!partitionName.endsWith("":keygenerator"")) {
+                        if (!partitionName.toLowerCase().endsWith("":keygenerator"")) {
                                 return ResourceLoader.GetResource(session, ""errors.tmodel.postfix"");
                         }
 
@@ -1237,11 +1243,13 @@
                         tm.getOverviewDoc().add(overviewDoc);
                         tm.setTModelKey(partitionName.toLowerCase());
                         st.getTModel().add(tm);
-                        publish.saveTModel(st);
-                        return ResourceLoader.GetResource(session, ""messages.success"");
+                        TModelDetail saveTModel = publish.saveTModel(st);
+                        return ""<div class=\""alert alert-success\""><i class=\""icon-2x icon-thumbs-up\""></i> "" + ResourceLoader.GetResource(session, ""messages.success"") + "" <a href=\""tmodelEditor.jsp?id=""
+                                + URLEncoder.encode(saveTModel.getTModel().get(0).getTModelKey(), ""UTF8"") + ""\"">""
+                                + StringEscapeUtils.escapeHtml(saveTModel.getTModel().get(0).getTModelKey()) + ""</a></div>"";
                         // ""Success"";
                 } catch (Exception ex) {
-                        return HandleException(ex);
+                        return ToErrorAlert(HandleException(ex));
                 }
         }
 
@@ -1579,10 +1587,12 @@
                                         fb.getTModelBag().getTModelKey().add(parameters);
                                         break;
                                 case uid:
-                                        BusinessEntity t = GetBusinessDetails(parameters);
+                                        //BusinessEntity t = GetBusinessDetails(parameters);
                                         findBusiness = new BindingDetail();
                                         BindingTemplate bt = GetBindingDetailsAsObject(parameters);
-                                        findBusiness.getBindingTemplate().add(bt);
+                                        if (bt != null) {
+                                                findBusiness.getBindingTemplate().add(bt);
+                                        }
 
                                         break;
 
@@ -1602,7 +1612,7 @@
                                 }
 
                         }
-                        if (findBusiness != null && findBusiness.getBindingTemplate() != null) {
+                        if (findBusiness != null && !findBusiness.getBindingTemplate().isEmpty()) {
                                 StringBuilder sb = new StringBuilder();
                                 sb.append(""<table class=\""table\"">"");
                                 for (int i = 0; i < findBusiness.getBindingTemplate().size(); i++) {
@@ -1666,12 +1676,13 @@
                                 case uid:
                                         BusinessEntity t = GetBusinessDetails(parameters);
                                         findBusiness = new BusinessList();
-                                        findBusiness.setBusinessInfos(new BusinessInfos());
-
-                                        BusinessInfo bd = new BusinessInfo();
-                                        bd.setBusinessKey(t.getBusinessKey());
-                                        bd.getName().addAll(t.getName());
-                                        findBusiness.getBusinessInfos().getBusinessInfo().add(bd);
+                                        if (t != null) {
+                                                findBusiness.setBusinessInfos(new BusinessInfos());
+                                                BusinessInfo bd = new BusinessInfo();
+                                                bd.setBusinessKey(t.getBusinessKey());
+                                                bd.getName().addAll(t.getName());
+                                                findBusiness.getBusinessInfos().getBusinessInfo().add(bd);
+                                        }
                                         break;
 
                         }
@@ -1805,11 +1816,12 @@
                                         fb.getTModelBag().getTModelKey().add(parameters);
                                         break;
                                 case uid:
-                                        BusinessEntity t = GetBusinessDetails(parameters);
+
                                         findBusiness = new ServiceList();
-                                        findBusiness.setServiceInfos(new ServiceInfos());
+                                        
                                         BusinessService GetServiceDetail = GetServiceDetail(parameters);
                                         if (GetServiceDetail != null) {
+                                                findBusiness.setServiceInfos(new ServiceInfos());
                                                 ServiceInfo si = new ServiceInfo();
                                                 si.setBusinessKey(GetServiceDetail.getBusinessKey());
                                                 si.setServiceKey(GetServiceDetail.getServiceKey());
@@ -1834,7 +1846,7 @@
                                 }
 
                         }
-                        if (findBusiness.getServiceInfos() != null) {
+                        if (findBusiness!=null && findBusiness.getServiceInfos() != null) {
                                 StringBuilder sb = new StringBuilder();
                                 sb.append(""<table class=\""table\"">"");
                                 for (int i = 0; i < findBusiness.getServiceInfos().getServiceInfo().size(); i++) {
@@ -1866,11 +1878,11 @@
                         fb.setAuthInfo(GetToken());
                         if (fq != null) {
                                 fb.setFindQualifiers(new org.uddi.api_v3.FindQualifiers());
-                                if (fq != null) {
-                                        for (int i = 0; i < fq.length; i++) {
-                                                fb.getFindQualifiers().getFindQualifier().add(fq[i]);
-                                        }
+
+                                for (int i = 0; i < fq.length; i++) {
+                                        fb.getFindQualifiers().getFindQualifier().add(fq[i]);
                                 }
+
                         }
                         TModelList findBusiness = null;
                         switch (criteria) {
@@ -1891,18 +1903,18 @@
                                         KeyedReference kr2 = new KeyedReference();
                                         kr2.setTModelKey(parameters);
                                         fb.getCategoryBag().getKeyedReference().add(kr2);
-                                        //TODO
                                         break;
                                 case uid:
-                                        BusinessEntity t = GetBusinessDetails(parameters);
                                         TModel tmodelDetails = this.getTmodelDetails(parameters);
-                                        TModelInfo tmi = new TModelInfo();
-                                        tmi.setName(tmodelDetails.getName());
-                                        tmi.setTModelKey(tmodelDetails.getTModelKey());
-                                        tmi.getDescription().addAll(tmodelDetails.getDescription());
-                                        findBusiness.setTModelInfos(new TModelInfos());
-                                        findBusiness.getTModelInfos().getTModelInfo().add(tmi);
-
+                                        findBusiness = new TModelList();
+                                        if (tmodelDetails != null) {
+                                                findBusiness.setTModelInfos(new TModelInfos());
+                                                TModelInfo tmi = new TModelInfo();
+                                                tmi.setName(tmodelDetails.getName());
+                                                tmi.setTModelKey(tmodelDetails.getTModelKey());
+                                                tmi.getDescription().addAll(tmodelDetails.getDescription());
+                                                findBusiness.getTModelInfos().getTModelInfo().add(tmi);
+                                        }
                                         break;
 
                         }
"
juddi,50675b65069582b49372b53b35027e11d6fdbbfd,"JUDDI-802 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560566 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-23 01:17:36,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
index 09c01dc..1de9172 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/hub/UddiAdminHub.java
@@ -784,17 +784,11 @@
                         p.setIsAdmin(Boolean.parseBoolean(parameters.getParameter(""savePublisherIsAdmin"")));
                 } catch (Exception ex) {
                 }
-                if (""on"".equalsIgnoreCase(parameters.getParameter(""savePublisherIsAdmin""))) {
-                        p.setIsAdmin(true);
-                }
                 try {
                         p.setIsEnabled(Boolean.parseBoolean(parameters.getParameter(""savePublisherIsEnabled"")));
                 } catch (Exception ex) {
                 }
-                if (""on"".equalsIgnoreCase(parameters.getParameter(""savePublisherIsEnabled""))) {
-                        p.setIsEnabled(true);
-                }
-
+              
                 PublisherDetail d = null;
                 sb.setAuthInfo(GetToken());
                 try {
"
juddi,16c9417dd222fd81c093e235a826f54fc649d56e,"JUDDI-801 setting the isTrucated flag when paging

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560439 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 17:44:38,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index ad0ddc7..901f99f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -149,10 +149,12 @@
 		if (currentIndex < (queryResults.size() - 1)) {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = currentIndex + 1;
+			result.setTruncated(Boolean.TRUE);
 		}
 		else {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = null;
+			result.setTruncated(Boolean.FALSE);
 		}
 		
 		return result;
@@ -268,12 +270,13 @@
 		if (queryResults!=null && currentIndex < (queryResults.size() - 1)) {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = currentIndex + 1;
+			result.setTruncated(Boolean.TRUE);
 		}
 		else {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = null;
+			result.setTruncated(Boolean.FALSE);
 		}
-		
 		return result;
 	}
 	
@@ -357,10 +360,12 @@
 		if (queryResults!=null && currentIndex < (queryResults.size() - 1)) {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = currentIndex + 1;
+			result.setTruncated(Boolean.TRUE);
 		}
 		else {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = null;
+			result.setTruncated(Boolean.FALSE);
 		}
 		
 		return result;
@@ -435,10 +440,12 @@
 		if (queryResults!=null && currentIndex < (queryResults.size() - 1)) {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = currentIndex + 1;
+			result.setTruncated(Boolean.TRUE);
 		}
 		else {
 			if (subscriptionStartIndex != null)
 				subscriptionStartIndex.value = null;
+			result.setTruncated(Boolean.FALSE);
 		}
 		
 		return result;
"
juddi,a041106e566e1f18cc6ca70637b4d81ee6affe2f,"JUDDI-762 on delete of a publisher; also remove content

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560418 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 17:08:07,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index a1d957d..ee5b78d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -19,6 +19,7 @@
 import java.io.StringWriter;
 import java.rmi.RemoteException;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -55,6 +56,7 @@
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.model.ClientSubscriptionInfo;
 import org.apache.juddi.model.Publisher;
+import org.apache.juddi.model.Tmodel;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.subscription.NotificationList;
 import org.apache.juddi.v3.client.transport.Transport;
@@ -66,7 +68,15 @@
 import org.apache.juddi.validation.ValidateNode;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.validation.ValidatePublisher;
+import org.uddi.api_v3.AuthToken;
+import org.uddi.api_v3.BusinessInfo;
+import org.uddi.api_v3.BusinessInfos;
 import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.GetRegisteredInfo;
+import org.uddi.api_v3.InfoSelection;
+import org.uddi.api_v3.RegisteredInfo;
+import org.uddi.api_v3.TModelInfo;
+import org.uddi.api_v3.TModelInfos;
 import org.uddi.sub_v3.GetSubscriptionResults;
 import org.uddi.sub_v3.SubscriptionResultsList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -157,8 +167,47 @@
 
                         List<String> entityKeyList = body.getPublisherId();
                         for (String entityKey : entityKeyList) {
-                                Object obj = em.find(org.apache.juddi.model.Publisher.class, entityKey);
-                                em.remove(obj);
+                        	Publisher obj = em.find(org.apache.juddi.model.Publisher.class, entityKey);
+                        
+                        	//get an authtoken for this publisher so that we can get its registeredInfo
+                        	UDDISecurityImpl security = new UDDISecurityImpl();
+                        	AuthToken authToken = security.getAuthToken(entityKey);
+                        	
+                        	GetRegisteredInfo r = new GetRegisteredInfo();
+                        	r.setAuthInfo(authToken.getAuthInfo());
+                        	r.setInfoSelection(InfoSelection.ALL);
+	                       
+                        	log.info(""removing all businesses owned by publisher "" + entityKey + ""."");
+                        	UDDIPublicationImpl publish = new UDDIPublicationImpl();
+                        	RegisteredInfo registeredInfo = publish.getRegisteredInfo(r);
+                        	BusinessInfos businessInfos = registeredInfo.getBusinessInfos();
+                        	if (businessInfos!=null && businessInfos.getBusinessInfo()!=null) {
+                        		Iterator<BusinessInfo> iter = businessInfos.getBusinessInfo().iterator();
+                        	    while (iter.hasNext()) {
+                        	    	BusinessInfo businessInfo = iter.next();
+                        	    	Object business = em.find(org.apache.juddi.model.BusinessEntity.class, businessInfo.getBusinessKey());
+                        	    	em.remove(business);
+                        	    }
+							}
+                        	
+                        	log.info(""mark all tmodels for publisher "" + entityKey + "" as deleted."");
+                        	TModelInfos tmodelInfos = registeredInfo.getTModelInfos();
+                        	if (tmodelInfos!=null && tmodelInfos.getTModelInfo()!=null) {
+                        		Iterator<TModelInfo> iter = tmodelInfos.getTModelInfo().iterator();
+                        		while (iter.hasNext()) {
+                        			TModelInfo tModelInfo = iter.next();
+                        			Tmodel tmodel = (Tmodel) em.find(org.apache.juddi.model.Tmodel.class, tModelInfo.getTModelKey());
+                        			tmodel.setDeleted(true);
+                        			em.persist(tmodel);
+                        		}
+                        	}
+                        	log.info(""remove all persisted AuthTokens for publisher "" + entityKey + ""."");
+                        	Query q1 = em.createQuery(""DELETE FROM AuthToken auth WHERE auth.authorizedName = '"" + entityKey + ""'"");
+                            q1.executeUpdate();
+                      
+                            log.info(""removing publisher "" + entityKey + ""."");
+                            //delete the publisher
+                        	em.remove(obj);
                         }
 
                         tx.commit();
"
juddi,594c78a9dfccbf5d33ce6ac0eb7242327deed5fb,"JUDDI-785 ignore caseInsensitiveSort

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560361 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 14:36:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index 7c04beb..9de996f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -106,7 +106,12 @@
     /**
      * caseInsensitiveSort: signifies that the result set should be sorted
      * without regard to case. This overrides the default case sensitive sorting
-     * behavior.
+     * behavior. 
+     * 
+     * WARNING: The current JPA specification does NOT support caseInsensitiveSort.
+     * jUDDI therefore *ignores* the caseInsensitive sort setting. 
+     * See also https://issues.apache.org/jira/browse/OPENJPA-1817
+     * A work around is to perform a caseInsensitiveMatch. 
      */
     public static final String CASE_INSENSITIVE_SORT = ""caseInsensitiveSort"";
     /**
"
juddi,594c78a9dfccbf5d33ce6ac0eb7242327deed5fb,"JUDDI-785 ignore caseInsensitiveSort

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560361 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 14:36:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
index 6641bae..46e0b3a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
@@ -115,8 +115,14 @@
 	private static void appendSortCriteria(DynamicQuery qry, FindQualifiers fq) {
 		
 		String nameTerm = buildAlias(FindBusinessByNameQuery.ENTITY_NAME_CHILD) + "".name"";
-		if (fq.isCaseInsensitiveSort())
-			nameTerm = ""upper("" + nameTerm + "")"";
+		
+		if (fq.isCaseInsensitiveSort()) {
+			// See JUDDI-785
+			log.info(""jUDDI does not support caseInsensitive sort, as JPA does not support sortBy ""
+					+ ""with UPPER or LOWER, see https://issues.apache.org/jira/browse/OPENJPA-1817. ""
+					+ ""A work around is to do a caseInsentive Match."");
+			//nameTerm = ""upper("" + nameTerm + "")"";
+		}
 		
 		String dateTerm = ENTITY_ALIAS + "".modified"";
 
"
juddi,594c78a9dfccbf5d33ce6ac0eb7242327deed5fb,"JUDDI-785 ignore caseInsensitiveSort

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560361 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 14:36:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
index c5c44f4..5a2733c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
@@ -115,9 +115,13 @@
 	private static void appendSortCriteria(DynamicQuery qry, FindQualifiers fq) {
 		
 		String nameTerm = buildAlias(FindServiceByNameQuery.ENTITY_NAME_CHILD) + "".name"";
-		if (fq.isCaseInsensitiveSort())
-			nameTerm = ""upper("" + nameTerm + "")"";
-		
+		if (fq.isCaseInsensitiveSort()) {
+			// See JUDDI-785
+			log.info(""jUDDI does not support caseInsensitive sort, as JPA does not support sortBy ""
+					+ ""with UPPER or LOWER, see https://issues.apache.org/jira/browse/OPENJPA-1817. ""
+					+ ""A work around is to do a caseInsentive Match."");
+			//nameTerm = ""upper("" + nameTerm + "")"";
+		}
 		String dateTerm = ENTITY_ALIAS + "".modified"";
 
 		String orderClause = nameTerm + "" "" + DynamicQuery.SORT_ASC + "", "" + dateTerm + "" "" + DynamicQuery.SORT_DESC;
"
juddi,594c78a9dfccbf5d33ce6ac0eb7242327deed5fb,"JUDDI-785 ignore caseInsensitiveSort

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560361 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-22 14:36:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
index 5ddd32f..aed4458 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
@@ -113,9 +113,13 @@
 	private static void appendSortCriteria(DynamicQuery qry, FindQualifiers fq) {
 		
 		String nameTerm = ENTITY_ALIAS + "".name"";
-		if (fq.isCaseInsensitiveSort())
-			nameTerm = ""upper("" + nameTerm + "")"";
-		
+		if (fq.isCaseInsensitiveSort()) {
+			// See JUDDI-785
+			log.info(""jUDDI does not support caseInsensitive sort, as JPA does not support sortBy ""
+					+ ""with UPPER or LOWER, see https://issues.apache.org/jira/browse/OPENJPA-1817. ""
+					+ ""A work around is to do a caseInsentive Match."");
+			//nameTerm = ""upper("" + nameTerm + "")"";
+		}
 		String dateTerm = ENTITY_ALIAS + "".modified"";
 
 		String orderClause = nameTerm + "" "" + DynamicQuery.SORT_ASC + "", "" + dateTerm + "" "" + DynamicQuery.SORT_DESC;
"
juddi,a74409f9b8cb4d73e3f510fbd9f7129fd8d4b6e3,"JUDDI-791 reducing log output

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560099 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-21 17:03:50,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
index 3c25d76..c0f3b42 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
@@ -55,7 +55,7 @@
                                         log.info(""Generation of 256 bit AES key successful"");
                                         ok = true;
                                 } else {
-                                        log.info(""256 bit key validation failed."");
+                                        log.warning(""256 bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
                                 }
                         }
                         if (!ok) {
"
juddi,a74409f9b8cb4d73e3f510fbd9f7129fd8d4b6e3,"JUDDI-791 reducing log output

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560099 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-21 17:03:50,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
index ec21089..281f988 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/StartupServlet.java
@@ -43,7 +43,7 @@
                                         log.info(""Generation of 256 bit AES key successful"");
                                         ok = true;
                                 } else {
-                                        log.info(""256 bit key validation failed."");
+                                        log.warning(""256 bit key validation failed. To use higher key sizes, try installing the Java Cryptographic Extensions (JCE) Unlimited Strength"");
                                 }
                         }
                         if (!ok) {
"
juddi,fa0f20a11ce8c44894fec0cdb0cc46684ba8fa8b,"JUDDI-791 reducing log output

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560055 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-21 16:11:11,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
index ded99a8..92117c4 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
@@ -105,7 +105,8 @@
                         }
                         return false;
                 } catch (Exception ex) {
-                        log.info(""Key validation failed!"", ex);
+                        log.info(""Key validation failed! ""+ ex.getMessage());
+                        log.debug(""Key validation failed! ""+ ex.getMessage(), ex);
                         return false;
                 }
         }
"
juddi,fa0f20a11ce8c44894fec0cdb0cc46684ba8fa8b,"JUDDI-791 reducing log output

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1560055 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-21 16:11:11,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/AES.java b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/AES.java
index 02f6efe..d6c4493 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/AES.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/adminconsole/AES.java
@@ -106,7 +106,8 @@
                         }
                         return false;
                 } catch (Exception ex) {
-                        log.info(""Key validation failed!"", ex);
+                        log.info(""Key validation failed! ""+ ex.getMessage());
+                        log.debug(""Key validation failed! ""+ ex.getMessage(), ex);
                         return false;
                 }
         }
"
juddi,d3318062e7b782e42a20e39a153dacfab10b1c6c,"JUDDI-794 fixed for businesses
JUDDI-651 updating a number of selenium tests, bug in the hubs when handling error messages

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1559461 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-19 03:38:10,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index d11665c..7e5e9e3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -648,7 +648,7 @@
                                 entityExists = true;
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj)) {
+                                if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin()) {
                                         throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
                                 }
                         } else {
@@ -784,7 +784,7 @@
                                         }
 
                                         // Make sure publisher owns this entity.
-                                        if (!publisher.isOwner((UddiEntity) obj)) {
+                                        if (!publisher.isOwner((UddiEntity) obj) && !((Publisher) publisher).isAdmin()) {
                                                 throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
                                         }
 
@@ -939,7 +939,7 @@
                                 }
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj)) {
+                                if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
                                         throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
                                 }
 
@@ -1028,7 +1028,7 @@
                                 entityExists = true;
 
                                 // Make sure publisher owns this entity.
-                                if (!publisher.isOwner((UddiEntity) obj)) {
+                                if (!publisher.isOwner((UddiEntity) obj)&& !((Publisher) publisher).isAdmin()) {
                                         throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
                                 }
                         } else {
"
juddi,d3318062e7b782e42a20e39a153dacfab10b1c6c,"JUDDI-794 fixed for businesses
JUDDI-651 updating a number of selenium tests, bug in the hubs when handling error messages

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1559461 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-19 03:38:10,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index c6102c7..ecffa81 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -33,8 +33,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
@@ -74,7 +72,7 @@
 import org.uddi.v3_service.UDDISubscriptionPortType;
 import org.w3._2000._09.xmldsig_.SignatureType;
 import org.w3._2000._09.xmldsig_.X509DataType;
-import sun.misc.BASE64Encoder;
+
 
 /**
  * UddiHub - The hub acts as a single point for managing browser to uddi
@@ -1225,13 +1223,13 @@
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                         log.error(ex.getMessage());
                         log.debug(null, ex);
-                        return ResourceLoader.GetResource(session, ""errors.uddi"") + "" "" + ex.getMessage() + "" "" + f.detail.getMessage();
+                        return ResourceLoader.GetResource(session, ""errors.uddi"") + "" "" + ex.getMessage() + "" "" + (f.detail!=null ? f.detail.getMessage() : """");
                 }
                 if (ex instanceof RemoteException) {
                         RemoteException f = (RemoteException) ex;
                         log.error(ex.getMessage());
                         log.debug(null, ex);
-                        return ResourceLoader.GetResource(session, ""errors.generic"") + "" "" + ex.getMessage() + "" "" + f.detail.getMessage();
+                        return ResourceLoader.GetResource(session, ""errors.generic"") + "" "" + ex.getMessage() + "" "" + (f.detail!=null ? f.detail.getMessage() : """");
                 }
                 log.error(ex.getMessage());
                 log.debug(null, ex);
@@ -2189,8 +2187,9 @@
                                                                 X509Certificate cert = (X509Certificate) cf.generateCertificate(is);
                                                                 is.close();
                                                                 //this is the most supportable way to do this
-                                                                BASE64Encoder encoder = new BASE64Encoder();
-                                                                return encoder.encodeBuffer(cert.getEncoded());
+                                                                return org.apache.commons.codec.binary.Base64.encodeBase64String(cert.getEncoded());
+                                                                //BASE64Encoder encoder = new BASE64Encoder();
+                                                                //return encoder.encodeBuffer(cert.getEncoded());
 
                                                         } catch (Exception ex) {
                                                                 return HandleException(ex);
@@ -2291,10 +2290,12 @@
                                         throw ex;
                                 }
                         }
+                        return ResourceLoader.GetResource(session, ""messages.success"") + 
+                        ""<a href=\""editSubscription.jsp?id="" + URLEncoder.encode(data.value.get(0).getSubscriptionKey(),""UTF8"") +
+                        ""\"">"" + StringEscapeUtils.escapeHtml(data.value.get(0).getSubscriptionKey()) + ""</a>"";
                 } catch (Exception ex) {
                         return HandleException(ex);
                 }
-                return ResourceLoader.GetResource(session, ""messages.success"");
         }
 
         /**
"
juddi,d3318062e7b782e42a20e39a153dacfab10b1c6c,"JUDDI-794 fixed for businesses
JUDDI-651 updating a number of selenium tests, bug in the hubs when handling error messages

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1559461 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-19 03:38:10,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
index 6e669a3..c7c715c 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
@@ -262,12 +262,12 @@
                 if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                         log.error(null, ex);
-                        return ResourceLoader.GetResource(session, ""errors.uddi"") + "" "" + ex.getMessage() + "" "" + f.detail.getMessage();
+                        return ResourceLoader.GetResource(session, ""errors.uddi"") + "" "" + ex.getMessage() + "" "" + (f.detail!=null ? f.detail.getMessage() : """");
                 }
                 if (ex instanceof RemoteException) {
                         RemoteException f = (RemoteException) ex;
                         log.error(null, ex);
-                        return ResourceLoader.GetResource(session, ""errors.generic"") + "" "" + ex.getMessage() + "" "" + f.detail.getMessage();
+                        return ResourceLoader.GetResource(session, ""errors.generic"") + "" "" + ex.getMessage() + "" "" + (f.detail!=null ? f.detail.getMessage() : """");
                 }
                 log.error(null, ex);
                 return //""<div class=\""alert alert-error\"" ><h3><i class=\""icon-warning-sign\""></i> ""
@@ -328,7 +328,7 @@
                                 return invoke_SyncSubscription(parameters);
                         }
                         if (action.equalsIgnoreCase(""save_Clerk"")) {
-                                //return save_Clerk(parameters);
+                                return save_Clerk(parameters);
                         }
                         if (action.equalsIgnoreCase(""save_ClientSubscriptionInfo"")) {
                                 return save_ClientSubscriptionInfo(parameters);
@@ -350,7 +350,23 @@
                 sc.setAuthInfo(GetToken());
                 Clerk c = new Clerk();
                 c.setName(parameters.getParameter(""CLERKsetName""));
-                //c.setNode(getNode(parameters.getParameter(""CLERKsetNode"")));
+                Node node=new Node();
+                node.setClientName(parameters.getParameter(""CLERKNODEsetClientName""));
+                node.setCustodyTransferUrl(parameters.getParameter(""CLERKNODEsetCustodyTransferUrl""));
+                node.setDescription(parameters.getParameter(""CLERKNODEsetDescription""));
+                node.setFactoryInitial(parameters.getParameter(""CLERKNODEsetFactoryInitial""));
+                node.setFactoryNamingProvider(parameters.getParameter(""CLERKNODEsetFactoryNamingProvider""));
+                node.setFactoryURLPkgs(parameters.getParameter(""CLERKNODEsetFactoryURLPkgs""));
+                node.setInquiryUrl(parameters.getParameter(""CLERKNODEsetInquiryUrl""));
+                node.setJuddiApiUrl(parameters.getParameter(""CLERKNODEsetJuddiApiUrl""));
+                node.setName(parameters.getParameter(""CLERKNODEsetName""));
+                node.setProxyTransport(parameters.getParameter(""CLERKNODEsetProxyTransport""));
+                node.setPublishUrl(parameters.getParameter(""CLERKNODEsetPublishUrl""));
+                node.setReplicationUrl(parameters.getParameter(""CLERKNODEsetReplicationUrl""));
+                node.setSecurityUrl(parameters.getParameter(""CLERKNODEsetSecurityUrl""));
+                node.setSubscriptionListenerUrl(parameters.getParameter(""CLERKNODEsetSubscriptionListenerUrl""));
+                node.setSubscriptionUrl(parameters.getParameter(""CLERKNODEsetSubscriptionUrl""));
+                c.setNode(node);
                 c.setPassword(parameters.getParameter(""CLERKsetPassword""));
                 c.setPublisher(parameters.getParameter(""CLERKsetPublisher""));
                 
"
juddi,d64238eaf89e7604d3437cedd48bf2af470720f0,"JUDDI-790 fixing transport

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1558441 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-15 15:46:19,Kurt Stam,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
index 9c2ef1e..bf1f941 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
@@ -220,8 +220,7 @@
                 }
                 Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
                 if (transportClass != null) {
-                    transport = (Transport) transportClass.
-                            getConstructor(String.class).newInstance(nodename);
+                    transport = client.getTransport(nodename);
 
                     security = transport.getUDDISecurityService();
                     juddi = transport.getJUDDIApiService();
"
juddi,84f3d7f9dbc2436e107a55cc0d7d8d8075c24faa,"JUDDI-716 fixing issue with storing and retrieving X509IssuerSerial signatures

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1558142 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-14 18:24:32,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 6d044dc..50b155e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -1145,6 +1145,7 @@
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName != null) {
                                 throw new RuntimeException(""Unrecognized Value for Element: "" + tagName + "": "" + x509IssuerSerialOrX509SKIOrX509SubjectName.getClass().getCanonicalName());
                         }
+                        modelKeyInfoValue.setKeyDataValue(modelX509KeyData);
                         modelX509KeyData.getKeyDataValueList().add(modelKeyInfoValue);
                 }
                 return modelX509KeyData;
"
juddi,fbcbd21cf19f1e6a5f2145fb9e7cb14dc081807a,"JUDDI-716 fixing issue with storing and retrieving X509IssuerSerial signatures

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1558132 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-14 18:02:37,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 270bfa9..6d044dc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -1138,14 +1138,13 @@
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName instanceof String) {
                                 modelKeyInfoValue.setKeyDataValueString((String) x509IssuerSerialOrX509SKIOrX509SubjectName);
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName instanceof X509IssuerSerialType) {
-                        	modelX509KeyData.setKeyDataType(X509IssuerSerialType.class.getSimpleName());
+                        	modelKeyInfoValue.setKeyDataType(X509IssuerSerialType.class.getSimpleName());
                         	X509IssuerSerialType x509IssuerSerialType = (X509IssuerSerialType) x509IssuerSerialOrX509SKIOrX509SubjectName;
-                        	modelX509KeyData.setKeyDataValueString(x509IssuerSerialType.getX509IssuerName());
-                        	modelX509KeyData.setKeyDataValueBytes(x509IssuerSerialType.getX509SerialNumber().toByteArray());
+                        	modelKeyInfoValue.setKeyDataValueString(x509IssuerSerialType.getX509IssuerName());
+                        	modelKeyInfoValue.setKeyDataValueBytes(x509IssuerSerialType.getX509SerialNumber().toByteArray());
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName != null) {
                                 throw new RuntimeException(""Unrecognized Value for Element: "" + tagName + "": "" + x509IssuerSerialOrX509SKIOrX509SubjectName.getClass().getCanonicalName());
                         }
-                        modelKeyInfoValue.setKeyDataValue(modelX509KeyData);
                         modelX509KeyData.getKeyDataValueList().add(modelKeyInfoValue);
                 }
                 return modelX509KeyData;
"
juddi,fbcbd21cf19f1e6a5f2145fb9e7cb14dc081807a,"JUDDI-716 fixing issue with storing and retrieving X509IssuerSerial signatures

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1558132 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-14 18:02:37,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java b/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
index df9ced9..51b4b44 100644
--- a/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
+++ b/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
@@ -26,7 +26,6 @@
 import javax.xml.bind.annotation.XmlAnyElement;
 import javax.xml.bind.annotation.XmlElementRef;
 import javax.xml.bind.annotation.XmlElementRefs;
-import javax.xml.bind.annotation.XmlSeeAlso;
 import javax.xml.bind.annotation.XmlType;
 import org.w3c.dom.Element;
 
@@ -61,7 +60,6 @@
 @XmlType(name = ""X509DataType"", propOrder = {
     ""x509IssuerSerialOrX509SKIOrX509SubjectName""
 })
-@XmlSeeAlso({X509IssuerSerialType.class})
 public class X509DataType {
 
     @XmlElementRefs({
"
juddi,4bf087b8ec8140952838b727a69bb597120bb00b,"JUDDI-716 adding TCK tests for digital signature projection and for various signature options, adding to tck-runner. new configuration options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1557304 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-11 03:17:57,alexoree,"diff --git a/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java b/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
index b9ebf53..94d051d 100644
--- a/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
+++ b/uddi-tck-runner/src/main/java/org/apache/juddi/tckrunner/App.java
@@ -88,6 +88,7 @@
                                 org.apache.juddi.v3.tck.UDDI_130_CombineCategoryBagsFindBusinessIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_140_NegativePublicationIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_141_JIRAIntegrationTest.class,
+                                org.apache.juddi.v3.tck.UDDI_142_DigitalSignatureIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_150_CustodyTransferIntegrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_160_RESTIntergrationTest.class,
                                 org.apache.juddi.v3.tck.UDDI_170_ValueSetValidation.class
"
juddi,d2f5fbe1fefbeddce77b5f331191845bac78cdf2,"JUDDI-776 fixed for .net, tests added
JUDDI-714 updating documentation

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1557015 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-10 02:52:45,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/Common2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/Common2UDDI.java
index a012160..95dceaf 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/Common2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/Common2UDDI.java
@@ -32,7 +32,6 @@
                 if (content == null) {
                         return ret;
                 }
-                System.out.println(""enter "" + content.length());
                 if (content.length() > UDDIConstants.MAX_description_length) {
                         int offset = 0;
                         while (offset < content.length()) {
"
juddi,c531fcad7edf61cecdfd2d78f4ac27518465fbf6,"JUDDI-776 fixed for java clients

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556698 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-09 02:08:25,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index 2d950ae..1f42cc8 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -16,7 +16,6 @@
  */
 package org.apache.juddi.v3.client.config;
 
-import java.rmi.RemoteException;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -24,7 +23,6 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.wsdl.WSDLException;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
@@ -38,7 +36,6 @@
 import org.apache.juddi.v3.client.mapping.URLLocalizerDefaultImpl;
 import org.apache.juddi.v3.client.transport.InVMTransport;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.juddi.v3.client.transport.TransportException;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.CategoryBag;
"
juddi,c531fcad7edf61cecdfd2d78f4ac27518465fbf6,"JUDDI-776 fixed for java clients

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556698 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-09 02:08:25,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/WADL2UDDI.java
index 00e7e9c..18ca183 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wadl/WADL2UDDI.java
@@ -50,6 +50,7 @@
 import org.apache.juddi.v3.client.config.Property;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIKeyConvention;
+import org.apache.juddi.v3.client.mapping.Common2UDDI;
 import org.apache.juddi.v3.client.mapping.MockSSLSocketFactory;
 import org.apache.juddi.v3.client.mapping.URLLocalizer;
 import org.uddi.api_v3.AccessPoint;
@@ -259,47 +260,29 @@
         service.setServiceKey(UDDIKeyConvention.getServiceKey(properties, serviceQName.getLocalPart()));
         // Description
         String serviceDescription = properties.getProperty(Property.SERVICE_DESCRIPTION, Property.DEFAULT_SERVICE_DESCRIPTION);
-        // Override with the service description from the WSDL if present
+        // Override with the service description from the WADL if present
         boolean lengthwarn = false;
         if (!wadlDefinition.getDoc().isEmpty()) {
 
             for (int i = 0; i < wadlDefinition.getDoc().size(); i++) {
-                Description description = new Description();
+                String locallang=lang;
                 if (wadlDefinition.getDoc().get(i).getLang() != null) {
-                    description.setLang(wadlDefinition.getDoc().get(i).getLang());
-                } else {
-                    description.setLang(lang);
-                }
-                if (description.getLang() != null && description.getLang().length() > UDDIConstants.MAX_xml_lang_length) {
+                   locallang=(wadlDefinition.getDoc().get(i).getLang());
+                } 
+                if (locallang.length() > UDDIConstants.MAX_xml_lang_length) {
                     lengthwarn = true;
-                    description.setLang(description.getLang().substring(0, UDDIConstants.MAX_xml_lang_length - 1));
+                    locallang=(locallang.substring(0, UDDIConstants.MAX_xml_lang_length - 1));
                 }
 
                 StringBuilder sb = new StringBuilder();
                 sb.append(wadlDefinition.getDoc().get(i).getTitle()).append("" "");
                 sb.append(ContentToString(wadlDefinition.getDoc().get(i).getContent()));
 
-                description.setValue(wadlDefinition.getDoc().get(i).getTitle());
-                if (description.getValue() != null && description.getValue().length() > UDDIConstants.MAX_description_length) {
-                    lengthwarn = true;
-                    description.setValue(description.getValue().substring(0, UDDIConstants.MAX_description_length - 1));
-                }
+                service.getDescription().addAll(Common2UDDI.mapDescription(sb.toString(), locallang));
 
             }
         } else {
-
-            Description description = new Description();
-            description.setLang(lang);
-            if (description.getLang() != null && description.getLang().length() > UDDIConstants.MAX_xml_lang_length) {
-                lengthwarn = true;
-                description.setLang(description.getLang().substring(0, UDDIConstants.MAX_xml_lang_length - 1));
-            }
-            description.setValue(serviceDescription);
-            service.getDescription().add(description);
-            if (description.getValue() != null && description.getValue().length() > UDDIConstants.MAX_description_length) {
-                lengthwarn = true;
-                description.setValue(description.getValue().substring(0, UDDIConstants.MAX_description_length - 1));
-            }
+                service.getDescription().addAll(Common2UDDI.mapDescription(serviceDescription, lang));
         }
 
 
@@ -385,10 +368,8 @@
             String bindingKey = UDDIKeyConvention.getBindingKey(properties, serviceQName, portName, serviceUrl);
             bindingTemplate.setBindingKey(bindingKey);
 
-            Description description = new Description();
-            description.setLang(lang);
-            description.setValue(getDescription(res.getDoc()));
-            bindingTemplate.getDescription().add(description);
+            
+            bindingTemplate.getDescription().addAll(Common2UDDI.mapDescription(getDescription(res.getDoc()), lang));
 
             // reference wsdl:binding tModel
             TModelInstanceInfo tModelInstanceInfoBinding = new TModelInstanceInfo();
@@ -396,11 +377,9 @@
             InstanceDetails instanceDetails = new InstanceDetails();
             instanceDetails.setInstanceParms(portName);
             tModelInstanceInfoBinding.setInstanceDetails(instanceDetails);
-            Description descriptionB = new Description();
-            descriptionB.setLang(lang);
-            descriptionB.setValue(""The binding that this endpoint implements. "" + bindingTemplate.getDescription().get(0).getValue()
-                    + "" The instanceParms specifies the port local name."");
-            tModelInstanceInfoBinding.getDescription().add(descriptionB);
+           
+            tModelInstanceInfoBinding.getDescription().addAll(Common2UDDI.mapDescription(""The binding that this endpoint implements. "" + bindingTemplate.getDescription().get(0).getValue()
+                    + "" The instanceParms specifies the \"" port local name."", lang));
             TModelInstanceDetails tModelInstanceDetails = new TModelInstanceDetails();
             tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoBinding);
 
@@ -541,6 +520,10 @@
             sb.append(doc.get(i).getTitle()).append("" "");
             sb.append(ContentToString(doc.get(i).getContent()));
         }
-        return sb.toString().trim();
+        String ret= sb.toString().trim();
+        
+        if (ret.length()==0)
+                return ""No Description"";
+        return ret;
     }
 }
"
juddi,c531fcad7edf61cecdfd2d78f4ac27518465fbf6,"JUDDI-776 fixed for java clients

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556698 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-09 02:08:25,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/BPEL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/BPEL2UDDI.java
index 3d3d87d..ec566d3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/BPEL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/BPEL2UDDI.java
@@ -16,6 +16,7 @@
  */
 package org.apache.juddi.v3.client.mapping.wsdl;
 
+import org.apache.juddi.v3.client.mapping.Common2UDDI;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.rmi.RemoteException;
@@ -295,10 +296,8 @@
 				serviceDescription = docElement.getTextContent();
 			}
 		}
-		Description description = new Description();
-		description.setLang(lang);
-		description.setValue(serviceDescription);
-		service.getDescription().add(description);
+		
+		service.getDescription().addAll(Common2UDDI.mapDescription(serviceDescription, lang));
 		// Service name
 		Name sName = new Name();
 		sName.setLang(lang);
@@ -416,10 +415,8 @@
 				if (docElement!=null && docElement.getTextContent()!=null) {
 					bindingDescription = docElement.getTextContent();
 				}
-				Description description = new Description();
-				description.setLang(lang);
-				description.setValue(bindingDescription);
-				bindingTemplate.getDescription().add(description);
+				
+				bindingTemplate.getDescription().addAll(Common2UDDI.mapDescription(bindingDescription, lang));
 				
 				// reference wsdl:binding tModel
 				TModelInstanceInfo tModelInstanceInfoBinding = new TModelInstanceInfo();
@@ -427,11 +424,9 @@
 				InstanceDetails instanceDetails = new InstanceDetails();
 				instanceDetails.setInstanceParms(portName);  
 				tModelInstanceInfoBinding.setInstanceDetails(instanceDetails);
-				Description descriptionB = new Description();
-				descriptionB.setLang(lang);
-				descriptionB.setValue(""The wsdl:binding that this wsdl:port implements. "" + bindingDescription +
-						"" The instanceParms specifies the port local name."");
-				tModelInstanceInfoBinding.getDescription().add(descriptionB);
+				
+				tModelInstanceInfoBinding.getDescription().addAll(Common2UDDI.mapDescription(""The wsdl:binding that this wsdl:port implements. "" + bindingDescription +
+						"" The instanceParms specifies the port local name."", lang));
 				tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoBinding);
 				
 				// reference wsdl:portType tModel
@@ -443,16 +438,14 @@
 				if (docElement!=null && docElement.getTextContent()!=null) {
 					portTypeDescription = docElement.getTextContent();
 				}
-				Description descriptionPT = new Description();
-				descriptionPT.setLang(lang);
-				descriptionPT.setValue(""The wsdl:portType that this wsdl:port implements."" + portTypeDescription );
-				tModelInstanceInfoPortType.getDescription().add(descriptionPT);
+				
+				tModelInstanceInfoPortType.getDescription().addAll(Common2UDDI.mapDescription(""The wsdl:portType that this wsdl:port implements."" + portTypeDescription, lang));
 				tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoPortType);
 				
 				//reference bpel:process tModel
 				TModelInstanceInfo tModelInstanceInfoBPEL = new TModelInstanceInfo();
 				tModelInstanceInfoBPEL.setTModelKey(keyDomainURI + service.getQName().getLocalPart() + ""Process"");
-				Description descriptionBPEL = new Description();
+				
 				// Description
 				String serviceDescription = properties.getProperty(Property.SERVICE_DESCRIPTION, Property.DEFAULT_SERVICE_DESCRIPTION);
 				// Override with the service description from the WSDL if present
@@ -460,9 +453,8 @@
 				if (docElement!=null && docElement.getTextContent()!=null) {
 					serviceDescription = docElement.getTextContent();
 				}
-				descriptionBPEL.setLang(lang);
-				descriptionBPEL.setValue(""The bpel:process this wsdl:port supports."" + serviceDescription);
-				tModelInstanceInfoBPEL.getDescription().add(descriptionBPEL);
+				
+				tModelInstanceInfoBPEL.getDescription().addAll(Common2UDDI.mapDescription(""The bpel:process this wsdl:port supports."" + serviceDescription, lang));
 				tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoBPEL);
 				
 				bindingTemplate.setTModelInstanceDetails(tModelInstanceDetails);
"
juddi,c531fcad7edf61cecdfd2d78f4ac27518465fbf6,"JUDDI-776 fixed for java clients

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556698 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-09 02:08:25,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/WSDL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/WSDL2UDDI.java
index a991760..56eedfc 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/WSDL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/wsdl/WSDL2UDDI.java
@@ -16,6 +16,7 @@
  */
 package org.apache.juddi.v3.client.mapping.wsdl;
 
+import org.apache.juddi.v3.client.mapping.Common2UDDI;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.rmi.RemoteException;
@@ -45,6 +46,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.AccessPointType;
 import org.apache.juddi.jaxb.PrintUDDI;
+import org.apache.juddi.v3.client.UDDIConstants;
 import org.apache.juddi.v3.client.config.Property;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClient;
@@ -810,10 +812,9 @@
                 serviceDescription = docElement.getTextContent();
             }
         }
-        Description description = new Description();
-        description.setLang(lang);
-        description.setValue(serviceDescription);
-        service.getDescription().add(description);
+        
+        service.getDescription().addAll(Common2UDDI.mapDescription(serviceDescription, lang));
+        
         // Service name
         Name sName = new Name();
         sName.setLang(lang);
@@ -906,10 +907,8 @@
                 if (docElement != null && docElement.getTextContent() != null) {
                     bindingDescription = docElement.getTextContent();
                 }
-                Description description = new Description();
-                description.setLang(lang);
-                description.setValue(bindingDescription);
-                bindingTemplate.getDescription().add(description);
+                
+                bindingTemplate.getDescription().addAll(Common2UDDI.mapDescription(bindingDescription, lang));
 
                 // reference wsdl:binding tModel
                 TModelInstanceInfo tModelInstanceInfoBinding = new TModelInstanceInfo();
@@ -917,11 +916,9 @@
                 InstanceDetails instanceDetails = new InstanceDetails();
                 instanceDetails.setInstanceParms(portName);
                 tModelInstanceInfoBinding.setInstanceDetails(instanceDetails);
-                Description descriptionB = new Description();
-                descriptionB.setLang(lang);
-                descriptionB.setValue(""The wsdl:binding that this wsdl:port implements. "" + bindingDescription
-                        + "" The instanceParms specifies the port local name."");
-                tModelInstanceInfoBinding.getDescription().add(descriptionB);
+               
+                tModelInstanceInfoBinding.getDescription().addAll(Common2UDDI.mapDescription(""The wsdl:binding that this wsdl:port implements. "" + bindingDescription
+                        + "" The instanceParms specifies the port local name."", lang));
                 tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoBinding);
 
                 // reference wsdl:portType tModel
@@ -933,10 +930,8 @@
                 if (docElement != null && docElement.getTextContent() != null) {
                     portTypeDescription = docElement.getTextContent();
                 }
-                Description descriptionPT = new Description();
-                descriptionPT.setLang(lang);
-                descriptionPT.setValue(""The wsdl:portType that this wsdl:port implements."" + portTypeDescription);
-                tModelInstanceInfoPortType.getDescription().add(descriptionPT);
+                
+                tModelInstanceInfoPortType.getDescription().addAll(Common2UDDI.mapDescription(""The wsdl:portType that this wsdl:port implements."" + portTypeDescription,lang));
                 tModelInstanceDetails.getTModelInstanceInfo().add(tModelInstanceInfoPortType);
 
                 bindingTemplate.setTModelInstanceDetails(tModelInstanceDetails);
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
index 47623aa..bf465ec 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
@@ -37,6 +37,11 @@
 
 
 /**
+ * The UDDIService is defined by the UDDI v3 specification as the Service from which
+ * all UDDI Ports can be obtained. All known ports: UDDICustodyPort, UDDIInquiryPort
+ * UDDIReplicationPort, UDDISecurityPort, UDDISubscriptionPort, UDDIValueSetCachingPort 
+ * and the UDDIValueSetValidationPort.
+ * 
  * This class was generated by the JAX-WS RI.
  * JAX-WS RI 2.1.5-b03-
  * Generated source version: 2.1
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 032cc51..a99fd56 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -89,7 +89,40 @@
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.Subscription;
 import org.uddi.v3_service.DispositionReportFaultMessage;
-
+/**
+ * The UDDIClerk provides an easy way to access a UDDI service. The clerk
+ * can be configured programmatically, but it is recommended to specify the
+ * server endpoint and access credentials in a uddi.xml file.
+ * 
+ * Recommended use:
+ * <pre>
+ * {@code
+ * UDDIClient uddiClient = new UDDIClient();
+ * UDDIClerk clerk = uddiClient.getClerk(clerkName);
+ * }
+ * </pre>
+ * where the clerkName ""MyClerk"" is defined as attribute on the clerk element
+ * <pre>
+ * {@code
+ *  <clerks registerOnStartup=""true"">
+ *    <clerk name=""MyClerk"" node=""default"" publisher=""root"" password=""root"" isPasswordEncrypted=""false"" cryptoProvider="""">
+ *      <class>org.apache.juddi.example.HelloWorldImpl</class>
+ *    </clerk>
+ *  </clerks>
+ * }
+ * </pre>
+ * Credentials:
+ * In the clerk section you need to specify the publisher to be used, as well the password.
+ * The password can be encrypted and a cryptoProvider class can be set.
+ * 
+ * UDDI Annotations:
+ * If you want to register classes containing UDDIAnnotations, then you need to set registerOnStartup=""true""
+ * and you can list the classes with the annotations as subelements. See the HelloWorldImpl class
+ * above, as well as the uddi-annotations example.
+ * 
+ * @author kstam
+ *
+ */
 public class UDDIClerk implements Serializable {
 
     private static final long serialVersionUID = -8597375975981358134L;
@@ -154,6 +187,20 @@
     	registerWsdls(null);
     }
 
+    /**
+     * Registers the WSDL files referenced in the clerk onto the UDDI node referenced by the clerk.
+     * <pre>
+     * {@code
+     * <clerks registerOnStartup=""false"">
+     *     <clerk name=""joe"" node=""default"" publisher=""joepublisher"" password=""joepublisher"" isPasswordEncrypted=""false"" cryptoProvider="""">
+     *        <wsdl businessName=""WSDL-Business"">wsdl/helloworld.wsdl</wsdl>
+     *     </clerk>
+     *  </clerks>
+     * }
+     * </pre>
+     * 
+     * @param localizerBaseUrl - The baseUrl part which will be used when building the bindingTemplate.
+     */
     public void registerWsdls(URL localizerBaseUrl) {
         if (this.getWsdls() != null) {
             Properties properties = new Properties();
@@ -182,12 +229,20 @@
         }
     }
 
+    /**
+     * Registers a WSDL Definition onto the UDDI node referenced by the clerk.
+     * 
+     * @param wsdlDefinition - the WSDL Definition
+     * @param keyDomain - the keyDomain which will be used to construct the UDDI key IDs.
+     * If left null the keyDomain defined in the node's properties will be used.
+     * @param businessKey - the key of the business to which this service belongs. If left null
+     * the businessKey defined in the node's properties will be used.
+     */
     public void registerWsdls(Definition wsdlDefinition, String keyDomain, String businessKey) {
 
         try {
             Properties properties = new Properties();
             properties.putAll(this.getUDDINode().getProperties());
-            //Definition wsdlDefinition = rw.readWSDL(wsdlUrl);
             if (keyDomain != null) {
                 properties.setProperty(""keyDomain"", keyDomain);
             }
@@ -203,7 +258,9 @@
             log.error(""Unable to register wsdl "" + "" ."" + t.getMessage(), t);
         }
     }
-
+    /**
+     * Removes the UDDI data structures belonging to the WSDLs for this clerk from the UDDI node.
+     */
     public void unRegisterWsdls() {
         if (this.getWsdls() != null) {
             Properties properties = new Properties();
@@ -232,12 +289,18 @@
         }
     }
 
+    /**
+     * Registers the Subscription that is passed in to the UDDI node for this clerk.
+     * @param subscription
+     * @return
+     */
     public Subscription register(Subscription subscription) {
         return register(subscription, this.getUDDINode().getApiNode());
     }
 
     /**
-     * Register a Subscription.
+     * Register a Subscription to UDDI node passed in. Make sure you use a clerk that
+     * has credentials for this node.
      */
     public Subscription register(Subscription subscription, Node node) {
 
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
index af8c31a..9b2bd83 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClient.java
@@ -45,7 +45,27 @@
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.TModelInstanceDetails;
 import org.uddi.api_v3.TModelInstanceInfo;
-
+/**
+ * <p>The UDDIClient is the main entry point for using the jUDDI client. The UDDICLient
+ * provides a simple way to get interact with a UDDI registry using the UDDI v3 API.</p>
+ * 
+ * <h3>Note:</h3>
+ * <p>It is also possible to use the Java API for XML Registries (JAXR). Apache Scout is
+ * an implementation of this API that can be configured to -behind the scenes- use the
+ * jUDDI Client code to access either UDDIv2 or UDDIv3 registry. The advantage of using
+ * JAXR is that your code can be configured to interact with any XML Registry (such as UDDI
+ * or ebXML). The downside is that JAXR has not evolved beyond the 1.0 release and is
+ * tightly coupled to the ebXML data structures, which being mapped to the UDDI data structures.
+ * For more information on JAXR see the Apache Scout project, which is a sub project of Apache jUDDI.
+ * If programmatic acess to a UDDIv3 registry is what you want, we recommend using the UDDIv3 
+ * API with the UDDIClient.</p>
+ * 
+ * <p>The UDDIClient uses a XML formatted configuration file, which by default is loaded from the classpath
+ * from location META-INF/uddi.xml.</p>
+ * 
+ * @author kstam
+ *
+ */
 public class UDDIClient {
 
     private static Log log = LogFactory.getLog(UDDIClient.class);
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index a93f36f..502b1a3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -24,6 +24,12 @@
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3.client.transport.TransportException;
 
+/**
+ * Connection information to a UDDI node.
+ * 
+ * @author kstam
+ *
+ */
 public class UDDINode implements Serializable {
 
 	private static final long serialVersionUID = 5721040459195558161L;
@@ -36,7 +42,7 @@
 	private String description;
 	private String custodyTransferUrl;
 	private String inquiryUrl;
-        private String inquiryRESTUrl;
+	private String inquiryRESTUrl;
 	private String publishUrl;
 	private String securityUrl;
 	private String subscriptionUrl;
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 3b2b5e7..f01839c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -16,15 +16,11 @@
  */
 package org.apache.juddi.v3.client.config;
 
-import java.lang.reflect.InvocationTargetException;
-
 import javax.servlet.ServletContext;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.juddi.v3.client.ClassUtil;
-import org.apache.juddi.v3.client.transport.Transport;
 
 public class WebHelper {
 	
@@ -94,44 +90,4 @@
 			return client;
 		}
 	}
-	/**
-	 * 
-	 * @param servletContext
-	 * @return
-	 * @throws ConfigurationException
-	 */
-	public static UDDINode getUDDIHomeNode(ServletContext servletContext) throws ConfigurationException {
-		UDDIClient client = getUDDIClient(servletContext);
-		return client.getClientConfig().getHomeNode();	
-	}
-	
-	public static Transport getTransport(ServletContext servletContext) 
-		   throws ConfigurationException, ClassNotFoundException, IllegalArgumentException, 
-		    SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException 
-	{
-		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT);
-		if (transport==null) {
-			UDDIClient client = getUDDIClient(servletContext);
-			UDDINode node = client.getClientConfig().getHomeNode();
-			Class<?> transportClass = ClassUtil.forName(node.getProxyTransport(), Transport.class);
-			transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(client.getName(),node.getName());
-			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT, transport);
-		}
-		return transport;
-	}
-	
-	public static Transport getTransport(ServletContext servletContext, UDDINode remoteNode) 
-	   throws ConfigurationException, ClassNotFoundException, IllegalArgumentException, 
-	    SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException 
-	{
-		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT + ""-"" + remoteNode.getName());
-		if (transport==null) {
-			UDDIClient manager = getUDDIClient(servletContext);
-			Class<?> transportClass = ClassUtil.forName(remoteNode.getProxyTransport(), Transport.class);
-			transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(manager.getName(),remoteNode.getName());
-			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT + ""-"" + remoteNode.getName(), transport);
-		}
-		return transport;
-	}
-	
 }
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
index 3d41538..053f933 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
@@ -21,7 +21,12 @@
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
-
+/**
+ * Is used to exchange UDDI data between UDDI nodes; for example when Subscriptions are uses.
+ * 
+ * @author kstam
+ *
+ */
 public class XRegistration {
 
 	private Log log = LogFactory.getLog(this.getClass());
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
index c2209fd..867ebf3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
@@ -16,6 +16,12 @@
  */
 package org.apache.juddi.v3.client.embed;
 
+/**
+ * Interface for the jUDDI Client to start and stop an embedded registry.
+ * 
+ * @author kstam
+ *
+ */
 public interface EmbeddedRegistry {
 
 	public void start();
"
juddi,979566a4fca7862099c7d03dba8d4bd3b7682aae,"JUDDI-637 Adding javadoc to client classes

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1556033 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-06 21:13:16,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
index 0d3d917..b06a0ef 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
@@ -21,7 +21,15 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.ClassUtil;
-
+/**
+ * Implementation of the EmbeddedRegistry to start and stop a inVM jUDDI server.
+ * 
+ * The implementation is using Reflection to avoid adding a compile time dependency since 
+ * it would create a circular dependency as the server already depends on the client.
+ * 
+ * @author kstam
+ *
+ */
 public class JUDDIRegistry implements EmbeddedRegistry {
 
 	private Log logger = LogFactory.getLog(this.getClass());
"
juddi,abc8891455d630fcd418156762a75f4bf8659d04,"JUDDI-716 adding support for X509IssuerSerial

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555601 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-05 18:19:24,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 383abeb..270bfa9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -55,6 +55,7 @@
 import org.w3._2000._09.xmldsig_.TransformType;
 import org.w3._2000._09.xmldsig_.TransformsType;
 import org.w3._2000._09.xmldsig_.X509DataType;
+import org.w3._2000._09.xmldsig_.X509IssuerSerialType;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -1136,6 +1137,11 @@
                                 modelKeyInfoValue.setKeyDataValueBytes((byte[]) x509IssuerSerialOrX509SKIOrX509SubjectName);
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName instanceof String) {
                                 modelKeyInfoValue.setKeyDataValueString((String) x509IssuerSerialOrX509SKIOrX509SubjectName);
+                        } else if (x509IssuerSerialOrX509SKIOrX509SubjectName instanceof X509IssuerSerialType) {
+                        	modelX509KeyData.setKeyDataType(X509IssuerSerialType.class.getSimpleName());
+                        	X509IssuerSerialType x509IssuerSerialType = (X509IssuerSerialType) x509IssuerSerialOrX509SKIOrX509SubjectName;
+                        	modelX509KeyData.setKeyDataValueString(x509IssuerSerialType.getX509IssuerName());
+                        	modelX509KeyData.setKeyDataValueBytes(x509IssuerSerialType.getX509SerialNumber().toByteArray());
                         } else if (x509IssuerSerialOrX509SKIOrX509SubjectName != null) {
                                 throw new RuntimeException(""Unrecognized Value for Element: "" + tagName + "": "" + x509IssuerSerialOrX509SKIOrX509SubjectName.getClass().getCanonicalName());
                         }
"
juddi,abc8891455d630fcd418156762a75f4bf8659d04,"JUDDI-716 adding support for X509IssuerSerial

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555601 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-05 18:19:24,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 590b6d1..63b3a83 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -18,14 +18,15 @@
 package org.apache.juddi.mapping;
 
 import java.io.ByteArrayInputStream;
+import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.xml.bind.JAXBElement;
 
+import javax.xml.bind.JAXBElement;
 import javax.xml.bind.JAXBException;
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
@@ -73,6 +74,7 @@
 import org.w3._2000._09.xmldsig_.TransformType;
 import org.w3._2000._09.xmldsig_.TransformsType;
 import org.w3._2000._09.xmldsig_.X509DataType;
+import org.w3._2000._09.xmldsig_.X509IssuerSerialType;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -222,7 +224,7 @@
                         mapModelKeyDataValue(modelKeyDataValue.getKeyDataValueList(), childKeyDataList);
                         x509DataType.getX509IssuerSerialOrX509SKIOrX509SubjectName().addAll(childKeyDataList);
                         JAXBElement dataJAXB = new JAXBElement(new QName(""http://www.w3.org/2000/09/xmldsig#"", tagName), X509DataType.class, x509DataType);
-                        parentKeyDataList.add(dataJAXB);   
+                        parentKeyDataList.add(dataJAXB);
                     } else if (dataType.equals(RetrievalMethodType.class.getSimpleName())) {
                         RetrievalMethodType retrievalMethodType = new RetrievalMethodType();
                         TransformsType transformsType = new TransformsType();
@@ -330,8 +332,16 @@
                         throw new RuntimeException(""Unrecognized type: "" + dataType);
                     }
                 } else {
-                    JAXBElement dataJAXB = new JAXBElement(new QName(""http://www.w3.org/2000/09/xmldsig#"", tagName), contents.getClass(), contents);
-                    parentKeyDataList.add(dataJAXB);
+                	 if (dataType!=null && dataType.equals(X509IssuerSerialType.class.getSimpleName())) {
+                     	X509IssuerSerialType x509IssuerSerialType = new X509IssuerSerialType();
+                     	x509IssuerSerialType.setX509IssuerName(contentStr);
+                     	x509IssuerSerialType.setX509SerialNumber(new BigInteger(contentBytes));
+                        JAXBElement dataJAXB = new JAXBElement(new QName(""http://www.w3.org/2000/09/xmldsig#"", tagName), X509IssuerSerialType.class, x509IssuerSerialType);
+                        parentKeyDataList.add(dataJAXB);
+                	 } else {
+                		JAXBElement dataJAXB = new JAXBElement(new QName(""http://www.w3.org/2000/09/xmldsig#"", tagName), contents.getClass(), contents);
+                		parentKeyDataList.add(dataJAXB);
+                	 }
                 }
             }
         }
"
juddi,abc8891455d630fcd418156762a75f4bf8659d04,"JUDDI-716 adding support for X509IssuerSerial

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555601 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-05 18:19:24,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java b/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
index 51b4b44..df9ced9 100644
--- a/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
+++ b/uddi-ws/src/main/java/org/w3/_2000/_09/xmldsig_/X509DataType.java
@@ -26,6 +26,7 @@
 import javax.xml.bind.annotation.XmlAnyElement;
 import javax.xml.bind.annotation.XmlElementRef;
 import javax.xml.bind.annotation.XmlElementRefs;
+import javax.xml.bind.annotation.XmlSeeAlso;
 import javax.xml.bind.annotation.XmlType;
 import org.w3c.dom.Element;
 
@@ -60,6 +61,7 @@
 @XmlType(name = ""X509DataType"", propOrder = {
     ""x509IssuerSerialOrX509SKIOrX509SubjectName""
 })
+@XmlSeeAlso({X509IssuerSerialType.class})
 public class X509DataType {
 
     @XmlElementRefs({
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Clerk.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Clerk.java
index ae389d0..2343ac4 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Clerk.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Clerk.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClerkDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClerkDetail.java
index 12412ca..4372b17 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClerkDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClerkDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfo.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfo.java
index 5746560..68a34ef 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfo.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfo.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfoDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfoDetail.java
index 7712e3b..0980372 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfoDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ClientSubscriptionInfoDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeleteClientSubscriptionInfo.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeleteClientSubscriptionInfo.java
index a3c48fa..047b53d 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeleteClientSubscriptionInfo.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeleteClientSubscriptionInfo.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeletePublisher.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeletePublisher.java
index 3873a3d..634485e 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeletePublisher.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/DeletePublisher.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetAllPublisherDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetAllPublisherDetail.java
index 0157af2..bd5d1f9 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetAllPublisherDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetAllPublisherDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetPublisherDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetPublisherDetail.java
index 998a668..5e58f48 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetPublisherDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/GetPublisherDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
index 624f4e4..a244413 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/NodeDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/NodeDetail.java
index 6383097..32c9533 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/NodeDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/NodeDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ObjectFactory.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ObjectFactory.java
index d3329e3..95a04eb 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/ObjectFactory.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/ObjectFactory.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.JAXBElement;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Publisher.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Publisher.java
index 61d6376..6b88503 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Publisher.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Publisher.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/PublisherDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/PublisherDetail.java
index 316c4ed..d62dc42 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/PublisherDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/PublisherDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
index 68a66c1..d09f71c 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClientSubscriptionInfo.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClientSubscriptionInfo.java
index 720f764..0ebe211 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClientSubscriptionInfo.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClientSubscriptionInfo.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveNode.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveNode.java
index 3ebc1f8..67f294e 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveNode.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveNode.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SavePublisher.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SavePublisher.java
index d330e02..d24220f 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SavePublisher.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SavePublisher.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscription.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscription.java
index 0c7fdae..e455153 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscription.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscription.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetail.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetail.java
index aa92dbc..0db291a 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetail.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetail.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import java.util.ArrayList;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetailResponse.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetailResponse.java
index 6ec9f54..947ac63 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetailResponse.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionDetailResponse.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionRequest.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionRequest.java
index 1eb9380..4183a58 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionRequest.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SyncSubscriptionRequest.java
@@ -1,4 +1,19 @@
-
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.api_v3;
 
 import javax.xml.bind.annotation.XmlAccessType;
"
juddi,b13047171693331a53335059c31aeacf3dae7700,"JUDDI-623 adding back in the ASF license info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555395 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 17:45:38,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/package-info.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/package-info.java
index d9fd16d..91f448f 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/package-info.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/package-info.java
@@ -1,2 +1,18 @@
+/*
+ * Copyright 2001-2009 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 @javax.xml.bind.annotation.XmlSchema(namespace = ""urn:juddi-apache-org:api_v3"", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
 package org.apache.juddi.api_v3;
"
juddi,4b0d76a0d855245dbd7310206456eee4d8dd3376,"JUDDI-763 reverting, mistaken commit

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555292 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 00:11:46,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 590b6d1..496c8f9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -1073,13 +1073,7 @@
 				throws DispositionReportFaultMessage {
 		
 		apiClientSubscriptionInfo.setSubscriptionKey(modelClientSubscriptionInfo.getSubscriptionKey());
-                GregorianCalendar gcal = new GregorianCalendar();
-                gcal.setTimeInMillis(modelClientSubscriptionInfo.getLastNotified().getTime());
-                try {
-                        apiClientSubscriptionInfo.setLastModified( DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal));
-                } catch (DatatypeConfigurationException ex) {
-                        logger.warn(""unable to create DatatypeFactory"",ex);
-                }
+		apiClientSubscriptionInfo.setLastModified(modelClientSubscriptionInfo.getLastNotified());
 		
 		if (modelClientSubscriptionInfo.getFromClerk()!=null) {
 			org.apache.juddi.api_v3.Clerk apiFromClerk = new org.apache.juddi.api_v3.Clerk();
"
juddi,de30268257b990fa6aa19757d74785d67f94e972,"JUDDI-763 fixed, along with some typos, branch


git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1555290 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 00:07:01,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
index c34bb78..14747c6 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
@@ -175,7 +175,37 @@
 
     public Set<TModel> createWADLTModels(String wadlURL, Application app) throws Exception {
         Set<TModel> tModels = new HashSet<TModel>();
+        TModel binding = new TModel();
+        binding.setTModelKey(keyDomainURI + ""binding"");
+        
+        Name sName = new Name();
+        sName.setLang(lang);
+        if (!app.getDoc().isEmpty()) {
+            sName.setValue(app.getDoc().get(0).getTitle());
+        }
+        if (sName.getValue() == null) {
+            sName.setValue(keyDomainURI + "" Binding tModel"");
+        }
+        binding.setName(sName);
+        tModels.add(binding);
+        
+        
+         binding = new TModel();
+        binding.setTModelKey(keyDomainURI + ""rest"");
+        
+        sName = new Name();
+        sName.setLang(lang);
+        if (!app.getDoc().isEmpty()) {
+            sName.setValue(app.getDoc().get(0).getTitle());
+        }
+        if (sName.getValue() == null) {
+            sName.setValue(keyDomainURI + "" Rest tModel"");
+        }
+        binding.setName(sName);
+        tModels.add(binding);
+        
 
+        //keyDomainURI + ""binding""
         return tModels;
     }
 
"
juddi,de2c7ed62b52bcb56e4984fa3520d1d748635bf6,"JUDDI-763 fixed, along with some typos, trunk


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555289 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 00:06:57,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
index c34bb78..14747c6 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
@@ -175,7 +175,37 @@
 
     public Set<TModel> createWADLTModels(String wadlURL, Application app) throws Exception {
         Set<TModel> tModels = new HashSet<TModel>();
+        TModel binding = new TModel();
+        binding.setTModelKey(keyDomainURI + ""binding"");
+        
+        Name sName = new Name();
+        sName.setLang(lang);
+        if (!app.getDoc().isEmpty()) {
+            sName.setValue(app.getDoc().get(0).getTitle());
+        }
+        if (sName.getValue() == null) {
+            sName.setValue(keyDomainURI + "" Binding tModel"");
+        }
+        binding.setName(sName);
+        tModels.add(binding);
+        
+        
+         binding = new TModel();
+        binding.setTModelKey(keyDomainURI + ""rest"");
+        
+        sName = new Name();
+        sName.setLang(lang);
+        if (!app.getDoc().isEmpty()) {
+            sName.setValue(app.getDoc().get(0).getTitle());
+        }
+        if (sName.getValue() == null) {
+            sName.setValue(keyDomainURI + "" Rest tModel"");
+        }
+        binding.setName(sName);
+        tModels.add(binding);
+        
 
+        //keyDomainURI + ""binding""
         return tModels;
     }
 
"
juddi,de2c7ed62b52bcb56e4984fa3520d1d748635bf6,"JUDDI-763 fixed, along with some typos, trunk


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555289 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-04 00:06:57,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index ce7d984..590b6d1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -20,10 +20,15 @@
 import java.io.ByteArrayInputStream;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.GregorianCalendar;
 import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import javax.xml.bind.JAXBElement;
 
 import javax.xml.bind.JAXBException;
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
 import javax.xml.namespace.QName;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -1068,7 +1073,13 @@
 				throws DispositionReportFaultMessage {
 		
 		apiClientSubscriptionInfo.setSubscriptionKey(modelClientSubscriptionInfo.getSubscriptionKey());
-		apiClientSubscriptionInfo.setLastModified(modelClientSubscriptionInfo.getLastNotified());
+                GregorianCalendar gcal = new GregorianCalendar();
+                gcal.setTimeInMillis(modelClientSubscriptionInfo.getLastNotified().getTime());
+                try {
+                        apiClientSubscriptionInfo.setLastModified( DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal));
+                } catch (DatatypeConfigurationException ex) {
+                        logger.warn(""unable to create DatatypeFactory"",ex);
+                }
 		
 		if (modelClientSubscriptionInfo.getFromClerk()!=null) {
 			org.apache.juddi.api_v3.Clerk apiFromClerk = new org.apache.juddi.api_v3.Clerk();
"
juddi,5c1a807d9dbb7d43cdd63df1321e92b0d4e53fd9,"JUDDI-746 removing test code from the SMTPNotifier. Removing the SMTP tests from the TCK test bc this smtp test will never work with other UDDI implementations anyway.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1555270 13f79535-47bb-0310-9956-ffa450edef68
",2014-01-03 22:43:28,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index e64e6a5..38ecfae 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -1,13 +1,12 @@
 package org.apache.juddi.subscription.notify;
 
-import java.io.File;
-import java.io.FileInputStream;
 import java.net.URISyntaxException;
 import java.rmi.RemoteException;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;
 import java.util.Properties;
+
 import javax.crypto.BadPaddingException;
 import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.NoSuchPaddingException;
@@ -18,6 +17,7 @@
 import javax.mail.Transport;
 import javax.mail.internet.InternetAddress;
 import javax.mail.internet.MimeMessage;
+
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -27,7 +27,6 @@
 import org.apache.juddi.cryptor.CryptorFactory;
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.model.BindingTemplate;
-import org.apache.juddi.v3.client.Release;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.Result;
 import org.uddi.subr_v3.NotifySubscriptionListener;
@@ -38,17 +37,17 @@
  * @author probably Kurt Stam
  */
 public class SMTPNotifier implements Notifier {
-	
+
 	Log log = LogFactory.getLog(this.getClass());
 	String notificationEmailAddress = null;
 	//String from = null;
 	Session session = null;
 	Properties properties = null;
-	
+
 	private final static String[] mailProps = {""mail.smtp.from"", ""mail.smtp.host"", ""mail.smtp.port"", 
 		""mail.smtp.socketFactory.class"", ""mail.smtp.socketFactory.fallback"", ""mail.smtp.starttls.enable"",
 		""mail.smtp.socketFactory.port"",""mail.smtp.auth"",""mail.smtp.user"",""mail.smtp.password""};
-	
+
 	protected Properties getEMailProperties() throws ConfigurationException {
 		if (properties==null) {
 			properties = new Properties();
@@ -61,43 +60,10 @@
 					properties.put(key, System.getProperty(mailPrefix + key));
 				}
 			}
-			// only read from file during testing
-			if (properties.size()==0 || ""jUDDI@example.org"".equals(properties.getProperty(""mail.smtp.from""))) {
-				String curDir = System.getProperty(""user.dir"");
-				if (! curDir.endsWith(""uddi-tck"")) curDir += ""/uddi-tck"";
-				String version = Release.getRegistryVersion().replaceAll("".SNAPSHOT"", ""-SNAPSHOT"");
-				String path = curDir + ""/target/juddi-tomcat-"" + version + ""/temp/"";
-				log.info(""Path=""+ path);
-				File tmpFile = new File(path + ""/juddi-mail.properties"");
-				if (tmpFile.exists()) {
-                                    FileInputStream fis = null;
-					try {
-						Properties fileProperties = new Properties();
-                                                fis = new FileInputStream(tmpFile);
-						fileProperties.load(fis);
-						for (String key: mailProps) {
-							if (fileProperties.containsKey(mailPrefix + key)) {
-								properties.put(key, fileProperties.get(mailPrefix + key));
-							}
-						}
-					} catch (Exception e) {
-						// TODO Auto-generated catch block
-						log.warn(""Unable to load mail properties"",e);
-					}
-                                        finally{
-                                            if (fis!=null)
-                                                try {
-                                                fis.close();
-                                                } catch (Exception ex) {
-                                                }
-                                        }
-					log.info(""TEST only: Reading properties from "" + tmpFile.getAbsolutePath() + "":"" + properties);
-				}
-			}
 		}
 		return properties;
 	}
-	
+
 	public SMTPNotifier(BindingTemplate bindingTemplate) throws URISyntaxException, Exception {
 		super();
 		if (!AccessPointType.END_POINT.toString().equalsIgnoreCase(bindingTemplate.getAccessPointType())) {
@@ -112,26 +78,26 @@
 			notificationEmailAddress = accessPointUrl.substring(accessPointUrl.indexOf("":"")+1);
 			if (Boolean.getBoolean(getEMailProperties().getProperty(""mail.smtp.starttls.enable""))) {
 				final String username = getEMailProperties().getProperty(""mail.smtp.username"");
-                                String pwd = getEMailProperties().getProperty(""mail.smtp.password"");
-                                if (getEMailProperties().getProperty(""mail.smtp.password"" + Property.ENCRYPTED_ATTRIBUTE, ""false"").equalsIgnoreCase(""true""))
-                                {
-                                    try {
-                                        pwd = CryptorFactory.getCryptor().decrypt(pwd);
-                                    } catch (NoSuchPaddingException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    } catch (NoSuchAlgorithmException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    } catch (InvalidAlgorithmParameterException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    } catch (InvalidKeyException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    } catch (IllegalBlockSizeException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    } catch (BadPaddingException ex) {
-                                        log.error(""Unable to decrypt settings"",ex);
-                                    }
-                                }
-                                final String password = pwd;
+				String pwd = getEMailProperties().getProperty(""mail.smtp.password"");
+				if (getEMailProperties().getProperty(""mail.smtp.password"" + Property.ENCRYPTED_ATTRIBUTE, ""false"").equalsIgnoreCase(""true""))
+				{
+					try {
+						pwd = CryptorFactory.getCryptor().decrypt(pwd);
+					} catch (NoSuchPaddingException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					} catch (NoSuchAlgorithmException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					} catch (InvalidAlgorithmParameterException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					} catch (InvalidKeyException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					} catch (IllegalBlockSizeException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					} catch (BadPaddingException ex) {
+						log.error(""Unable to decrypt settings"",ex);
+					}
+				}
+				final String password = pwd;
 				session = Session.getInstance(getEMailProperties(), new javax.mail.Authenticator() {
 					protected PasswordAuthentication getPasswordAuthentication() {
 						return new PasswordAuthentication(username, password);
@@ -144,9 +110,9 @@
 	}
 
 	public DispositionReport notifySubscriptionListener(NotifySubscriptionListener body) throws DispositionReportFaultMessage, RemoteException {
-		
+
 		log.info(""Sending notification email to "" + notificationEmailAddress);
-		
+
 		try {
 			if (session !=null && notificationEmailAddress != null) {
 				MimeMessage message = new MimeMessage(session);
@@ -165,11 +131,11 @@
 			log.error(e.getMessage(),e);
 			throw new DispositionReportFaultMessage(e.getMessage(), null);
 		}
-		
+
 		DispositionReport dr = new DispositionReport();
 		Result res = new Result();
 		dr.getResult().add(res);
-		
+
 		return dr;
 	}
 }
"
juddi,dea489063c131a11f6c8bc6c2d1750c49fc865c4,"JUDDI-637, removing 1.7 constructs

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1553614 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-27 01:26:53,Kurt Stam,"diff --git a/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java b/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
index 43c81e8..dbc2fa4 100644
--- a/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
+++ b/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
@@ -7,7 +7,6 @@
 import javax.xml.ws.Service;
 import javax.xml.ws.WebEndpoint;
 import javax.xml.ws.WebServiceClient;
-import javax.xml.ws.WebServiceFeature;
 
 import org.apache.juddi.v3.client.ClassUtil;
 
@@ -55,18 +54,6 @@
         return super.getPort(new QName(""http://samples.juddi.apache.org/"", ""HelloWorldImplPort""), HelloWorld.class);
     }
 
-    /**
-     * 
-     * @param features
-     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
-     * @return
-     *     returns HelloWorld
-     */
-    @WebEndpoint(name = ""HelloWorldImplPort"")
-    public HelloWorld getHelloWorldImplPort(WebServiceFeature... features) {
-        return super.getPort(new QName(""http://samples.juddi.apache.org/"", ""HelloWorldImplPort""), HelloWorld.class, features);
-    }
-
     private static URL __getWsdlLocation() {
         return HELLOWORLD_WSDL_LOCATION;
     }
"
juddi,4bc282b4e9bfb97e7674471757c41039d6cbaf75,"JUDDI-637, removing 1.7 constructs

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1553613 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-27 01:25:53,Kurt Stam,"diff --git a/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java b/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
index aa5eade..43c81e8 100644
--- a/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
+++ b/juddi-examples/wsdl2uddi/src/main/java/org/apache/juddi/samples/HelloWorld_Service.java
@@ -37,26 +37,14 @@
         super(__getWsdlLocation(), HELLOWORLD_QNAME);
     }
 
-    public HelloWorld_Service(WebServiceFeature... features) {
-        super(__getWsdlLocation(), HELLOWORLD_QNAME, features);
-    }
-
     public HelloWorld_Service(URL wsdlLocation) {
         super(wsdlLocation, HELLOWORLD_QNAME);
     }
 
-    public HelloWorld_Service(URL wsdlLocation, WebServiceFeature... features) {
-        super(wsdlLocation, HELLOWORLD_QNAME, features);
-    }
-
     public HelloWorld_Service(URL wsdlLocation, QName serviceName) {
         super(wsdlLocation, serviceName);
     }
 
-    public HelloWorld_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
-        super(wsdlLocation, serviceName, features);
-    }
-
     /**
      * 
      * @return
"
juddi,f71dc8f2634bc126e90a3d27a3e723f346202192,"JUDDI-623 updating the wsdl and correcting the java code.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1553611 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-27 00:32:43,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
index 72067c0..80c3aee 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/SaveClerk.java
@@ -35,7 +35,7 @@
  * 
  */
 @XmlAccessorType(XmlAccessType.FIELD)
-@XmlType(name = ""save_clerkInfo"", propOrder = {
+@XmlType(name = ""save_clerk"", propOrder = {
 	""authInfo"",
     ""clerk""
 })
"
juddi,35d4a2f79da5df93b2e6a7c8fcfc2f5366549809,"JUDDI-752 fixed. TempKeyPK is now public and added to persistence.xml

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1553020 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-22 20:32:45,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TempKeyPK.java b/juddi-core/src/main/java/org/apache/juddi/model/TempKeyPK.java
index 58965b5..5d4ae60 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TempKeyPK.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TempKeyPK.java
@@ -25,7 +25,7 @@
  */
 
 @Embeddable
-class TempKeyPK implements java.io.Serializable {
+public class TempKeyPK implements java.io.Serializable {
 	
 	private static final long serialVersionUID = 790951819871694597L;
 	private String entityKey;
"
juddi,4475971554cbf268a9751d4c7765cc4ae9e89576,"JUDDI-749 fixed branch

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1552212 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-19 02:42:39,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
index ba6e363..2cc8222 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
@@ -19,50 +19,57 @@
  */
 public class ResourceLoader {
 
-    private static Map map = new HashMap();
+        private static Map map = new HashMap();
 
-    /**
-     * returns a localized string in the locale defined within
-     * session.getAttribute(""locale"") or in the default locale, en
-     *
-     * @param session
-     * @param key
-     * @return a localized string
-     * @throws IllegalArgumentException if the key is null
-     * @throws MissingResourceException if the resource bundle can't be found
-     */
-    public static String GetResource(HttpSession session, String key) throws MissingResourceException {
-        if (key == null) {
-            throw new IllegalArgumentException(""key"");
-        }
-        String locale = (String) session.getAttribute(""locale"");
-        return GetResource(locale, key);
-    }
-
-    /**
-     * returns a localized string in the locale defined within locale or in the
-     * default locale, en
-     *
-     * @param session
-     * @param key
-     * @return a localized string
-     * @throws IllegalArgumentException if the key is null
-     * @throws MissingResourceException if the resource bundle can't be found
-     */
-    public static String GetResource(String locale, String key) throws MissingResourceException {
-        if (key == null) {
-            throw new IllegalArgumentException(""key"");
+        /**
+         * returns a localized string in the locale defined within
+         * session.getAttribute(""locale"") or in the default locale, en
+         *
+         * @param session
+         * @param key
+         * @return a localized string
+         * @throws IllegalArgumentException if the key is null
+         * @throws MissingResourceException if the resource bundle can't be
+         * found
+         */
+        public static String GetResource(HttpSession session, String key) throws MissingResourceException {
+                if (key == null) {
+                        throw new IllegalArgumentException(""key"");
+                }
+                String locale = ""en"";
+                if (session != null) {
+                        locale = (String) session.getAttribute(""locale"");
+                }
+                if (locale==null)
+                        locale = ""en"";
+                return GetResource(locale, key);
         }
 
-        ResourceBundle bundle = (ResourceBundle) map.get(locale);
-        if (bundle == null) {
-            bundle = ResourceBundle.getBundle(""org.apache.juddi.webconsole.resources.web"", new Locale(locale));
-            map.put(locale, bundle);
+        /**
+         * returns a localized string in the locale defined within locale or in
+         * the default locale, en
+         *
+         * @param session
+         * @param key
+         * @return a localized string
+         * @throws IllegalArgumentException if the key is null
+         * @throws MissingResourceException if the resource bundle can't be
+         * found
+         */
+        public static String GetResource(String locale, String key) throws MissingResourceException {
+                if (key == null) {
+                        throw new IllegalArgumentException(""key"");
+                }
+
+                ResourceBundle bundle = (ResourceBundle) map.get(locale);
+                if (bundle == null) {
+                        bundle = ResourceBundle.getBundle(""org.apache.juddi.webconsole.resources.web"", new Locale(locale));
+                        map.put(locale, bundle);
+                }
+                try {
+                        return bundle.getString(key.trim());
+                } catch (Exception ex) {
+                        return ""key "" + key + "" not found "" + ex.getMessage();
+                }
         }
-        try {
-            return bundle.getString(key.trim());
-        } catch (Exception ex) {
-            return ""key "" + key + "" not found "" + ex.getMessage();
-        }
-    }
 }
"
juddi,6182be418dbf8a723669f85cb7d078c09d87ccb9,"JUDDI-749 fixed trunk

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1552193 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-19 00:56:37,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
index ba6e363..2cc8222 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
@@ -19,50 +19,57 @@
  */
 public class ResourceLoader {
 
-    private static Map map = new HashMap();
+        private static Map map = new HashMap();
 
-    /**
-     * returns a localized string in the locale defined within
-     * session.getAttribute(""locale"") or in the default locale, en
-     *
-     * @param session
-     * @param key
-     * @return a localized string
-     * @throws IllegalArgumentException if the key is null
-     * @throws MissingResourceException if the resource bundle can't be found
-     */
-    public static String GetResource(HttpSession session, String key) throws MissingResourceException {
-        if (key == null) {
-            throw new IllegalArgumentException(""key"");
-        }
-        String locale = (String) session.getAttribute(""locale"");
-        return GetResource(locale, key);
-    }
-
-    /**
-     * returns a localized string in the locale defined within locale or in the
-     * default locale, en
-     *
-     * @param session
-     * @param key
-     * @return a localized string
-     * @throws IllegalArgumentException if the key is null
-     * @throws MissingResourceException if the resource bundle can't be found
-     */
-    public static String GetResource(String locale, String key) throws MissingResourceException {
-        if (key == null) {
-            throw new IllegalArgumentException(""key"");
+        /**
+         * returns a localized string in the locale defined within
+         * session.getAttribute(""locale"") or in the default locale, en
+         *
+         * @param session
+         * @param key
+         * @return a localized string
+         * @throws IllegalArgumentException if the key is null
+         * @throws MissingResourceException if the resource bundle can't be
+         * found
+         */
+        public static String GetResource(HttpSession session, String key) throws MissingResourceException {
+                if (key == null) {
+                        throw new IllegalArgumentException(""key"");
+                }
+                String locale = ""en"";
+                if (session != null) {
+                        locale = (String) session.getAttribute(""locale"");
+                }
+                if (locale==null)
+                        locale = ""en"";
+                return GetResource(locale, key);
         }
 
-        ResourceBundle bundle = (ResourceBundle) map.get(locale);
-        if (bundle == null) {
-            bundle = ResourceBundle.getBundle(""org.apache.juddi.webconsole.resources.web"", new Locale(locale));
-            map.put(locale, bundle);
+        /**
+         * returns a localized string in the locale defined within locale or in
+         * the default locale, en
+         *
+         * @param session
+         * @param key
+         * @return a localized string
+         * @throws IllegalArgumentException if the key is null
+         * @throws MissingResourceException if the resource bundle can't be
+         * found
+         */
+        public static String GetResource(String locale, String key) throws MissingResourceException {
+                if (key == null) {
+                        throw new IllegalArgumentException(""key"");
+                }
+
+                ResourceBundle bundle = (ResourceBundle) map.get(locale);
+                if (bundle == null) {
+                        bundle = ResourceBundle.getBundle(""org.apache.juddi.webconsole.resources.web"", new Locale(locale));
+                        map.put(locale, bundle);
+                }
+                try {
+                        return bundle.getString(key.trim());
+                } catch (Exception ex) {
+                        return ""key "" + key + "" not found "" + ex.getMessage();
+                }
         }
-        try {
-            return bundle.getString(key.trim());
-        } catch (Exception ex) {
-            return ""key "" + key + "" not found "" + ex.getMessage();
-        }
-    }
 }
"
juddi,5e7dc86c3b76fa7d074705012072118ab6cf017f,"JUDDI-745 fixed on trunk

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1550403 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 12:06:23,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
index e3e3310..ffcd929 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
@@ -22,7 +22,9 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.error.AuthenticationException;
@@ -49,6 +51,22 @@
 		if (authorizedName==null || """".equals(authorizedName)) {
 			throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
 		}
+                int MaxBindingsPerService = -1;
+                int MaxServicesPerBusiness = -1;
+                int MaxTmodels = -1;
+                int MaxBusinesses = -1;
+                try {
+                        MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                        MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                        MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                        MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+                } catch (Exception ex) {
+                        MaxBindingsPerService = -1;
+                        MaxServicesPerBusiness = -1;
+                        MaxTmodels = -1;
+                        MaxBusinesses = -1;
+                        log.error(""config exception! "" + authorizedName, ex);
+                }
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
@@ -60,10 +78,10 @@
 				publisher.setAuthorizedName(authorizedName);
 				publisher.setIsAdmin(""false"");
 				publisher.setIsEnabled(""true"");
-				publisher.setMaxBindingsPerService(199);
-				publisher.setMaxBusinesses(100);
-				publisher.setMaxServicesPerBusiness(100);
-				publisher.setMaxTmodels(100);
+				publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                                publisher.setMaxBusinesses(MaxBusinesses);
+                                publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                                publisher.setMaxTmodels(MaxTmodels);
 				publisher.setPublisherName(""Unknown"");
 				em.persist(publisher);
 				tx.commit();
"
juddi,5e7dc86c3b76fa7d074705012072118ab6cf017f,"JUDDI-745 fixed on trunk

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1550403 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 12:06:23,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
index 7fbd84b..9453b3c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
@@ -114,6 +114,24 @@
         }
 
         boolean isLdapUser = false;
+        
+        int MaxBindingsPerService = -1;
+        int MaxServicesPerBusiness = -1;
+        int MaxTmodels = -1;
+        int MaxBusinesses = -1;
+        try {
+                MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+        } catch (Exception ex) {
+                MaxBindingsPerService = -1;
+                MaxServicesPerBusiness = -1;
+                MaxTmodels = -1;
+                MaxBusinesses = -1;
+                logger.error(""config exception! "" + authorizedName, ex);
+        }
+
         try {
             env = new Hashtable<String, String>();
             env.put(Context.INITIAL_CONTEXT_FACTORY, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_INITIAL_CONTEXT, ""com.sun.jndi.ldap.LdapCtxFactory""));
@@ -155,10 +173,10 @@
                     publisher.setAuthorizedName(authorizedName);
                     publisher.setIsAdmin(""false"");
                     publisher.setIsEnabled(""true"");
-                    publisher.setMaxBindingsPerService(199);
-                    publisher.setMaxBusinesses(100);
-                    publisher.setMaxServicesPerBusiness(100);
-                    publisher.setMaxTmodels(100);
+                    publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                    publisher.setMaxBusinesses(MaxBusinesses);
+                    publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                    publisher.setMaxTmodels(MaxTmodels);
                     publisher.setPublisherName(""Unknown"");
                     em.persist(publisher);
                     tx.commit();
"
juddi,5e7dc86c3b76fa7d074705012072118ab6cf017f,"JUDDI-745 fixed on trunk

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1550403 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 12:06:23,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index f4a6dd2..79d9b5b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -116,6 +116,22 @@
             throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
         }
 
+        int MaxBindingsPerService = -1;
+        int MaxServicesPerBusiness = -1;
+        int MaxTmodels = -1;
+        int MaxBusinesses = -1;
+        try {
+                MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+        } catch (Exception ex) {
+                MaxBindingsPerService = -1;
+                MaxServicesPerBusiness = -1;
+                MaxTmodels = -1;
+                MaxBusinesses = -1;
+                logger.error(""config exception! "" + authorizedName, ex);
+        }
         boolean isLdapUser = false;
         try {
             env = new Hashtable<String, String>();
@@ -155,10 +171,10 @@
                     publisher.setAuthorizedName(authorizedName);
                     publisher.setIsAdmin(""false"");
                     publisher.setIsEnabled(""true"");
-                    publisher.setMaxBindingsPerService(199);
-                    publisher.setMaxBusinesses(100);
-                    publisher.setMaxServicesPerBusiness(100);
-                    publisher.setMaxTmodels(100);
+                    publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                    publisher.setMaxBusinesses(MaxBusinesses);
+                    publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                    publisher.setMaxTmodels(MaxTmodels);
                     publisher.setPublisherName(""Unknown"");
                     em.persist(publisher);
                     tx.commit();
"
juddi,80c0edea424ad7bbf4661a6d889b4e830600d4da,"JUDDI-745 fixed on branch 33

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1550334 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 03:02:52,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
index e3e3310..ffcd929 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
@@ -22,7 +22,9 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.error.AuthenticationException;
@@ -49,6 +51,22 @@
 		if (authorizedName==null || """".equals(authorizedName)) {
 			throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
 		}
+                int MaxBindingsPerService = -1;
+                int MaxServicesPerBusiness = -1;
+                int MaxTmodels = -1;
+                int MaxBusinesses = -1;
+                try {
+                        MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                        MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                        MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                        MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+                } catch (Exception ex) {
+                        MaxBindingsPerService = -1;
+                        MaxServicesPerBusiness = -1;
+                        MaxTmodels = -1;
+                        MaxBusinesses = -1;
+                        log.error(""config exception! "" + authorizedName, ex);
+                }
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
@@ -60,10 +78,10 @@
 				publisher.setAuthorizedName(authorizedName);
 				publisher.setIsAdmin(""false"");
 				publisher.setIsEnabled(""true"");
-				publisher.setMaxBindingsPerService(199);
-				publisher.setMaxBusinesses(100);
-				publisher.setMaxServicesPerBusiness(100);
-				publisher.setMaxTmodels(100);
+				publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                                publisher.setMaxBusinesses(MaxBusinesses);
+                                publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                                publisher.setMaxTmodels(MaxTmodels);
 				publisher.setPublisherName(""Unknown"");
 				em.persist(publisher);
 				tx.commit();
"
juddi,80c0edea424ad7bbf4661a6d889b4e830600d4da,"JUDDI-745 fixed on branch 33

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1550334 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 03:02:52,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
index 7fbd84b..9453b3c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
@@ -114,6 +114,24 @@
         }
 
         boolean isLdapUser = false;
+        
+        int MaxBindingsPerService = -1;
+        int MaxServicesPerBusiness = -1;
+        int MaxTmodels = -1;
+        int MaxBusinesses = -1;
+        try {
+                MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+        } catch (Exception ex) {
+                MaxBindingsPerService = -1;
+                MaxServicesPerBusiness = -1;
+                MaxTmodels = -1;
+                MaxBusinesses = -1;
+                logger.error(""config exception! "" + authorizedName, ex);
+        }
+
         try {
             env = new Hashtable<String, String>();
             env.put(Context.INITIAL_CONTEXT_FACTORY, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_INITIAL_CONTEXT, ""com.sun.jndi.ldap.LdapCtxFactory""));
@@ -155,10 +173,10 @@
                     publisher.setAuthorizedName(authorizedName);
                     publisher.setIsAdmin(""false"");
                     publisher.setIsEnabled(""true"");
-                    publisher.setMaxBindingsPerService(199);
-                    publisher.setMaxBusinesses(100);
-                    publisher.setMaxServicesPerBusiness(100);
-                    publisher.setMaxTmodels(100);
+                    publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                    publisher.setMaxBusinesses(MaxBusinesses);
+                    publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                    publisher.setMaxTmodels(MaxTmodels);
                     publisher.setPublisherName(""Unknown"");
                     em.persist(publisher);
                     tx.commit();
"
juddi,80c0edea424ad7bbf4661a6d889b4e830600d4da,"JUDDI-745 fixed on branch 33

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1550334 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-12 03:02:52,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index f4a6dd2..79d9b5b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -116,6 +116,22 @@
             throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
         }
 
+        int MaxBindingsPerService = -1;
+        int MaxServicesPerBusiness = -1;
+        int MaxTmodels = -1;
+        int MaxBusinesses = -1;
+        try {
+                MaxBindingsPerService = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BINDINGS_PER_SERVICE, -1);
+                MaxServicesPerBusiness = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_SERVICES_PER_BUSINESS, -1);
+                MaxTmodels = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_TMODELS_PER_PUBLISHER, -1);
+                MaxBusinesses = AppConfig.getConfiguration().getInt(Property.JUDDI_MAX_BUSINESSES_PER_PUBLISHER, -1);
+        } catch (Exception ex) {
+                MaxBindingsPerService = -1;
+                MaxServicesPerBusiness = -1;
+                MaxTmodels = -1;
+                MaxBusinesses = -1;
+                logger.error(""config exception! "" + authorizedName, ex);
+        }
         boolean isLdapUser = false;
         try {
             env = new Hashtable<String, String>();
@@ -155,10 +171,10 @@
                     publisher.setAuthorizedName(authorizedName);
                     publisher.setIsAdmin(""false"");
                     publisher.setIsEnabled(""true"");
-                    publisher.setMaxBindingsPerService(199);
-                    publisher.setMaxBusinesses(100);
-                    publisher.setMaxServicesPerBusiness(100);
-                    publisher.setMaxTmodels(100);
+                    publisher.setMaxBindingsPerService(MaxBindingsPerService);
+                    publisher.setMaxBusinesses(MaxBusinesses);
+                    publisher.setMaxServicesPerBusiness(MaxServicesPerBusiness);
+                    publisher.setMaxTmodels(MaxTmodels);
                     publisher.setPublisherName(""Unknown"");
                     em.persist(publisher);
                     tx.commit();
"
juddi,8eb4ad71ade98af2e80de46ab1b0722b59efc67d,"JUDDI-740 fixed
JUDDI-742 added test cases for most operations.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1549095 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-08 18:25:11,alexoree,"diff --git a/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java b/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
index 7eb0af6..1413699 100644
--- a/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
+++ b/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
@@ -27,6 +27,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api.impl.UDDIInquiryImpl;
 import org.apache.juddi.api_v3.AccessPointType;
+import org.apache.juddi.api_v3.rest.UriContainer;
 import org.apache.juddi.v3.client.mapping.ReadWSDL;
 import org.apache.juddi.v3.client.mapping.URLLocalizerDefaultImpl;
 import org.apache.juddi.v3.client.mapping.WSDL2UDDI;
@@ -272,7 +273,7 @@
     @Path(""/XML/endpointsByService/{id}"")
     @Produces(""application/json"")
     @org.apache.cxf.jaxrs.model.wadl.Description(""Returns the binding details of a given entity in JSON"")
-    public List<URI> geEndpointsByServiceJSON(@PathParam(""id"") String id) throws WebApplicationException {
+    public UriContainer geEndpointsByServiceJSON(@PathParam(""id"") String id) throws WebApplicationException {
         return getEndpointsByService(id);
     }
 
@@ -287,32 +288,67 @@
     @Path(""/XML/endpointsByService/{id}"")
     @Produces(""application/xml"")
     @org.apache.cxf.jaxrs.model.wadl.Description(""Returns the binding details of a given entity in XML"")
-    public List<URI> getEndpointsByServiceXML(@PathParam(""id"") String id) throws WebApplicationException {
+    public UriContainer getEndpointsByServiceXML(@PathParam(""id"") String id) throws WebApplicationException {
         return getEndpointsByService(id);
     }
+    
+    /**
+     * 6.5 HTTP GET Services for UDDI Data Structures
+A node may offer an HTTP GET service for access to the XML representations of UDDI data structures. If a node offers this service, the URLs should be in a format that is predictable and uses the entity key as a URL parameter.
 
-    private List<URI> getEndpointsByService(String id) throws WebApplicationException {
-        List<URI> ret = new ArrayList<URI>();
+The RECOMMENDED syntax for the URLs for such a service is as follows:
+
+If a UDDI node’s base URI is http://uddi.example.org/mybase, then the URI http://uddi.example.org/mybase?<entity>Key=uddiKey would retrieve the XML for the data structure whose type is <entity> and whose key is uddiKey.  For example, the XML representation of a tModel whose key is ""uddi:tempuri.com:fish:interface"" can be retrieved by using the URL http://uddi.example.org/mybase?tModelKey=uddi:tempuri.com:fish:interface.
+
+In the case of businessEntities, the node MAY add these URIs to the businessEntity’s discoveryURLs structure, though this is NOT RECOMMENDED behavior as it complicates the use of digital signatures.
+
+
+ 
+     * @param id
+     * @return
+     * @throws WebApplicationException 
+     */
+    @GET
+    @Path(""/base/{entitykey}/{key}"")
+    @Produces(""application/xml"")
+     @org.apache.cxf.jaxrs.model.wadl.Description(""Returns the selected UDDI entity as XML per section 6.5 of the UDDIv3 specification. Use businessKey, tmodelKey, bindingKey or serviceKey "")
+    public Object getEntityAsXML(@PathParam(""entitykey"") String entity,@PathParam(""key"") String key) throws WebApplicationException {
+        if (entity.equalsIgnoreCase(""businessKey""))
+                return getBusinessDetailXML(key);
+        if (entity.equalsIgnoreCase(""tmodelKey""))
+                return getTModelDetailXML(key);
+        if (entity.equalsIgnoreCase(""bindingKey""))
+                return getBindingDetailXML(key);
+        if (entity.equalsIgnoreCase(""serviceKey""))
+                return getServiceDetailXML(key);
+        throw new WebApplicationException(400);
+    }
+    
+    private UriContainer getEndpointsByService(String id) throws WebApplicationException {
+            UriContainer c = new UriContainer();
+        List<String> ret = new ArrayList<String>();
         GetServiceDetail fs = new GetServiceDetail();
-        //TODO fs.setAuthInfo(rootAuthToken.getAuthInfo());
-
+    
         fs.getServiceKey().add(id);
         try {
             ServiceDetail serviceDetail = inquiry.getServiceDetail(fs);
             if (serviceDetail == null || serviceDetail.getBusinessService().isEmpty()) {
                 throw new WebApplicationException(400);
             } else {
-                List<URI> endpoints = GetEndpoints(serviceDetail, null);
+                List<String> endpoints = GetEndpoints(serviceDetail, null);
                 ret.addAll(endpoints);
             }
         } catch (DispositionReportFaultMessage ex) {
             HandleException(ex);
         }
-        return ret;
+        c.setUriList(ret);
+        return c;
     }
+    
+    
 
-    private List<URI> GetEndpoints(ServiceDetail serviceDetail, String authInfo) throws DispositionReportFaultMessage {
-        List<URI> items = new ArrayList<URI>();
+    private List<String> GetEndpoints(ServiceDetail serviceDetail, String authInfo) throws DispositionReportFaultMessage {
+        List<String> items = new ArrayList<String>();
         if (serviceDetail == null) {
             return items;
         }
@@ -326,8 +362,8 @@
         return items;
     }
 
-    private List<URI> GetBindingInfo(String value, String cred) throws DispositionReportFaultMessage {
-        List<URI> items = new ArrayList<URI>();
+    private List<String> GetBindingInfo(String value, String cred) throws DispositionReportFaultMessage {
+        List<String> items = new ArrayList<String>();
         if (value == null) {
             return items;
         }
@@ -341,8 +377,8 @@
         return items;
     }
 
-    private List<URI> FetchWSDL(String value) {
-        List<URI> items = new ArrayList<URI>();
+    private List<String> FetchWSDL(String value) {
+        List<String> items = new ArrayList<String>();
 
         if (value.startsWith(""http://"") || value.startsWith(""https://"")) {
             //here, we need an HTTP Get for WSDLs
@@ -374,8 +410,8 @@
         return items;
     }
 
-    private List<URI> ParseBinding(BindingTemplate get, String authInfo) throws DispositionReportFaultMessage {
-        List<URI> items = new ArrayList<URI>();
+    private List<String> ParseBinding(BindingTemplate get, String authInfo) throws DispositionReportFaultMessage {
+        List<String> items = new ArrayList<String>();
         if (get == null || get.getAccessPoint() == null) {
             return items;
         }
@@ -387,12 +423,10 @@
         if (get.getAccessPoint() != null) {
             String usetype = get.getAccessPoint().getUseType();
             if (usetype == null) {
-                try {
+                
                     //this is unexpected, usetype is a required field
-                    items.add(new URI(get.getAccessPoint().getValue()));
-                } catch (URISyntaxException ex) {
-                    log.warn(ex);
-                }
+                    items.add((get.getAccessPoint().getValue()));
+                
             } else if (usetype.equalsIgnoreCase(AccessPointType.BINDING_TEMPLATE.toString())) {
                 //referencing another binding template
                 items.addAll(GetBindingInfo(get.getAccessPoint().getValue(), authInfo));
@@ -405,18 +439,14 @@
                 //fetch wsdl and parse
                 items.addAll(FetchWSDL(get.getAccessPoint().getValue()));
             } else if (usetype.equalsIgnoreCase(AccessPointType.END_POINT.toString())) {
-                try {
-                    items.add(new URI(get.getAccessPoint().getValue()));
-                } catch (URISyntaxException ex) {
-                    log.warn(ex);
-                }
+                
+                    items.add((get.getAccessPoint().getValue()));
+                
             } else {
-                try {
+                
                     //treat it has an extension or whatever
-                    items.add(new URI(get.getAccessPoint().getValue()));
-                } catch (URISyntaxException ex) {
-                    log.warn(ex);
-                }
+                    items.add((get.getAccessPoint().getValue()));
+                
             }
 
         }
"
juddi,8eb4ad71ade98af2e80de46ab1b0722b59efc67d,"JUDDI-740 fixed
JUDDI-742 added test cases for most operations.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1549095 13f79535-47bb-0310-9956-ffa450edef68
",2013-12-08 18:25:11,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfo.java b/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfo.java
index 9d21b56..ab6492e 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfo.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfo.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 import javax.xml.datatype.XMLGregorianCalendar;
@@ -60,6 +61,7 @@
     ""nodeID"",
     ""authorizedName""
 })
+@XmlRootElement
 public class OperationalInfo implements Serializable{
 	@XmlTransient
 	private static final long serialVersionUID = -3112659463581534112L;
"
juddi,6187369e39bf4fc11704a49451906a7c634e9124,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1546766 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:43:51,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 67e2c20..125d90b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -181,34 +181,4 @@
             }
             return null;
         }
-        
-        /**
-         * Returns the current node id for multi-node UDDI registries via replication
-         * @return 
-         */
-    public String getThisNodeID() {
-        try {
-            AppConfig.getInstance();
-           return AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID, GetHostname());
-        } catch (Exception ex) {
-            logger.error(""Unable to determine the current node id, check juddiv3.xml config file! Defaulting to "" + UNKNOWN,ex);
-        }
-        return UNKNOWN;
-    }
-    
-    public static final String UNKNOWN=""UNKNOWN"";
-    
-    /**
-     * Gets the current hostname
-     * @return 
-     */
-    public static String GetHostname(){
-            try {
-                return InetAddress.getLocalHost().getHostName();
-            } catch (Exception ex) {
-                logger.info(""Unable to determine hostname, defaulting to "" + UNKNOWN);
-                logger.debug(""Unable to determine hostname, defaulting to ""+UNKNOWN,ex);
-            }
-            return UNKNOWN;
-    }
 }
"
juddi,6187369e39bf4fc11704a49451906a7c634e9124,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1546766 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:43:51,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 8cb5311..a866bc8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -536,7 +536,7 @@
 				org.apache.juddi.model.BusinessService modelBusinessService = new org.apache.juddi.model.BusinessService();
 				modelBusinessService.setEntityKey(apiBindingTemplate.getServiceKey());
 				
-				MappingApiToModel.mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService,this.getThisNodeID());
+				MappingApiToModel.mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService);
 	
 				setOperationalInfo(em, modelBindingTemplate, publisher, false);
 	
@@ -590,7 +590,7 @@
 				
 				org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
 				
-				MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity,this.getThisNodeID());
+				MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity);
 
 				setOperationalInfo(em, modelBusinessEntity, publisher);
 	
@@ -645,7 +645,7 @@
 				org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
 				modelBusinessEntity.setEntityKey(apiBusinessService.getBusinessKey());
 				
-				MappingApiToModel.mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity, this.getThisNodeID());
+				MappingApiToModel.mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity);
 	
 				setOperationalInfo(em, modelBusinessService, publisher, false);
 
@@ -697,7 +697,7 @@
 				
 				org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
 				
-				MappingApiToModel.mapTModel(apiTModel, modelTModel,this.getThisNodeID());
+				MappingApiToModel.mapTModel(apiTModel, modelTModel);
 	
 				setOperationalInfo(em, modelTModel, publisher);
 	
@@ -921,8 +921,5 @@
 		
 	}
 
-    private void setNodeID(UddiEntity e) {
-        e.setNodeId(this.getThisNodeID());
-    }
 	
 }
"
juddi,6187369e39bf4fc11704a49451906a7c634e9124,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1546766 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:43:51,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 32d0087..05bd6bb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -269,10 +269,10 @@
 		if (isRoot) validateRootBusinessEntity(rootBusinessEntity, rootPublisher, rootPartition, config);
 		
 		org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
-		MappingApiToModel.mapBusinessEntity(rootBusinessEntity, modelBusinessEntity, nodeId);
+		MappingApiToModel.mapBusinessEntity(rootBusinessEntity, modelBusinessEntity);
 		
 		modelBusinessEntity.setAuthorizedName(rootPublisher.getAuthorizedName());
-		
+		modelBusinessEntity.setNodeId(nodeId);
 		Date now = new Date();
 		modelBusinessEntity.setCreated(now);
 		modelBusinessEntity.setModified(now);
@@ -284,22 +284,22 @@
 		
 		for (org.apache.juddi.model.BusinessService service : modelBusinessEntity.getBusinessServices()) {
 			service.setAuthorizedName(rootPublisher.getAuthorizedName());
-			
+			service.setNodeId(nodeId);
 			service.setCreated(now);
 			service.setModified(now);
 			service.setModifiedIncludingChildren(now);
                         //JUDDI-645
-                        service.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+                        //service.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
 			//service.setNodeId(modelBusinessEntity.getEntityKey());
 			
 			for (org.apache.juddi.model.BindingTemplate binding : service.getBindingTemplates()) {
 				binding.setAuthorizedName(rootPublisher.getAuthorizedName());
-				
+                                binding.setNodeId(nodeId);
 				binding.setCreated(now);
 				binding.setModified(now);
 				binding.setModifiedIncludingChildren(now);
 				//binding.setNodeId(modelBusinessEntity.getEntityKey());
-                                binding.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+                                //binding.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
                                 //JUDDI-645
                                 
 			}
@@ -469,7 +469,7 @@
 					org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
 					apiTModel.setTModelKey(apiTModel.getTModelKey().toLowerCase());
 					
-					MappingApiToModel.mapTModel(apiTModel, modelTModel,nodeId);
+					MappingApiToModel.mapTModel(apiTModel, modelTModel);
 
 					modelTModel.setAuthorizedName(publisher.getAuthorizedName());
 					
@@ -498,7 +498,7 @@
 	private static void installPublisherKeyGen(EntityManager em, TModel apiTModel, UddiEntityPublisher publisher, String nodeId) throws DispositionReportFaultMessage {
 
 		org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
-		MappingApiToModel.mapTModel(apiTModel, modelTModel,nodeId);
+		MappingApiToModel.mapTModel(apiTModel, modelTModel);
 		
 		modelTModel.setAuthorizedName(publisher.getAuthorizedName());
 
"
juddi,6187369e39bf4fc11704a49451906a7c634e9124,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1546766 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:43:51,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index a7496f2..383abeb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -104,7 +104,7 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapBusinessEntity(org.uddi.api_v3.BusinessEntity apiBusinessEntity,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
 
                 modelBusinessEntity.setEntityKey(apiBusinessEntity.getBusinessKey());
@@ -122,9 +122,9 @@
                 mapBusinessServices(apiBusinessEntity.getBusinessServices(),
                         modelBusinessEntity.getBusinessServices(),
                         modelBusinessEntity.getServiceProjections(),
-                        modelBusinessEntity, node);
+                        modelBusinessEntity);
 
-                mapBusinessSignature(apiBusinessEntity.getSignature(), modelBusinessEntity, node);
+                mapBusinessSignature(apiBusinessEntity.getSignature(), modelBusinessEntity);
         }
 
         private static List<Signature> mapApiSignaturesToModelSignatures(List<org.w3._2000._09.xmldsig_.SignatureType> apiSignatures)
@@ -285,7 +285,7 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapBusinessSignature(List<org.w3._2000._09.xmldsig_.SignatureType> apiSignatures,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
                 List<Signature> modelSignatures = mapApiSignaturesToModelSignatures(apiSignatures);
                 for (Signature modelSignature : modelSignatures) {
@@ -543,15 +543,13 @@
         public static void mapBusinessServices(org.uddi.api_v3.BusinessServices apiBusinessServices,
                 List<org.apache.juddi.model.BusinessService> modelBusinessServiceList,
                 List<org.apache.juddi.model.ServiceProjection> modelServiceProjectionList,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
                 modelBusinessServiceList.clear();
-                modelBusinessEntity.setNodeId(node);
                 if (apiBusinessServices != null) {
                         List<org.uddi.api_v3.BusinessService> apiBusinessServiceList = apiBusinessServices.getBusinessService();
                         for (org.uddi.api_v3.BusinessService apiBusinessService : apiBusinessServiceList) {
                                 org.apache.juddi.model.BusinessService modelBusinessService = new org.apache.juddi.model.BusinessService();
-                                modelBusinessService.setNodeId(node);
 
                                 // If the parent businessEntity key and the service businessEntity key (if provided) do not match, it's a projection.
                                 if (apiBusinessService.getBusinessKey() != null && apiBusinessService.getBusinessKey().length() > 0
@@ -562,7 +560,7 @@
 
                                         modelServiceProjectionList.add(modelServiceProjection);
                                 } else {
-                                        mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity, node);
+                                        mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity);
                                         modelBusinessServiceList.add(modelBusinessService);
                                 }
                         }
@@ -579,11 +577,9 @@
          */
         public static void mapBusinessService(org.uddi.api_v3.BusinessService apiBusinessService,
                 org.apache.juddi.model.BusinessService modelBusinessService,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
 
-                modelBusinessService.setNodeId(node);
-                modelBusinessEntity.setNodeId(node);
                 modelBusinessService.setBusinessEntity(modelBusinessEntity);
                 modelBusinessService.setEntityKey(apiBusinessService.getServiceKey());
 
@@ -594,7 +590,7 @@
                         mapCategoryBag(apiBusinessService.getCategoryBag(), modelBusinessService.getCategoryBag());
                 }
 
-                mapBindingTemplates(apiBusinessService.getBindingTemplates(), modelBusinessService.getBindingTemplates(), modelBusinessService, node);
+                mapBindingTemplates(apiBusinessService.getBindingTemplates(), modelBusinessService.getBindingTemplates(), modelBusinessService);
                 mapBusinessServiceSignature(apiBusinessService.getSignature(), modelBusinessService);
         }
 
@@ -644,7 +640,7 @@
          */
         public static void mapBindingTemplates(org.uddi.api_v3.BindingTemplates apiBindingTemplates,
                 List<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList,
-                org.apache.juddi.model.BusinessService modelBusinessService, String node)
+                org.apache.juddi.model.BusinessService modelBusinessService)
                 throws DispositionReportFaultMessage {
                 modelBindingTemplateList.clear();
 
@@ -653,7 +649,7 @@
                         for (org.uddi.api_v3.BindingTemplate apiBindingTemplate : apiBindingTemplateList) {
                                 org.apache.juddi.model.BindingTemplate modelBindingTemplate = new org.apache.juddi.model.BindingTemplate();
 
-                                mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService, node);
+                                mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService);
 
                                 modelBindingTemplateList.add(modelBindingTemplate);
                         }
@@ -670,7 +666,7 @@
          */
         public static void mapBindingTemplate(org.uddi.api_v3.BindingTemplate apiBindingTemplate,
                 org.apache.juddi.model.BindingTemplate modelBindingTemplate,
-                org.apache.juddi.model.BusinessService modelBusinessService, String node)
+                org.apache.juddi.model.BusinessService modelBusinessService)
                 throws DispositionReportFaultMessage {
 
                 modelBindingTemplate.setBusinessService(modelBusinessService);
@@ -886,14 +882,13 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapTModel(org.uddi.api_v3.TModel apiTModel,
-                org.apache.juddi.model.Tmodel modelTModel, String node)
+                org.apache.juddi.model.Tmodel modelTModel)
                 throws DispositionReportFaultMessage {
 
                 modelTModel.setEntityKey(apiTModel.getTModelKey());
                 modelTModel.setName(apiTModel.getName().getValue());
                 modelTModel.setLangCode(apiTModel.getName().getLang());
                 modelTModel.setDeleted(apiTModel.isDeleted());
-                modelTModel.setNodeId(node);
 
                 mapTModelDescriptions(apiTModel.getDescription(), modelTModel.getTmodelDescrs(), modelTModel);
                 mapTModelIdentifiers(apiTModel.getIdentifierBag(), modelTModel.getTmodelIdentifiers(), modelTModel);
"
juddi,6187369e39bf4fc11704a49451906a7c634e9124,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.3.x@1546766 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:43:51,alexoree,"diff --git a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
index 0db72a2..0209aeb 100644
--- a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
+++ b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
@@ -15,25 +15,203 @@
  */
 package org.apache.juddi.api.impl;
 
+import java.util.Date;
+import java.util.List;
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
 import javax.xml.ws.WebServiceContext;
-import org.apache.juddi.api.impl.ServiceCounterLifecycleResource;
-import org.apache.juddi.api.impl.UDDIPublicationImpl;
-import org.apache.juddi.api.impl.UDDIPublicationImpl;
-import org.apache.juddi.api.impl.UDDISecurityImpl;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.mapping.MappingApiToModel;
+import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.validation.ValidatePublish;
+import org.uddi.api_v3.BusinessDetail;
+import org.uddi.api_v3.SaveBusiness;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
+ * This class is for testing purposes only and enables you to override the
+ * requestor's ip address
  *
  * @author Alex O'Ree
  */
 public class UDDIPublicationImplExt extends UDDIPublicationImpl {
 
-    /**
-     * used for unit tests only
-     *
-     * @param ctx
-     */
-    protected UDDIPublicationImplExt(WebServiceContext ctx) {
-        super();
-        this.ctx = ctx;
-    }
+        /**
+         * used for unit tests only
+         *
+         * @param ctx
+         */
+        protected UDDIPublicationImplExt(WebServiceContext ctx) {
+                super();
+                this.ctx = ctx;
+        }
+        Log log = LogFactory.getLog(UDDIPublicationImplExt.class);
+
+        private String nodeId="""";
+        public BusinessDetail saveBusinessFudge(SaveBusiness body, String nodeID)
+                throws DispositionReportFaultMessage {
+
+                if (!body.getBusinessEntity().isEmpty()) {
+                        log.debug(""Inbound save business Fudger request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
+                }
+                EntityManager em = PersistenceManager.getEntityManager();
+                EntityTransaction tx = em.getTransaction();
+                try {
+                        tx.begin();
+
+                        UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
+
+                        ValidatePublish validator = new ValidatePublish(publisher);
+                        validator.validateSaveBusiness(em, body, null);
+
+                        BusinessDetail result = new BusinessDetail();
+
+                        List<org.uddi.api_v3.BusinessEntity> apiBusinessEntityList = body.getBusinessEntity();
+                        for (org.uddi.api_v3.BusinessEntity apiBusinessEntity : apiBusinessEntityList) {
+
+                                org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
+
+                                
+                                MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity);
+                                nodeId = nodeID;
+
+                                setOperationalInfo(em, modelBusinessEntity, publisher);
+
+                                em.persist(modelBusinessEntity);
+
+                                result.getBusinessEntity().add(apiBusinessEntity);
+                        }
+
+                        //check how many business this publisher owns.
+                        validator.validateSaveBusinessMax(em);
+
+                        tx.commit();
+
+                        return result;
+                } catch (DispositionReportFaultMessage drfm) {
+
+                        throw drfm;
+                } finally {
+                        if (tx.isActive()) {
+                                tx.rollback();
+                        }
+                        em.close();
+                }
+        }
+        
+        private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BusinessEntity uddiEntity, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BusinessEntity existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		List<org.apache.juddi.model.BusinessService> serviceList = uddiEntity.getBusinessServices();
+		for (org.apache.juddi.model.BusinessService service : serviceList)
+			setOperationalInfo(em, service, publisher, true);
+		
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BusinessService uddiEntity, UddiEntityPublisher publisher, boolean isChild) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+		
+		if(!isChild) {
+			org.apache.juddi.model.BusinessEntity parent = em.find(org.apache.juddi.model.BusinessEntity.class, uddiEntity.getBusinessEntity().getEntityKey());
+			parent.setModifiedIncludingChildren(now);
+			em.persist(parent);
+		}
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BusinessService existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null) {
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		}
+		else
+			uddiEntity.setCreated(now);
+		
+		List<org.apache.juddi.model.BindingTemplate> bindingList = uddiEntity.getBindingTemplates();
+		for (org.apache.juddi.model.BindingTemplate binding : bindingList)
+			setOperationalInfo(em, binding, publisher, true);
+		
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BindingTemplate uddiEntity, UddiEntityPublisher publisher, boolean isChild) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+		if(!isChild) {
+			org.apache.juddi.model.BusinessService parent = em.find(org.apache.juddi.model.BusinessService.class, uddiEntity.getBusinessService().getEntityKey());
+			parent.setModifiedIncludingChildren(now);
+			em.persist(parent);
+			
+			// JUDDI-421:  now the businessEntity parent will have it's modifiedIncludingChildren set
+			org.apache.juddi.model.BusinessEntity businessParent = em.find(org.apache.juddi.model.BusinessEntity.class, parent.getBusinessEntity().getEntityKey());
+			businessParent.setModifiedIncludingChildren(now);
+			em.persist(businessParent);
+		}
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BindingTemplate existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+	
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.Tmodel uddiEntity, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+		
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.Tmodel existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
 }
"
juddi,eed6fe87e0c033e5fc3a3886db1d5d3c7d783aa8,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1546763 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:38:37,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 67e2c20..125d90b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -181,34 +181,4 @@
             }
             return null;
         }
-        
-        /**
-         * Returns the current node id for multi-node UDDI registries via replication
-         * @return 
-         */
-    public String getThisNodeID() {
-        try {
-            AppConfig.getInstance();
-           return AppConfig.getConfiguration().getString(Property.JUDDI_NODE_ID, GetHostname());
-        } catch (Exception ex) {
-            logger.error(""Unable to determine the current node id, check juddiv3.xml config file! Defaulting to "" + UNKNOWN,ex);
-        }
-        return UNKNOWN;
-    }
-    
-    public static final String UNKNOWN=""UNKNOWN"";
-    
-    /**
-     * Gets the current hostname
-     * @return 
-     */
-    public static String GetHostname(){
-            try {
-                return InetAddress.getLocalHost().getHostName();
-            } catch (Exception ex) {
-                logger.info(""Unable to determine hostname, defaulting to "" + UNKNOWN);
-                logger.debug(""Unable to determine hostname, defaulting to ""+UNKNOWN,ex);
-            }
-            return UNKNOWN;
-    }
 }
"
juddi,eed6fe87e0c033e5fc3a3886db1d5d3c7d783aa8,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1546763 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:38:37,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 8cb5311..a866bc8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -536,7 +536,7 @@
 				org.apache.juddi.model.BusinessService modelBusinessService = new org.apache.juddi.model.BusinessService();
 				modelBusinessService.setEntityKey(apiBindingTemplate.getServiceKey());
 				
-				MappingApiToModel.mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService,this.getThisNodeID());
+				MappingApiToModel.mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService);
 	
 				setOperationalInfo(em, modelBindingTemplate, publisher, false);
 	
@@ -590,7 +590,7 @@
 				
 				org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
 				
-				MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity,this.getThisNodeID());
+				MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity);
 
 				setOperationalInfo(em, modelBusinessEntity, publisher);
 	
@@ -645,7 +645,7 @@
 				org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
 				modelBusinessEntity.setEntityKey(apiBusinessService.getBusinessKey());
 				
-				MappingApiToModel.mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity, this.getThisNodeID());
+				MappingApiToModel.mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity);
 	
 				setOperationalInfo(em, modelBusinessService, publisher, false);
 
@@ -697,7 +697,7 @@
 				
 				org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
 				
-				MappingApiToModel.mapTModel(apiTModel, modelTModel,this.getThisNodeID());
+				MappingApiToModel.mapTModel(apiTModel, modelTModel);
 	
 				setOperationalInfo(em, modelTModel, publisher);
 	
@@ -921,8 +921,5 @@
 		
 	}
 
-    private void setNodeID(UddiEntity e) {
-        e.setNodeId(this.getThisNodeID());
-    }
 	
 }
"
juddi,eed6fe87e0c033e5fc3a3886db1d5d3c7d783aa8,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1546763 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:38:37,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 32d0087..05bd6bb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -269,10 +269,10 @@
 		if (isRoot) validateRootBusinessEntity(rootBusinessEntity, rootPublisher, rootPartition, config);
 		
 		org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
-		MappingApiToModel.mapBusinessEntity(rootBusinessEntity, modelBusinessEntity, nodeId);
+		MappingApiToModel.mapBusinessEntity(rootBusinessEntity, modelBusinessEntity);
 		
 		modelBusinessEntity.setAuthorizedName(rootPublisher.getAuthorizedName());
-		
+		modelBusinessEntity.setNodeId(nodeId);
 		Date now = new Date();
 		modelBusinessEntity.setCreated(now);
 		modelBusinessEntity.setModified(now);
@@ -284,22 +284,22 @@
 		
 		for (org.apache.juddi.model.BusinessService service : modelBusinessEntity.getBusinessServices()) {
 			service.setAuthorizedName(rootPublisher.getAuthorizedName());
-			
+			service.setNodeId(nodeId);
 			service.setCreated(now);
 			service.setModified(now);
 			service.setModifiedIncludingChildren(now);
                         //JUDDI-645
-                        service.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+                        //service.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
 			//service.setNodeId(modelBusinessEntity.getEntityKey());
 			
 			for (org.apache.juddi.model.BindingTemplate binding : service.getBindingTemplates()) {
 				binding.setAuthorizedName(rootPublisher.getAuthorizedName());
-				
+                                binding.setNodeId(nodeId);
 				binding.setCreated(now);
 				binding.setModified(now);
 				binding.setModifiedIncludingChildren(now);
 				//binding.setNodeId(modelBusinessEntity.getEntityKey());
-                                binding.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+                                //binding.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
                                 //JUDDI-645
                                 
 			}
@@ -469,7 +469,7 @@
 					org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
 					apiTModel.setTModelKey(apiTModel.getTModelKey().toLowerCase());
 					
-					MappingApiToModel.mapTModel(apiTModel, modelTModel,nodeId);
+					MappingApiToModel.mapTModel(apiTModel, modelTModel);
 
 					modelTModel.setAuthorizedName(publisher.getAuthorizedName());
 					
@@ -498,7 +498,7 @@
 	private static void installPublisherKeyGen(EntityManager em, TModel apiTModel, UddiEntityPublisher publisher, String nodeId) throws DispositionReportFaultMessage {
 
 		org.apache.juddi.model.Tmodel modelTModel = new org.apache.juddi.model.Tmodel();
-		MappingApiToModel.mapTModel(apiTModel, modelTModel,nodeId);
+		MappingApiToModel.mapTModel(apiTModel, modelTModel);
 		
 		modelTModel.setAuthorizedName(publisher.getAuthorizedName());
 
"
juddi,eed6fe87e0c033e5fc3a3886db1d5d3c7d783aa8,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1546763 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:38:37,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index a7496f2..383abeb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -104,7 +104,7 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapBusinessEntity(org.uddi.api_v3.BusinessEntity apiBusinessEntity,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
 
                 modelBusinessEntity.setEntityKey(apiBusinessEntity.getBusinessKey());
@@ -122,9 +122,9 @@
                 mapBusinessServices(apiBusinessEntity.getBusinessServices(),
                         modelBusinessEntity.getBusinessServices(),
                         modelBusinessEntity.getServiceProjections(),
-                        modelBusinessEntity, node);
+                        modelBusinessEntity);
 
-                mapBusinessSignature(apiBusinessEntity.getSignature(), modelBusinessEntity, node);
+                mapBusinessSignature(apiBusinessEntity.getSignature(), modelBusinessEntity);
         }
 
         private static List<Signature> mapApiSignaturesToModelSignatures(List<org.w3._2000._09.xmldsig_.SignatureType> apiSignatures)
@@ -285,7 +285,7 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapBusinessSignature(List<org.w3._2000._09.xmldsig_.SignatureType> apiSignatures,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
                 List<Signature> modelSignatures = mapApiSignaturesToModelSignatures(apiSignatures);
                 for (Signature modelSignature : modelSignatures) {
@@ -543,15 +543,13 @@
         public static void mapBusinessServices(org.uddi.api_v3.BusinessServices apiBusinessServices,
                 List<org.apache.juddi.model.BusinessService> modelBusinessServiceList,
                 List<org.apache.juddi.model.ServiceProjection> modelServiceProjectionList,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
                 modelBusinessServiceList.clear();
-                modelBusinessEntity.setNodeId(node);
                 if (apiBusinessServices != null) {
                         List<org.uddi.api_v3.BusinessService> apiBusinessServiceList = apiBusinessServices.getBusinessService();
                         for (org.uddi.api_v3.BusinessService apiBusinessService : apiBusinessServiceList) {
                                 org.apache.juddi.model.BusinessService modelBusinessService = new org.apache.juddi.model.BusinessService();
-                                modelBusinessService.setNodeId(node);
 
                                 // If the parent businessEntity key and the service businessEntity key (if provided) do not match, it's a projection.
                                 if (apiBusinessService.getBusinessKey() != null && apiBusinessService.getBusinessKey().length() > 0
@@ -562,7 +560,7 @@
 
                                         modelServiceProjectionList.add(modelServiceProjection);
                                 } else {
-                                        mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity, node);
+                                        mapBusinessService(apiBusinessService, modelBusinessService, modelBusinessEntity);
                                         modelBusinessServiceList.add(modelBusinessService);
                                 }
                         }
@@ -579,11 +577,9 @@
          */
         public static void mapBusinessService(org.uddi.api_v3.BusinessService apiBusinessService,
                 org.apache.juddi.model.BusinessService modelBusinessService,
-                org.apache.juddi.model.BusinessEntity modelBusinessEntity, String node)
+                org.apache.juddi.model.BusinessEntity modelBusinessEntity)
                 throws DispositionReportFaultMessage {
 
-                modelBusinessService.setNodeId(node);
-                modelBusinessEntity.setNodeId(node);
                 modelBusinessService.setBusinessEntity(modelBusinessEntity);
                 modelBusinessService.setEntityKey(apiBusinessService.getServiceKey());
 
@@ -594,7 +590,7 @@
                         mapCategoryBag(apiBusinessService.getCategoryBag(), modelBusinessService.getCategoryBag());
                 }
 
-                mapBindingTemplates(apiBusinessService.getBindingTemplates(), modelBusinessService.getBindingTemplates(), modelBusinessService, node);
+                mapBindingTemplates(apiBusinessService.getBindingTemplates(), modelBusinessService.getBindingTemplates(), modelBusinessService);
                 mapBusinessServiceSignature(apiBusinessService.getSignature(), modelBusinessService);
         }
 
@@ -644,7 +640,7 @@
          */
         public static void mapBindingTemplates(org.uddi.api_v3.BindingTemplates apiBindingTemplates,
                 List<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList,
-                org.apache.juddi.model.BusinessService modelBusinessService, String node)
+                org.apache.juddi.model.BusinessService modelBusinessService)
                 throws DispositionReportFaultMessage {
                 modelBindingTemplateList.clear();
 
@@ -653,7 +649,7 @@
                         for (org.uddi.api_v3.BindingTemplate apiBindingTemplate : apiBindingTemplateList) {
                                 org.apache.juddi.model.BindingTemplate modelBindingTemplate = new org.apache.juddi.model.BindingTemplate();
 
-                                mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService, node);
+                                mapBindingTemplate(apiBindingTemplate, modelBindingTemplate, modelBusinessService);
 
                                 modelBindingTemplateList.add(modelBindingTemplate);
                         }
@@ -670,7 +666,7 @@
          */
         public static void mapBindingTemplate(org.uddi.api_v3.BindingTemplate apiBindingTemplate,
                 org.apache.juddi.model.BindingTemplate modelBindingTemplate,
-                org.apache.juddi.model.BusinessService modelBusinessService, String node)
+                org.apache.juddi.model.BusinessService modelBusinessService)
                 throws DispositionReportFaultMessage {
 
                 modelBindingTemplate.setBusinessService(modelBusinessService);
@@ -886,14 +882,13 @@
          * @throws DispositionReportFaultMessage
          */
         public static void mapTModel(org.uddi.api_v3.TModel apiTModel,
-                org.apache.juddi.model.Tmodel modelTModel, String node)
+                org.apache.juddi.model.Tmodel modelTModel)
                 throws DispositionReportFaultMessage {
 
                 modelTModel.setEntityKey(apiTModel.getTModelKey());
                 modelTModel.setName(apiTModel.getName().getValue());
                 modelTModel.setLangCode(apiTModel.getName().getLang());
                 modelTModel.setDeleted(apiTModel.isDeleted());
-                modelTModel.setNodeId(node);
 
                 mapTModelDescriptions(apiTModel.getDescription(), modelTModel.getTmodelDescrs(), modelTModel);
                 mapTModelIdentifiers(apiTModel.getIdentifierBag(), modelTModel.getTmodelIdentifiers(), modelTModel);
"
juddi,eed6fe87e0c033e5fc3a3886db1d5d3c7d783aa8,"JUDDI-727 reverting a number of changes from the previous commit, they were unnecessary. test case added

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1546763 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-30 18:38:37,alexoree,"diff --git a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
index 0db72a2..0209aeb 100644
--- a/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
+++ b/juddi-core/src/test/java/org/apache/juddi/api/impl/UDDIPublicationImplExt.java
@@ -15,25 +15,203 @@
  */
 package org.apache.juddi.api.impl;
 
+import java.util.Date;
+import java.util.List;
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
 import javax.xml.ws.WebServiceContext;
-import org.apache.juddi.api.impl.ServiceCounterLifecycleResource;
-import org.apache.juddi.api.impl.UDDIPublicationImpl;
-import org.apache.juddi.api.impl.UDDIPublicationImpl;
-import org.apache.juddi.api.impl.UDDISecurityImpl;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.mapping.MappingApiToModel;
+import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.validation.ValidatePublish;
+import org.uddi.api_v3.BusinessDetail;
+import org.uddi.api_v3.SaveBusiness;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
+ * This class is for testing purposes only and enables you to override the
+ * requestor's ip address
  *
  * @author Alex O'Ree
  */
 public class UDDIPublicationImplExt extends UDDIPublicationImpl {
 
-    /**
-     * used for unit tests only
-     *
-     * @param ctx
-     */
-    protected UDDIPublicationImplExt(WebServiceContext ctx) {
-        super();
-        this.ctx = ctx;
-    }
+        /**
+         * used for unit tests only
+         *
+         * @param ctx
+         */
+        protected UDDIPublicationImplExt(WebServiceContext ctx) {
+                super();
+                this.ctx = ctx;
+        }
+        Log log = LogFactory.getLog(UDDIPublicationImplExt.class);
+
+        private String nodeId="""";
+        public BusinessDetail saveBusinessFudge(SaveBusiness body, String nodeID)
+                throws DispositionReportFaultMessage {
+
+                if (!body.getBusinessEntity().isEmpty()) {
+                        log.debug(""Inbound save business Fudger request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
+                }
+                EntityManager em = PersistenceManager.getEntityManager();
+                EntityTransaction tx = em.getTransaction();
+                try {
+                        tx.begin();
+
+                        UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
+
+                        ValidatePublish validator = new ValidatePublish(publisher);
+                        validator.validateSaveBusiness(em, body, null);
+
+                        BusinessDetail result = new BusinessDetail();
+
+                        List<org.uddi.api_v3.BusinessEntity> apiBusinessEntityList = body.getBusinessEntity();
+                        for (org.uddi.api_v3.BusinessEntity apiBusinessEntity : apiBusinessEntityList) {
+
+                                org.apache.juddi.model.BusinessEntity modelBusinessEntity = new org.apache.juddi.model.BusinessEntity();
+
+                                
+                                MappingApiToModel.mapBusinessEntity(apiBusinessEntity, modelBusinessEntity);
+                                nodeId = nodeID;
+
+                                setOperationalInfo(em, modelBusinessEntity, publisher);
+
+                                em.persist(modelBusinessEntity);
+
+                                result.getBusinessEntity().add(apiBusinessEntity);
+                        }
+
+                        //check how many business this publisher owns.
+                        validator.validateSaveBusinessMax(em);
+
+                        tx.commit();
+
+                        return result;
+                } catch (DispositionReportFaultMessage drfm) {
+
+                        throw drfm;
+                } finally {
+                        if (tx.isActive()) {
+                                tx.rollback();
+                        }
+                        em.close();
+                }
+        }
+        
+        private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BusinessEntity uddiEntity, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BusinessEntity existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		List<org.apache.juddi.model.BusinessService> serviceList = uddiEntity.getBusinessServices();
+		for (org.apache.juddi.model.BusinessService service : serviceList)
+			setOperationalInfo(em, service, publisher, true);
+		
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BusinessService uddiEntity, UddiEntityPublisher publisher, boolean isChild) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+		
+		if(!isChild) {
+			org.apache.juddi.model.BusinessEntity parent = em.find(org.apache.juddi.model.BusinessEntity.class, uddiEntity.getBusinessEntity().getEntityKey());
+			parent.setModifiedIncludingChildren(now);
+			em.persist(parent);
+		}
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BusinessService existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null) {
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		}
+		else
+			uddiEntity.setCreated(now);
+		
+		List<org.apache.juddi.model.BindingTemplate> bindingList = uddiEntity.getBindingTemplates();
+		for (org.apache.juddi.model.BindingTemplate binding : bindingList)
+			setOperationalInfo(em, binding, publisher, true);
+		
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.BindingTemplate uddiEntity, UddiEntityPublisher publisher, boolean isChild) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+		if(!isChild) {
+			org.apache.juddi.model.BusinessService parent = em.find(org.apache.juddi.model.BusinessService.class, uddiEntity.getBusinessService().getEntityKey());
+			parent.setModifiedIncludingChildren(now);
+			em.persist(parent);
+			
+			// JUDDI-421:  now the businessEntity parent will have it's modifiedIncludingChildren set
+			org.apache.juddi.model.BusinessEntity businessParent = em.find(org.apache.juddi.model.BusinessEntity.class, parent.getBusinessEntity().getEntityKey());
+			businessParent.setModifiedIncludingChildren(now);
+			em.persist(businessParent);
+		}
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.BindingTemplate existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+	
+	private void setOperationalInfo(EntityManager em, org.apache.juddi.model.Tmodel uddiEntity, UddiEntityPublisher publisher) throws DispositionReportFaultMessage {
+
+		uddiEntity.setAuthorizedName(publisher.getAuthorizedName());
+		
+		Date now = new Date();
+		uddiEntity.setModified(now);
+		uddiEntity.setModifiedIncludingChildren(now);
+
+		uddiEntity.setNodeId(nodeId);
+		
+		org.apache.juddi.model.Tmodel existingUddiEntity = em.find(uddiEntity.getClass(), uddiEntity.getEntityKey());
+		if (existingUddiEntity != null)
+			uddiEntity.setCreated(existingUddiEntity.getCreated());
+		else
+			uddiEntity.setCreated(now);
+		
+		if (existingUddiEntity != null)
+			em.remove(existingUddiEntity);
+		
+	}
+
 }
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 6ece386..3caead2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -103,7 +103,7 @@
 
 			List<?> keysFound = InquiryHelper.findBinding(body, findQualifiers, em);
 
-			if (keysFound.size() == 0) {
+			if (keysFound!=null && keysFound.size() == 0) {
 			    if (body.getServiceKey() != null) {
 			        // Check that we were passed a valid serviceKey per
         			// 5.1.12.4 of the UDDI v3 spec
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/FindBusiness.java b/uddi-ws/src/main/java/org/uddi/api_v3/FindBusiness.java
index 88d0e1c..80260e5 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/FindBusiness.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/FindBusiness.java
@@ -30,6 +30,116 @@
 
 
 /**
+ * · authInfo: This optional argument is an element that contains an
+ * authentication token. Registries that wish to restrict who can perform an
+ * inquiry in them typically require authInfo for this call.<br><br>
+ *
+ * · categoryBag: This is a list of category references in the form of
+ * keyedReference elements and keyedReferenceGroup structures. The returned
+ * businessList contains businessInfo elements matching all of the categories
+ * passed (logical AND by default). Specifying the appropriate findQualifiers
+ * can override this behavior. Matching rules for each can be found in Section
+ * 5.1.7 Matching Rules for keyedReferences and keyedReferenceGroups.<br><br>
+ *
+ * · discoveryURLs: This is a list of discoveryURL structures to be matched
+ * against the discoveryURL data associated with registered businessEntity
+ * information. To search for URL without regard to useType attribute values,
+ * omit the useType attribute or pass it as an empty attribute. If useType
+ * values are included, the match occurs only on registered information that
+ * matches both the useType and URL value. The returned businessList contains
+ * businessInfo structures matching any of the URL's passed (logical OR).<br><br>
+ *
+ * · identifierBag: This is a list of business identifier references in the form
+ * of keyedReference elements. The returned businessList contains businessInfo
+ * structures matching any of the identifiers passed (logical OR by default).
+ * Specifying the appropriate findQualifiers can override this behavior.
+ * Matching rules can be found in Section 5.1.7 Matching Rules for
+ * keyedReferences and keyedReferenceGroups.<br><br>
+ *
+ * · findQualifiers: This collection of findQualifier elements can be used to
+ * alter the default behavior of search functionality. See the Section 5.1.4
+ * Find Qualifiers, for more information.<br><br>
+ *
+ * · find_relatedBusinesses: This argument is an embedded inquiry and limits the
+ * search results to those businesses that are related to a specified business
+ * in a specified way. The result is comprised of an intersection of the
+ * businesses located with this embedded inquiry and the businesses discovered
+ * using the remaining inquiry criteria. The standard syntax and arguments for
+ * find_relatedBusinesses apply here. Note that the authInfo argument to this
+ * embedded find_relatedBusinesses argument is always ignored. Large result set
+ * behavior involving the return of a listDescription does not apply within an
+ * embedded argument. If the intermediate result set produced is too large, then
+ * the overall query will return E_resultSetTooLarge with an indication that the
+ * embedded query returned too many results. If an E_unsupported error occurs as
+ * part of processing this embedded argument, it is propagated up to the
+ * containing (calling) API. See Section 5.1.11 find_relatedBusinesses, for
+ * further information.<br><br>
+ *
+ * · find_tModel: This argument provides an alternative or additional way of
+ * specifying tModelKeys that are used to find businesses which have service
+ * bindings with specific technical fingerprints as described above for the
+ * tModelBag element. When specified, the find_tModel argument is treated as an
+ * embedded inquiry that is performed prior to searching for businesses. The
+ * tModelKeys found are those whose tModels match the criteria contained within
+ * the find_tModel element. The tModelKeys found are added to the (possibly
+ * empty) collection specified by the tModelBag prior to finding qualified
+ * businesses. Note that the authInfo argument to this embedded find_tModel
+ * argument is always ignored. Large result set behavior involving the return of
+ * a listDescription does not apply within an embedded argument. If the
+ * intermediate result set produced is too large, then the overall query will
+ * return E_resultSetTooLarge with an indication that the embedded query
+ * returned too many results. If an E_unsupported error occurs as part of
+ * processing this embedded argument, it is propagated up to the containing
+ * (calling) API.<br><br>
+ *
+ * · listHead: This optional integer value is used to indicate which item SHOULD
+ * be returned as the head of the list. The client may request a subset of the
+ * matching data by indicating which item in the resultant set constitutes the
+ * beginning of the returned data. The use of the listDescription element is
+ * mutually exclusive to the use of the truncated attribute that simply
+ * indicates a truncated result list in the Inquiry APIs. See Section 5.1.5 Use
+ * of listDescription, for a detailed description of the listHead argument.<br><br>
+ *
+ * · maxRows: This optional integer value allows the requesting program to limit
+ * the number of results returned. This argument can be used in conjunction with
+ * the listHead argument.<br><br>
+ *
+ * · name: This optional collection of string values represents one or more
+ * names potentially qualified with xml:lang attributes. Since ""exactMatch"" is
+ * the default behavior, the value supplied for the name argument must be an
+ * exact match. If the ""approximateMatch"" findQualifier is used together with an
+ * appropriate wildcard character in the name, then any businessEntity matching
+ * this name with wildcards and the other criteria will be referenced in the
+ * results. For more on wildcard matching, see Section 5.1.6 About Wildcards.
+ * The businessList returned contains businessInfo structures for businesses
+ * whose name matches the value(s) passed (lexical-order match – i.e., leftmost
+ * in left-to-right languages). If multiple name values are passed, the match
+ * occurs on a logical OR basis. Each name MAY be marked with an xml:lang
+ * adornment. If a language markup is specified, the search results report a
+ * match only on those entries that match both the name value and language
+ * criteria. The match on language is a leftmost case-insensitive comparison of
+ * the characters supplied. This allows one to find all businesses whose name
+ * begins with an ""A"" and are expressed in any dialect of French, for example.
+ * Values which can be passed in the language criteria adornment MUST obey the
+ * rules governing the xml:lang data type as defined in Section 3.3.2.3 name.<br><br>
+ *
+ * · tModelBag: Every Web service instance exposed by a registered
+ * businessEntity is represented in UDDI by a bindingTemplate contained within
+ * the businessEntity. Each bindingTemplate contains a collection of tModel
+ * references called its ""technical fingerprint"" that specifies its type. The
+ * tModelBag argument is a collection of tModelKey elements specifying that the
+ * search results are to be limited to businesses that expose Web services with
+ * technical fingerprints that match.<br><br>
+ *
+ * If a find_tModel argument is specified (see above), it is treated as an
+ * embedded inquiry. The tModelKeys returned as a result of this embedded
+ * find_tModel argument are used as if they had been supplied in a tModelBag
+ * argument. Changing the order of the keys in the collection or specifying the
+ * same tModelKey more than once does not change the behavior of the find.  *
+ * By default, only bindingTemplates that contain all of the tModelKeys in the
+ * technical fingerprint match (logical AND). Specifying appropriate
+ * findQualifiers can override this behavior so that bindingTemplates containing
+ * any of the specified tModelKeys match (logical OR).<br><br>
  * <p>Java class for find_business complex type.
  * 
  * <p>The following schema fragment specifies the expected content contained within this class.
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/FindQualifiers.java b/uddi-ws/src/main/java/org/uddi/api_v3/FindQualifiers.java
index 4574de0..0ab0bf0 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/FindQualifiers.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/FindQualifiers.java
@@ -29,6 +29,7 @@
 
 
 /**
+ * @see org.apache.juddi.v3.client.UDDIConstants
  * <p>Java class for findQualifiers complex type.
  * 
  * <p>The following schema fragment specifies the expected content contained within this class.
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/FindService.java b/uddi-ws/src/main/java/org/uddi/api_v3/FindService.java
index b3fdda5..1be2668 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/FindService.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/FindService.java
@@ -30,6 +30,92 @@
 
 
 /**
+ * · authInfo: This optional argument is an element that contains an
+ * authentication token. Registries that wish to restrict who can perform an
+ * inquiry in them typically require authInfo for this call.<br><br>
+ *
+ * · businessKey: This optional uddi_key is used to specify a particular
+ * businessEntity instance to search. When supplied, this argument is used to
+ * specify an existing businessEntity within which services should be found.
+ * Projected services are included unless the ""suppressProjectedServices""
+ * findQualifier is used. If businessKey it is either omitted or specified as
+ * empty (i.e., businessKey=""""), this indicates that all businessEntities are to
+ * be searched for services that meet the other criteria supplied without regard
+ * to the business that provides them and service projections does not apply.<br><br>
+ *
+ * · categoryBag: This is a list of category references. The returned
+ * serviceList contains serviceInfo structures matching all of the categories
+ * passed (logical AND by default). Specifying the appropriate findQualifiers
+ * can override this behavior. Matching rules for the use of keyedReferences and
+ * keyedReferenceGroups are described in Section 5.1.7 Matching Rules for
+ * keyedReferences and keyedReferenceGroups.<br><br>
+ *
+ * · findQualifiers: This optional collection of findQualifier elements can be
+ * used to alter the default behavior of search functionality. See Section 5.1.4
+ * Find Qualifiers, for more information.<br><br>
+ *
+ * · find_tModel: This argument provides an alternative or additional way of
+ * specifying tModelKeys that are used to find services which have service
+ * bindings with specific technical fingerprints, as described above for the
+ * tModelBag element. When specified, the find_tModel argument is treated as an
+ * embedded inquiry that is performed prior to searching for services. The
+ * tModelKeys found are those whose tModels match the criteria contained within
+ * the find_tModel element. The tModelKeys found are added to the (possibly
+ * empty) collection specified by the tModelBag prior to finding qualified
+ * services. Note that the authInfo argument to this embedded find_tModel
+ * argument is always ignored. Large result set behavior involving the return of
+ * a listDescription does not apply within an embedded argument. If an
+ * E_unsupported error occurs as part of processing this embedded argument, it
+ * is propagated up to the containing (calling) API.<br><br>
+ *
+ * · listHead: This optional integer value is used to indicate which item SHOULD
+ * be returned as the head of the list. The client may request a subset of the
+ * matching data by indicating which item in the resultant set constitutes the
+ * beginning of the returned data. The use of the listDescription element is
+ * mutually exclusive to the use of the truncated attribute that simply
+ * indicates a truncated result list in the Inquiry APIs. See Section 5.1.5 Use
+ * of listDescription, for a detailed description of the listHead argument.<br><br>
+ *
+ * · maxRows: This optional integer value allows the requesting program to limit
+ * the number of results returned. This argument can be used in conjunction with
+ * the listHead argument.<br><br>
+ *
+ * · name: This optional collection of string values represents one or more
+ * names potentially qualified with xml:lang attributes. Since ""exactMatch"" is
+ * the default behavior, the value supplied for the name argument must be an
+ * exact match. If the ""approximateMatch"" findQualifier is used together with an
+ * appropriate wildcard character in the name, then any businessService data
+ * contained in the specified businessEntity (or across all businesses if the
+ * businessKey is omitted or specified as empty) with matching name value will
+ * be returned. Matching occurs using wildcard matching rules. See Section 5.1.6
+ * About Wildcards. If multiple name values are passed, the match occurs on a
+ * logical OR basis within any names supplied. Each name MAY be marked with an
+ * xml:lang adornment. If a language markup is specified, the search results
+ * report a match only on those entries that match both the name value and
+ * language criteria. The match on language is a leftmost case-insensitive
+ * comparison of the characters supplied. This allows one to find all services
+ * whose name begins with an ""A"" and are expressed in any dialect of French, for
+ * example. Values which can be passed in the language criteria adornment MUST
+ * obey the rules governing the xml:lang data type as defined in Section 3.3.2.3
+ * name.<br><br>
+ *
+ * · tModelBag: Every Web service instance is represented in UDDI by a
+ * bindingTemplate contained within some businessService. A bindingTemplate
+ * contains a collection of tModel references called its ""technical fingerprint""
+ * that specifies its type. The tModelBag argument is a collection of tModelKey
+ * values specifying that the search results are to be limited to
+ * businessServices containing bindingTemplates with technical fingerprints that
+ * match.<br><br>
+ *
+ * If a find_tModel argument is specified (see below), it is treated as an
+ * embedded inquiry. The tModelKeys returned as a result of this embedded
+ * find_tModel argument are used as if they had been supplied in a tModelBag
+ * argument. Changing the order of the keys in the collection or specifying the
+ * same tModelKey more than once does not change the behavior of the find.  *
+ * By default, only bindingTemplates that contain all of the tModelKeys in the
+ * technical fingerprint match (logical AND). Specifying appropriate
+ * findQualifiers can override this behavior so that bindingTemplates containing
+ * any of the specified tModelKeys match (logical OR).<br><br>
  * <p>Java class for find_service complex type.
  * 
  * <p>The following schema fragment specifies the expected content contained within this class.
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/FindTModel.java b/uddi-ws/src/main/java/org/uddi/api_v3/FindTModel.java
index e5a14e1..5c4fa27 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/FindTModel.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/FindTModel.java
@@ -28,6 +28,59 @@
 
 
 /**
+ * The find_tModel API is used to find UDDI tModel elements. The find_tModel API
+ * call returns a list of tModel entries that match a set of specific criteria.
+ * The response consists of summary information about registered tModel data
+ * returned in a tModelList structure.
+ *<Br><Br>
+ * · authInfo: This optional argument is an element that contains an
+ * authentication token. Registries that wish to restrict who can perform an
+ * inquiry in them typically require authInfo for this call.
+ *<Br><Br>
+ * · categoryBag: This is a list of category references. The returned tModelList
+ * contains tModelInfo elements whose associated tModels match all of the
+ * categories passed (logical AND by default). Specifying the appropriate
+ * findQualifiers can override this behavior. Matching rules for the use of
+ * keyedReferences and keyedReferenceGroups are described in Section 5.1.7
+ * Matching Rules for keyedReferences and keyedReferenceGroups.
+ *<Br><Br>
+ * · findQualifiers: This collection of findQualifier elements is used to alter
+ * the default behavior of search functionality. See Section 5.1.4 Find
+ * Qualifiers for more information.
+ *<Br><Br>
+ * · identifierBag This is a list of identifier references in the form of
+ * keyedReference elements. The returned tModelList contains tModelInfo elements
+ * whose associated tModels match any of the identifiers passed (logical OR by
+ * default). Specifying the appropriate findQualifiers can override this
+ * behavior. Matching rules are described in Section 5.1.7 Matching Rules for
+ * keyedReferences and keyedReferenceGroups.
+ *<Br><Br>
+ * · listHead: This optional integer value is used to indicate which item SHOULD
+ * be returned as the head of the list. The client may request a subset of the
+ * matching data by indicating which item in the resultant set constitutes the
+ * beginning of the returned data. The use of the listDescription element is
+ * mutually exclusive to the use of the truncated attribute that simply
+ * indicates a truncated result list in the Inquiry APIs. See Section 5.1.5 Use
+ * of listDescription, for a detailed description of the listHead argument.
+ *<Br><Br>
+ * · maxRows: This optional integer value allows the requesting program to limit
+ * the number of results returned. This argument can be used in conjunction with
+ * the listHead argument.
+ *<Br><Br>
+ * · name: This string value represents the name of the tModel elements to be
+ * found. Since tModel data only has a single name, only a single name may be
+ * passed. The argument must match exactly since ""exactMatch"" is the default
+ * behavior, but if the ""approximateMatch"" findQualifier is used together with
+ * the appropriate wildcard character, then matching is done according to
+ * wildcard rules. See Section 5.1.6 About Wildcards for additional information.
+ * The name MAY be marked with an xml:lang adornment. If a language markup is
+ * specified, the search results report a match only on those entries that match
+ * both the name value and language criteria. The match on language is a
+ * leftmost case-insensitive comparison of the characters supplied. This allows
+ * one to find all tModels whose name begins with an ""A"" and are expressed in
+ * any dialect of French, for example. Values which can be passed in the
+ * language criteria adornment MUST obey the rules governing the xml:lang data
+ * type as defined in Section 3.3.2.3 name.<Br><Br>
  * <p>Java class for find_tModel complex type.
  * 
  * <p>The following schema fragment specifies the expected content contained within this class.
"
juddi,9ae55384a04106cb4c11c78deecc43eec4fbb17a,"JUDDI-728 fixed
JUDDI-633 adding wsdm constants
JUDDI-637 adding uddi spec docs to the find_apis
JUDDI-711 adding default settings to prevent npe when settings are not defined.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1545511 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-26 02:31:47,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/KeyedReference.java b/uddi-ws/src/main/java/org/uddi/api_v3/KeyedReference.java
index 83d37b0..f2d379b 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/KeyedReference.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/KeyedReference.java
@@ -49,9 +49,19 @@
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = ""keyedReference"")
 public class KeyedReference implements Serializable{
-	@XmlTransient
-	private static final long serialVersionUID = 2695435294724172036L;
-	@XmlAttribute(required = true)
+    
+    public KeyedReference() {
+    }
+
+    public KeyedReference(String key, String name, String value) {
+        tModelKey = key;
+        keyName = name;
+        keyValue = value;
+    }
+    
+    @XmlTransient
+    private static final long serialVersionUID = 2695435294724172036L;
+    @XmlAttribute(required = true)
     protected String tModelKey;
     @XmlAttribute
     protected String keyName;
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index ba9c086..6537165 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -8,11 +8,17 @@
 public interface UDDIConstants {
 
     /**
-     * identifies a tmodel instance info containing some version information of a service
-     * a juddi extension based on 
+     * identifies a tmodel instance info containing some version information of
+     * a service a juddi extension based on
      * http://www.ibm.com/developerworks/webservices/library/ws-version/
      */
      public static final String VERSION_TMODEL = ""urn:uddi:uddi.org:version"";
+    /**
+     * When using this tModel as a tModelInstance, it can be used to describe a
+     * service endpoint that was automatically registered by jUDDI. This is a
+     * jUDDI specific addon and may not be present in other registries.
+     */
+    public static final String JUDDI_TMODEL_AUTOREG = ""uddi:juddi.apache.org:autoregistration"";
      
     public static final int MAX_xml_lang_length = 26;
     public static final int MAX_description_length = 255;
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 3acaef0..bdc3010 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -364,8 +364,8 @@
         p.setProperty(DigSigUtil.CHECK_REVOCATION_STATUS_OCSP, ((Boolean) (this.config.getBoolean(""client.signature.checkRevocationOCSP"", true))).toString());
         p.setProperty(DigSigUtil.CHECK_TRUST_CHAIN, ((Boolean) (this.config.getBoolean(""client.signature.checkTrust"", true))).toString());
 
-        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILE, this.config.getString(""client.signature.signingKeyStorePath""));
-        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILETYPE, this.config.getString(""client.signature.signingKeyStoreType""));
+        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILE, this.config.getString(""client.signature.signingKeyStorePath"",""""));
+        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILETYPE, this.config.getString(""client.signature.signingKeyStoreType"",""""));
     
         if (this.config.getBoolean(""client.signature.signingKeyPassword[@isPasswordEncrypted]"", false)) {
             String enc = this.config.getString(""client.signature.signingKeyPassword"");
@@ -384,16 +384,16 @@
             p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD, this.config.getString(""client.signature.signingKeyStoreFilePassword""));
         }
 
-        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, this.config.getString(""client.signature.signingKeyAlias""));
+        p.setProperty(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, this.config.getString(""client.signature.signingKeyAlias"",""""));
         p.setProperty(DigSigUtil.SIGNATURE_METHOD, this.config.getString(""client.signature.signatureMethod"", ""http://www.w3.org/2000/09/xmldsig#rsa-sha1""));
-        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SUBJECTDN, this.config.getString(""client.signature.keyInfoInclusionSubjectDN""));
-        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, this.config.getString(""client.signature.keyInfoInclusionBase64PublicKey""));
-        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SERIAL, this.config.getString(""client.signature.keyInfoInclusionSerial""));
+        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SUBJECTDN, this.config.getString(""client.signature.keyInfoInclusionSubjectDN"",""true""));
+        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, this.config.getString(""client.signature.keyInfoInclusionBase64PublicKey"",""true""));
+        p.setProperty(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SERIAL, this.config.getString(""client.signature.keyInfoInclusionSerial"",""true""));
         
         p.setProperty(DigSigUtil.SIGNATURE_OPTION_DIGEST_METHOD, this.config.getString(""client.signature.digestMethod"", ""http://www.w3.org/2000/09/xmldsig#sha1""));
         
-        p.setProperty(DigSigUtil.TRUSTSTORE_FILE, this.config.getString(""client.signature.trustStorePath""));
-        p.setProperty(DigSigUtil.TRUSTSTORE_FILETYPE, this.config.getString(""client.signature.trustStoreType""));
+        p.setProperty(DigSigUtil.TRUSTSTORE_FILE, this.config.getString(""client.signature.trustStorePath"",""""));
+        p.setProperty(DigSigUtil.TRUSTSTORE_FILETYPE, this.config.getString(""client.signature.trustStoreType"",""""));
       
 
         if (this.config.getBoolean(""client.signature.trustStorePassword[@isPasswordEncrypted]"", false)) {
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index b5b91b0..f210b49 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -44,6 +44,7 @@
 			manager = WebHelper.getUDDIClient(config.getServletContext());
 			if (manager.getClientConfig().isRegisterOnStartup()) {
 				manager.registerWSDLs();
+				manager.registerAnnotatedServices();
 			}
 		} catch (Exception e) {
 			logger.error(""UDDI-client could not be started for manager "" + manager.getName() + "". ""
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureBusiness.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureBusiness.java
index 21dca85..3ecfacc 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureBusiness.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureBusiness.java
@@ -81,12 +81,19 @@
             ds = new DigSigUtil();
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILE, ""keystore.jks"");
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILETYPE, ""JKS"");
-            ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD, ""password"");
-            ds.put(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, ""selfsigned"");
-            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""t"");
+            ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD, ""Test"");
+            ds.put(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, ""Test"");
+            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""true"");
+            //this flag will cause juddi to crash until JUDDI-716 is fixed
+            //TODO JUDDI-716
+            //ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SERIAL, ""true"");
+            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_SUBJECTDN, ""true"");
+            ds.put(DigSigUtil.TRUSTSTORE_FILE, ""truststore.jks"");
+            ds.put(DigSigUtil.TRUSTSTORE_FILETYPE, ""JKS"");
+            ds.put(DigSigUtil.TRUSTSTORE_FILE_PASSWORD, ""Test"");
 
             //option 2), load it from the juddi config file
-            ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
+            //ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
 
             //login
             String token = null;
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureService.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureService.java
index c400320..c1130a4 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureService.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureService.java
@@ -82,10 +82,10 @@
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILETYPE, ""JKS"");
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD, ""password"");
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, ""selfsigned"");
-            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""t"");
+            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""true"");
 
             //option 2), load it from the juddi config file
-            ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
+            //ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
 
             //login
             String token = null;
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureTmodel.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureTmodel.java
index 8e34cd9..607964a 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureTmodel.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/UddiDigitalSignatureTmodel.java
@@ -80,10 +80,10 @@
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILETYPE, ""JKS"");
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_FILE_PASSWORD, ""password"");
             ds.put(DigSigUtil.SIGNATURE_KEYSTORE_KEY_ALIAS, ""selfsigned"");
-            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""t"");
+            ds.put(DigSigUtil.SIGNATURE_OPTION_CERT_INCLUSION_BASE64, ""true"");
 
             //option 2), load it from the juddi config file
-            ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
+            //ds = new DigSigUtil(clerkManager.getClientConfig().getDigitalSignatureConfiguration());
 
             //login
             String token = null;
"
juddi,1a772ae0dfb6427f624042965cd8689ded2a9169,"JUDDI-716 added test cases
JUDDI-717 fixing some of the digital signature java apps
JUDDI-567 added additional integration tests
JUDDI-718 fixed
JUDDI-652 altered juddi gui code to reduce log output during normal ops

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1543402 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-19 12:30:09,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index 76c04d2..9bea040 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1967,7 +1967,7 @@
             sb.setAuthInfo(GetToken());
 
             sb.getTModel().add(be);
-            JAXB.marshal(be, System.out);
+            //JAXB.marshal(be, System.out);
             try {
                 publish.saveTModel(sb);
             } catch (Exception ex) {
"
juddi,b71c52ef21dd8dbee385ea1e7c3a9556d47fb098,"JUDDI-690 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1542512 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-16 13:48:09,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
index 0cadbd9..59b7117 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
@@ -16,6 +16,7 @@
  */
 package org.apache.juddi.v3.client.mapping;
 
+import com.ibm.wsdl.extensions.soap12.SOAP12BindingImpl;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.rmi.RemoteException;
@@ -37,6 +38,7 @@
 import javax.wsdl.extensions.soap.SOAPAddress;
 import javax.wsdl.extensions.soap.SOAPBinding;
 import javax.wsdl.extensions.soap12.SOAP12Address;
+import javax.wsdl.extensions.soap12.SOAP12Binding;
 import javax.xml.namespace.QName;
 
 import org.apache.commons.configuration.ConfigurationException;
@@ -447,12 +449,25 @@
 
             // One or two keyedReferences as required to capture the protocol
             for (Object object : binding.getExtensibilityElements()) {
-                if (SOAPBinding.class.isAssignableFrom(object.getClass())) {
+                SOAPBinding sb =null;
+                SOAP12Binding sb12 =null;
+                HTTPBinding hb = null;
+                
+                try{
+                    hb = (HTTPBinding) object;
+                }catch (Exception x){}
+                 try{
+                    sb = (SOAPBinding) object;
+                }catch (Exception x){}
+                   try{
+                    sb12 = (SOAP12Binding) object;
+                }catch (Exception x){}
+                if (sb!=null) {
                     // If the wsdl:binding contains a soap:binding extensibility element from the 
                     // 'http://schemas.xmlsoap.org/wsdl/soap/' namespace then the categoryBag MUST 
                     //include a keyedReference with a tModelKey of the Protocol Categorization 
                     // category system and a keyValue of the tModelKey of the SOAP Protocol tModel.
-                    SOAPBinding soapBinding = (SOAPBinding) object;
+                    SOAPBinding soapBinding = sb;
                     KeyedReference soapProtocol = newKeyedReference(
                             ""uddi:uddi.org:wsdl:categorization:protocol"", ""uddi-org:protocol:soap"", ""uddi:uddi.org:protocol:soap"");
                     categoryBag.getKeyedReference().add(soapProtocol);
@@ -469,11 +484,11 @@
                         // then the bindingTemplate MUST include an additional keyedReference with a tModelKey 
                         // of the Transport Categorization category system and a keyValue of the tModelKey of 
                         // an appropriate transport tModel.
-                        log.warn(""not implemented"");
+                        log.warn(""not implemented, binding transport is "" + soapBinding.getTransportURI());
                     }
 
 
-                } else if (object.getClass().isInstance(HTTPBinding.class)) {
+                } else if (hb!=null) {
 
                     // If the wsdl:binding contains an http:binding extensibility element from the 
                     // http://schemas.xmlsoap.org/wsdl/http/ namespace then the categoryBag MUST 
@@ -483,6 +498,41 @@
                             ""uddi:uddi.org:wsdl:categorization:protocol"", ""uddi-org:protocol:http"", ""uddi:uddi.org:protocol:http"");
                     categoryBag.getKeyedReference().add(soapProtocol);
                 }
+                else if (sb12!=null) {
+                    // If the wsdl:binding contains a soap:binding extensibility element from the 
+                    // 'http://schemas.xmlsoap.org/wsdl/soap/' namespace then the categoryBag MUST 
+                    //include a keyedReference with a tModelKey of the Protocol Categorization 
+                    // category system and a keyValue of the tModelKey of the SOAP Protocol tModel.
+                    
+                    KeyedReference soapProtocol = newKeyedReference(
+                            ""uddi:uddi.org:wsdl:categorization:protocol"", ""uddi-org:protocol:soap"", ""uddi:uddi.org:protocol:soap"");
+                    categoryBag.getKeyedReference().add(soapProtocol);
+                    // If the value of the transport attribute of the soap:binding element 
+                    // is 'http://schemas.xmlsoap.org/soap/http' then the categoryBag MUST 
+                    // include a keyedReference with a tModelKey of the Transport Categorization 
+                    // category system and a keyValue of the tModelKey of the HTTP Transport tModel.
+                    if (""http://schemas.xmlsoap.org/soap/http"".equals(sb12.getTransportURI())) {
+                        KeyedReference httpTransport = newKeyedReference(
+                                ""uddi:uddi.org:wsdl:categorization:transport"", ""uddi-org:http"", ""uddi:uddi.org:transport:http"");
+                        categoryBag.getKeyedReference().add(httpTransport);
+                    } else if (sb12.getTransportURI() != null) {
+                        // TODO If the value of the transport attribute is anything else, 
+                        // then the bindingTemplate MUST include an additional keyedReference with a tModelKey 
+                        // of the Transport Categorization category system and a keyValue of the tModelKey of 
+                        // an appropriate transport tModel.
+                        log.warn(""not implemented, binding transport is "" + sb12.getTransportURI());
+                    }
+
+
+                }
+                else
+                {
+                    log.warn(""Unrecongnized binding type: "" + object.getClass().getCanonicalName() +"". Generated""
+                            + ""binding tModel may be missing the required (according to WSDL2UDDI spec) ""
+                            + ""uddi:uddi.org:wsdl:categorization:protocol keyedReference."");
+                    
+                    
+                }
             }
 
 
"
juddi,b71c52ef21dd8dbee385ea1e7c3a9556d47fb098,"JUDDI-690 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1542512 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-16 13:48:09,alexoree,"diff --git a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/WsdlImport.java b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/WsdlImport.java
index c979ae0..c31c2a5 100644
--- a/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/WsdlImport.java
+++ b/juddi-examples/more-uddi-samples/src/main/java/org/apache/juddi/samples/WsdlImport.java
@@ -139,17 +139,15 @@
 
         TModel[] tmodels = portTypeTModels.toArray(new TModel[0]);
         for (int i = 0; i < tmodels.length; i++) {
-            System.out.println(tmodelPrinter.print(tmodels[i]));
             tms.getTModel().add(tmodels[i]);
         }
 
         tmodels = createWSDLBindingTModels.toArray(new TModel[0]);
         for (int i = 0; i < tmodels.length; i++) {
-            System.out.println(tmodelPrinter.print(tmodels[i]));
             tms.getTModel().add(tmodels[i]);
         }
 
-        //important, you'll need to save your new tModels, or else saving the business/service may fail
+        //important, you'll need to save your new tModels first, or else saving the business/service may fail
         System.out.println(new PrintUDDI<SaveTModel>().print(tms));
         //publish.saveTModel(stm);
 
@@ -161,10 +159,8 @@
         SaveService ss = new  SaveService();
         
         
-        //PrintUDDI<BusinessService> servicePrinter = new PrintUDDI<BusinessService>();
         for (int i = 0; i < businessServices.getBusinessService().size(); i++) {
             ss.getBusinessService().add(businessServices.getBusinessService().get(i));
-            //System.out.println(servicePrinter.print(businessServices.getBusinessService().get(i)));
         }
 
         
"
juddi,441cc3b28b10105af2491a5475f6ac782bea1162,"JUDDI-698 partial fix, formatting updates
JUDDI-707 adding examples of how to use SaveNode/SaveClerk, PrintJUDDI class


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540526 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 19:33:45,alexoree,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/PrintUDDI.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/PrintUDDI.java
index cc66c81..1e54c58 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/PrintUDDI.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/PrintUDDI.java
@@ -23,6 +23,7 @@
 import javax.xml.namespace.QName;
 
 /**
+ * This is for printing UDDI v3 objects from the spec
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  * @param <T>
  */
"
juddi,8ecb7b378116982a7cdcecc5de397904d8d23760,"JUDDI-705 fixed. validation added, model/Node.java updated to have explicit lengths for all fields

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540474 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 13:57:29,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Node.java b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
index adea272..e79e3fa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Node.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
@@ -31,12 +31,10 @@
 	@Transient
 	private static final long serialVersionUID = -893203927029468343L;
 	@Id
-	@Column(name=""name"", nullable = false)
+	@Column(name=""name"", nullable = false, length=255)
 	private String name;
 	@Column(name=""client_name"", nullable = false, length=255)
 	private String clientName;
-	@Column(name=""proxy_transport"", nullable = false, length=255)
-	private String proxyTransport;
 	@Column(name=""security_url"", nullable = false, length=255)
 	private String securityUrl;
 	@Column(name=""inquiry_url"", nullable = false, length=255)
@@ -47,13 +45,16 @@
 	private String custodyTransferUrl;
 	@Column(name=""subscription_url"", nullable = false, length=255)
 	private String subscriptionUrl;
-	@Column(name=""juddi_api_url"", length=255)
+        @Column(name=""proxy_transport"", nullable = false, length=255)
+	private String proxyTransport;
+        
+	@Column(name=""juddi_api_url"", nullable = true, length=255)
 	private String juddiApiUrl;
-	@Column(name=""factory_initial"", length=255)
+	@Column(name=""factory_initial"", nullable = true, length=255)
 	private String factoryInitial;
-	@Column(name=""factory_url_pkgs"", length=255)
+	@Column(name=""factory_url_pkgs"", nullable = true, length=255)
 	private String factoryURLPkgs;
-	@Column(name=""factory_naming_provider"", length=255)
+	@Column(name=""factory_naming_provider"", nullable = true, length=255)
 	private String factoryNamingProvider;
 
 	public Node() {}
"
juddi,8ecb7b378116982a7cdcecc5de397904d8d23760,"JUDDI-705 fixed. validation added, model/Node.java updated to have explicit lengths for all fields

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540474 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 13:57:29,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
index ed35231..274012b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
@@ -14,10 +14,11 @@
  * limitations under the License.
  *
  */
-
 package org.apache.juddi.validation;
 
 import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import javax.persistence.EntityManager;
 
@@ -28,54 +29,93 @@
 import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
-
 /**
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  */
 public class ValidateNode extends ValidateUDDIApi {
 
-	public ValidateNode(UddiEntityPublisher publisher) {
-		super(publisher);
-	}
+    public ValidateNode(UddiEntityPublisher publisher) {
+        super(publisher);
+    }
 
-	
-	
-	/*-------------------------------------------------------------------
-	 ClientSubscriptionInf functions are specific to jUDDI.
-	 --------------------------------------------------------------------*/
+    /*-------------------------------------------------------------------
+     validateSaveNode functions are specific to jUDDI.
+     --------------------------------------------------------------------*/
+    public void validateSaveNode(EntityManager em, org.apache.juddi.api_v3.SaveNode body) throws DispositionReportFaultMessage {
+
+        if (body == null) {
+            throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+        }
+
+        // No null or empty list
+        List<Node> nodes = body.getNode();
+        if (nodes == null) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.saveNodes.NoInput""));
+        }
+
+        for (Node clerk : body.getNode()) {
+            validateNode(clerk);
+        }
+
+    }
+
+    public void validateNode(org.apache.juddi.api_v3.Node node) throws DispositionReportFaultMessage {
+
+        // No null input
+        if (node == null) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NullInput""));
+        }
+
+        String name = node.getName();
+        if (name == null || name.length() == 0 || node.getClientName().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoName""));
+        }
+        if (node.getDescription() == null || node.getDescription().length() == 0 || node.getDescription().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoDescription""));
+        }
+        if (node.getClientName() == null || node.getClientName().length() == 0 || node.getClientName().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoClientName""));
+        }
+        if (node.getCustodyTransferUrl() == null || node.getCustodyTransferUrl().length() == 0 || node.getClientName().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoNCT""));
+        }
+        if (node.getInquiryUrl() == null || node.getInquiryUrl().length() == 0 || node.getInquiryUrl().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoIN""));
+        }
+        if (node.getPublishUrl() == null || node.getPublishUrl().length() == 0 || node.getPublishUrl().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoPUB""));
+        }
+        if (node.getSubscriptionListenerUrl() == null || node.getSubscriptionListenerUrl().length() == 0 || node.getSubscriptionListenerUrl().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoSUBL""));
+        }
+        if (node.getSubscriptionUrl() == null || node.getSubscriptionUrl().length() == 0 || node.getSubscriptionUrl().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoSUB""));
+        }
+        if (node.getProxyTransport() == null || node.getProxyTransport().length() == 0 || node.getProxyTransport().length() > 255) {
+            throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoProxy""));
+        } else {
+            try {
+                //validate that the class exists and that it is of type
+                //org.apache.juddi.v3.client.transport.Transport
+                Class<?> forName = Class.forName(node.getProxyTransport());
+                Object j = forName.newInstance();
+                if (!(j instanceof org.apache.juddi.v3.client.transport.Transport)) {
+                    throw new ValueNotAllowedException(new ErrorMessage(""errors.node.illegalProxyTransport""));
+                }
+            } catch (Exception ex) {
+                throw new ValueNotAllowedException(new ErrorMessage(""errors.node.illegalProxyTransport""));
+            }
+        }
+        if (node.getFactoryInitial() == null || node.getFactoryInitial().length() == 0 || node.getFactoryInitial().length() > 255) {
+            //    throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoName""));
+        }
+        if (node.getFactoryNamingProvider() == null || node.getFactoryNamingProvider().length() == 0 || node.getFactoryNamingProvider().length() > 255) {
+            //    throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoName""));
+        }
+        if (node.getFactoryURLPkgs() == null || node.getFactoryURLPkgs().length() == 0 || node.getFactoryURLPkgs().length() > 255) {
+            //    throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoName""));
+        }
 
 
-	public void validateSaveNode(EntityManager em, org.apache.juddi.api_v3.SaveNode body) throws DispositionReportFaultMessage {
-
-		if (body == null)
-			throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
-		
-		// No null or empty list
-		List<Node> nodes = body.getNode();
-		if (nodes == null)
-			throw new ValueNotAllowedException(new ErrorMessage(""errors.saveNodes.NoInput""));
-		
-		for (Node clerk : body.getNode()) {
-			validateNode(clerk);
-		}
-
-	}
-	
-	public void validateNode(org.apache.juddi.api_v3.Node node) throws DispositionReportFaultMessage {
-
-		// No null input
-		if (node == null)
-			throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NullInput""));
-		
-		String name = node.getName();
-		if (name == null || name.length() == 0)
-			throw new ValueNotAllowedException(new ErrorMessage(""errors.node.NoName""));
-	
-		//TODO could check we have all the urls
-	
-	}
-	
-	
-	
-	
+    }
 }
"
juddi,1f53f9f52acf3ffcb318a1aded40ca8c5e53fdf1,"JUDDI-704 fixed
JUDDI-703 done
JUDDI-567 adding wsdl reg/unreg, serialization fixes for juddi api services. new sample/demo for juddi specific services
JUDDI-637 added source documentation

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540432 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 01:56:56,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index c3d4be8..186377e 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -240,12 +240,11 @@
         log.info(""Registering subscription with key "" + subscription.getSubscriptionKey());
         Holder<List<Subscription>> holder = new Holder<List<Subscription>>();
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
-
             List<Subscription> subscriptions = new ArrayList<Subscription>();
             subscriptions.add(subscription);
             holder.value = subscriptions;
-            getUDDINode().getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).saveSubscription(authToken, holder);
+            getUDDINode().getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).
+                    saveSubscription(getAuthToken(node.getSecurityUrl()), holder);
             if (log.isDebugEnabled()) {
                 log.debug(""Registering subscription "" + subscription.getSubscriptionKey() + "" completed."");
             }
@@ -277,9 +276,8 @@
         TModelDetail tModelDetail = null;
         log.info(""Registering tModel with key "" + tModel.getTModelKey());
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             SaveTModel saveTModel = new SaveTModel();
-            saveTModel.setAuthInfo(authToken);
+            saveTModel.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             saveTModel.getTModel().add(tModel);
             tModelDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveTModel(saveTModel);
             if (log.isDebugEnabled()) {
@@ -312,9 +310,8 @@
         BindingTemplate bindingTemplate = null;
         log.info(""Registering bindingTemplate with key "" + binding.getBindingKey());
         try {
-            String authToken2 = getAuthToken(node.getSecurityUrl());
             SaveBinding saveBinding = new SaveBinding();
-            saveBinding.setAuthInfo(authToken2);
+            saveBinding.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             saveBinding.getBindingTemplate().add(binding);
             BindingDetail bindingDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBinding(saveBinding);
             bindingTemplate = bindingDetail.getBindingTemplate().get(0);
@@ -349,9 +346,8 @@
         log.info(""Registering service "" + service.getName().get(0).getValue()
                 + "" with key "" + service.getServiceKey());
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             SaveService saveService = new SaveService();
-            saveService.setAuthInfo(authToken);
+            saveService.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             saveService.getBusinessService().add(service);
             ServiceDetail serviceDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveService(saveService);
             businessService = serviceDetail.getBusinessService().get(0);
@@ -385,9 +381,8 @@
         log.info(""Registering business "" + business.getName().get(0).getValue()
                 + "" with key "" + business.getBusinessKey());
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             SaveBusiness saveBusiness = new SaveBusiness();
-            saveBusiness.setAuthInfo(authToken);
+            saveBusiness.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             saveBusiness.getBusinessEntity().add(business);
             BusinessDetail businessDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBusiness(saveBusiness);
             businessEntity = businessDetail.getBusinessEntity().get(0);
@@ -416,9 +411,8 @@
     public void unRegisterBusiness(String businessKey, Node node) {
         log.info(""UnRegistering the business "" + businessKey);
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             DeleteBusiness deleteBusiness = new DeleteBusiness();
-            deleteBusiness.setAuthInfo(authToken);
+            deleteBusiness.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             deleteBusiness.getBusinessKey().add(businessKey);
             getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBusiness(deleteBusiness);
         } catch (Exception e) {
@@ -439,9 +433,8 @@
     public void unRegisterService(String serviceKey, Node node) {
         log.info(""UnRegistering the service "" + serviceKey);
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             DeleteService deleteService = new DeleteService();
-            deleteService.setAuthInfo(authToken);
+            deleteService.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             deleteService.getServiceKey().add(serviceKey);
             getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteService(deleteService);
         } catch (Exception e) {
@@ -463,9 +456,8 @@
     public void unRegisterBinding(String bindingKey, Node node) {
         log.info(""UnRegistering binding key "" + bindingKey);
         try {
-            String authToken = getAuthToken(node.getSecurityUrl());
             DeleteBinding deleteBinding = new DeleteBinding();
-            deleteBinding.setAuthInfo(authToken);
+            deleteBinding.setAuthInfo(getAuthToken(node.getSecurityUrl()));
             deleteBinding.getBindingKey().add(bindingKey);
             getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).deleteBinding(deleteBinding);
         } catch (Exception e) {
@@ -762,6 +754,14 @@
         return authToken;
     }
 
+    /**
+     * This calls a jUDDI implementation specific API call and is used to help
+     * configure internode communication between jUDDI servers. This is NOT
+     * part of the UDDI specification.<br>
+     * Note: this API call should only be used with secure ports (SSL/TLS)
+     * @param node
+     * @return 
+     */
     public NodeDetail saveNode(Node node) {
         NodeDetail nodeDetail = null;
         try {
@@ -780,6 +780,14 @@
         return nodeDetail;
     }
 
+    /**
+     * This calls a jUDDI implementation specific API call and is used to help
+     * configure internode communication between jUDDI servers. This is NOT
+     * part of the UDDI specification.<br>
+     * Note: this API call should only be used with secure ports (SSL/TLS)
+     * @param senderClerk
+     * @return 
+     */
     public ClerkDetail saveClerk(UDDIClerk senderClerk) {
         ClerkDetail clerkDetail = null;
         try {
"
juddi,1f53f9f52acf3ffcb318a1aded40ca8c5e53fdf1,"JUDDI-704 fixed
JUDDI-703 done
JUDDI-567 adding wsdl reg/unreg, serialization fixes for juddi api services. new sample/demo for juddi specific services
JUDDI-637 added source documentation

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540432 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 01:56:56,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 4e4b993..166d5e2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -151,4 +151,25 @@
 				   
 	}
 
+        /**
+         * Attempts to get the requestor's ip address from the servlet context, defaults to null it it can't be
+         * retrieved
+         * @return 
+         */
+        public String getRequestorsIPAddress()
+        {
+            try {
+                MessageContext mc = ctx.getMessageContext();
+                HttpServletRequest req = null;
+                if (mc != null) {
+                    req = (HttpServletRequest) mc.get(MessageContext.SERVLET_REQUEST);
+                }
+                if (req != null) {
+                    return req.getRemoteAddr();
+                }
+            } catch (Exception ex) {
+                logger.debug(""Error caught looking up the requestor's ip address"", ex);
+            }
+            return null;
+        }
 }
"
juddi,1f53f9f52acf3ffcb318a1aded40ca8c5e53fdf1,"JUDDI-704 fixed
JUDDI-703 done
JUDDI-567 adding wsdl reg/unreg, serialization fixes for juddi api services. new sample/demo for juddi specific services
JUDDI-637 added source documentation

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1540432 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-10 01:56:56,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index ae614b1..897a73f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -91,13 +91,16 @@
 				modelAuthToken.setLastUsed(new Date());
 				modelAuthToken.setNumberOfUses(modelAuthToken.getNumberOfUses() + 1);
 				modelAuthToken.setTokenState(AUTHTOKEN_RETIRED);
+                                logger.info(""AUDIT: AuthToken discarded for "" + modelAuthToken.getAuthorizedName() + "" from "" + getRequestorsIPAddress());
 			}
 	
 			tx.commit();
+                        
                         long procTime = System.currentTimeMillis() - startTime;
                         serviceCounter.update(SecurityQuery.DISCARD_AUTHTOKEN, 
                                 QueryStatus.SUCCESS, procTime);
                 } catch (DispositionReportFaultMessage drfm) {
+                    logger.info(""AUDIT: AuthToken discard request aborted, issued from "" + getRequestorsIPAddress());
                     long procTime = System.currentTimeMillis() - startTime;
                     serviceCounter.update(SecurityQuery.DISCARD_AUTHTOKEN, 
                             QueryStatus.FAILED, procTime);                      
@@ -146,17 +149,8 @@
 				modelAuthToken.setAuthorizedName(publisherId);
 				modelAuthToken.setNumberOfUses(0);
 				modelAuthToken.setTokenState(AUTHTOKEN_ACTIVE);
-                                if (ctx !=null){
-                                    try{
-                                        MessageContext mc = ctx.getMessageContext();
-                                        HttpServletRequest req = (HttpServletRequest)mc.get(MessageContext.SERVLET_REQUEST); 
-                                        modelAuthToken.setIPAddress(req.getRemoteAddr());
-                                        //System.out.println(""Client IP = "" + req.getRemoteAddr());
-                                    }
-                                    catch (Exception ex){
-                                        logger.warn(""unexpected erorr fetching requestor's ip address. Assiocation of auth token to IP will not be possible"", ex);
-                                    }
-                                }
+                                modelAuthToken.setIPAddress(this.getRequestorsIPAddress());
+                    
 				em.persist(modelAuthToken);
 			}
 
@@ -165,6 +159,7 @@
 			MappingModelToApi.mapAuthToken(modelAuthToken, apiAuthToken);
 
 			tx.commit();
+                        logger.info(""AUDIT: AuthToken issued for "" + modelAuthToken.getAuthorizedName() + "" from "" + getRequestorsIPAddress());
 	                long procTime = System.currentTimeMillis() - startTime;
 	                serviceCounter.update(SecurityQuery.GET_AUTHTOKEN, 
 	                        QueryStatus.SUCCESS, procTime);
@@ -174,6 +169,7 @@
                     long procTime = System.currentTimeMillis() - startTime;
                     serviceCounter.update(SecurityQuery.GET_AUTHTOKEN, 
                             QueryStatus.FAILED, procTime);                      
+                    logger.info(""AUDIT: AuthToken issue FAILED "" + publisherId + "" from "" + getRequestorsIPAddress());
                     throw drfm;                                                                                                 
 		} finally {
 			if (tx.isActive()) {
"
juddi,acb4ef06745bc2cf3b5f90b63ffc68c94f29a91e,"JUDDI-644 rolling back to debug logging

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1538497 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-04 02:30:57,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 7f95321..2930b89 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -564,7 +564,7 @@
 			throws DispositionReportFaultMessage {
 	        long startTime = System.currentTimeMillis();
 
-                log.info(""Inbound save business request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
+                log.debug(""Inbound save business request for key "" + body.getBusinessEntity().get(0).getBusinessKey());
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
"
juddi,cc9096d0a1a03010b1870c9dc3afc0bd5626ec47,"JUDDI-689 fixed
JUDDI-567 adding wsdl2uddi, splitting up the samples to make them easier to understand

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1538482 13f79535-47bb-0310-9956-ffa450edef68
",2013-11-04 00:42:32,alexoree,"diff --git a/juddi-examples/uddi-samples/src/org/apache/juddi/samples/WsdlImport.java b/juddi-examples/uddi-samples/src/org/apache/juddi/samples/WsdlImport.java
index 4bad8df..c979ae0 100644
--- a/juddi-examples/uddi-samples/src/org/apache/juddi/samples/WsdlImport.java
+++ b/juddi-examples/uddi-samples/src/org/apache/juddi/samples/WsdlImport.java
@@ -39,6 +39,7 @@
 import org.uddi.api_v3.GetAuthToken;
 import org.uddi.api_v3.Name;
 import org.uddi.api_v3.SaveBusiness;
+import org.uddi.api_v3.SaveService;
 import org.uddi.api_v3.SaveTModel;
 import org.uddi.api_v3.TModel;
 import org.uddi.v3_service.UDDIPublicationPortType;
@@ -94,14 +95,14 @@
         //http://www.webservicex.net/stockquote.asmx?WSDL"");
         //http://www.webservicex.com/globalweather.asmx?WSDL"");
         //http://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php?wsdl"");
-        String domain = url.getHost();
+        String domain = ""my.key.domain"";
         PrintUDDI<TModel> tmodelPrinter = new PrintUDDI<TModel>();
         TModel keygen = UDDIClerk.createKeyGenator(""uddi:"" + domain + "":keygenerator"", domain, ""en"");
         //save the keygen
         SaveTModel stm = new SaveTModel();
         stm.setAuthInfo(rootAuthToken.getAuthInfo());
         stm.getTModel().add(keygen);
-        System.out.println(tmodelPrinter.print(keygen));
+        //System.out.println(tmodelPrinter.print(keygen));
         //publish.saveTModel(stm);
 
 
@@ -149,19 +150,27 @@
         }
 
         //important, you'll need to save your new tModels, or else saving the business/service may fail
-        publish.saveTModel(stm);
+        System.out.println(new PrintUDDI<SaveTModel>().print(tms));
+        //publish.saveTModel(stm);
 
 
 
         //finaly, we're ready to save all of the services defined in the WSDL
         //again, we're creating a new business, if you have one already, look it up using the Inquiry getBusinessDetails
 
-        PrintUDDI<BusinessService> servicePrinter = new PrintUDDI<BusinessService>();
+        SaveService ss = new  SaveService();
+        
+        
+        //PrintUDDI<BusinessService> servicePrinter = new PrintUDDI<BusinessService>();
         for (int i = 0; i < businessServices.getBusinessService().size(); i++) {
-            System.out.println(servicePrinter.print(businessServices.getBusinessService().get(i)));
+            ss.getBusinessService().add(businessServices.getBusinessService().get(i));
+            //System.out.println(servicePrinter.print(businessServices.getBusinessService().get(i)));
         }
 
+        
+        System.out.println(new PrintUDDI<SaveService>().print(ss));
 
+        /*
 
         SaveBusiness sb = new SaveBusiness();
         sb.setAuthInfo(rootAuthToken.getAuthInfo());
@@ -176,7 +185,7 @@
         PrintUDDI<SaveBusiness> sbp = new PrintUDDI<SaveBusiness>();
         System.out.println(""Request "" + sbp.print(sb));
         publish.saveBusiness(sb);
-
+*/
         //and we're done
         //Be sure to report any problems to the jUDDI JIRA bug tracker at 
         //https://issues.apache.org/jira/browse/JUDDI
"
juddi,e656a10a8550c36cd3bb01b4443e22bb419aa26d,"JUDDI-682 fixed
JUDDI-246 updated some of the juddi-gui verbiage to match the documentation

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1536955 13f79535-47bb-0310-9956-ffa450edef68
",2013-10-30 02:25:46,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index ecb6ad5..e3cbee5 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -42,7 +42,6 @@
 import javax.xml.datatype.XMLGregorianCalendar;
 import javax.xml.ws.BindingProvider;
 import javax.xml.ws.Holder;
-import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.logging.Log;
@@ -54,10 +53,6 @@
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.webconsole.AES;
 import org.apache.juddi.webconsole.PostBackConstants;
-import static org.apache.juddi.webconsole.hub.UDDIRequestsAsXML.custody;
-import static org.apache.juddi.webconsole.hub.UDDIRequestsAsXML.inquiry;
-import static org.apache.juddi.webconsole.hub.UDDIRequestsAsXML.publish;
-import static org.apache.juddi.webconsole.hub.UDDIRequestsAsXML.subscription;
 import org.apache.juddi.webconsole.hub.builders.Builders;
 import org.apache.juddi.webconsole.hub.builders.Printers;
 import org.apache.juddi.webconsole.resources.ResourceLoader;
@@ -100,7 +95,7 @@
      */
     public static final Log log = LogFactory.getLog(LOGGER_NAME);
     private DatatypeFactory df;
-    
+
     private UddiHub() throws DatatypeConfigurationException {
         df = DatatypeFactory.newInstance();
     }
@@ -127,7 +122,7 @@
         } catch (Exception ex) {
             HandleException(ex);
         }
-        
+
         token = null;
         inquiry = null;
         publish = null;
@@ -153,7 +148,7 @@
             _session.setAttribute(""hub"", hub);
             return hub;
         }
-        
+
         return (UddiHub) j;
     }
     String locale = ""en"";
@@ -177,7 +172,7 @@
     public Properties GetRawConfiguration() {
         return properties;
     }
-    
+
     private UddiHub(ServletContext application, HttpSession _session) throws Exception {
         URL prop = application.getResource(""/META-INF/config.properties"");
         if (prop == null) {
@@ -197,20 +192,20 @@
             style = AuthStyle.UDDI_AUTH;
         }
         try {
-            
+
             String clazz = UDDIClientContainer.getUDDIClient(null).
                     getClientConfig().getUDDINode(""default"").getProxyTransport();
             Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
             if (transportClass != null) {
                 transport = (Transport) transportClass.
                         getConstructor(String.class).newInstance(""default"");
-                
+
                 security = transport.getUDDISecurityService();
                 inquiry = transport.getUDDIInquiryService();
                 subscription = transport.getUDDISubscriptionService();
                 publish = transport.getUDDIPublishService();
                 custody = transport.getUDDICustodyTransferService();
-                
+
             }
         } catch (Exception ex) {
             HandleException(ex);
@@ -244,7 +239,7 @@
         }
         return new Properties();
     }
-    
+
     private String GetToken() {
         if (style != AuthStyle.UDDI_AUTH) {
             BindingProvider bp = null;
@@ -253,31 +248,31 @@
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(""username""));
             context.put(BindingProvider.PASSWORD_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));
-            
+
             bp = (BindingProvider) publish;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(""username""));
             context.put(BindingProvider.PASSWORD_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));
-            
+
             bp = (BindingProvider) custody;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(""username""));
             context.put(BindingProvider.PASSWORD_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));
-            
+
             bp = (BindingProvider) subscription;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             context.put(BindingProvider.USERNAME_PROPERTY, session.getAttribute(""username""));
             context.put(BindingProvider.PASSWORD_PROPERTY, session.getAttribute(AES.Decrypt(""password"", (String) properties.get(""key""))));
 
@@ -293,29 +288,29 @@
             }
             BindingProvider bp = null;
             Map<String, Object> context = null;
-            
+
             bp = (BindingProvider) inquiry;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             bp = (BindingProvider) publish;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
-            
+
+
             bp = (BindingProvider) custody;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
+
             bp = (BindingProvider) subscription;
             context = bp.getRequestContext();
             context.remove(BindingProvider.USERNAME_PROPERTY);
             context.remove(BindingProvider.PASSWORD_PROPERTY);
-            
-            
+
+
             GetAuthToken req = new GetAuthToken();
             try {
                 if (security == null) {
@@ -372,7 +367,7 @@
         ret.offset = offset;
         ret.displaycount = 0;
         ret.totalrecords = 0;
-        
+
         try {
             FindBusiness fb = new FindBusiness();
             fb.setMaxRows(maxrecords);
@@ -380,7 +375,7 @@
             fb.setAuthInfo(GetToken());
             org.uddi.api_v3.FindQualifiers fq = new org.uddi.api_v3.FindQualifiers();
             fq.getFindQualifier().add(UDDIConstants.APPROXIMATE_MATCH);
-            
+
             fb.setFindQualifiers(fq);
             Name searchname = new Name();
             searchname.setLang(lang);
@@ -408,11 +403,11 @@
                 ret.totalrecords = findBusiness.getListDescription().getActualCount();
                 ret.renderedHtml = Printers.BusinessListAsTable(findBusiness, session, isChooser);
             }
-            
+
         } catch (Exception ex) {
             ret.renderedHtml = (HandleException(ex));
         }
-        
+
         return ret;
     }
 
@@ -429,10 +424,10 @@
      * @return
      */
     public String GetMyTransferableKeys(boolean businesses, boolean tModels) {
-        
+
         StringBuilder sb = new StringBuilder();
-        
-        
+
+
         RegisteredInfo findBusiness = null;
         try {
             GetRegisteredInfo r = new GetRegisteredInfo();
@@ -441,7 +436,7 @@
                 return ToErrorAlert(ResourceLoader.GetResource(session, ""errors.notsignedin""));
             }
             r.setInfoSelection(InfoSelection.ALL);
-            
+
             try {
                 findBusiness = publish.getRegisteredInfo(r);
             } catch (Exception ex) {
@@ -456,15 +451,15 @@
                     throw ex;
                 }
             }
-            
+
         } catch (Exception ex) {
             return ToErrorAlert(HandleException(ex));
         }
-        
-        
+
+
         if (findBusiness == null || findBusiness.getBusinessInfos() == null) {
             return (ResourceLoader.GetResource(session, ""errors.nodatareturned""));
-            
+
         } else {
             if (findBusiness.getBusinessInfos() != null && businesses) {
                 sb.append(""<select id=\""businesslist\"" multiple=\""multiple\"" size=\""10\"">"");
@@ -492,10 +487,10 @@
                 }
                 sb.append(""</select>"");
             }
-            
+
             return sb.toString();
         }
-        
+
     }
 
     /**
@@ -540,7 +535,7 @@
                     } else {
                         sb.append(ResourceLoader.GetResource(session, ""items.signed.not"")).append(""<Br>"");
                     }
-                    
+
                     sb.append(Printers.PrintBindingTemplates(get.getBusinessService().get(i).getBindingTemplates(), (String) session.getAttribute(""locale""))).append(""<Br>"");
                 }
             } else {
@@ -614,7 +609,7 @@
         if (serviceid == null || serviceid.length() == 0) {
             return null;
         }
-        
+
         try {
             GetServiceDetail gbd = new GetServiceDetail();
             gbd.setAuthInfo(GetToken());
@@ -634,12 +629,12 @@
                     throw ex;
                 }
             }
-            
+
             if (get == null || get.getBusinessService().isEmpty()) {
                 return null;
             }
             return get.getBusinessService().get(0);
-            
+
         } catch (Exception ex) {
             HandleException(ex);
         }
@@ -671,7 +666,7 @@
                     throw ex;
                 }
             }
-            
+
             return ResourceLoader.GetResource(session, ""actions.saved"");
         } catch (Exception ex) {
             return HandleException(ex);
@@ -718,35 +713,35 @@
      * @return a localized Saved or an error message
      */
     public String SaveServiceDetails(HttpServletRequest request) {
-        
+
         BusinessService be = new BusinessService();
         be.setBusinessKey(request.getParameter(PostBackConstants.BUSINESSKEY).trim());
         be.setServiceKey(request.getParameter(PostBackConstants.SERVICEKEY).trim());
-        
+
         if (be.getServiceKey().equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
             be.setServiceKey(null);
         }
         if (be.getBusinessKey() == null || be.getBusinessKey().length() == 0) {
             return ResourceLoader.GetResource(session, ""errors.noinput.businesskey"");
         }
-        
+
         be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit"")));
         BindingTemplates bt = new BindingTemplates();
         bt.getBindingTemplate().addAll(Builders.BuildBindingTemplates(Builders.MapFilter(request.getParameterMap(), PostBackConstants.BINDINGTEMPLATE), PostBackConstants.BINDINGTEMPLATE, ResourceLoader.GetResource(session, ""items.clicktoedit"")));
         if (!bt.getBindingTemplate().isEmpty()) {
             be.setBindingTemplates(bt);
         }
-        
+
         be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit"")));
-        
+
         CategoryBag cb = new CategoryBag();
         cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF));
         cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP));
-        
+
         if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
             be.setCategoryBag(cb);
         }
-        
+
         return SaveServiceDetails(be);
     }
 
@@ -806,7 +801,7 @@
                     throw ex;
                 }
             }
-            
+
             return ResourceLoader.GetResource(session, ""actions.saved"");
         } catch (Exception ex) {
             return HandleException(ex);
@@ -824,9 +819,9 @@
      * @return
      */
     public String SaveBusinessDetails(HttpServletRequest request) {
-        
-        
-        
+
+
+
         BusinessEntity be = new BusinessEntity();
         be.setBusinessKey(request.getParameter(PostBackConstants.BUSINESSKEY).trim());
         if (be.getBusinessKey().equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit""))) {
@@ -841,16 +836,16 @@
             }
         }
         be.getName().addAll(Builders.BuildNames(Builders.MapFilter(request.getParameterMap(), PostBackConstants.NAME), PostBackConstants.NAME, ResourceLoader.GetResource(session, ""items.clicktoedit"")));
-        
-        
+
+
         be.setContacts(Builders.BuildContacts(request.getParameterMap(), ResourceLoader.GetResource(session, ""items.clicktoedit"")));
-        
+
         be.getDescription().addAll(Builders.BuildDescription(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DESCRIPTION), PostBackConstants.DESCRIPTION, ResourceLoader.GetResource(session, ""items.clicktoedit"")));
         be.setDiscoveryURLs(Builders.BuildDisco(Builders.MapFilter(request.getParameterMap(), PostBackConstants.DISCOVERYURL), PostBackConstants.DISCOVERYURL));
         CategoryBag cb = new CategoryBag();
         cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF));
         cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP));
-        
+
         if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
             be.setCategoryBag(cb);
         }
@@ -874,11 +869,11 @@
         try {
             GetBusinessDetail gbd = new GetBusinessDetail();
             gbd.setAuthInfo(GetToken());
-            
+
             gbd.getBusinessKey().add(bizid);
-            
+
             BusinessDetail businessDetail = null;
-            
+
             try {
                 businessDetail = inquiry.getBusinessDetail(gbd);
             } catch (Exception ex) {
@@ -912,7 +907,7 @@
                 sb.append(ResourceLoader.GetResource(session, ""errors.nodatareturned""));
             }
         } catch (Exception ex) {
-            
+
             sb.append(HandleException(ex));
         }
         return sb.toString();
@@ -928,13 +923,13 @@
         if (bizid == null || bizid.isEmpty()) {
             return null;
         }
-        
+
         try {
             GetBusinessDetail gbd = new GetBusinessDetail();
             gbd.setAuthInfo(GetToken());
-            
+
             gbd.getBusinessKey().add(bizid);
-            
+
             BusinessDetail businessDetail = null;
             try {
                 businessDetail = inquiry.getBusinessDetail(gbd);
@@ -957,7 +952,7 @@
             HandleException(ex);
         }
         return null;
-        
+
     }
 
     /**
@@ -1013,7 +1008,7 @@
         ret.offset = offset;
         ret.totalrecords = 0;
         try {
-            
+
             FindService fs = new FindService();
             fs.setAuthInfo(GetToken());
             fs.setMaxRows(maxrecords);
@@ -1043,7 +1038,7 @@
                     throw ex;
                 }
             }
-            
+
             if (findService == null || findService.getServiceInfos() == null) {
                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");
                 return ret;
@@ -1058,7 +1053,7 @@
             ret.renderedHtml = HandleException(ex);
         }
         return ret;
-        
+
     }
 
     /**
@@ -1076,13 +1071,13 @@
         try {
             if (!partitionName.startsWith(""uddi:"")) {
                 return ResourceLoader.GetResource(session, ""errors.tmodel.prefix"");
-                
+
             }
             if (!partitionName.endsWith("":keyGenerator"")) {
                 return ResourceLoader.GetResource(session, ""errors.tmodel.postfix"");
             }
-            
-            
+
+
             SaveTModel st = new SaveTModel();
             st.setAuthInfo(GetToken());
             TModel tm = new TModel();
@@ -1183,7 +1178,7 @@
                     throw ex;
                 }
             }
-            
+
             ret.offset = offset;
             ret.displaycount = findTModel.getListDescription().getIncludeCount();
             ret.totalrecords = findTModel.getListDescription().getActualCount();
@@ -1215,14 +1210,14 @@
             if (id == null || id.length() == 0) {
                 return null;
             }
-            
+
             GetTModelDetail req = new GetTModelDetail();
             req.setAuthInfo(GetToken());
             req.getTModelKey().add(id);
             TModelDetail tModelDetail = null;
             try {
                 tModelDetail = inquiry.getTModelDetail(req);
-                
+
             } catch (Exception ex) {
                 if (ex instanceof DispositionReportFaultMessage) {
                     DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
@@ -1230,17 +1225,17 @@
                         token = null;
                         req.setAuthInfo(GetToken());
                         tModelDetail = inquiry.getTModelDetail(req);
-                        
+
                     }
                 } else {
                     throw ex;
                 }
             }
-            
+
             if (tModelDetail != null && !tModelDetail.getTModel().isEmpty()) {
                 return tModelDetail.getTModel().get(0);
             }
-            
+
         } catch (Exception ex) {
             HandleException(ex);
         }
@@ -1326,7 +1321,7 @@
                     throw ex;
                 }
             }
-            
+
             return tModelDetail.getTModel().get(0);
         } catch (Exception ex) {
             HandleException(ex);
@@ -1406,7 +1401,7 @@
                 return FindBusiness(criteria, parameters, lang, findqualifier);
             case RelatedBusiness:
                 return FindRelatedBusiness(criteria, parameters, lang, findqualifier);
-            
+
             case Service:
                 return FindService(criteria, parameters, lang, findqualifier);
             case tModel:
@@ -1414,7 +1409,7 @@
         }
         return ResourceLoader.GetResource(session, ""items.unknown"");
     }
-    
+
     private String FindBindingTemplateToHtml(CriteriaType criteria, String parameters, String lang, String[] fq) {
         try {
             FindBinding fb = new FindBinding();
@@ -1444,9 +1439,9 @@
                     findBusiness = new BindingDetail();
                     BindingTemplate bt = GetBindingDetailsAsObject(parameters);
                     findBusiness.getBindingTemplate().add(bt);
-                    
+
                     break;
-                
+
             }
             if (findBusiness == null) {
                 try {
@@ -1463,7 +1458,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (findBusiness != null && findBusiness.getBindingTemplate() != null) {
                 StringBuilder sb = new StringBuilder();
@@ -1495,7 +1490,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String FindBusiness(CriteriaType criteria, String parameters, String lang, String[] fq) {
         try {
             FindBusiness fb = new FindBusiness();
@@ -1530,16 +1525,16 @@
                     BusinessEntity t = GetBusinessDetails(parameters);
                     findBusiness = new BusinessList();
                     findBusiness.setBusinessInfos(new BusinessInfos());
-                    
+
                     BusinessInfo bd = new BusinessInfo();
                     bd.setBusinessKey(t.getBusinessKey());
                     bd.getName().addAll(t.getName());
                     findBusiness.getBusinessInfos().getBusinessInfo().add(bd);
                     break;
-                
+
             }
             if (findBusiness == null) {
-                
+
                 try {
                     findBusiness = inquiry.findBusiness(fb);
                 } catch (Exception ex) {
@@ -1580,7 +1575,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String FindRelatedBusiness(CriteriaType criteria, String parameters, String lang, String[] fq) {
         try {
             FindRelatedBusinesses fb = new FindRelatedBusinesses();
@@ -1597,7 +1592,7 @@
                 case uid:
                     break;
             }
-            
+
             try {
                 findBusiness = inquiry.findRelatedBusinesses(fb);
             } catch (Exception ex) {
@@ -1612,8 +1607,8 @@
                     throw ex;
                 }
             }
-            
-            
+
+
             if (findBusiness != null && findBusiness.getRelatedBusinessInfos() != null) {
                 StringBuilder sb = new StringBuilder();
                 sb.append(""<table class=\""table\"">"");
@@ -1639,7 +1634,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String FindService(CriteriaType criteria, String parameters, String lang, String[] fq) {
         try {
             FindService fb = new FindService();
@@ -1681,7 +1676,7 @@
                         findBusiness.getServiceInfos().getServiceInfo().add(si);
                     }
                     break;
-                
+
             }
             if (findBusiness == null) {
                 try {
@@ -1698,7 +1693,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (findBusiness.getServiceInfos() != null) {
                 StringBuilder sb = new StringBuilder();
@@ -1725,7 +1720,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String FindtModels(CriteriaType criteria, String parameters, String lang, String[] fq) {
         try {
             FindTModel fb = new FindTModel();
@@ -1767,9 +1762,9 @@
                     tmi.setTModelKey(tmodelDetails.getTModelKey());
                     tmi.getDescription().addAll(tmodelDetails.getDescription());
                     findBusiness.getTModelInfos().getTModelInfo().add(tmi);
-                    
+
                     break;
-                
+
             }
             if (findBusiness == null) {
                 try {
@@ -1786,7 +1781,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (findBusiness.getTModelInfos() != null) {
                 StringBuilder sb = new StringBuilder();
@@ -1971,7 +1966,7 @@
         try {
             SaveTModel sb = new SaveTModel();
             sb.setAuthInfo(GetToken());
-            
+
             sb.getTModel().add(be);
             JAXB.marshal(be, System.out);
             try {
@@ -2002,7 +1997,7 @@
      * @return
      */
     public String SaveTModel(HttpServletRequest request) {
-        
+
         TModel be = new TModel();
         be.setTModelKey(request.getParameter(PostBackConstants.SERVICEKEY).trim());
         if (be.getTModelKey() != null && (be.getTModelKey().equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit"")))
@@ -2018,7 +2013,7 @@
         if (t != null && !t.equalsIgnoreCase(ResourceLoader.GetResource(session, ""items.clicktoedit"")) && t.length() > 0) {
             be.getName().setLang(t);
         }
-        
+
         t = request.getParameter(PostBackConstants.TMODEL_DELETED);
         if (t != null) {
             if (t.equalsIgnoreCase(""checked"")) {
@@ -2039,15 +2034,15 @@
         CategoryBag cb = new CategoryBag();
         cb.getKeyedReference().addAll(Builders.BuildKeyedReference(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF), PostBackConstants.CATBAG_KEY_REF));
         cb.getKeyedReferenceGroup().addAll(Builders.BuildKeyedReferenceGroup(Builders.MapFilter(request.getParameterMap(), PostBackConstants.CATBAG_KEY_REF_GRP), PostBackConstants.CATBAG_KEY_REF_GRP));
-        
+
         if (!cb.getKeyedReference().isEmpty() || !cb.getKeyedReferenceGroup().isEmpty()) {
             be.setCategoryBag(cb);
         }
         be.setIdentifierBag(Builders.BuildIdentBag(Builders.MapFilter(request.getParameterMap(), PostBackConstants.IDENT_KEY_REF), PostBackConstants.IDENT_KEY_REF));
-        
+
         JAXB.marshal(be, System.out);
         return SaveTModel(be);
-        
+
     }
 
     /**
@@ -2064,7 +2059,7 @@
         for (int i = 0; i < sig.getKeyInfo().getContent().size(); i++) {
             //sb.append(""Signature #"").append((i + 1)).append("": "");
             JAXBElement get = (JAXBElement) sig.getKeyInfo().getContent().get(i);
-            
+
             if (get.getValue() instanceof org.w3._2000._09.xmldsig_.X509DataType) {
                 X509DataType xd = (X509DataType) get.getValue();
                 for (int k = 0; k < xd.getX509IssuerSerialOrX509SKIOrX509SubjectName().size(); k++) {
@@ -2102,7 +2097,7 @@
         }
         for (int i = 0; i < sig.getKeyInfo().getContent().size(); i++) {
             JAXBElement get = (JAXBElement) sig.getKeyInfo().getContent().get(i);
-            
+
             if (get.getValue() instanceof org.w3._2000._09.xmldsig_.X509DataType) {
                 X509DataType xd = (X509DataType) get.getValue();
                 for (int k = 0; k < xd.getX509IssuerSerialOrX509SKIOrX509SubjectName().size(); k++) {
@@ -2117,7 +2112,7 @@
                                 //this is the most supportable way to do this
                                 BASE64Encoder encoder = new BASE64Encoder();
                                 return encoder.encodeBuffer(cert.getEncoded());
-                                
+
                             } catch (Exception ex) {
                                 return HandleException(ex);
                             }
@@ -2167,7 +2162,7 @@
                     return SignatureToBase64(GettModelDetailsAsObject.getSignature().get(index));
                 }
                 break;
-            
+
         }
         return ResourceLoader.GetResource(session, ""errors.unknownentity"");
     }
@@ -2289,7 +2284,7 @@
                     throw ex;
                 }
             }
-            
+
             return operationalInfo.getOperationalInfo();
         } catch (Exception ex) {
             HandleException(ex);
@@ -2305,7 +2300,7 @@
      */
     public String GetOperationalInfo(List<OperationalInfo> info) {
         StringBuilder sb = new StringBuilder();
-        
+
         if (info != null) {
             sb.append(""<table class=\""table table-hover\"">"");
             for (int i = 0; i < info.size(); i++) {
@@ -2406,13 +2401,13 @@
      */
     public List<AssertionStatusItem> GetPublisherAssertions(AtomicReference<String> msg) {
         List<AssertionStatusItem> out = new ArrayList<AssertionStatusItem>();
-        
+
         if (GetToken() == null) {
             msg.set(ResourceLoader.GetResource(session, ""errors.notsignedin""));
             return null;
         }
         List<AssertionStatusItem> STATUS_COMPLETE = null;
-        
+
         try {
             try {
                 STATUS_COMPLETE = publish.getAssertionStatusReport(GetToken(), CompletionStatus.STATUS_COMPLETE);
@@ -2443,7 +2438,7 @@
                     if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED)) {
                         token = null;
                         STATUS_FROM_KEY_INCOMPLETE = publish.getAssertionStatusReport(GetToken(), CompletionStatus.STATUS_FROM_KEY_INCOMPLETE);
-                        
+
                     }
                 } else {
                     throw ex;
@@ -2459,14 +2454,14 @@
         try {
             try {
                 STATUS_TO_KEY_INCOMPLETE = publish.getAssertionStatusReport(GetToken(), CompletionStatus.STATUS_TO_KEY_INCOMPLETE);
-                
+
             } catch (Exception ex) {
                 if (ex instanceof DispositionReportFaultMessage) {
                     DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                     if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED)) {
                         token = null;
                         STATUS_TO_KEY_INCOMPLETE = publish.getAssertionStatusReport(GetToken(), CompletionStatus.STATUS_TO_KEY_INCOMPLETE);
-                        
+
                     }
                 } else {
                     throw ex;
@@ -2478,8 +2473,8 @@
         if (STATUS_TO_KEY_INCOMPLETE != null) {
             out.addAll(STATUS_TO_KEY_INCOMPLETE);
         }
-        
-        
+
+
         return out;
         //return publisherAssertions;
     }
@@ -2551,7 +2546,7 @@
         try {
             try {
                 publish.addPublisherAssertions(r);
-                
+
             } catch (Exception ex) {
                 if (ex instanceof DispositionReportFaultMessage) {
                     DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
@@ -2589,13 +2584,13 @@
         try {
             try {
                 subscriptions = subscription.getSubscriptions(GetToken());
-                
+
             } catch (Exception ex) {
                 if (ex instanceof DispositionReportFaultMessage) {
                     DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                     if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED)) {
                         token = null;
-                        
+
                         subscriptions = subscription.getSubscriptions(GetToken());
                     }
                 } else {
@@ -2605,27 +2600,27 @@
         } catch (Exception ex) {
             return HandleException(ex);
         }
-        
-        
-        
+
+
+
         GregorianCalendar gcal = new GregorianCalendar();
         gcal.setTimeInMillis(System.currentTimeMillis());
-        
+
         GetSubscriptionResults r = new GetSubscriptionResults();
         r.setAuthInfo(GetToken());
         r.setCoveragePeriod(new CoveragePeriod());
         r.getCoveragePeriod().setEndPoint(df.newXMLGregorianCalendar(gcal));
-        
+
         r.getCoveragePeriod().setStartPoint(lastRefresh);
         StringBuilder sb = new StringBuilder();
         for (int k = 0; k < subscriptions.size(); k++) {
-            
+
             r.setSubscriptionKey(subscriptions.get(k).getSubscriptionKey());
             SubscriptionResultsList subscriptionResults = null;
             try {
                 try {
                     subscriptionResults = subscription.getSubscriptionResults(r);
-                    
+
                 } catch (Exception ex) {
                     if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
@@ -2641,7 +2636,7 @@
             } catch (Exception ex) {
                 return HandleException(ex);
             }
-            
+
             if (subscriptionResults != null) {
                 //    subscriptionResults.getAssertionStatusReport().
                 if (subscriptionResults.getAssertionStatusReport() != null) {
@@ -2710,7 +2705,7 @@
                     for (int i = 0; i < subscriptionResults.getServiceList().getServiceInfos().getServiceInfo().size(); i++) {
                         sb.append(""<tr><td>"");
                         sb.append(StringEscapeUtils.escapeHtml(subscriptionResults.getServiceList().getServiceInfos().getServiceInfo().get(i).getServiceKey()));
-                        
+
                         sb.append(""</td><td>"");
                         sb.append(StringEscapeUtils.escapeHtml(Printers.ListNamesToString(subscriptionResults.getServiceList().getServiceInfos().getServiceInfo().get(i).getName())));
                         sb.append(""</td></tr>"");
@@ -2742,7 +2737,7 @@
                     }
                     sb.append(""</table>"");
                 }
-                
+
             }
         }
         return sb.toString();
@@ -2766,7 +2761,7 @@
         ret.offset = offset;
         ret.totalrecords = 0;
         try {
-            
+
             FindService fs = new FindService();
             fs.setAuthInfo(GetToken());
             fs.setMaxRows(maxrecords);
@@ -2796,14 +2791,14 @@
                     throw ex;
                 }
             }
-            
+
             if (findService == null || findService.getServiceInfos() == null) {
                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");
                 return ret;
             }
             ret.displaycount = findService.getListDescription().getIncludeCount();
             ret.totalrecords = findService.getListDescription().getActualCount();
-            
+
             GetServiceDetail gs = new GetServiceDetail();
             gs.setAuthInfo(GetToken());
             for (int i = 0; i < findService.getServiceInfos().getServiceInfo().size(); i++) {
@@ -2828,9 +2823,9 @@
                 ret.renderedHtml = ResourceLoader.GetResource(session, ""errors.norecordsfound"");
                 return ret;
             }
-            
-            
-            
+
+
+
             StringBuilder sb = new StringBuilder();
             sb.append(""<table class=\""table\""><tr><th>"").
                     append(""</th><th>"").
@@ -2842,7 +2837,7 @@
                     append(""</th><th>"").
                     append(ResourceLoader.GetResource(session, ""items.accesspoint.value"")).
                     append(""</th></tr>"");
-            
+
             for (int i = 0; i < serviceDetail.getBusinessService().size(); i++) {
                 //   System.out.println(serviceDetail.getBusinessService().get(i).getBindingTemplates().getBindingTemplate().size());
                 if (serviceDetail.getBusinessService().get(i).getBindingTemplates() != null) {
@@ -2874,7 +2869,7 @@
                     }
                 }
             }
-            
+
             sb.append(""</table>"");
             ret.renderedHtml = sb.toString();
             return ret;
@@ -2882,7 +2877,7 @@
             ret.renderedHtml = HandleException(ex);
         }
         return ret;
-        
+
     }
 
     /**
@@ -2930,7 +2925,7 @@
             }
         } catch (Exception ex) {
             return HandleException(ex);
-            
+
         }
         return null;//""Success"";
     }
@@ -2958,7 +2953,7 @@
         DiscardTransferToken r = new DiscardTransferToken();
         r.setAuthInfo(GetToken());
         r.setTransferToken(JAXB.unmarshal(new StringReader(tokenxml), TransferToken.class));
-        
+
         try {
             try {
                 custody.discardTransferToken(r);
@@ -2996,7 +2991,7 @@
             te.setTransferToken(JAXB.unmarshal(sr, TransferToken.class));
             sr = new StringReader(keyBagXML.trim());
             te.setKeyBag(JAXB.unmarshal(sr, org.uddi.custody_v3.KeyBag.class));
-            
+
             try {
                 custody.transferEntities(te);
             } catch (Exception ex) {
@@ -3065,7 +3060,7 @@
         }
         return ""Unknown error"";
     }
-    
+
     private String SendAdvancedQueryInquiry(String method, Object request) {
         Object response = null;
         try {
@@ -3102,7 +3097,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""findService"")) {
                 ((FindService) request).setAuthInfo(GetToken());
@@ -3120,7 +3115,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""findRelatedBusines"")) {
                 ((FindRelatedBusinesses) request).setAuthInfo(GetToken());
@@ -3138,11 +3133,11 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""findTModel"")) {
                 ((FindTModel) request).setAuthInfo(GetToken());
-                
+
                 try {
                     response = inquiry.findTModel((FindTModel) request);
                 } catch (Exception ex) {
@@ -3157,7 +3152,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getBindingDetail"")) {
                 ((GetBindingDetail) request).setAuthInfo(GetToken());
@@ -3175,11 +3170,11 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getBusinessDetail"")) {
                 ((GetBusinessDetail) request).setAuthInfo(GetToken());
-                
+
                 try {
                     response = inquiry.getBusinessDetail((GetBusinessDetail) request);
                 } catch (Exception ex) {
@@ -3194,11 +3189,11 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getServiceDetail"")) {
                 ((GetServiceDetail) request).setAuthInfo(GetToken());
-                
+
                 try {
                     response = inquiry.getServiceDetail((GetServiceDetail) request);
                 } catch (Exception ex) {
@@ -3213,7 +3208,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getOperationalInfo"")) {
                 ((GetOperationalInfo) request).setAuthInfo(GetToken());
@@ -3231,7 +3226,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getTModelDetail"")) {
                 ((GetTModelDetail) request).setAuthInfo(GetToken());
@@ -3260,7 +3255,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String SendAdvancedQueryPublish(String method, Object request) {
         Object response = null;
         try {
@@ -3381,7 +3376,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (method.equalsIgnoreCase(""getPublisherAssertions"")) {
                 try {
@@ -3502,7 +3497,7 @@
                         throw ex;
                     }
                 }
-                
+
             }
             if (response == null) {
                 return ""The operation completed without error"";
@@ -3514,11 +3509,11 @@
             return HandleException(ex);
         }
     }
-    
+
     private String SendAdvancedQueryCustody(String method, Object request) {
         Object response = null;
         try {
-            
+
             if (method.equalsIgnoreCase(""discardTransferToken"")) {
                 try {
                     ((DiscardTransferToken) request).setAuthInfo(GetToken());
@@ -3581,7 +3576,7 @@
                     }
                 }
             }
-            
+
             if (response == null) {
                 return ""The operation completed without error"";
             }
@@ -3592,7 +3587,7 @@
             return HandleException(ex);
         }
     }
-    
+
     private String SendAdvancedQuerySubscription(String method, Object request) {
         Object response = null;
         try {
@@ -3632,14 +3627,14 @@
             }
             if (method.equalsIgnoreCase(""getSubscriptions"")) {
                 try {
-                    
+
                     response = subscription.getSubscriptions(GetToken());
                 } catch (Exception ex) {
                     if (ex instanceof DispositionReportFaultMessage) {
                         DispositionReportFaultMessage f = (DispositionReportFaultMessage) ex;
                         if (f.getFaultInfo().countainsErrorCode(DispositionReport.E_AUTH_TOKEN_EXPIRED) || ex.getMessage().contains(DispositionReport.E_AUTH_TOKEN_EXPIRED)) {
                             token = null;
-                            
+
                             response = subscription.getSubscriptions(GetToken());
                         }
                     } else {
@@ -3651,7 +3646,7 @@
                 SaveSubscription ss = (SaveSubscription) request;
                 Holder<List<Subscription>> h = new Holder<List<Subscription>>(ss.getSubscription());
                 try {
-                    
+
                     subscription.saveSubscription(GetToken(), h);
                     response = h.value;
                 } catch (Exception ex) {
"
juddi,dc9df22396b7875b7cc3db53a36dca7a27e4fdad,"JUDDI-662 revising ddl files

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1534828 13f79535-47bb-0310-9956-ffa450edef68
",2013-10-22 22:34:56,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
index 7f0f937..b89ff46 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
@@ -30,7 +30,7 @@
  *
  */
 @Entity
-@Table(name=""j3_signature_transform_data_val"")
+@Table(name=""j3_signature_transform_data_v"")
 public class SignatureTransformDataValue implements java.io.Serializable {
     private static final long serialVersionUID = -2233157941119408702L;
     
"
juddi,9642b018af68955aa1a0886ecf3b92687e864567,"JUDDI-662 revising ddl files
JUDDI-579 fixing an incorrect import related to the digital signature refactor

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1534408 13f79535-47bb-0310-9956-ffa450edef68
",2013-10-21 22:54:36,alexoree,"diff --git a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
index b42a6aa..38d4631 100644
--- a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
+++ b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
@@ -24,10 +24,7 @@
 import java.security.KeyStore;
 import java.security.NoSuchAlgorithmException;
 import java.security.PrivateKey;
-import java.security.Provider;
-import java.security.Security;
 import java.security.cert.Certificate;
-import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -56,9 +53,10 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
-
 import netscape.javascript.JSObject;
 
+//import netscape.javascript.JSObject;
+
 import org.apache.juddi.v3.client.cryptor.DigSigUtil;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
@@ -154,7 +152,11 @@
 
     }
 
-    
+    /**
+     * this converts a xml document to a string for writing back to the browser
+     * @param doc
+     * @return 
+     */
     public String getStringFromDoc(org.w3c.dom.Document doc) {
         DOMImplementationLS domImplementation = (DOMImplementationLS) doc.getImplementation();
         LSSerializer lsSerializer = domImplementation.createLSSerializer();
@@ -243,6 +245,9 @@
         }
     }
     
+    /**
+     * XML digital signature namespace
+     */
     public final static String XML_DIGSIG_NS = ""http://www.w3.org/2000/09/xmldsig#"";
 
     private void signDOM(Node node, PrivateKey privateKey, Certificate origCert) {
"
juddi,dbd7aaee2ea54bee680d1709b3cabc57bb11ce1f,"JUDDI-662 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1533302 13f79535-47bb-0310-9956-ffa450edef68
",2013-10-18 01:05:27,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
index 99323ab..7f0f937 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
@@ -30,7 +30,7 @@
  *
  */
 @Entity
-@Table(name=""j3_signature_transform_data_value"")
+@Table(name=""j3_signature_transform_data_val"")
 public class SignatureTransformDataValue implements java.io.Serializable {
     private static final long serialVersionUID = -2233157941119408702L;
     
"
juddi,45f47ccb7df578a76d9e4e9965affaa51152714f,"JUDDI-644 adding additional debug info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526856 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 11:37:28,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 3a7949d..a48044c 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -299,6 +299,7 @@
 			sb.getBusinessEntity().add(beIn);
                     BusinessDetail saveBusiness = publication.saveBusiness(sb);
                     logger.info(""Business saved with key "" + saveBusiness.getBusinessEntity().get(0).getBusinessKey());
+                    JAXB.marshal(saveBusiness, System.out);
 	
 			// Now get the entity and check the values
 			GetBusinessDetail gb = new GetBusinessDetail();
"
juddi,dff684e2f320aa235c8faacfda50653a9d9da706,"JUDDI-644 adding additional debug info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526851 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 11:23:52,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 7a6498b..3a7949d 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -288,11 +288,14 @@
             saveBusiness(authInfo, businessXML, businessKey, true);
         }
 	public void saveBusiness(String authInfo, String businessXML, String businessKey, boolean serialize) {
+            logger.info(""attempting to save business "" + businessKey + "" from "" + businessXML);
 		try {
 			SaveBusiness sb = new SaveBusiness();
 			sb.setAuthInfo(authInfo);
 
 			BusinessEntity beIn = (BusinessEntity)EntityCreator.buildFromDoc(businessXML, ""org.uddi.api_v3"");
+                        if (beIn==null)
+                            throw new Exception(""Unload to load source xml document from "" + businessXML);
 			sb.getBusinessEntity().add(beIn);
                     BusinessDetail saveBusiness = publication.saveBusiness(sb);
                     logger.info(""Business saved with key "" + saveBusiness.getBusinessEntity().get(0).getBusinessKey());
"
juddi,6b43b628adf411f6a7e472f78a90d13b656e597c,"JUDDI-644 adding additional debug info

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526850 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 11:16:44,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 6be91cf..7a6498b 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -285,7 +285,7 @@
         }
         
         public void saveBusiness(String authInfo, String businessXML, String businessKey) {
-            saveBusiness(authInfo, businessXML, businessKey, false);
+            saveBusiness(authInfo, businessXML, businessKey, true);
         }
 	public void saveBusiness(String authInfo, String businessXML, String businessKey, boolean serialize) {
 		try {
@@ -294,8 +294,8 @@
 
 			BusinessEntity beIn = (BusinessEntity)EntityCreator.buildFromDoc(businessXML, ""org.uddi.api_v3"");
 			sb.getBusinessEntity().add(beIn);
-			
-			publication.saveBusiness(sb);
+                    BusinessDetail saveBusiness = publication.saveBusiness(sb);
+                    logger.info(""Business saved with key "" + saveBusiness.getBusinessEntity().get(0).getBusinessKey());
 	
 			// Now get the entity and check the values
 			GetBusinessDetail gb = new GetBusinessDetail();
"
juddi,89123426b5c63d5d7d927fd6095191ca0e904c11,"JUDDI-655 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526759 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 00:22:01,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 606093f..6f8b1b8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -175,6 +175,8 @@
 			if (logger.isDebugEnabled()) logger.debug(""filter="" + modelSubscription.getSubscriptionFilter());
 			
 			SubscriptionResultsList result = new SubscriptionResultsList();
+                        result.setChunkToken(""0"");
+                        //chunkToken:  Optional element used to retrieve subsequent groups of data when the first invocation of this API indicates more data is available.  This occurs when a chunkToken is returned whose value is not ""0"" in the validValuesList structure described in the next section.  To retrieve the next chunk of data, the chunkToken returned should be used as an argument to the next invocation of this API.
 			result.setCoveragePeriod(body.getCoveragePeriod());
 	
 			// The subscription structure is required output for the results
"
juddi,89123426b5c63d5d7d927fd6095191ca0e904c11,"JUDDI-655 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526759 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 00:22:01,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 63cdd26..d402c2d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -160,17 +160,32 @@
 						GetSubscriptionResults getSubscriptionResults = 
 							buildGetSubscriptionResults(subscription, notificationDate);
 						if (getSubscriptionResults!=null) {
-                                                    //TODO chunking
 							getSubscriptionResults.setSubscriptionKey(subscription.getSubscriptionKey());
 							UddiEntityPublisher publisher = new UddiEntityPublisher();
 							publisher.setAuthorizedName(subscription.getAuthorizedName());
 							SubscriptionResultsList resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
+                                                        String token = resultList.getChunkToken();
 							if (resultListContainsChanges(resultList)) {
 								log.debug(""We have a change and need to notify "" + subscription.getSubscriptionKey());
+                                                                resultList.setChunkToken(null);
+                                                               //Note that the chunkToken is not returned with this structure for this API.  
 								notify(getSubscriptionResults,resultList, notificationDate);
 							} else {
 								log.debug(""No changes where recorded, no need to notify."");
 							}
+                                                        while (!token.equalsIgnoreCase(""0""))
+                                                        {
+                                                            resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
+                                                            if (resultListContainsChanges(resultList)) {
+                                                                    log.debug(""We have a change and need to notify "" + subscription.getSubscriptionKey());
+                                                                    resultList.setChunkToken(null);
+                                                                   //Note that the chunkToken is not returned with this structure for this API.  
+                                                                    notify(getSubscriptionResults,resultList, notificationDate);
+                                                            } else {
+                                                                    log.debug(""No changes where recorded, no need to notify."");
+                                                            }
+                                                        }
+                                                            
 						}
 					} catch (Exception e) {
 						log.error(""Could not obtain subscriptionResult for subscriptionKey "" 
"
juddi,89123426b5c63d5d7d927fd6095191ca0e904c11,"JUDDI-655 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1526759 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-27 00:22:01,alexoree,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
index 810f01d..33273fb 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
@@ -198,14 +198,15 @@
 			
 			String chunkToken = """";
 			int iterations = 0;
-			while (chunkToken != null) {
+                        //JUDDI-655
+			while (chunkToken != null && !chunkToken.equalsIgnoreCase(""0"")) {
 				iterations++;
-				
+                                
 				getSubResultsIn.setChunkToken(chunkToken);
 				SubscriptionResultsList result = subscription.getSubscriptionResults(getSubResultsIn);
 				if (result == null)
 					Assert.fail(""Null result from getSubscriptionResults operation"");
-				
+				Assert.assertNotNull(""Chunk token should either be not null or '0'"",result.getChunkToken());
 				TModelList tmodelList = result.getTModelList();
 				if (tmodelList == null)
 					Assert.fail(""No result from getSubscriptionResults operation on chunk attempt "" + iterations);
@@ -247,14 +248,14 @@
 			
 			String chunkToken = """";
 			int iterations = 0;
-			while (chunkToken != null) {
+			while (chunkToken != null && !chunkToken.equalsIgnoreCase(""0"")) {
 				iterations++;
 				
 				getSubResultsIn.setChunkToken(chunkToken);
 				SubscriptionResultsList result = subscription.getSubscriptionResults(getSubResultsIn);
 				if (result == null)
 					Assert.fail(""Null result from getSubscriptionResults operation"");
-				
+				Assert.assertNotNull(""Chunk token should either be not null or '0'"",result.getChunkToken());
 				TModelDetail tmodelDetail = result.getTModelDetail();
 				if (tmodelDetail == null)
 					Assert.fail(""No result from getSubscriptionResults operation on chunk attempt "" + iterations);
"
juddi,d5ff85ae61504eaf45a560d9bf5ecc4dda360e87,"JUDDI-645 fixed
JUDDI-646 fixed
JUDDI-647 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1519848 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-03 21:02:38,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
index 4994afd..c859e18 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
@@ -408,7 +408,7 @@
      * @param username
      * @param password
      * @param ignoreSSLErrors if true, SSL errors are ignored
-     * @return a non-null ""Application"" object, represeting a WADL's application root XML element
+     * @return a non-null ""Application"" object, represeting a WADL's application root XML 
      * Sample code:<br>
      * <pre>
      * Application app = WADL2UDDI.ParseWadl(new URL(""http://server/wsdl.wsdl""), ""username"", ""password"", 
"
juddi,d5ff85ae61504eaf45a560d9bf5ecc4dda360e87,"JUDDI-645 fixed
JUDDI-646 fixed
JUDDI-647 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1519848 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-03 21:02:38,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 217ff33..ccd70f6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -211,6 +211,8 @@
 			else
 				throw new ConfigurationException(""A node business entity was not found.  Please make sure that the application is properly installed."");
 			result.setProperty(Property.JUDDI_NODE_ID, nodeId);
+                        
+                        //result.setProperty(Property.JUDDI_NODE_ROOT_BUSINESS, nodeId);
 			
 			tx.commit();
 			return result;
"
juddi,d5ff85ae61504eaf45a560d9bf5ecc4dda360e87,"JUDDI-645 fixed
JUDDI-646 fixed
JUDDI-647 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1519848 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-03 21:02:38,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index ff7fc09..abebc55 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -98,15 +98,17 @@
 			org.uddi.api_v3.BusinessEntity rootBusinessEntity = (org.uddi.api_v3.BusinessEntity)buildInstallEntity(fileRootBusinessEntity, ""org.uddi.api_v3"",config);
 			
 			String rootPartition = getRootPartition(rootTModelKeyGen);
-			String nodeId = getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition);
-			
+                        //JUDDI-645
+			String nodeId = config.getString(Property.JUDDI_NODE_ID,getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition) );
+                                //getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition);
+			String rootbizkey = getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition);
 			String fileRootPublisher = rootPublisherStr + FILE_PUBLISHER;
 			if (!alreadyInstalled) {
 				log.info(""Loading the root Publisher from file "" + fileRootPublisher);
 			
 				rootPublisher = installPublisher(em, fileRootPublisher, config);
 				installRootPublisherKeyGen(em, rootTModelKeyGen, rootPartition, rootPublisher, nodeId);
-				rootBusinessEntity.setBusinessKey(nodeId);
+				rootBusinessEntity.setBusinessKey(rootbizkey);
 				installBusinessEntity(true, em, rootBusinessEntity, rootPublisher, rootPartition, config);
 			} else {
 				log.debug(""juddi.seed.always reapplies all seed files except for the root data."");
@@ -271,7 +273,10 @@
 		modelBusinessEntity.setCreated(now);
 		modelBusinessEntity.setModified(now);
 		modelBusinessEntity.setModifiedIncludingChildren(now);
-		modelBusinessEntity.setNodeId(modelBusinessEntity.getEntityKey());
+                //JUDDI-645
+		//modelBusinessEntity.setNodeId(modelBusinessEntity.getEntityKey());
+                modelBusinessEntity.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+
 		
 		for (org.apache.juddi.model.BusinessService service : modelBusinessEntity.getBusinessServices()) {
 			service.setAuthorizedName(rootPublisher.getAuthorizedName());
@@ -279,7 +284,9 @@
 			service.setCreated(now);
 			service.setModified(now);
 			service.setModifiedIncludingChildren(now);
-			service.setNodeId(modelBusinessEntity.getEntityKey());
+                        //JUDDI-645
+                        service.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+			//service.setNodeId(modelBusinessEntity.getEntityKey());
 			
 			for (org.apache.juddi.model.BindingTemplate binding : service.getBindingTemplates()) {
 				binding.setAuthorizedName(rootPublisher.getAuthorizedName());
@@ -287,7 +294,10 @@
 				binding.setCreated(now);
 				binding.setModified(now);
 				binding.setModifiedIncludingChildren(now);
-				binding.setNodeId(modelBusinessEntity.getEntityKey());
+				//binding.setNodeId(modelBusinessEntity.getEntityKey());
+                                binding.setNodeId(config.getString(Property.JUDDI_NODE_ID,modelBusinessEntity.getEntityKey()));
+                                //JUDDI-645
+                                
 			}
 		}
 		
@@ -362,7 +372,7 @@
 		String parentKey = businessService.getBusinessKey();
 		if (parentKey != null && parentKey.length()> 0) {
 			if (!parentKey.equalsIgnoreCase(parent.getBusinessKey()))
-				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ParentBusinessNotFound"", parentKey));
+				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ParentBusinessNotFound"", parentKey + "" "" + businessService.getBusinessKey() + "" "" + businessService.getBusinessKey().length() + "" "" + parentKey.length()));
 		}
 		
 		// Retrieve the service's passed key
"
juddi,d5ff85ae61504eaf45a560d9bf5ecc4dda360e87,"JUDDI-645 fixed
JUDDI-646 fixed
JUDDI-647 fixed

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1519848 13f79535-47bb-0310-9956-ffa450edef68
",2013-09-03 21:02:38,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index a914beb..c02ffdb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -38,7 +38,17 @@
     public final static String JUDDI_USERSFILE = ""juddi.auth.usersfile"";
     public final static String JUDDI_MAX_ROWS = ""juddi.maxRows"";
     public final static String JUDDI_MAX_IN_CLAUSE = ""juddi.maxInClause"";
-    public final static String JUDDI_ROOT_PARTITION = ""juddi.rootPartition"";
+    public final static String JUDDI_ROOT_PARTITION = ""juddi.root.partition"";
+    /**
+     * This is the business id that all of the UDDI services on this node will be attached too
+     * (generally as defined in the install_data)
+     * JUDDI-645
+     */
+    public final static String JUDDI_NODE_ROOT_BUSINESS = ""juddi.root.businessId"";
+    /**
+     * this is the unique identifier of this uddi service provide, primarily used for clustered setups with the replication api
+     * JUDDI-645
+     */
     public final static String JUDDI_NODE_ID = ""juddi.nodeId"";
     public final static String JUDDI_TRANSFER_EXPIRATION_DAYS = ""juddi.transfer.expiration.days"";
     /**
@@ -67,7 +77,12 @@
     public final static String JUDDI_AUTHENTICATOR_LDAP_EXPANDED_STR= ""juddi.auth.authenticator.ldapexp"";
     
     
-    
+    /**
+     * if enabled, tmodels must exist before using them
+     * binding templates must exist before a subscription can be made
+     * access point hosting redirector/binding template must exist before it can be made
+     * @since 3.1.5
+     */
     public final static String JUDDI_ENFORCE_REFERENTIAL_INTEGRITY = ""juddi.validation.enforceReferentialIntegrity"";
     public final static String JUDDI_SUBSCRIPTION_EXPIRATION_DAYS = ""juddi.subscription.expiration.days"";
     public final static String JUDDI_SUBSCRIPTION_NOTIFICATION = ""juddi.subscription.notification"";
"
juddi,40b584401f01e9fbc62a3586d661c7dceb2aee15,"JUDDI-622 no need for a stack trace here

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1517716 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-26 22:28:48,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index 73010c4..97e85ad 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -120,9 +120,7 @@
 			System.out.println(result.getBusinessEntity().size());
 		} catch (Exception e) {
 			try {
-				System.out.println(e.getMessage());
-				System.out.println(e.getCause());
-				e.printStackTrace();
+				System.out.println(""(Expected) Error message = "" + e.getMessage());
 				DispositionReport report = DispositionReportFaultMessage.getDispositionReport(e);
 				assertNotNull(report);
 				assertTrue(report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED));
"
juddi,58d4e5146ac99135ec76b9b272c17912258124de,"JUDDI-637 updating source code docs
JUDDI-567 fixing a build issue and cleaning up most of the compiler warnings

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1517008 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 19:52:45,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
index 6ee893f..c2209fd 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/EmbeddedRegistry.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright 2001-2013 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.v3.client.embed;
 
 public interface EmbeddedRegistry {
"
juddi,58d4e5146ac99135ec76b9b272c17912258124de,"JUDDI-637 updating source code docs
JUDDI-567 fixing a build issue and cleaning up most of the compiler warnings

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1517008 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 19:52:45,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
index d419e73..0d3d917 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/embed/JUDDIRegistry.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright 2001-2013 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi.v3.client.embed;
 
 import java.lang.reflect.Method;
"
juddi,58d4e5146ac99135ec76b9b272c17912258124de,"JUDDI-637 updating source code docs
JUDDI-567 fixing a build issue and cleaning up most of the compiler warnings

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1517008 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 19:52:45,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java b/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
index f76a34d..67e36b2 100644
--- a/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
+++ b/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright 2001-2013 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.uddi;
 
 import javax.xml.bind.JAXBContext;
"
juddi,005397301ebd14130c1fdbe9126799cd34a1a789,"JUDDI-637 updating source code docs
JUDDI-600, revising the test case for WSDL to UDDI via http connection, test now checks for connectivity before attempting the test to support offline builds (the test is just skipped then)


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516903 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 15:46:17,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ReadWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ReadWSDL.java
index 2573451..91b065c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ReadWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/ReadWSDL.java
@@ -33,7 +33,7 @@
 /**
  * A WSDL parser/reader
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
- * Modified for supporting http based credentials by Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a> - Modified for supporting http based credentials
  */
 public class ReadWSDL {
 	
@@ -105,10 +105,18 @@
 		return readWSDL(wsdlUrl, null, null);
 	}
 
+        /**
+         * It is optional to ignore SSL errors when attempting to parse a remote WSDL via https
+         * @return true if we are ignoring SSL errors
+         */
     public boolean isIgnoreSSLErrors() {
         return IgnoreSSLErrors;
     }
 
+    /**
+     * It is optional to ignore SSL errors when attempting to parse a remote WSDL via https
+     * @param IgnoreSSLErrors 
+     */
     public void setIgnoreSSLErrors(boolean IgnoreSSLErrors) {
         this.IgnoreSSLErrors = IgnoreSSLErrors;
     }
"
juddi,159a80b80dbb990bb56f34ba46080e04c4857040,"JUDDI-637 updating source code docs, refactoring the samples project to be in the correct namespace.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516876 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 15:11:29,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/Registry.java b/juddi-core/src/main/java/org/apache/juddi/Registry.java
index d17f8ed..b990376 100644
--- a/juddi-core/src/main/java/org/apache/juddi/Registry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/Registry.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright 2001-2010 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi;
 
 import javax.naming.NamingException;
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/Release.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/Release.java
index 834be4a..7ffd95b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/Release.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/Release.java
@@ -23,7 +23,7 @@
 import java.util.jar.Manifest;
 
 /**
- * 
+ * The release class is a utility for obtaining the 
  */
 public class Release {
 	
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
index 54464ff..4ae8d67 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIConstants.java
@@ -10,7 +10,7 @@
 /**
  * This file was borrowed from juddi-core's constants file with modifications
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public interface UDDIConstants {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES128Cryptor.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES128Cryptor.java
index 796248f..1fe986e 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES128Cryptor.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES128Cryptor.java
@@ -29,7 +29,7 @@
 
 
 /** AES 128 bit encryption
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES128Cryptor extends  AESCryptorAbstract {
   
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES256Cryptor.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES256Cryptor.java
index 699578a..a85065d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES256Cryptor.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AES256Cryptor.java
@@ -31,7 +31,7 @@
  * AES 256 bit encryption. <h1> Requires Unlimited Strength Java Cryptographic
  * Extensions</h1>
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES256Cryptor extends AESCryptorAbstract {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AESCryptorAbstract.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AESCryptorAbstract.java
index 1534b77..99f8990 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AESCryptorAbstract.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/AESCryptorAbstract.java
@@ -30,7 +30,7 @@
 /**
  * AES bit encryption
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public abstract class AESCryptorAbstract implements Cryptor {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/CrytorUtil.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/CrytorUtil.java
index cb32a93..5bd35bd 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/CrytorUtil.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/CrytorUtil.java
@@ -18,7 +18,7 @@
  
 /**
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @see org.apache.juddi.cryptor.DefaultCryptor
  */
 public class CrytorUtil {
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java
index 165aeba..3e985be 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/crypto/TripleDESCrytor.java
@@ -31,7 +31,7 @@
 
 /**
  * Triple DES, 168 bit key
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class TripleDESCrytor implements Cryptor {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MockSSLSocketFactory.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MockSSLSocketFactory.java
index 7e2f67c..dab1771 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MockSSLSocketFactory.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/MockSSLSocketFactory.java
@@ -32,7 +32,7 @@
 
 /**
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class MockSSLSocketFactory extends SSLSocketFactory {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
index 65329ff..a2fa417 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
@@ -127,7 +127,7 @@
         //https://issues.apache.org/jira/browse/JUDDI
 </pre>
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class WADL2UDDI {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
index 14c4b02..7838ba4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
@@ -42,7 +42,7 @@
  * Implementation of the interface {@link WSDLLocatorImpl}.
  *
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a> 
- * @author Alex O'Ree - Modified for supporting http based credentials 
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a> - Modified for supporting http based credentials 
  */
 public class WSDLLocatorImpl implements WSDLLocator {
     private Exception lastException=null;
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ISubscriptionCallback.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ISubscriptionCallback.java
index bfa8076..f334fc1 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ISubscriptionCallback.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ISubscriptionCallback.java
@@ -21,7 +21,7 @@
  * This is an interface for creating asynchronous callback clientsfor the
  * UDDI Subscription API.
  * @since 3.2
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @see SubscriptionCallbackListener
  */
 public interface ISubscriptionCallback {
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/RegistrationAbortedException.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/RegistrationAbortedException.java
index f2f8887..a34f69b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/RegistrationAbortedException.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/RegistrationAbortedException.java
@@ -18,7 +18,7 @@
 
 /**
  * throw when a particular digital signature situation occurs
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  *  @since 3.2
  */
 public class RegistrationAbortedException extends Exception{
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ServiceAlreadyStartedException.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ServiceAlreadyStartedException.java
index bfff70d..65c7b15 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ServiceAlreadyStartedException.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/ServiceAlreadyStartedException.java
@@ -18,7 +18,7 @@
 
 /**
  * throw when attempting to start the SubscriptionCallbackListener service more than once
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  *  @since 3.2
  */
 public class ServiceAlreadyStartedException extends Exception{
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
index 0dc837c..018fd6f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/SubscriptionCallbackListener.java
@@ -70,7 +70,7 @@
            Thread.sleep(1000);
         SubscriptionCallbackListener.stop(c, ""default"", start.getBindingKey());
 </pre>
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @since 3.2
  */
 @WebService(name = ""UDDI_SubscriptionListener_PortType"", targetNamespace = ""urn:uddi-org:v3_service"")
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnableToSignException.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnableToSignException.java
index cc29617..bdbae5b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnableToSignException.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnableToSignException.java
@@ -19,7 +19,7 @@
 /**
  * Thrown when the SubscriptionCallbackListener is configured to automatically signed
  * UDDI entities and cannot, usually due to configuration
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @since 3.2
  */
 public class UnableToSignException extends Exception {
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnexpectedResponseException.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnexpectedResponseException.java
index 0817d93..9f0f3a1 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnexpectedResponseException.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/subscription/UnexpectedResponseException.java
@@ -17,7 +17,7 @@
 
 /**
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @since 3.2
  */
 public class UnexpectedResponseException extends RuntimeException {
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 3d06e50..349abef 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -37,7 +37,7 @@
 /**Although this class is abstract, it provides token validation
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  * 
- * @author Alex O'Ree - modified to include token expiration validation
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a> - modified to include token expiration validation
  */
 public abstract class AuthenticatedService {
 	public static final int AUTHTOKEN_ACTIVE = 1;
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/cryptor/AES128Cryptor.java b/juddi-core/src/main/java/org/apache/juddi/cryptor/AES128Cryptor.java
index 8e15173..ce82478 100644
--- a/juddi-core/src/main/java/org/apache/juddi/cryptor/AES128Cryptor.java
+++ b/juddi-core/src/main/java/org/apache/juddi/cryptor/AES128Cryptor.java
@@ -29,7 +29,7 @@
 
 
 /** AES 128 bit encryption
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES128Cryptor extends  AESCryptorAbstract {
   
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/cryptor/AES256Cryptor.java b/juddi-core/src/main/java/org/apache/juddi/cryptor/AES256Cryptor.java
index f60115a..bfe7694 100644
--- a/juddi-core/src/main/java/org/apache/juddi/cryptor/AES256Cryptor.java
+++ b/juddi-core/src/main/java/org/apache/juddi/cryptor/AES256Cryptor.java
@@ -31,7 +31,7 @@
  * AES 256 bit encryption. <h1> Requires Unlimited Strength Java Cryptographic
  * Extensions</h1>
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES256Cryptor extends AESCryptorAbstract {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/cryptor/AESCryptorAbstract.java b/juddi-core/src/main/java/org/apache/juddi/cryptor/AESCryptorAbstract.java
index 8b087dd..81920b9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/cryptor/AESCryptorAbstract.java
+++ b/juddi-core/src/main/java/org/apache/juddi/cryptor/AESCryptorAbstract.java
@@ -30,7 +30,7 @@
 /**
  * AES bit encryption
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public abstract class AESCryptorAbstract implements Cryptor {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/cryptor/TripleDESCrytor.java b/juddi-core/src/main/java/org/apache/juddi/cryptor/TripleDESCrytor.java
index ca9a1b9..24dfb33 100644
--- a/juddi-core/src/main/java/org/apache/juddi/cryptor/TripleDESCrytor.java
+++ b/juddi-core/src/main/java/org/apache/juddi/cryptor/TripleDESCrytor.java
@@ -31,7 +31,7 @@
 
 /**
  * Triple DES, 168 bit key
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class TripleDESCrytor implements Cryptor {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CrytorUtil.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CrytorUtil.java
index bf6efc6..05195b0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CrytorUtil.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CrytorUtil.java
@@ -20,7 +20,7 @@
 
 /**
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * @see org.apache.juddi.cryptor.DefaultCryptor
  */
 public class CrytorUtil {
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
index 441f728..7fbd84b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapExpandedAuthenticator.java
@@ -64,7 +64,7 @@
  * should contain exactly one instance of ""%s"", which is replaced by the requestor's username
  *
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class LdapExpandedAuthenticator implements Authenticator {
     private Log logger = LogFactory.getLog(this.getClass());
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index b97eb77..f4a6dd2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -63,7 +63,7 @@
  *
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  * @author <a href=""mailto:gunnlaugursig@gmail.com"">Gunnlaugur Sigurðsson</a>
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  * 
  * 
  * @since 3.2, all values are now configurable
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/MD5XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/MD5XMLDocAuthenticator.java
index 03c75ba..a6e401e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/MD5XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/MD5XMLDocAuthenticator.java
@@ -33,7 +33,7 @@
 
 /**
  * Uses MD5 hashes for passwords
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class MD5XMLDocAuthenticator extends XMLDocAuthenticator {
 	
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidationConstants.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidationConstants.java
index 80b4d98..80f5ba7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidationConstants.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidationConstants.java
@@ -18,7 +18,7 @@
 /**
  * Validation constants for various items, such as maximum string lengths
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class ValidationConstants {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/create-partition/src/main/java/org/apache/juddi/example/partition/SimpleCreateTmodelPartition.java b/juddi-examples/create-partition/src/main/java/org/apache/juddi/example/partition/SimpleCreateTmodelPartition.java
index 4f5078c..3eff9ea 100644
--- a/juddi-examples/create-partition/src/main/java/org/apache/juddi/example/partition/SimpleCreateTmodelPartition.java
+++ b/juddi-examples/create-partition/src/main/java/org/apache/juddi/example/partition/SimpleCreateTmodelPartition.java
@@ -38,7 +38,7 @@
  * An example for creating a key partition, aka key generator, aka 'special'
  * tModel
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class SimpleCreateTmodelPartition {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/simple-browse/src/main/java/org/apache/juddi/example/browse/SimpleBrowse.java b/juddi-examples/simple-browse/src/main/java/org/apache/juddi/example/browse/SimpleBrowse.java
index 01b2155..745760d 100644
--- a/juddi-examples/simple-browse/src/main/java/org/apache/juddi/example/browse/SimpleBrowse.java
+++ b/juddi-examples/simple-browse/src/main/java/org/apache/juddi/example/browse/SimpleBrowse.java
@@ -47,7 +47,7 @@
 /**
  * A Simple UDDI Browser that dumps basic information to console
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class SimpleBrowse {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/subscription-notification-handler/src/org/apache/juddi/subscription/notify/AMQPNotifier.java b/juddi-examples/subscription-notification-handler/src/org/apache/juddi/subscription/notify/AMQPNotifier.java
index 15b1d24..68404f7 100644
--- a/juddi-examples/subscription-notification-handler/src/org/apache/juddi/subscription/notify/AMQPNotifier.java
+++ b/juddi-examples/subscription-notification-handler/src/org/apache/juddi/subscription/notify/AMQPNotifier.java
@@ -50,7 +50,7 @@
  * amqp.connectionfactory.qpidConnectionfactory
  * amqp.destination
  * amqp.destination.type amq.topic
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AMQPNotifier implements Notifier {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/AES.java b/juddi-examples/uddi-samples/src/uddi/examples/AES.java
index 78789fe..6a2dcb7 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/AES.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/AES.java
@@ -11,7 +11,7 @@
 
 /**
  * This call is a simple test class that shows how to encrypt stuff in Java using AES
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/ClientSubscriptionCallback.java b/juddi-examples/uddi-samples/src/uddi/examples/ClientSubscriptionCallback.java
index 757a38d..12f7729 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/ClientSubscriptionCallback.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/ClientSubscriptionCallback.java
@@ -17,7 +17,7 @@
  * this class is a very basic callback service for UDDI.
  * Fire it up with the EndPoint api
  * @see  Endpoint
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 @WebService(serviceName=""UDDISubscriptionListenerService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISubscriptionListenerPortType"",
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/DES.java b/juddi-examples/uddi-samples/src/uddi/examples/DES.java
index 24d4b17..35cb68f 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/DES.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/DES.java
@@ -22,7 +22,7 @@
  * This call is a simple test class that shows how to encrypt stuff in Java
  * using 3DES
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class DES {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/UddiCreatebulk.java b/juddi-examples/uddi-samples/src/uddi/examples/UddiCreatebulk.java
index 0e88906..9d77b14 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/UddiCreatebulk.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/UddiCreatebulk.java
@@ -20,7 +20,7 @@
 /**
  * This class was used to identify performance issues when a given node has a large number of UDDI entities.
  * It may not work on some commercial UDDI nodes due to licensing restrictions (some limit the number of business, services, etc)
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiCreatebulk {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureBusiness.java b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureBusiness.java
index 83721de..fd5293a 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureBusiness.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureBusiness.java
@@ -24,7 +24,7 @@
 /**
  * This class shows you how to digital sign a business
  *
- * @author Alex O'ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiDigitalSignatureBusiness {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureSearch.java b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureSearch.java
index ea6b3e9..f5b0221 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureSearch.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureSearch.java
@@ -23,7 +23,7 @@
 
 /**
  * This class shows you how to search for services that are digitally signed
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiDigitalSignatureSearch {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureService.java b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureService.java
index b3d5e8b..46e5631 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureService.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureService.java
@@ -17,7 +17,7 @@
 /**
  * This class shows you how to digitally sign a service and verify the signature
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiDigitalSignatureService {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureTmodel.java b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureTmodel.java
index 661365e..6624442 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureTmodel.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/UddiDigitalSignatureTmodel.java
@@ -16,7 +16,7 @@
 
 /**
  * This class shows you how to digitally sign a tmodel and verify the signature
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiDigitalSignatureTmodel {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/WadlImport.java b/juddi-examples/uddi-samples/src/uddi/examples/WadlImport.java
index 083d625..732b38f 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/WadlImport.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/WadlImport.java
@@ -37,7 +37,7 @@
  * This class shows how to perform a WSDL2UDDI import manually. More
  * specifically, this is WSDL2UDDI without using annotations.
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class WadlImport {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/WsdlImport.java b/juddi-examples/uddi-samples/src/uddi/examples/WsdlImport.java
index a1d075b..f9fa504 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/WsdlImport.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/WsdlImport.java
@@ -37,7 +37,7 @@
  * This class shows how to perform a WSDL2UDDI import manually. More
  * specifically, this is WSDL2UDDI without using annotations.
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class WsdlImport {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-examples/uddi-samples/src/uddi/examples/testStrings.java b/juddi-examples/uddi-samples/src/uddi/examples/testStrings.java
index 18f651e..4558209 100644
--- a/juddi-examples/uddi-samples/src/uddi/examples/testStrings.java
+++ b/juddi-examples/uddi-samples/src/uddi/examples/testStrings.java
@@ -10,7 +10,7 @@
 /**
  * A simple program to illistrate how to pass by ""reference"" vs by ""value"" in Java. Or more accurately, how to persist changes on 
  * method parameters to the caller. Written mostly because I forget it frequently and use this as reference material.
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class testStrings {
         
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
index e103b34..2a7f25e 100644
--- a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
+++ b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
@@ -72,7 +72,7 @@
 /**
  * Provides a Java web applet that digitally signs UDDI xml
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class XmlSignatureApplet extends java.applet.Applet {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
index 74d7679..2b9a289 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/AES.java
@@ -32,7 +32,7 @@
  * reinstantiates a AES key from the key bytes.</summary> The reinstantiated key
  * is used to initialize a AES cipher for encryption and decryption. source :
  * http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html
- *@author Alex O'Ree
+ *@author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
index 5297c78..eea1c38 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
@@ -18,7 +18,7 @@
 
 /**
  * Provides a very basic, no stack trace exception, useful for throwing at a browser without revealing any details 
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class CrossSiteRequestForgeryException extends Exception {
     //Parameterless Constructor
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
index 23cde3a..5363459 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
@@ -10,7 +10,7 @@
  * the rendering of a webpage or javascript and should thus be escaped sequences
  * of characters
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class PostBackConstants {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
index 797e0c8..0b26429 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
@@ -12,7 +12,7 @@
 /**
  * This startup servlet's job is to generate an encryption key which will be used for encrypting
  * cached user credentials in the http session object
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class StartupServlet implements javax.servlet.ServletContextListener {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/PagableContainer.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/PagableContainer.java
index efb4b24..7389114 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/PagableContainer.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/PagableContainer.java
@@ -20,7 +20,7 @@
  * This simple class enables use to pass rendered html data and paging
  * information back and forth from jsp context to java
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class PagableContainer {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UDDIRequestsAsXML.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UDDIRequestsAsXML.java
index 15dfc28..298b5b6 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UDDIRequestsAsXML.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UDDIRequestsAsXML.java
@@ -58,7 +58,7 @@
 /**
  * This class generates XML as String objects for UDDI requests
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UDDIRequestsAsXML {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index bcff639..98c50b5 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -80,7 +80,7 @@
  * methods in the class trigger web service call outs. All callouts also support
  * expired UDDI tokens and will attempt to reauthenticate and retry the request.
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiHub {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
index c860e5c..b1e577b 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
@@ -40,7 +40,7 @@
 
 /**
  * This class provides functions for building UDDI entities from Http request parameters
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class Builders {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
index 4f58628..dca892a 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
@@ -25,7 +25,7 @@
 /**
  * Provides very basic UDDI spec to String formats, mostly used for debugging
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class Printers {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
index e721ed3..59ea156 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
@@ -11,7 +11,7 @@
 /**
  * Provides some basic helper functions for the edit Subscription page
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class SubscriptionHelper {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
index 3a80a22..ba6e363 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
@@ -15,7 +15,7 @@
  * This a resource loader for specific locales for internationalization,
  * provides some basic caching to prevent round trip disk access
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class ResourceLoader {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java b/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
index 2059b45..c92f5b6 100644
--- a/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
+++ b/juddi-rest-cxf/src/main/java/org/apache/juddi/api/impl/rest/UDDIInquiryJAXRS.java
@@ -41,7 +41,7 @@
  * the REST fans to access UDDI from a URL pattern This class will ONLY deploy
  * using the Apache CXF WS stack for REST (JAX-RS)
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 @Path(""/"")
 @Produces(""application/xml"")
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/AES.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/AES.java
index 74d7679..2b9a289 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/AES.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/AES.java
@@ -32,7 +32,7 @@
  * reinstantiates a AES key from the key bytes.</summary> The reinstantiated key
  * is used to initialize a AES cipher for encryption and decryption. source :
  * http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html
- *@author Alex O'Ree
+ *@author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class AES {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
index 5297c78..eea1c38 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/CrossSiteRequestForgeryException.java
@@ -18,7 +18,7 @@
 
 /**
  * Provides a very basic, no stack trace exception, useful for throwing at a browser without revealing any details 
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class CrossSiteRequestForgeryException extends Exception {
     //Parameterless Constructor
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
index 23cde3a..5363459 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/PostBackConstants.java
@@ -10,7 +10,7 @@
  * the rendering of a webpage or javascript and should thus be escaped sequences
  * of characters
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class PostBackConstants {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/StartupServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
index af04e4c..f4045fc 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/StartupServlet.java
@@ -12,7 +12,7 @@
 /**
  * This startup servlet's job is to generate an encryption key which will be used for encrypting
  * cached user credentials in the http session object
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class StartupServlet implements javax.servlet.ServletContextListener {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
index 8a9348c..5360b8d 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/UddiAdminHub.java
@@ -70,7 +70,7 @@
  * methods in the class trigger web service call outs. All callouts also support
  * expired UDDI tokens and will attempt to reauthenticate and retry the request.
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class UddiAdminHub {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
index fae3e3a..75ab40d 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Builders.java
@@ -42,7 +42,7 @@
  * This class provides functions for building UDDI entities from Http request
  * parameters
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class Builders {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
index 4f58628..dca892a 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/Printers.java
@@ -25,7 +25,7 @@
 /**
  * Provides very basic UDDI spec to String formats, mostly used for debugging
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class Printers {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
index e721ed3..59ea156 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/hub/builders/SubscriptionHelper.java
@@ -11,7 +11,7 @@
 /**
  * Provides some basic helper functions for the edit Subscription page
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class SubscriptionHelper {
 
"
juddi,12e024cf1f5dced9dc1926a7b58ea05739fd04ae,"JUDDI-637 updating source code docs
JUDDI-567 adding additional logging options

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516858 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 14:25:47,alexoree,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
index 3a80a22..ba6e363 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/webconsole/resources/ResourceLoader.java
@@ -15,7 +15,7 @@
  * This a resource loader for specific locales for internationalization,
  * provides some basic caching to prevent round trip disk access
  *
- * @author Alex O'Ree
+ * @author <a href=""mailto:alexoree@apache.org"">Alex O'Ree</a>
  */
 public class ResourceLoader {
 
"
juddi,e34e8300744295965f52aeeb840518dd2bb5de61,"JUDDI-637 adding additional docs for WADL2UDDI

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1516670 13f79535-47bb-0310-9956-ffa450edef68
",2013-08-23 00:47:26,alexoree,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
index 5d40405..65329ff 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WADL2UDDI.java
@@ -25,11 +25,8 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import javax.xml.bind.JAXB;
 import javax.xml.namespace.QName;
 import org.apache.commons.configuration.ConfigurationException;
@@ -53,28 +50,82 @@
 import org.apache.juddi.v3.client.config.UDDIKeyConvention;
 import org.apache.juddi.v3.client.mappings.wadl.Application;
 import org.apache.juddi.v3.client.mappings.wadl.Doc;
-import org.apache.juddi.v3.client.mappings.wadl.Resource;
 import org.apache.juddi.v3.client.mappings.wadl.Resources;
 import org.uddi.api_v3.AccessPoint;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
 import org.uddi.api_v3.BusinessService;
-import org.uddi.api_v3.BusinessServices;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.Description;
 import org.uddi.api_v3.InstanceDetails;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.Name;
-import org.uddi.api_v3.OverviewDoc;
-import org.uddi.api_v3.OverviewURL;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelInstanceDetails;
 import org.uddi.api_v3.TModelInstanceInfo;
-import org.w3c.dom.Element;
-import org.xml.sax.InputSource;
 
 /**
- * This class is incomplete
+ * This class converts a WADL document, web application description language into a
+ * structure that more or less works within the UDDI data structures.<br><br>
+ * <h1>Example Usage Scenario</h1>
+ * <pre>
+        Application app = WADL2UDDI.ParseWadl(new File(""A path to your file.wadl""));
+        List<URL> urls = WADL2UDDI.GetBaseAddresses(app);
+        URL url = urls.get(0);
+        String domain = url.getHost();
+        TModel keygen = UDDIClerk.createKeyGenator(""uddi:"" + domain + "":keygenerator"", domain, ""en"");
+        //save the keygen
+        SaveTModel stm = new SaveTModel();
+        stm.setAuthInfo(rootAuthToken.getAuthInfo());
+        stm.getTModel().add(keygen);
+        
+        properties.put(""keyDomain"", domain);
+        properties.put(""businessName"", domain);
+        properties.put(""serverName"", url.getHost());
+        properties.put(""serverPort"", url.getPort());
+        WADL2UDDI wadl2UDDI = new WADL2UDDI(null, new URLLocalizerDefaultImpl(), properties);
+       
+        BusinessService businessServices = wadl2UDDI.createBusinessService(new QName(""MyWasdl.namespace"", ""Servicename""), app);
+        Set<TModel> portTypeTModels = wadl2UDDI.createWADLPortTypeTModels(wsdlURL, app);
+        
+        //Since the service depends on the tModel, we have to save the tModels first
+        SaveTModel tms = new SaveTModel();
+
+        TModel[] tmodels = portTypeTModels.toArray(new TModel[0]);
+        for (int i = 0; i < tmodels.length; i++) {
+            System.out.println(tmodelPrinter.print(tmodels[i]));
+            tms.getTModel().add(tmodels[i]);
+        }
+
+
+        //important, you'll need to save your new tModels, or else saving the business/service may fail
+        publish.saveTModel(stm);
+
+        //finaly, we're ready to save all of the services defined in the WSDL
+        //again, we're creating a new business, if you have one already, look it up using the Inquiry getBusinessDetails
+
+        PrintUDDI<BusinessService> servicePrinter = new PrintUDDI<BusinessService>();
+        System.out.println(servicePrinter.print(businessServices));
+        
+        SaveBusiness sb = new SaveBusiness();
+        sb.setAuthInfo(rootAuthToken.getAuthInfo());
+        BusinessEntity be = new BusinessEntity();
+        be.setBusinessKey(businessServices.getBusinessKey());
+        be.getName().add(new Name());
+        //TODO, use some relevant here
+        be.getName().get(0).setValue(domain);
+        be.getName().get(0).setLang(""en"");
+        be.setBusinessServices(new BusinessServices());
+        be.getBusinessServices().getBusinessService().add(businessServices);
+        sb.getBusinessEntity().add(be);
+        PrintUDDI<SaveBusiness> sbp = new PrintUDDI<SaveBusiness>();
+        System.out.println(""Request "" + sbp.print(sb));
+        publish.saveBusiness(sb);
+
+        //and we're done
+        //Be sure to report any problems to the jUDDI JIRA bug tracker at 
+        //https://issues.apache.org/jira/browse/JUDDI
+</pre>
  *
  * @author Alex O'Ree
  */
"
juddi,1a54b3e2cb38b7c2b567a5ef18508e0b1ab4019b,"JUDDI-610 added queries for juddi-gui tmodelEditor.jsp to search for references to the tmodel (service, biz, binding)
JUDDI-579 fixed the WSDL import page to have the correct text
updated readme for some common build issues


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1508517 13f79535-47bb-0310-9956-ffa450edef68
",2013-07-30 16:52:14,alexoree,"diff --git a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
index f0b1ba1..5efd323 100644
--- a/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
+++ b/juddi-gui/src/main/java/org/apache/juddi/webconsole/hub/UddiHub.java
@@ -1687,7 +1687,10 @@
                     fb.setName(n);
                     break;
                 case tmodel:
-
+                    fb.setCategoryBag(new CategoryBag());
+                    KeyedReference kr2 = new KeyedReference();
+                    kr2.setTModelKey(parameters);
+                    fb.getCategoryBag().getKeyedReference().add(kr2);
                     //TODO
                     break;
                 case uid:
"
juddi,35624f39be751f4bcb66c1c7034fe256bbc1ee60,"Adding an expanded LDAP Authenticator which uses a simple string formatter for usage with Common Names, instead of DNs
Adding configuration items for the LdapSimpleAuthenticator, some values were hard coded
This is for JUDDI-405

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1488044 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-30 23:05:16,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index 4045e83..788ab7d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -1,15 +1,36 @@
 package org.apache.juddi.config;
 
 import org.apache.juddi.v3.auth.CryptedXMLDocAuthenticator;
+import org.apache.juddi.v3.auth.LdapExpandedAuthenticator;
+import org.apache.juddi.v3.auth.LdapSimpleAuthenticator;
 import org.apache.juddi.v3.auth.MD5XMLDocAuthenticator;
 
+/**
+ * This defines constants used for accessing information from jUDDI's juddiv3.properties file
+ * @author various
+ */
 public interface Property {
     public final static String JDDU_SUBSCRIPTION_MAXENTITIES=""juddi.subscription.maxentities"";
     public final static String JUDDI_ROOT_PUBLISHER = ""juddi.root.publisher"";
     public final static String JUDDI_LOAD_INSTALL_DATA = ""juddi.load.install.data"";
     public final static String JUDDI_PERSISTENCEUNIT_NAME = ""juddi.persistenceunit.name"";
     public final static String JUDDI_AUTHENTICATOR = ""juddi.authenticator"";
+    /**
+     * @see LdapSimpleAuthenticator
+     */
     public final static String JUDDI_AUTHENTICATOR_URL = ""juddi.authenticator.url"";
+    /**
+     * @see LdapSimpleAuthenticator
+     */
+    public final static String JUDDI_AUTHENTICATOR_INITIAL_CONTEXT = ""juddi.authenticator.initialcontext"";
+    /**
+     * @see LdapSimpleAuthenticator
+     */
+    public final static String JUDDI_AUTHENTICATOR_STYLE = ""juddi.authenticator.style"";
+    /**
+     * @see LdapExpandedAuthenticator
+     */
+    public final static String JUDDI_AUTHENTICATOR_LDAP_EXPANDED_STR= ""juddi.authenticator.ldapexp"";
     public final static String JUDDI_CONFIGURATION_RELOAD_DELAY = ""juddi.configuration.reload.delay"";
     public final static String JUDDI_LOCALE = ""juddi.locale"";
     public final static String JUDDI_OPERATOR_EMAIL_ADDRESS = ""juddi.operatorEmailAddress"";
"
juddi,35624f39be751f4bcb66c1c7034fe256bbc1ee60,"Adding an expanded LDAP Authenticator which uses a simple string formatter for usage with Common Names, instead of DNs
Adding configuration items for the LdapSimpleAuthenticator, some values were hard coded
This is for JUDDI-405

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1488044 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-30 23:05:16,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index f4d7b20..b97eb77 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -24,7 +24,6 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 
-import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -42,14 +41,14 @@
 
 /**
  * This is a implementation of jUDDI's Authenticator interface, that uses the
- * LDAP.
+ * LDAP. z
  * 
  * Usage:
  * 
  * To use this class you must add the following properties to the
  * juddiv3.properties file:
  * 
- * # The JBoss Authenticator
+ * # The LDAP Authenticator
  * juddi.authenticator=org.apache.juddi.v3.auth.LdapSimpleAuthenticator
  * 
  * # LDAP authentication URL
@@ -64,17 +63,23 @@
  *
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  * @author <a href=""mailto:gunnlaugursig@gmail.com"">Gunnlaugur Sigurðsson</a>
+ * @author Alex O'Ree
+ * 
+ * 
+ * @since 3.2, all values are now configurable
+ * @see Property.JUDDI_AUTHENTICATOR_INITIAL_CONTEXT, JUDDI_AUTHENTICATOR_STYLE
  */
 public class LdapSimpleAuthenticator implements Authenticator {
     private Log logger = LogFactory.getLog(this.getClass());
 
     private LdapContext ctx = null;
+    //this needs to be a Hashtable, HashMap won't work here
     private Hashtable<String, String> env = null;
     private String url = null;
     
     private static final String DEFAULT_URL = ""ldap://localhost:389"";
     
-    public LdapSimpleAuthenticator() throws NamingException {
+    public LdapSimpleAuthenticator() throws NamingException, ConfigurationException {
     	String authURL = null;
     	try {
     		authURL = AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_URL, DEFAULT_URL);
@@ -85,14 +90,14 @@
     	init(authURL);
     }
     
-    public LdapSimpleAuthenticator(String url) throws NamingException {
+    public LdapSimpleAuthenticator(String url) throws NamingException, ConfigurationException {
     	init(url);
     }
 
-    public void init(String url) throws NamingException {
+    public void init(String url) throws NamingException, ConfigurationException {
         env = new Hashtable<String, String>();
-        env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
-        env.put(Context.SECURITY_AUTHENTICATION, ""simple"");
+        env.put(Context.INITIAL_CONTEXT_FACTORY, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_INITIAL_CONTEXT, ""com.sun.jndi.ldap.LdapCtxFactory""));
+        env.put(Context.SECURITY_AUTHENTICATION, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_STYLE, ""simple""));
         env.put(Context.PROVIDER_URL, url); // organization ldap url, example ldap://localhost:389
 
         this.url = url;
@@ -114,19 +119,23 @@
         boolean isLdapUser = false;
         try {
             env = new Hashtable<String, String>();
-            env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
-            env.put(Context.SECURITY_AUTHENTICATION, ""simple"");
+            env.put(Context.INITIAL_CONTEXT_FACTORY, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_INITIAL_CONTEXT, ""com.sun.jndi.ldap.LdapCtxFactory""));
+            env.put(Context.SECURITY_AUTHENTICATION, AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_STYLE, ""simple""));
             env.put(Context.PROVIDER_URL, url); // organization ldap url, example ldap://localhost:389
             env.put(Context.SECURITY_PRINCIPAL, authorizedName);
-        	env.put(Context.SECURITY_CREDENTIALS, cred);
+            env.put(Context.SECURITY_CREDENTIALS, cred);
             ctx = new InitialLdapContext(env, null);
             isLdapUser = true;
             logger.info(authorizedName + "" is authenticated"");
            
-        } catch (NamingException e) {
+        } catch (ConfigurationException e) {
+            logger.error(authorizedName + "" is not authenticated"", e);
+            throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
+        }
+        catch (NamingException e) {
             logger.error(authorizedName + "" is not authenticated"");
             throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
-        } finally {
+        }finally {
             try {
                 ctx.close();
             } catch (NamingException e) {
"
juddi,8df5a041fc173367b6a9f813919a49679896aa04,"JUDDI-606 adding more tests for publisher assertion subscription results, adding UDDI java documentation to CompletionStatus.java

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1485899 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-23 23:36:44,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index 136bac1..70ef55a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -219,7 +219,7 @@
             if (filterCount == 0) {
                 throw new ValueNotAllowedException(new ErrorMessage(""errors.subscription.BlankFilter""));
             }
-
+            //the spec defines subscription filters as a switch, exactly one is required
             if (filterCount > 1) {
                 throw new ValueNotAllowedException(new ErrorMessage(""errors.subscription.TooManyFilters"", String.valueOf(filterCount)));
             }
"
juddi,8df5a041fc173367b6a9f813919a49679896aa04,"JUDDI-606 adding more tests for publisher assertion subscription results, adding UDDI java documentation to CompletionStatus.java

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1485899 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-23 23:36:44,alexoree,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/CompletionStatus.java b/uddi-ws/src/main/java/org/uddi/api_v3/CompletionStatus.java
index b7fda63..96276e6 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/CompletionStatus.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/CompletionStatus.java
@@ -27,7 +27,39 @@
 
 /**
  * <p>Java class for completionStatus.
- * 
+ * <p class=""MsoBodyText"" style=""margin-left:1.0in;text-indent:-.25in""><span style=""font-family:Symbol"">·<span style=""font:7.0pt &quot;Times New Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</span></span><b><i>completionStatus</i></b>: This optional argument lets the
+publisher restrict the result set to only those relationships that have the
+specified status value.&nbsp; Assertion status is a calculated result based on the
+sum total of assertions made by the individuals that control specific business
+registrations.&nbsp; When no completionStatus element is provided, all assertions
+involving the businesses that the publisher owns are retrieved, without regard
+to the completeness of the relationship.&nbsp; completionStatus MUST contain one of
+the following values</p>
+
+<p class=""MsoNormal"" style=""margin-left:1.5in;text-indent:-.25in""><span style=""font-family:&quot;Courier New&quot;"">o<span style=""font:7.0pt &quot;Times New Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</span></span><b>status:complete</b>: Passing this value causes only the
+publisher assertions that are complete to be returned.&nbsp; Each businessEntity
+listed in assertions that are complete has a visible relationship that directly
+reflects the data in a complete assertion (as described in the
+find_relatedBusinesses API).</p>
+
+<p class=""MsoNormal"" style=""margin-left:1.5in;text-indent:-.25in""><span style=""font-family:&quot;Courier New&quot;"">o<span style=""font:7.0pt &quot;Times New Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</span></span><b>status:toKey_incomplete</b>: Passing this value causes only
+those publisher assertions where the party who controls the businessEntity
+referenced by the toKey value in an assertion, has not made a matching
+assertion, to be listed.</p>
+
+<p class=""MsoNormal"" style=""margin-left:1.5in;text-indent:-.25in""><span style=""font-family:&quot;Courier New&quot;"">o<span style=""font:7.0pt &quot;Times New Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</span></span><b>status:fromKey_incomplete</b>: Passing this value causes only
+those publisher assertions where the party who controls the businessEntity
+referenced by the fromKey value in an assertion, has not made a matching
+assertion, to be listed.</p>
+
+<p class=""MsoNormal"" style=""margin-left:1.5in;text-indent:-.25in""><span style=""font-family:&quot;Courier New&quot;"">o<span style=""font:7.0pt &quot;Times New Roman&quot;"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+</span></span><b>status:both_incomplete</b>. This status value, however, is only
+applicable to the context of UDDI subscription and SHOULD not be present as
+part of a response to a get_assertionStatusReport request.</p>  
  * <p>The following schema fragment specifies the expected content contained within this class.
  * <p>
  * <pre>
@@ -48,12 +80,25 @@
 @XmlEnum
 public enum CompletionStatus implements Serializable{
 
+    /**
+     * causes only the publisher assertions that are complete to be returned
+     */
     @XmlEnumValue(""status:complete"")
     STATUS_COMPLETE(""status:complete""),
+    /**
+     * causes only those publisher assertions where the party who controls the businessEntity referenced by the fromKey value in an assertion, has not made a matching assertion, to be listed.
+     */
     @XmlEnumValue(""status:fromKey_incomplete"")
     STATUS_FROM_KEY_INCOMPLETE(""status:fromKey_incomplete""),
+    /**
+     *  causes only those publisher assertions where the party who controls the businessEntity referenced by the toKey value in an assertion, has not made a matching assertion, to be listed.
+     */
     @XmlEnumValue(""status:toKey_incomplete"")
     STATUS_TO_KEY_INCOMPLETE(""status:toKey_incomplete""),
+    /**
+     * only applicable to the context of UDDI subscription and SHOULD not be present as part of a response to a get_assertionStatusReport request.
+     *  When appearing in an assertionStatusItem of a subscriptionResultsList, status:both_incomplete indicates that the publisher assertion embedded in the <b>assertionStatusItem has been deleted from both ends. </b>
+     */
     @XmlEnumValue(""status:both_incomplete"")
     STATUS_BOTH_INCOMPLETE(""status:both_incomplete"");
     private final String value;
"
juddi,a831b56523949f3f8b6ef18a94ad6ddcb8855291,"JIRA JUDDI-616 Adding changes to help fix build issue for non oracle jres

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1485477 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-22 22:49:45,alexoree,"diff --git a/juddi-examples/uddi-createbulk/src/uddi/createbulk/UddiCustodyTransfer.java b/juddi-examples/uddi-createbulk/src/uddi/createbulk/UddiCustodyTransfer.java
index 11a4234..396148c 100644
--- a/juddi-examples/uddi-createbulk/src/uddi/createbulk/UddiCustodyTransfer.java
+++ b/juddi-examples/uddi-createbulk/src/uddi/createbulk/UddiCustodyTransfer.java
@@ -18,6 +18,9 @@
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.uddi.api_v3.*;
+import org.uddi.custody_v3.KeyBag;
+import org.uddi.custody_v3.TransferEntities;
+import org.uddi.custody_v3.TransferToken;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.Subscription;
 import org.uddi.sub_v3.SubscriptionFilter;
@@ -34,12 +37,10 @@
 public class UddiCustodyTransfer {
 
     private static UDDISecurityPortType security = null;
-    private static JUDDIApiPortType juddiApi = null;
     private static UDDIPublicationPortType publish = null;
     private static UDDIInquiryPortType uddiInquiryService = null;
     private static UDDISubscriptionPortType uddiSubscriptionService = null;
-    private static UDDICustodyTransferPortType custodyTransferPortTypeSOURCE = null;
-    private static UDDICustodyTransferPortType custodyTransferPortTypeDEST = null;
+    private static UDDICustodyTransferPortType custodyTransferPortType = null;
     boolean callbackRecieved = false;
 
     public UddiCustodyTransfer() {
@@ -54,87 +55,11 @@
             Transport transport = clerkManager.getTransport(""default"");
             // Now you create a reference to the UDDI API
             security = transport.getUDDISecurityService();
-            juddiApi = transport.getJUDDIApiService();
+
             publish = transport.getUDDIPublishService();
             uddiInquiryService = transport.getUDDIInquiryService();
             uddiSubscriptionService = transport.getUDDISubscriptionService();
-            custodyTransferPortTypeSOURCE = transport.getUDDICustodyTransferService();
-            custodyTransferPortTypeDEST = transport.getUDDICustodyTransferService();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void publish() {
-        try {
-            // Setting up the values to get an authentication token for the 'root' user ('root' user has admin privileges
-            // and can save other publishers).
-
-            /*   
-             * @param authInfo IN
-             * @param keyBag IN
-             * @param nodeID OUT
-             * @param expirationTime OUT
-             * @param opaqueToken OUT
-             */
-            custodyTransferPortTypeDEST.getTransferToken(null, null, null, null, null);
-
-
-            GetAuthToken getAuthTokenRoot = new GetAuthToken();
-            getAuthTokenRoot.setUserID(""root"");
-            getAuthTokenRoot.setCred(""root"");
-
-            // Making API call that retrieves the authentication token for the 'root' user.
-            AuthToken rootAuthToken = security.getAuthToken(getAuthTokenRoot);
-            System.out.println(""root AUTHTOKEN = "" + rootAuthToken.getAuthInfo());
-
-
-            getAuthTokenRoot = new GetAuthToken();
-            getAuthTokenRoot.setUserID(""uddi"");
-            getAuthTokenRoot.setCred(""uddi"");
-
-            // Making API call that retrieves the authentication token for the 'root' user.
-            AuthToken uddiAuthToken = security.getAuthToken(getAuthTokenRoot);
-            System.out.println(""uddi AUTHTOKEN = "" + rootAuthToken.getAuthInfo());
-
-
-
-
-
-
-            DatatypeFactory df = DatatypeFactory.newInstance();
-            GregorianCalendar gcal = new GregorianCalendar();
-            gcal.setTimeInMillis(System.currentTimeMillis());
-            XMLGregorianCalendar xcal = df.newXMLGregorianCalendar(gcal);
-
-            // Creating the parent business entity that will contain our service.
-            BusinessEntity myBusEntity = new BusinessEntity();
-            Name myBusName = new Name();
-            myBusName.setLang(""en"");
-            myBusName.setValue(""My Business Dept 1"" + "" "" + xcal.toString());
-            myBusEntity.getName().add(myBusName);
-
-            // Adding the business entity to the ""save"" structure, using our publisher's authentication info and saving away.
-            SaveBusiness sb = new SaveBusiness();
-            sb.getBusinessEntity().add(myBusEntity);
-            sb.setAuthInfo(rootAuthToken.getAuthInfo());
-            BusinessDetail bd = publish.saveBusiness(sb);
-            String myBusKey1 = bd.getBusinessEntity().get(0).getBusinessKey();
-            System.out.println(""myBusiness key:  "" + myBusKey1);
-
-            Holder<List<Subscription>> subs = new Holder<List<Subscription>>();
-            subs.value = new ArrayList<Subscription>();
-            Subscription sub = new Subscription();
-            sub.setMaxEntities(20);
-            sub.setSubscriptionFilter(new SubscriptionFilter());
-            sub.getSubscriptionFilter().setGetBusinessDetail(new GetBusinessDetail());
-            sub.getSubscriptionFilter().getGetBusinessDetail().getBusinessKey().add(myBusKey1);
-            sub.getSubscriptionFilter().setGetAssertionStatusReport(new GetAssertionStatusReport());
-            //  sub.getSubscriptionFilter().s
-            //uddi:juddi.apache.org:72619170-d391-41cb-99a0-238cb0b76eb9
-            subs.value.add(sub);
-            uddiSubscriptionService.saveSubscription(rootAuthToken.getAuthInfo(), subs);
-
+            custodyTransferPortType = transport.getUDDICustodyTransferService();
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -142,40 +67,17 @@
 
     public static void main(String args[]) throws Exception {
         UddiCustodyTransfer sp = new UddiCustodyTransfer();
-        sp.SetupAndRegisterCallback();
+        sp.Transfer();
         //sp.publish();
     }
 
-    private void SetupAndRegisterCallback() throws Exception {
-        String url = ""http://localhost:7777/UDDI_SUB_CALLBACK"";
-
+    private void Transfer() throws Exception {
 
         DatatypeFactory df = DatatypeFactory.newInstance();
         GregorianCalendar gcal = new GregorianCalendar();
         gcal.setTimeInMillis(System.currentTimeMillis());
         XMLGregorianCalendar xcal = df.newXMLGregorianCalendar(gcal);
 
-        //?? note, you won't get subscription updates if you own the entity, at least with juddi
-
-
-        //in this case, the user ""root"" is subscribing to a business entity published by the user ""uddi""
-        //""uddi"" then updates the item and then logically ""root"" should be notified
-        //before this happens ""root"" needs to publish a business, service and binding template that is used for the 
-        //subscription callback
-
-        /*
-         * so the order of operation is
-         * 1) uddi publisher's an entity 
-         * 2) root wants updates on uddi's entity
-         * 3) root starts a subscription listener service to process updates
-         * 4) root creates a business and service with a bindingtemplate with the access point value = the the subscription listener's address
-         * 5) root creates a subscription
-         * 6) uddi updates the entity
-         * 7) root's sub listener is notified (hopefully)
-         * 
-         */
-
-
         GetAuthToken getAuthTokenRoot = new GetAuthToken();
         getAuthTokenRoot.setUserID(""root"");
         getAuthTokenRoot.setCred(""root"");
@@ -197,93 +99,88 @@
         BusinessEntity myBusEntity = new BusinessEntity();
         Name myBusName = new Name();
         myBusName.setLang(""en"");
-        myBusName.setValue(""User UDDI's Business"" + "" "" + xcal.toString());
+        myBusName.setValue(""UDDI's Business"" + "" "" + xcal.toString());
         myBusEntity.getName().add(myBusName);
+        myBusEntity.setBusinessServices(new BusinessServices());
+        myBusEntity.getBusinessServices().getBusinessService().add(CreateBusiness(""UDDI""));
         SaveBusiness sb = new SaveBusiness();
         sb.getBusinessEntity().add(myBusEntity);
         sb.setAuthInfo(uddiAuthToken.getAuthInfo());
         BusinessDetail bd = publish.saveBusiness(sb);
 
-        String keyRootSubscribesTo = bd.getBusinessEntity().get(0).getBusinessKey();
-        System.out.println(""UDDI's business saved as biz key "" + keyRootSubscribesTo);
-        BusinessEntity uddisBusiness = bd.getBusinessEntity().get(0);
+        String keyUddiBiz = bd.getBusinessEntity().get(0).getBusinessKey();
+//        String keyUddiBizSvc = bd.getBusinessEntity().get(0).getBusinessServices().getBusinessService().get(0).getServiceKey();
 
-        //reset
-        List<Subscription> subscriptions = uddiSubscriptionService.getSubscriptions(rootAuthToken.getAuthInfo());
-        DeleteSubscription ds = new DeleteSubscription();
-        ds.setAuthInfo(rootAuthToken.getAuthInfo());
-        for (int i = 0; i < subscriptions.size(); i++) {
-            ds.getSubscriptionKey().add(subscriptions.get(i).getSubscriptionKey());
-        }
-        if (!ds.getSubscriptionKey().isEmpty()) {
-            System.out.println(""removing "" + ds.getSubscriptionKey().size() + "" old subscriptions"");
-            uddiSubscriptionService.deleteSubscription(ds);
-        }
 
-        // Creating the parent business entity that will contain our service.
+
         myBusEntity = new BusinessEntity();
         myBusName = new Name();
         myBusName.setLang(""en"");
-        myBusName.setValue(""My Business Dept 1"" + "" "" + xcal.toString());
+        myBusName.setValue(""Root's Business"" + "" "" + xcal.toString());
         myBusEntity.getName().add(myBusName);
         myBusEntity.setBusinessServices(new BusinessServices());
-        BusinessService bs = new BusinessService();
-        bs.getName().add(new Name());
-        bs.getName().get(0).setValue(""my callback endpoint"");
-
-        bs.setBindingTemplates(new BindingTemplates());
-        BindingTemplate bt = new BindingTemplate();
-        //bt.setCategoryBag(new CategoryBag());
-        //   KeyedReference kr = new KeyedReference();
-        //         kr.setTModelKey(UDDIConstants.);
-        // bt.getCategoryBag().getKeyedReference().add(kr);
-        bt.setAccessPoint(new AccessPoint());
-        bt.getAccessPoint().setValue(url);
-        bt.getAccessPoint().setUseType(""endPoint"");
-        bs.getBindingTemplates().getBindingTemplate().add(bt);
-
-
-        myBusEntity.getBusinessServices().getBusinessService().add(bs);
-        // Adding the business entity to the ""save"" structure, using our publisher's authentication info and saving away.
+        myBusEntity.getBusinessServices().getBusinessService().add(CreateBusiness(""root""));
         sb = new SaveBusiness();
         sb.getBusinessEntity().add(myBusEntity);
         sb.setAuthInfo(rootAuthToken.getAuthInfo());
         bd = publish.saveBusiness(sb);
 
-        String callbackBindingTemplate = bd.getBusinessEntity().get(0).getBusinessServices().getBusinessService().get(0).getBindingTemplates().getBindingTemplate().get(0).getBindingKey();
-        System.out.println(""myBusiness key:  "" + bd.getBusinessEntity().get(0).getBusinessKey());
-        System.out.println(""callback binding template key:  "" + callbackBindingTemplate);
+        String keyRootBiz = bd.getBusinessEntity().get(0).getBusinessKey();
+        //      String keyRootBizSvc = bd.getBusinessEntity().get(0).getBusinessServices().getBusinessService().get(0).getServiceKey();
+        KeyBag kb = new KeyBag();
+        kb.getKey().add(keyRootBiz);
 
-        System.out.println(""i'll stay awake until someone kills me"");
+        Holder<String> nodeidOUT = new Holder<String>();
+        Holder<XMLGregorianCalendar> expiresOUT = new Holder<XMLGregorianCalendar>();
+        Holder<byte[]> tokenOUT = new Holder<byte[]>();
+        custodyTransferPortType.getTransferToken(rootAuthToken.getAuthInfo(), kb, nodeidOUT, expiresOUT, tokenOUT);
 
-        Holder<List<Subscription>> subscription = new Holder<List<Subscription>>();
-        subscription.value = new ArrayList<Subscription>();
-        Subscription sub = new Subscription();
-        sub.setBindingKey(callbackBindingTemplate);
-        //this is required
-        sub.setNotificationInterval(df.newDuration(0));
-        sub.setSubscriptionFilter(new SubscriptionFilter());
-        sub.getSubscriptionFilter().setGetBusinessDetail(new GetBusinessDetail());
-        sub.getSubscriptionFilter().getGetBusinessDetail().setAuthInfo(rootAuthToken.getAuthInfo());
-        sub.getSubscriptionFilter().getGetBusinessDetail().getBusinessKey().add(keyRootSubscribesTo);
-        subscription.value.add(sub);
-        uddiSubscriptionService.saveSubscription(rootAuthToken.getAuthInfo(), subscription);
+        TransferEntities te = new TransferEntities();
+        te.setAuthInfo(uddiAuthToken.getAuthInfo());
+        te.setKeyBag(kb);
+        TransferToken tt = new TransferToken();
+        tt.setExpirationTime(expiresOUT.value);
+        tt.setNodeID(nodeidOUT.value);
+        tt.setOpaqueToken(tokenOUT.value);
+        te.setTransferToken(tt);
 
+        custodyTransferPortType.transferEntities(te);
 
-        //ok now we're ready to mess around with the user's ""uddi"" business
-        //in this case, we're just setting the lang
-        uddisBusiness.getName().get(0).setLang(""en"");
-        sb = new SaveBusiness();
-        sb.setAuthInfo(uddiAuthToken.getAuthInfo());
-        sb.getBusinessEntity().add(uddisBusiness);
-        publish.saveBusiness(sb);
-
-        long timer = 310000;
-        while (timer > 0) {
-            Thread.sleep(5000);
-            timer = timer - 5000;
+        //confirm the transfer
+        GetOperationalInfo go = new GetOperationalInfo();
+        go.setAuthInfo(rootAuthToken.getAuthInfo());
+        go.getEntityKey().add(keyRootBiz);
+        go.getEntityKey().add(keyUddiBiz);
+        OperationalInfos operationalInfo = uddiInquiryService.getOperationalInfo(go);
+        boolean ok = false;
+        for (int i = 0; i < operationalInfo.getOperationalInfo().size(); i++) {
+            if (operationalInfo.getOperationalInfo().get(i).getEntityKey().equalsIgnoreCase(keyRootBiz)) {
+                if (operationalInfo.getOperationalInfo().get(i).getAuthorizedName().equalsIgnoreCase(""root"")) {
+                    //no suprise here
+                }
+            } else if (operationalInfo.getOperationalInfo().get(i).getEntityKey().equalsIgnoreCase(keyUddiBiz)) {
+                if (operationalInfo.getOperationalInfo().get(i).getAuthorizedName().equalsIgnoreCase(""uddi"")) {
+                    //success
+                    ok = true;
+                }
+            } else {
+                System.out.println(""unexpected key"");
+            }
         }
 
-        //TODO clean up all the crap we just made
+        System.out.println(""Transfer "" + (ok ? ""success"" : "" failed""));
+    }
+
+    private BusinessService CreateBusiness(String root) {
+        BusinessService bs = new BusinessService();
+        bs.getName().add(new Name());
+        bs.getName().get(0).setValue(root + ""'s callback endpoint"");
+        bs.setBindingTemplates(new BindingTemplates());
+        BindingTemplate bt = new BindingTemplate();
+        bt.setAccessPoint(new AccessPoint());
+        bt.getAccessPoint().setValue(""http://localhost:9999/"" + root);
+        bt.getAccessPoint().setUseType(""endPoint"");
+        bs.getBindingTemplates().getBindingTemplate().add(bt);
+        return bs;
     }
 }
"
juddi,a831b56523949f3f8b6ef18a94ad6ddcb8855291,"JIRA JUDDI-616 Adding changes to help fix build issue for non oracle jres

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1485477 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-22 22:49:45,alexoree,"diff --git a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
index 7441315..e103b34 100644
--- a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
+++ b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
@@ -191,8 +191,8 @@
 
                 String strCfg = System.getProperty(""user.home"") + File.separator
                         + ""jdk6-nss-mozilla.cfg"";
-                Provider p1 = new sun.security.pkcs11.SunPKCS11(strCfg);
-                Security.addProvider(p1);
+             //   Provider p1 = new sun.security.pkcs11.SunPKCS11(strCfg);
+             //   Security.addProvider(p1);
                 keyStore = KeyStore.getInstance(""PKCS11"");
                 keyStore.load(null, ""password"".toCharArray());
             } catch (Exception ex) {
"
juddi,99166ef4be6cea1ca30e24333a2a359d6b380219,"JUDDI-615 fixed
Project description renamed for the disg applet

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1485003 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-21 22:47:29,alexoree,"diff --git a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
index 44c708b..7441315 100644
--- a/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
+++ b/juddi-gui-dsig/src/main/java/org/apache/juddi/gui/dsig/XmlSignatureApplet.java
@@ -71,9 +71,11 @@
 
 /**
  * Provides a Java web applet that digitally signs UDDI xml
+ *
  * @author Alex O'Ree
  */
 public class XmlSignatureApplet extends java.applet.Applet {
+
     private static final long serialVersionUID = 1L;
 
     /**
@@ -149,6 +151,7 @@
 
     }
 
+    
     public String getStringFromDoc(org.w3c.dom.Document doc) {
         DOMImplementationLS domImplementation = (DOMImplementationLS) doc.getImplementation();
         LSSerializer lsSerializer = domImplementation.createLSSerializer();
@@ -233,6 +236,7 @@
             jList1.setSelectedIndex(0);
         }
     }
+    
     public final static String XML_DIGSIG_NS = ""http://www.w3.org/2000/09/xmldsig#"";
 
     private void signDOM(Node node, PrivateKey privateKey, Certificate origCert) {
@@ -292,7 +296,20 @@
 
     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         // TODO add your handling code here:
-
+        String signedXml = ""error!"";
+        try {
+            if (keyStore == null || keyStore.size() == 0) {
+                signedXml = ""Unforunately, it looks as if you don't have any certificates to choose from."";
+                return;
+            }
+        } catch (Exception ex) {
+            signedXml = ""Unforunately, it looks as if you don't have any certificates to choose from."";
+            return;
+        }
+        if (jList1.getSelectedValue() == null) {
+            signedXml = ""You must pick a certificate first"";
+            return;
+        }
         JSObject window = JSObject.getWindow(this);
         Object object2 = window.call(""getBrowserName"", null);
         Object object1 = window.call(""getOsName"", null);
@@ -330,7 +347,7 @@
             }
         }
 
-        String signedXml = ""error!"";
+
         if (j != null) {
             try {
                 //sign it
@@ -348,7 +365,7 @@
                 signedXml = sw.toString();
             } catch (Exception ex) {
                 Logger.getLogger(XmlSignatureApplet.class.getName()).log(Level.SEVERE, null, ex);
-                signedXml = ex.getMessage();
+                signedXml = ""Sorry I couldn't sign the data. "" + ex.getMessage();
             }
         } else {
             signedXml = ""Unable to determine which type of object that we're signing"";
"
juddi,12f9ccb3306f59572d02065d38a79899fbe3b46e,"adding additional validation for subscription definitions, specifically duration, expires, max records. JIRA JUDDI-595 partial
updating some assertion related pages on the gui, users can now approve assertions 
adding unit tests for JIRA JUDDI-597


git-svn-id: https://svn.apache.org/repos/asf/juddi/branches/juddi-3.2.x@1479705 13f79535-47bb-0310-9956-ffa450edef68
",2013-05-06 22:25:24,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index 8f9157b..dd0551d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -117,7 +117,11 @@
                         throw new ValueNotAllowedException(new ErrorMessage(""errors.subscription.maxrecordstoosmall""));
                     }
                 }
-		
+		if (subscription.getNotificationInterval()==null)
+                {
+                    //TODO default value?
+                     throw new ValueNotAllowedException(new ErrorMessage(""errors.subscription.notificationintervalnotdefined""));
+                }
 		validateSubscriptionFilter(subscription.getSubscriptionFilter(), entityExists);
 	}
         /**
"
juddi,b25cdfd1aa821658616576d88cbda14c40dd8081,"JUDDI-591 adding authentication support

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1477156 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-29 15:39:22,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index ae7853c..bbd4939 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -92,9 +92,9 @@
 			//TODO maybe update the user's bindingTemplate with the error?, and also validate setting onsave
 		} else {
 			notificationEmailAddress = accessPointUrl.substring(accessPointUrl.indexOf("":"")+1);
-			if (Boolean.getBoolean(properties.getProperty(""mail.smtp.starttls.enable""))) {
-				final String username = properties.getProperty(""mail.smtp.username"");
-				final String password = properties.getProperty(""mail.smtp.password"");
+			if (Boolean.getBoolean(getEMailProperties().getProperty(""mail.smtp.starttls.enable""))) {
+				final String username = getEMailProperties().getProperty(""mail.smtp.username"");
+				final String password = getEMailProperties().getProperty(""mail.smtp.password"");
 				session = Session.getInstance(getEMailProperties(), new javax.mail.Authenticator() {
 					protected PasswordAuthentication getPasswordAuthentication() {
 						return new PasswordAuthentication(username, password);
"
juddi,6e3f585625ebf90b20ca4bdad482319d78c5c91b,"JUDDI-591 adding authentication support

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1477147 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-29 15:21:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index fbf7848..ae7853c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -8,6 +8,7 @@
 
 import javax.mail.Address;
 import javax.mail.Message.RecipientType;
+import javax.mail.PasswordAuthentication;
 import javax.mail.Session;
 import javax.mail.Transport;
 import javax.mail.internet.InternetAddress;
@@ -37,7 +38,7 @@
 	
 	private final static String[] mailProps = {""mail.smtp.from"", ""mail.smtp.host"", ""mail.smtp.port"", 
 		""mail.smtp.socketFactory.class"", ""mail.smtp.socketFactory.fallback"", ""mail.smtp.starttls.enable"",
-		""mail.smtp.socketFactory.port"",""mail.smtp.auth""};
+		""mail.smtp.socketFactory.port"",""mail.smtp.auth"",""mail.smtp.user"",""mail.smtp.password""};
 	
 	protected Properties getEMailProperties() throws ConfigurationException {
 		if (properties==null) {
@@ -88,10 +89,20 @@
 		if (!accessPointUrl.startsWith(""mailto:"")) {
 			log.warn(""smtp accessPointUrl for bindingTemplate "" + bindingTemplate.getEntityKey() + 
 					"" should start with 'mailto'"");
-			//TODO maybe update the user's bindingTemplate with the error?
+			//TODO maybe update the user's bindingTemplate with the error?, and also validate setting onsave
 		} else {
 			notificationEmailAddress = accessPointUrl.substring(accessPointUrl.indexOf("":"")+1);
-			session = Session.getInstance(getEMailProperties());
+			if (Boolean.getBoolean(properties.getProperty(""mail.smtp.starttls.enable""))) {
+				final String username = properties.getProperty(""mail.smtp.username"");
+				final String password = properties.getProperty(""mail.smtp.password"");
+				session = Session.getInstance(getEMailProperties(), new javax.mail.Authenticator() {
+					protected PasswordAuthentication getPasswordAuthentication() {
+						return new PasswordAuthentication(username, password);
+					}
+				});
+			} else {
+				session = Session.getInstance(getEMailProperties());
+			}
 		}
 	}
 
"
juddi,aaa45c32f01fb53458c5a039835257ed48ea0ee8,"Adding fix for JIRA JUDDI-597, typo correction

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1471094 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-23 18:56:55,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
index 08af7c1..813fd8c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
@@ -35,7 +35,7 @@
 					"" should start with 'http' or 'https'"");
 		}
 		//fix for JIRA JUDDI-597
-		accessPointUrl = bindingTemplate.getAccessPointUrl().toLowerCase();
+		accessPointUrl = bindingTemplate.getAccessPointUrl();
 		if (AccessPointType.WSDL_DEPLOYMENT.toString().equalsIgnoreCase(bindingTemplate.getAccessPointType())) {
 			//WSDL deployment type
 			//TODO, let user override the SUBSCRIPTION_LISTENER_SERVICE setting
"
juddi,0b78b2a262b8b7bd64b08e20b8e1db000531c487,"Adding fix for JIRA JUDDI-597

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1471093 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-23 18:56:03,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
index a6b002f..08af7c1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
@@ -34,6 +34,8 @@
 			log.warn(""http accessPointUrl for bindingTemplate "" + bindingTemplate.getEntityKey() + 
 					"" should start with 'http' or 'https'"");
 		}
+		//fix for JIRA JUDDI-597
+		accessPointUrl = bindingTemplate.getAccessPointUrl().toLowerCase();
 		if (AccessPointType.WSDL_DEPLOYMENT.toString().equalsIgnoreCase(bindingTemplate.getAccessPointType())) {
 			//WSDL deployment type
 			//TODO, let user override the SUBSCRIPTION_LISTENER_SERVICE setting
"
juddi,a9e520d6d64e5a5c57b71d00c984c2c9abf49149,"JUDDI-496, specifying UTF-8 when sending email

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470785 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-23 02:44:23,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index 2fde660..fbf7848 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -108,7 +108,7 @@
 				message.setFrom(new InternetAddress(getEMailProperties().getProperty(""mail.smtp.from"", ""jUDDI"")));
 				//maybe nice to use a template rather then sending raw xml.
 				String subscriptionResultXML = JAXBMarshaller.marshallToString(body, JAXBMarshaller.PACKAGE_SUBSCR_RES);
-				message.setText(subscriptionResultXML);
+				message.setText(subscriptionResultXML, ""UTF-8"");
 				message.setSubject(""UDDI Subscription Notification for subscription "" 
 						+ body.getSubscriptionResultsList().getSubscription().getSubscriptionKey());
 				Transport.send(message);
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 2e2b171..f13f2f0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -75,9 +75,8 @@
 		compositeConfig.addConfiguration(new SystemConfiguration());
 		//Properties from file
 		PropertiesConfiguration propConfig = null;
-	        final String filename = System.getProperty(""juddi.propertiesFile"");
-		if (filename != null)
-        	{
+	    final String filename = System.getProperty(""juddi.propertiesFile"");
+		if (filename != null) {
 			propConfig = new PropertiesConfiguration(filename);
 		} else {
 			propConfig = new PropertiesConfiguration(JUDDI_PROPERTIES);
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index 127b82d..3d8084f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -41,13 +41,9 @@
     public final static String JUDDI_RMI_REGISTRATION = ""juddi.rmi.registration"";
     public final static String JUDDI_RMI_REGISTRY_PORT = ""juddi.rmi.registry.port"";
     public final static String JUDDI_SUBSCRIPTION_NOTIFICATION = ""juddi.subscription.notification"";
-    public final static String JUDDI_EMAIL_HOST = ""juddi.email.host"";
-    public final static String JUDDI_EMAIL_PORT = ""juddi.email.port"";
-    public final static String JUDDI_EMAIL_AUTH = ""juddi.email.auth"";
-    public final static String JUDDI_EMAIL_USER = ""juddi.email.user"";
-    public final static String JUDDI_EMAIL_PASSWORD = ""juddi.email.password"";
-    public final static String JUDDI_EMAIL_TRANSPORT = ""juddi.email.transport"";
-    public final static String JUDDI_EMAIL_FROM = ""juddi.email.from"";
+    public final static String JUDDI_EMAIL_PREFIX = ""juddi.mail.smtp.prefix"";
+    public final static String JUDDI_EMAIL_FROM   = ""juddi.mail.smtp.from"";
+    public final static String DEFAULT_JUDDI_EMAIL_PREFIX = ""juddi."";
     public final static String DEFAULT_CRYPTOR = ""org.apache.juddi.cryptor.DefaultCryptor"";
     public final static String DEFAULT_USERSFILE = ""juddi-users.properties"";
     public final static String DEFAULT_XML_USERSFILE = ""juddi-users.xml"";
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index b910c59..726430c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -343,23 +343,25 @@
 						AccessPointType.WSDL_DEPLOYMENT.toString().equalsIgnoreCase(bindingTemplate.getAccessPointType())) {
 					try {
 						Notifier notifier = new NotifierFactory().getNotifier(bindingTemplate);
-						log.info(""Sending out notification to "" + bindingTemplate.getAccessPointUrl());
-						notifier.notifySubscriptionListener(body);
-						//there maybe more chunks we have to send
-						String chunkToken=body.getSubscriptionResultsList().getChunkToken();
-						while(chunkToken!=null) {
-							UddiEntityPublisher publisher = new UddiEntityPublisher();
-							publisher.setAuthorizedName(modelSubscription.getAuthorizedName());
-							log.debug(""Sending out next chunk: "" + chunkToken + "" to "" + bindingTemplate.getAccessPointUrl());
-							getSubscriptionResults.setChunkToken(chunkToken);
-							resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
-							body.setSubscriptionResultsList(resultList);
+						if (notifier!=null) {
+							log.info(""Sending out notification to "" + bindingTemplate.getAccessPointUrl());
 							notifier.notifySubscriptionListener(body);
-							chunkToken=body.getSubscriptionResultsList().getChunkToken();
+							//there maybe more chunks we have to send
+							String chunkToken=body.getSubscriptionResultsList().getChunkToken();
+							while(chunkToken!=null) {
+								UddiEntityPublisher publisher = new UddiEntityPublisher();
+								publisher.setAuthorizedName(modelSubscription.getAuthorizedName());
+								log.debug(""Sending out next chunk: "" + chunkToken + "" to "" + bindingTemplate.getAccessPointUrl());
+								getSubscriptionResults.setChunkToken(chunkToken);
+								resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
+								body.setSubscriptionResultsList(resultList);
+								notifier.notifySubscriptionListener(body);
+								chunkToken=body.getSubscriptionResultsList().getChunkToken();
+							}
+							//successful notification so remove from the badNotificationList
+							if (badNotifications.containsKey(resultList.getSubscription().getSubscriptionKey()))
+								badNotifications.remove(resultList.getSubscription().getSubscriptionKey());
 						}
-						//successful notification so remove from the badNotificationList
-						if (badNotifications.containsKey(resultList.getSubscription().getSubscriptionKey()))
-							badNotifications.remove(resultList.getSubscription().getSubscriptionKey());
 					} catch (WebServiceException e) {
 						if (e.getCause() instanceof IOException) {
 							addBadNotificationToList(subscriptionKey, bindingTemplate.getAccessPointUrl());
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
index 7110595..81325c9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
@@ -36,9 +36,9 @@
 		}
 		if (notifierClassName == null) {
 			//JUDDI-496 TODO make sure the tModel is loaded
-			log.debug(""The bindingTemplate "" + bindingTemplate.getEntityKey() + "" does not contain a tModel to define its type of transport. Defaulting "" 
+			log.error(""The bindingTemplate "" + bindingTemplate.getEntityKey() + "" does not contain a tModel to define its type of transport. Defaulting "" 
 				  +	""to http."");
-			notifierClassName = ""org.apache.juddi.subscription.notify.HTTPNotifier"";
+			return null;
 		}
 		if (log.isDebugEnabled()) log.debug(""Going find and instantiate notifier class: "" + notifierClassName);
 		
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
index 002b6bf..2fde660 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/SMTPNotifier.java
@@ -1,10 +1,13 @@
 package org.apache.juddi.subscription.notify;
 
-import java.net.URI;
+import java.io.File;
+import java.io.FileInputStream;
 import java.net.URISyntaxException;
 import java.rmi.RemoteException;
 import java.util.Properties;
 
+import javax.mail.Address;
+import javax.mail.Message.RecipientType;
 import javax.mail.Session;
 import javax.mail.Transport;
 import javax.mail.internet.InternetAddress;
@@ -18,6 +21,7 @@
 import org.apache.juddi.config.Property;
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.model.BindingTemplate;
+import org.apache.juddi.v3.client.Release;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.Result;
 import org.uddi.subr_v3.NotifySubscriptionListener;
@@ -29,7 +33,51 @@
 	String notificationEmailAddress = null;
 	String from = null;
 	Session session = null;
-	String transport = null;
+	Properties properties = null;
+	
+	private final static String[] mailProps = {""mail.smtp.from"", ""mail.smtp.host"", ""mail.smtp.port"", 
+		""mail.smtp.socketFactory.class"", ""mail.smtp.socketFactory.fallback"", ""mail.smtp.starttls.enable"",
+		""mail.smtp.socketFactory.port"",""mail.smtp.auth""};
+	
+	protected Properties getEMailProperties() throws ConfigurationException {
+		if (properties==null) {
+			properties = new Properties();
+			String mailPrefix = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_PREFIX, Property.DEFAULT_JUDDI_EMAIL_PREFIX);
+			if (! mailPrefix.endsWith(""."")) mailPrefix = mailPrefix + ""."";
+			for (String key: mailProps) {
+				if (AppConfig.getConfiguration().containsKey(mailPrefix + key)) {
+					properties.put(key, AppConfig.getConfiguration().getProperty(mailPrefix + key));
+				} else if (System.getProperty(mailPrefix + key) != null) {
+					properties.put(key, System.getProperty(mailPrefix + key));
+				}
+			}
+			// only read from file during testing
+			if (properties.size()==0 || ""jUDDI@example.org"".equals(properties.getProperty(""mail.smtp.from""))) {
+				String curDir = System.getProperty(""user.dir"");
+				if (! curDir.endsWith(""uddi-tck"")) curDir += ""/uddi-tck"";
+				String version = Release.getRegistryVersion().replaceAll("".SNAPSHOT"", ""-SNAPSHOT"");
+				String path = curDir + ""/target/juddi-tomcat-"" + version + ""/temp/"";
+				log.info(""Path=""+ path);
+				File tmpFile = new File(path + ""/juddi-mail.properties"");
+				if (tmpFile.exists()) {
+					try {
+						Properties fileProperties = new Properties();
+						fileProperties.load(new FileInputStream(tmpFile));
+						for (String key: mailProps) {
+							if (fileProperties.containsKey(mailPrefix + key)) {
+								properties.put(key, fileProperties.get(mailPrefix + key));
+							}
+						}
+					} catch (Exception e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
+					}
+					log.info(""TEST only: Reading properties from "" + tmpFile.getAbsolutePath() + "":"" + properties);
+				}
+			}
+		}
+		return properties;
+	}
 	
 	public SMTPNotifier(BindingTemplate bindingTemplate) throws URISyntaxException, ConfigurationException {
 		super();
@@ -37,45 +85,36 @@
 			log.error(""smtp enpoints only support AccessPointType "" + AccessPointType.END_POINT);
 		}
 		String accessPointUrl = bindingTemplate.getAccessPointUrl().toLowerCase();
-		if (!accessPointUrl.startsWith(""mailto"")) {
+		if (!accessPointUrl.startsWith(""mailto:"")) {
 			log.warn(""smtp accessPointUrl for bindingTemplate "" + bindingTemplate.getEntityKey() + 
 					"" should start with 'mailto'"");
+			//TODO maybe update the user's bindingTemplate with the error?
+		} else {
+			notificationEmailAddress = accessPointUrl.substring(accessPointUrl.indexOf("":"")+1);
+			session = Session.getInstance(getEMailProperties());
 		}
-		URI accessPointURI = new URI(accessPointUrl);
-		notificationEmailAddress = accessPointURI.getUserInfo() + ""@"" + accessPointURI.getHost();
-		
-		Properties properties = new Properties();
-		String host = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_HOST,""localhost"");
-		properties.put(""mail.smtp.host"", host);
-		String port = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_PORT,""25"");
-		properties.put(""mail.smtp.port"", port);
-		
-		boolean isAuth = AppConfig.getConfiguration().getBoolean(Property.JUDDI_EMAIL_AUTH,false);
-		if (isAuth) {
-			String user = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_USER,""juddi"");
-			properties.put(""mail.smtp.user"", user);
-			String password = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_PASSWORD,""juddi"");
-			properties.put(""mail.smtp.user"", password);
-		}
-		session = Session.getDefaultInstance(properties);
-		from = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_FROM,""juddi"");
-		transport = AppConfig.getConfiguration().getString(Property.JUDDI_EMAIL_TRANSPORT,""smtp"");
 	}
 
 	public DispositionReport notifySubscriptionListener(NotifySubscriptionListener body) throws DispositionReportFaultMessage, RemoteException {
 		
 		log.info(""Sending notification email to "" + notificationEmailAddress);
+		
 		try {
-			MimeMessage message = new MimeMessage(session);
-			message.setFrom(new InternetAddress(from));
-			//maybe nice to use a template rather then sending raw xml.
-			String subscriptionResultXML = JAXBMarshaller.marshallToString(body, JAXBMarshaller.PACKAGE_UDDIAPI);
-			message.setText(subscriptionResultXML);
-			message.setSubject(""UDDI Subscription Notification for subscription "" 
-					+ body.getSubscriptionResultsList().getSubscription().getSubscriptionKey());
-			Transport.send(message);
-			
+			if (session !=null && notificationEmailAddress != null) {
+				MimeMessage message = new MimeMessage(session);
+				InternetAddress address = new InternetAddress(notificationEmailAddress);
+				Address[] to = {address};
+				message.setRecipients(RecipientType.TO, to);
+				message.setFrom(new InternetAddress(getEMailProperties().getProperty(""mail.smtp.from"", ""jUDDI"")));
+				//maybe nice to use a template rather then sending raw xml.
+				String subscriptionResultXML = JAXBMarshaller.marshallToString(body, JAXBMarshaller.PACKAGE_SUBSCR_RES);
+				message.setText(subscriptionResultXML);
+				message.setSubject(""UDDI Subscription Notification for subscription "" 
+						+ body.getSubscriptionResultsList().getSubscription().getSubscriptionKey());
+				Transport.send(message);
+			}
 		} catch (Exception e) {
+			log.error(e.getMessage(),e);
 			throw new DispositionReportFaultMessage(e.getMessage(), null);
 		}
 		
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
index a018ed5..794c65c 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
@@ -40,12 +40,16 @@
  */
 public class TckSubscriptionListener
 {
-	public String LISTENER_SERVICE_XML              = ""uddi_data/subscriptionnotifier/listenerService.xml"";
-    public String LISTENER_SERVICE_KEY              = ""uddi:uddi.joepublisher.com:listenerone"";
+	public static String LISTENER_HTTP_SERVICE_XML    = ""uddi_data/subscriptionnotifier/listenerService.xml"";
+	public static String LISTENER_SMTP_SERVICE_XML    = ""uddi_data/subscriptionnotifier/listenerServiceSMTP.xml"";
+	public static String LISTENER_RMI_SERVICE_XML     = ""uddi_data/subscriptionnotifier/listenerServiceRMI.xml"";
+    public static String LISTENER_SERVICE_KEY         = ""uddi:uddi.joepublisher.com:listenerone"";
 
 	/** note that the subscription1.xml contains the binding template for the UDDI server to call back into */
-	public String SUBSCRIPTION_XML = ""uddi_data/subscriptionnotifier/subscription1.xml"";
-    public String SUBSCRIPTION_KEY = ""uddi:uddi.joepublisher.com:subscriptionone"";
+	public static String SUBSCRIPTION_XML = ""uddi_data/subscriptionnotifier/subscription1.xml"";
+	public static String SUBSCRIPTION_SMTP_XML = ""uddi_data/subscriptionnotifier/subscription1SMTP.xml"";
+    public static String SUBSCRIPTION_KEY = ""uddi:uddi.joepublisher.com:subscriptionone"";
+    public static String SUBSCRIPTION_SMTP_KEY = ""uddi:uddi.joepublisher.com:subscriptiononesmtp"";
     
     private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
@@ -92,13 +96,13 @@
 		
 	}
 	
-	public void saveService(String authInfo, Integer port) {
+	public void saveService(String authInfo, String listenerService, Integer port) {
 		try {
 			// First save the entity
 			ss = new SaveService();
 			ss.setAuthInfo(authInfo);
 			
-			org.uddi.api_v3.BusinessService bsIn = (org.uddi.api_v3.BusinessService)EntityCreator.buildFromDoc(LISTENER_SERVICE_XML, ""org.uddi.api_v3"");
+			org.uddi.api_v3.BusinessService bsIn = (org.uddi.api_v3.BusinessService)EntityCreator.buildFromDoc(listenerService, ""org.uddi.api_v3"");
 			if (port > 0) {
 				for (BindingTemplate btIn: bsIn.getBindingTemplates().getBindingTemplate()) {
 					String value = btIn.getAccessPoint().getValue();
@@ -116,12 +120,12 @@
 		}
 	}
 
-	public void saveNotifierSubscription(String authInfo) {
-		saveSubscription(authInfo, SUBSCRIPTION_XML, SUBSCRIPTION_KEY);
+	public void saveNotifierSubscription(String authInfo, String subscriptionXML) {
+		saveSubscription(authInfo, subscriptionXML, SUBSCRIPTION_KEY);
 	}
 	
-	public void deleteNotifierSubscription(String authInfo) {
-		deleteSubscription(authInfo, SUBSCRIPTION_KEY);
+	public void deleteNotifierSubscription(String authInfo, String subscriptionKey) {
+		deleteSubscription(authInfo, subscriptionKey);
 	}
 	
 	public void saveSubscription(String authInfo, String subscriptionXML, String subscriptionKey) {
@@ -141,7 +145,7 @@
 			Assert.assertNotNull(outSubscriptionList);
 			Subscription subOut = outSubscriptionList.get(0);
 			
-			assertEquals(subIn.getSubscriptionKey(), subOut.getSubscriptionKey());
+			//assertEquals(subIn.getSubscriptionKey(), subOut.getSubscriptionKey());
 			assertEquals(subDirectOut.getExpiresAfter().getMonth(), subOut.getExpiresAfter().getMonth());
 			assertEquals(subDirectOut.getExpiresAfter().getDay(), subOut.getExpiresAfter().getDay());
 			assertEquals(subDirectOut.getExpiresAfter().getYear(), subOut.getExpiresAfter().getYear());
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListenerRMI.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListenerRMI.java
index 905e720..851691f 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListenerRMI.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListenerRMI.java
@@ -14,23 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import static junit.framework.Assert.assertEquals;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.xml.ws.Holder;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-import org.apache.juddi.jaxb.EntityCreator;
-import org.junit.Assert;
-import org.uddi.api_v3.BindingTemplate;
-import org.uddi.api_v3.DeleteBinding;
-import org.uddi.api_v3.SaveBinding;
-import org.uddi.api_v3.SaveService;
-import org.uddi.sub_v3.DeleteSubscription;
-import org.uddi.sub_v3.Subscription;
 import org.uddi.v3_service.UDDIPublicationPortType;
 import org.uddi.v3_service.UDDISubscriptionPortType;
 
@@ -53,7 +36,7 @@
     	
 		super(subscription, publication);
 		this.LISTENER_SERVICE_KEY = LISTENER_SERVICE_KEY_RMI;
-    	this.LISTENER_SERVICE_XML = LISTENER_SERVICE_XML_RMI;
+    	this.LISTENER_HTTP_SERVICE_XML = LISTENER_SERVICE_XML_RMI;
     	this.SUBSCRIPTION_KEY     = SUBSCRIPTION_KEY_RMI;
     	this.SUBSCRIPTION_XML     = SUBSCRIPTION_XML_RMI;
     	
"
juddi,c3db1cffdab168c16ab8be7c3184b13c53462cb3,"JUDDI-496, seemed to work, and added a test for SMTP based notifications

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1470244 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-20 22:06:21,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
index 74c6436..4c75caa 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
@@ -42,6 +42,7 @@
 	
 	public static final String PACKAGE_UDDIAPI = ""org.uddi.api_v3"";
 	public static final String PACKAGE_SUBSCRIPTION = ""org.uddi.sub_v3"";
+	public static final String PACKAGE_SUBSCR_RES = ""org.uddi.subr_v3"";
 	public static final String PACKAGE_JUDDIAPI = ""org.apache.juddi.api_v3"";
 	public static final String PACKAGE_JUDDI = ""org.apache.juddi"";
 	private static final Map<String, JAXBContext> JAXBContexts = new HashMap<String, JAXBContext>();
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index 12163e8..eceb877 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -46,7 +46,7 @@
 	private String hostingRedirector;
 	private BindingCategoryBag categoryBag;
 	private List<TmodelInstanceInfo> tmodelInstanceInfos = new ArrayList<TmodelInstanceInfo>(0);
-        private List<Signature> signatures = new ArrayList<Signature>(0);
+    private List<Signature> signatures = new ArrayList<Signature>(0);
 	
 	public BindingTemplate() {
 	}
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index 220072d..ce1d49c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -46,7 +46,7 @@
 	private List<BusinessService> businessServices = new ArrayList<BusinessService>(0);
 	private List<BusinessDescr> businessDescrs = new ArrayList<BusinessDescr>(0);
 	private List<ServiceProjection> serviceProjections = new ArrayList<ServiceProjection>(0);
-        private List<Signature> signatures = new ArrayList<Signature>(0);
+    private List<Signature> signatures = new ArrayList<Signature>(0);
 
 	public BusinessEntity() {
 	}
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
index 4013391..f26f5ed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
@@ -43,8 +43,8 @@
 	private List<ServiceDescr> serviceDescrs = new ArrayList<ServiceDescr>(0);
 	private List<BindingTemplate> bindingTemplates = new ArrayList<BindingTemplate>(0);
 	private ServiceCategoryBag categoryBag;
-        private List<ServiceProjection> projectingBusinesses = new ArrayList<ServiceProjection>(0);
-        private List<Signature> signatures = new ArrayList<Signature>(0);
+    private List<ServiceProjection> projectingBusinesses = new ArrayList<ServiceProjection>(0);
+    private List<Signature> signatures = new ArrayList<Signature>(0);
 
 	public BusinessService() {
 	}
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
index 926acd7..bd97ffd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
@@ -44,7 +44,7 @@
 	private Integer maxServicesPerBusiness;
 	private Integer maxBindingsPerService;
 	private Integer maxTmodels;
-        private List<Signature> signatures = new ArrayList<Signature>(0);
+    private List<Signature> signatures = new ArrayList<Signature>(0);
 
 	public Publisher() {
 		super(null);
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
index acf9691..be095f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
@@ -45,7 +45,7 @@
 	private List<TmodelDescr> tmodelDescrs = new ArrayList<TmodelDescr>(0);
 	private List<TmodelIdentifier> tmodelIdentifiers = new ArrayList<TmodelIdentifier>(0);
 	private TmodelCategoryBag categoryBag;
-        private List<Signature> signatures = new ArrayList<Signature>(0);
+    private List<Signature> signatures = new ArrayList<Signature>(0);
 
 	public Tmodel() {
 	}
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/BindingTemplateQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/BindingTemplateQuery.java
index b8d9d48..b9aa616 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/BindingTemplateQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/BindingTemplateQuery.java
@@ -26,6 +26,10 @@
 	public static final String ENTITY_ALIAS = ""bt"";
 	public static final String ENTITY_FIELD = ""bindingTemplate"";
 	public static final String KEY_NAME_PARENT = BusinessServiceQuery.ENTITY_FIELD + ""."" + BusinessServiceQuery.KEY_NAME;
+	public static final String SIGNATURE_PRESENT = 
+			ENTITY_ALIAS + ""."" + EntityQuery.SIGNATURE_FIELD + "" IS NOT EMPTY OR "" +
+			ENTITY_ALIAS + "".businessService."" + EntityQuery.SIGNATURE_FIELD + "" IS NOT EMPTY OR "" +
+			ENTITY_ALIAS + "".businessService.businessEntity."" + EntityQuery.SIGNATURE_FIELD + "" IS NOT EMPTY "";
 	
 	protected static String selectSQL;
 
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
index 44564d8..55b2f77 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
@@ -26,7 +26,8 @@
 	public static final String ENTITY_NAME = ""BusinessEntity"";
 	public static final String ENTITY_ALIAS = ""be"";
 	public static final String ENTITY_FIELD = ""businessEntity"";
-	
+	public static final String SIGNATURE_PRESENT = ENTITY_ALIAS + ""."" + SIGNATURE_FIELD + "" IS NOT EMPTY "";
+
 	protected static String selectSQL;
 
 	static {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/BusinessServiceQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/BusinessServiceQuery.java
index 8d08296..4b195c3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/BusinessServiceQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/BusinessServiceQuery.java
@@ -26,6 +26,9 @@
 	public static final String ENTITY_ALIAS = ""bs"";
 	public static final String ENTITY_FIELD = ""businessService"";
 	public static final String KEY_NAME_PARENT = BusinessEntityQuery.ENTITY_FIELD + ""."" + BusinessEntityQuery.KEY_NAME;
+	public static final String SIGNATURE_PRESENT = 
+			ENTITY_ALIAS + ""."" + EntityQuery.SIGNATURE_FIELD + "" IS NOT EMPTY OR "" +
+			ENTITY_ALIAS + "".businessEntity."" + EntityQuery.SIGNATURE_FIELD + "" IS NOT EMPTY "";
 	
 	protected static String selectSQL;
 
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 26923fd..5d375a0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -44,6 +44,7 @@
 	public static final String TEMP_ENTITY_ALIAS = ""tk"";
 	public static final String TEMP_ENTITY_PK_TXID_NAME = TEMP_ENTITY_ALIAS + "".pk.txId"";
 	public static final String TEMP_ENTITY_PK_KEY_NAME = TEMP_ENTITY_ALIAS + "".pk.entityKey"";
+	public static final String SIGNATURE_FIELD  = ""signatures"";
 
 	public static final int DEFAULT_MAXROWS = 1000;
 	public static final int DEFAULT_MAXINCLAUSE = 1000;
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
index 5da502e..c4b8925 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryGroupQuery.java
@@ -54,7 +54,8 @@
 													   BindingTemplateQuery.ENTITY_ALIAS, 
 													   BindingTemplateQuery.KEY_NAME, 
 													   BindingTemplateQuery.ENTITY_FIELD, 
-													   ENTITY_NAME_CHILD);
+													   ENTITY_NAME_CHILD,
+													   BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
index 67a095a..f99d9eb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByCategoryQuery.java
@@ -48,7 +48,8 @@
 												  BindingTemplateQuery.ENTITY_ALIAS, 
 												  BindingTemplateQuery.KEY_NAME, 
 												  BindingTemplateQuery.ENTITY_FIELD, 
-												  ENTITY_NAME_CHILD);
+												  ENTITY_NAME_CHILD,
+												  BindingTemplateQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
index 6f99497..b8d733a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
@@ -53,14 +53,15 @@
 	private static Log log = LogFactory.getLog(FindBindingByTModelKeyQuery.class);
 
 	public static final String ENTITY_NAME_CHILD = ""TmodelInstanceInfo"";
-
+	
 	protected static String entityAliasChild;
 	
 	static {
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<?> select(EntityManager em, FindQualifiers fq, TModelBag tModels, String parentKey, 
+			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
@@ -150,6 +151,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(BindingTemplateQuery.SIGNATURE_PRESENT).pad().closeParen().pad();
+			}
 		}
 	}
 	
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
index c77b2af..29e6d45 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryGroupQuery.java
@@ -53,7 +53,8 @@
 													   BusinessEntityQuery.ENTITY_ALIAS, 
 													   BusinessEntityQuery.KEY_NAME, 
 													   BusinessEntityQuery.ENTITY_FIELD, 
-													   ENTITY_NAME_CHILD);
+													   ENTITY_NAME_CHILD,
+													   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
index 0814bb4..e67eb34 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCategoryQuery.java
@@ -47,7 +47,8 @@
 												  BusinessEntityQuery.ENTITY_ALIAS, 
 												  BusinessEntityQuery.KEY_NAME, 
 												  BusinessEntityQuery.ENTITY_FIELD, 
-												  ENTITY_NAME_CHILD);
+												  ENTITY_NAME_CHILD,
+												  BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
index e4aa319..28427f3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
@@ -67,7 +67,8 @@
                             ENTITY_FIELD2,
                             ENTITY_NAME_CHILD2,
                             ENTITY_FIELD3,
-                            ENTITY_NAME_CHILD3);
+                            ENTITY_NAME_CHILD3,
+                            BusinessEntityQuery.SIGNATURE_PRESENT);
         }
         
         public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
index 9349842..47f9b59 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
@@ -54,7 +54,8 @@
 		entityAliasChild = buildAlias(ENTITY_NAME_CHILD);
 	}
 
-	public static List<?> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public static List<?> select(EntityManager em, FindQualifiers fq, DiscoveryURLs discURLs, 
+			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
index 61dba12..ebb1d46 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByIdentifierQuery.java
@@ -46,7 +46,8 @@
 													BusinessEntityQuery.ENTITY_ALIAS, 
 													BusinessEntityQuery.KEY_NAME, 
 													BusinessEntityQuery.ENTITY_FIELD, 
-													ENTITY_NAME_CHILD);
+													ENTITY_NAME_CHILD,
+													BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
index 9b98d7a..1ae0d32 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByNameQuery.java
@@ -46,7 +46,7 @@
 public class FindBusinessByNameQuery {
 
 	public static final String ENTITY_NAME_CHILD = ""BusinessName"";
-
+	
 	private static FindEntityByNamesQuery findQuery;
 	
 	static {
@@ -54,7 +54,8 @@
 											   BusinessEntityQuery.ENTITY_ALIAS, 
 											   BusinessEntityQuery.KEY_NAME, 
 											   BusinessEntityQuery.ENTITY_FIELD, 
-											   ENTITY_NAME_CHILD);
+											   ENTITY_NAME_CHILD,
+											   BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 
 	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByPublisherQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByPublisherQuery.java
index 701902f..2f18e2b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByPublisherQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByPublisherQuery.java
@@ -37,7 +37,11 @@
 	private static FindEntityByPublisherQuery findQuery;
 	
 	static {
-		findQuery = new FindEntityByPublisherQuery(BusinessEntityQuery.ENTITY_NAME, BusinessEntityQuery.ENTITY_ALIAS, BusinessEntityQuery.KEY_NAME);
+		findQuery = new FindEntityByPublisherQuery(
+						BusinessEntityQuery.ENTITY_NAME, 
+						BusinessEntityQuery.ENTITY_ALIAS, 
+						BusinessEntityQuery.KEY_NAME,
+						BusinessEntityQuery.SIGNATURE_PRESENT);
 	}
 
 	public static List<?> select(EntityManager em, FindQualifiers fq, UddiEntityPublisher publisher, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
index 72acba7..3ccaf0a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
@@ -155,6 +155,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(BusinessEntityQuery.SIGNATURE_PRESENT).pad().closeParen().pad();
+			}
 		}
 	}
 	
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index 26e0445..7ffeca4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -71,14 +71,17 @@
 	private String entityNameChild;
 	private String entityAliasChild;
 	private String selectSQL;
+	private String signaturePresent;
 
-	public FindEntityByCategoryGroupQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
+	public FindEntityByCategoryGroupQuery(String entityName, String entityAlias, String keyName, 
+			String entityField, String entityNameChild, String signaturePresent) {
 		this.entityName = entityName;
 		this.entityAlias = entityAlias;
 		this.keyName = keyName;
 		this.entityField = entityField;
 		this.entityNameChild = entityNameChild;
 		this.entityAliasChild = buildAlias(entityNameChild);
+		this.signaturePresent = signaturePresent;
 		
 		StringBuffer sql = new StringBuffer(200);
 		sql.append(""select distinct "" + entityAlias + ""."" + keyName + "" from "" 
@@ -116,6 +119,14 @@
 		return selectSQL;
 	}
 	
+	public String getSignaturePresent() {
+		return signaturePresent;
+	}
+
+	public void setSignaturePresent(String signaturePresent) {
+		this.signaturePresent = signaturePresent;
+	}
+	
 	@SuppressWarnings(""unchecked"")
 	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
@@ -305,6 +316,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(getSignaturePresent()).pad().closeParen().pad();
+			}
 		}
 	}
 
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index d37b03b..2ec6480 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -64,14 +64,17 @@
 	protected String entityNameChild;
 	protected String entityAliasChild;
 	protected String selectSQL;
+	protected String signaturePresent;
 
-	public FindEntityByCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
+	public FindEntityByCategoryQuery(String entityName, String entityAlias, String keyName,
+			String entityField, String entityNameChild, String signaturePresent) {
 		this.entityName = entityName;
 		this.entityAlias = entityAlias;
 		this.keyName = keyName;
 		this.entityField = entityField;
 		this.entityNameChild = entityNameChild;
 		this.entityAliasChild = buildAlias(entityNameChild);
+		this.signaturePresent = signaturePresent;
 		
 		StringBuffer sql = new StringBuffer(200);
 		sql.append(""select distinct "" + entityAlias + ""."" + keyName + "" from "" + entityName + "" "" + entityAlias + "" , "" + entityNameChild + "" "" + entityAliasChild + "" "");
@@ -105,7 +108,14 @@
 	public String getSelectSQL() {
 		return selectSQL;
 	}
+	
+	public String getSignaturePresent() {
+		return signaturePresent;
+	}
 
+	public void setSignaturePresent(String signaturePresent) {
+		this.signaturePresent = signaturePresent;
+	}
 	
 	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
@@ -289,6 +299,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(getSignaturePresent()).pad().closeParen().pad();
+			}
 		}
 	}
 	
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index 06209cf..a8c1ae9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -85,14 +85,19 @@
 	protected String entityField3;
 	protected String entityNameChild3;
 	protected String entityAliasChild3;
+	
+	protected String signaturePresent;
 
-	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
-		super(entityName, entityAlias, keyName, entityField, entityNameChild);
+	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName,
+			String entityField, String entityNameChild, String signaturePresent) {
+		super(entityName, entityAlias, keyName, entityField, entityNameChild, signaturePresent);
 	}
 	
-	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild,
-			String entityField2, String entityNameChild2, String entityField3, String entityNameChild3) {
-		super(entityName, entityAlias, keyName, entityField, entityNameChild);
+	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName, 
+			String entityField, String entityNameChild,
+			String entityField2, String entityNameChild2, String entityField3, String entityNameChild3,
+			String signaturePresent) {
+		super(entityName, entityAlias, keyName, entityField, entityNameChild, signaturePresent);
 		
 		this.entityNameChild2 = entityNameChild2;
 		this.entityAliasChild2 = buildAlias(entityNameChild2);
@@ -102,7 +107,7 @@
 			this.entityNameChild3 = entityNameChild3;
 			this.entityAliasChild3 = buildAlias(entityNameChild3);
 		}
-		
+		this.signaturePresent = signaturePresent;
 		selectSQL = """";
 	}
 	
@@ -122,7 +127,8 @@
 		return entityAliasChild3;
 	}
 		
-	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, 
+			List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 	        
         // If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
@@ -209,7 +215,7 @@
 			List<?> keysIn, DynamicQuery.Parameter... restrictions) 
 	{
 		FindEntityByCategoryQuery findEntityByCategoryQuery = new FindEntityByCategoryQuery(
-				entityName, entityAlias, keyName, entityField, entityNameChild);
+				entityName, entityAlias, keyName, entityField, entityNameChild, signaturePresent);
 		for (KeyedReference keyedReference : categoryBag.getKeyedReference()) {
 			CategoryBag categoryBagWithOneKey = new CategoryBag();
 			categoryBagWithOneKey.getKeyedReference().add(keyedReference);
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index 3e69c0b..ad01f26 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -59,14 +59,17 @@
 	private String entityNameChild;
 	private String entityAliasChild;
 	private String selectSQL;
+	private String signaturePresent;
 
-	public FindEntityByIdentifierQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
+	public FindEntityByIdentifierQuery(String entityName, String entityAlias, String keyName, 
+			String entityField, String entityNameChild, String signaturePresent) {
 		this.entityName = entityName;
 		this.entityAlias = entityAlias;
 		this.keyName = keyName;
 		this.entityField = entityField;
 		this.entityNameChild = entityNameChild;
 		this.entityAliasChild = buildAlias(entityNameChild);
+		this.signaturePresent = signaturePresent;
 		
 		StringBuffer sql = new StringBuffer(200);
 		sql.append(""select distinct "" + entityAlias + ""."" + keyName + "" from "" + entityName + "" "" + entityAlias + "" "");
@@ -100,6 +103,14 @@
 	public String getSelectSQL() {
 		return selectSQL;
 	}
+	
+	public String getSignaturePresent() {
+		return signaturePresent;
+	}
+
+	public void setSignaturePresent(String signaturePresent) {
+		this.signaturePresent = signaturePresent;
+	}
 
 	
 	public List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
@@ -268,6 +279,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(getSignaturePresent()).pad().closeParen().pad();
+			}
 		}
 	}
 	
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
index f7fe958..1fb8818 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
@@ -46,14 +46,17 @@
 	private String entityNameChild;
 	private String entityAliasChild;
 	private String selectSQL;
+	private String signaturePresent;
 	
-	public FindEntityByNamesQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
+	public FindEntityByNamesQuery(String entityName, String entityAlias, String keyName, String entityField, 
+			String entityNameChild, String signaturePresent) {
 		this.entityName = entityName;
 		this.entityAlias = entityAlias;
 		this.keyName = keyName;
 		this.entityField = entityField;
 		this.entityNameChild = entityNameChild;
 		this.entityAliasChild = buildAlias(entityNameChild);
+		this.signaturePresent = signaturePresent;
 		
 		StringBuffer sql = new StringBuffer(200);
 		sql.append(""select distinct "" + entityAlias + ""."" + keyName + "" from "" + entityName + "" "" + entityAlias + "" "");
@@ -88,6 +91,13 @@
 		return selectSQL;
 	}
 	
+	public String getSignaturePresent() {
+		return signaturePresent;
+	}
+
+	public void setSignaturePresent(String signaturePresent) {
+		this.signaturePresent = signaturePresent;
+	}
 	
 	public List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
@@ -158,6 +168,11 @@
 		qry.WHERE().pad().openParen().pad();
 		qry.append(entityAlias + ""."" + keyName + "" = "" + entityAliasChild + ""."" + entityField + ""."" + keyName + "" "");
 		qry.closeParen().pad();
+		if (fq!=null && fq.isSignaturePresent()) {
+			qry.AND().pad().openParen().pad().append(getSignaturePresent()).pad().closeParen().pad();
+		}
 	}
+
+
 	
 }
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByPublisherQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByPublisherQuery.java
index 7b50270..67fa57d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByPublisherQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByPublisherQuery.java
@@ -39,11 +39,13 @@
 	private String entityAlias;
 	private String keyName;
 	private String selectSQL;
+	private String signaturePresent;
 	
-	public FindEntityByPublisherQuery(String entityName, String entityAlias, String keyName) {
+	public FindEntityByPublisherQuery(String entityName, String entityAlias, String keyName, String signaturePresent) {
 		this.entityName = entityName;
 		this.entityAlias = entityAlias;
 		this.keyName = keyName;
+		this.signaturePresent = signaturePresent;
 		
 		StringBuffer sql = new StringBuffer(200);
 		sql.append(""select distinct "" + entityAlias + ""."" + keyName + "" from "" + entityName + "" "" + entityAlias + "" "");
@@ -66,6 +68,14 @@
 		return selectSQL;
 	}
 	
+	public String getSignaturePresent() {
+		return signaturePresent;
+	}
+
+	public void setSignaturePresent(String signaturePresent) {
+		this.signaturePresent = signaturePresent;
+	}
+		
 	
 	public List<?> select(EntityManager em, FindQualifiers fq, UddiEntityPublisher publisher, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
@@ -88,7 +98,11 @@
 	 */
 	public void appendConditions(DynamicQuery qry, FindQualifiers fq, UddiEntityPublisher publisher) {
 		qry.WHERE().pad();
+		if (fq!=null && fq.isSignaturePresent()) {
+			qry.pad().openParen().pad().append(getSignaturePresent()).pad().closeParen().pad().AND();
+		}
 		qry.appendGroupedAnd(new DynamicQuery.Parameter(entityAlias + ""."" + AUTHORIZED_NAME_FIELD, publisher.getAuthorizedName(), DynamicQuery.PREDICATE_EQUALS));
 	}
-		
+
+
 }
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
index 639fd77..a37130d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryGroupQuery.java
@@ -53,7 +53,8 @@
 													   BusinessServiceQuery.ENTITY_ALIAS, 
 													   BusinessServiceQuery.KEY_NAME, 
 													   BusinessServiceQuery.ENTITY_FIELD, 
-													   ENTITY_NAME_CHILD);
+													   ENTITY_NAME_CHILD,
+													   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
index 6d9afa0..525e1dd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
@@ -47,7 +47,8 @@
 												  BusinessServiceQuery.ENTITY_ALIAS, 
 												  BusinessServiceQuery.KEY_NAME, 
 												  BusinessServiceQuery.ENTITY_FIELD, 
-												  ENTITY_NAME_CHILD);
+												  ENTITY_NAME_CHILD,
+												  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
index 5718c5b..f6e0e96 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
@@ -72,7 +72,8 @@
 														  ENTITY_FIELD2,
 														  ENTITY_NAME_CHILD2,
 														  null,
-														  null);
+														  null,
+														  BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
index 8dff6a7..1dae306 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByNameQuery.java
@@ -45,7 +45,7 @@
  */
 public class FindServiceByNameQuery {
 
-	public static final String ENTITY_NAME_CHILD = ""ServiceName"";
+	public static final String ENTITY_NAME_CHILD = ""ServiceName"";			
 
 	private static FindEntityByNamesQuery findQuery;
 	
@@ -54,7 +54,8 @@
 											   BusinessServiceQuery.ENTITY_ALIAS, 
 											   BusinessServiceQuery.KEY_NAME, 
 											   BusinessServiceQuery.ENTITY_FIELD, 
-											   ENTITY_NAME_CHILD);
+											   ENTITY_NAME_CHILD,
+											   BusinessServiceQuery.SIGNATURE_PRESENT);
 	}
 
 	public static List<?> select(EntityManager em, FindQualifiers fq, List<Name> names, String parentKey, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index 7956fa0..8adcc78 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -158,6 +158,9 @@
 			qry.append(thetaJoinsStr);
 
 			qry.closeParen().pad();
+			if (fq!=null && fq.isSignaturePresent()) {
+				qry.AND().pad().openParen().pad().append(BusinessServiceQuery.SIGNATURE_PRESENT).pad().closeParen().pad();
+			}
 		}
 	}
 	
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
index fedb5a4..31beb74 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
@@ -54,7 +54,8 @@
 													   TModelQuery.ENTITY_ALIAS, 
 													   TModelQuery.KEY_NAME, 
 													   TModelQuery.ENTITY_FIELD, 
-													   ENTITY_NAME_CHILD);
+													   ENTITY_NAME_CHILD,
+													   TModelQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
index 0aa92dc..570dab8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
@@ -48,7 +48,8 @@
 												  TModelQuery.ENTITY_ALIAS, 
 												  TModelQuery.KEY_NAME, 
 												  TModelQuery.ENTITY_FIELD, 
-												  ENTITY_NAME_CHILD);
+												  ENTITY_NAME_CHILD,
+												  TModelQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
index f0f63ab..7b27c8e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByIdentifierQuery.java
@@ -47,7 +47,8 @@
 													TModelQuery.ENTITY_ALIAS, 
 													TModelQuery.KEY_NAME, 
 													TModelQuery.ENTITY_FIELD, 
-													ENTITY_NAME_CHILD);
+													ENTITY_NAME_CHILD,
+													TModelQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, IdentifierBag identifiers, List<?> keysIn) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
index 08f0f01..1ff543f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
@@ -97,7 +97,9 @@
 		}
 
 		qry.closeParen().pad();
-		
+		if (fq!=null && fq.isSignaturePresent()) {
+			qry.AND().pad().openParen().pad().append(TModelQuery.SIGNATURE_PRESENT).pad().closeParen().pad();
+		}
 	}
 	
 }
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
index 7c001fa..6ba4377 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
@@ -37,7 +37,11 @@
 	private static FindEntityByPublisherQuery findQuery;
 	
 	static {
-		findQuery = new FindEntityByPublisherQuery(TModelQuery.ENTITY_NAME, TModelQuery.ENTITY_ALIAS, TModelQuery.KEY_NAME);
+		findQuery = new FindEntityByPublisherQuery(
+						TModelQuery.ENTITY_NAME, 
+						TModelQuery.ENTITY_ALIAS, 
+						TModelQuery.KEY_NAME,
+						TModelQuery.SIGNATURE_PRESENT);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, UddiEntityPublisher publisher, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/TModelQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/TModelQuery.java
index 0f8ab9e..23f5e79 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/TModelQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/TModelQuery.java
@@ -25,6 +25,7 @@
 	public static final String ENTITY_NAME = ""Tmodel"";
 	public static final String ENTITY_ALIAS = ""t"";
 	public static final String ENTITY_FIELD = ""tmodel"";
+	public static final String SIGNATURE_PRESENT = ENTITY_ALIAS + ""."" + SIGNATURE_FIELD + "" IS NOT EMPTY "";
 	
 	protected static String selectSQL;
 
"
juddi,7f335fd7d8788a63bf1ea1fd16811a32ad0806bc,"JUDDI-589 Implementing the signaturePresent find qualifier.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467724 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-14 03:52:09,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index c5a3300..5544a88 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -65,6 +65,7 @@
 {
 	final static String FIND_BUSINESS_XML             = ""uddi_data/find/findBusiness1.xml"";
 	final static String FIND_ALL_BUSINESSES_XML       = ""uddi_data/find/findAllBusinesses.xml"";
+	final static String FIND_ALL_SIGNED_BUSINESSES_XML= ""uddi_data/find/findAllSignedBusinesses.xml"";
 	final static String FIND_RELATED_BUSINESS_SORT_BY_NAME_XML = ""uddi_data/find/findRelatedBusinesses_sortByName.xml"";
 	final static String FIND_RELATED_BUSINESS_FROM_KEY= ""uddi_data/find/findRelatedBusinesses_fromKey.xml"";
 	final static String FIND_RELATED_BUSINESS_TO_KEY  = ""uddi_data/find/findRelatedBusinesses_toKey.xml"";
@@ -151,6 +152,30 @@
 		}
 	}
 	
+	public List<BusinessInfo> findAllSignedBusiness() {
+		List<BusinessInfo> biList = null;
+		try {
+			FindBusiness body = (FindBusiness)EntityCreator.buildFromDoc(FIND_ALL_SIGNED_BUSINESSES_XML, ""org.uddi.api_v3"");
+			BusinessList result = inquiry.findBusiness(body);
+			if (result == null)
+				Assert.fail(""Null result from find business operation"");
+			BusinessInfos bInfos = result.getBusinessInfos();
+			if (bInfos == null)
+				Assert.fail(""No result from find business operation"");
+			biList = bInfos.getBusinessInfo();
+			if (biList == null || biList.size() == 0)
+				Assert.fail(""No result from find business operation"");
+			//expecting at one business
+			Assert.assertTrue(biList.size()==1);
+			return biList;
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+		return biList;
+	}
+	
 	public void findRelatedBusiness_sortByName(boolean isOneSided) {
 		try {
 			FindRelatedBusinesses body = (FindRelatedBusinesses)EntityCreator.buildFromDoc(FIND_RELATED_BUSINESS_SORT_BY_NAME_XML, ""org.uddi.api_v3"");
@@ -242,10 +267,11 @@
 		}
 	}
 	
-	public String findService() {
+	public String findService(String findQualifier) {
 		String serviceKey = null;
 		try {
 			FindService body = (FindService)EntityCreator.buildFromDoc(FIND_SERVICE_XML, ""org.uddi.api_v3"");
+			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
 			ServiceList result = inquiry.findService(body);
 			if (result == null)
 				Assert.fail(""Null result from find service operation"");
@@ -330,9 +356,10 @@
 			Assert.fail(""No exception should be thrown."");
 		}
 	}
-	public void findBinding() {
+	public void findBinding(String findQualifier) {
 		try {
 			FindBinding body = (FindBinding)EntityCreator.buildFromDoc(FIND_BINDING_XML, ""org.uddi.api_v3"");
+			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
 			BindingDetail result = inquiry.findBinding(body);
 			if (result == null)
 				Assert.fail(""Null result from find binding operation"");
@@ -355,9 +382,10 @@
 		}
 	}
 	
-	public void findTModel() {
+	public void findTModel(String findQualifier) {
 		try {
 			FindTModel body = (FindTModel)EntityCreator.buildFromDoc(FIND_TMODEL_XML, ""org.uddi.api_v3"");
+			if (findQualifier!=null) body.getFindQualifiers().getFindQualifier().add(findQualifier);
 			TModelList result = inquiry.findTModel(body);
 			if (result == null)
 				Assert.fail(""Null result from find tModel operation"");
"
juddi,ea5453bc68404b78984a316791937964ea6bc873,"JUDDI-545 fixing spelling.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467710 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 22:02:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index 7531eb4..06209cf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -208,12 +208,12 @@
 			FindQualifiers fq, CategoryBag categoryBag, String entityField, String entityNameChild, 
 			List<?> keysIn, DynamicQuery.Parameter... restrictions) 
 	{
-		FindEntityByCategoryQuery findEntityByCategoryQuery2 = new FindEntityByCategoryQuery(
+		FindEntityByCategoryQuery findEntityByCategoryQuery = new FindEntityByCategoryQuery(
 				entityName, entityAlias, keyName, entityField, entityNameChild);
 		for (KeyedReference keyedReference : categoryBag.getKeyedReference()) {
 			CategoryBag categoryBagWithOneKey = new CategoryBag();
 			categoryBagWithOneKey.getKeyedReference().add(keyedReference);
-			List<?> entityKeys =  findEntityByCategoryQuery2.select(
+			List<?> entityKeys =  findEntityByCategoryQuery.select(
 					em, fq, categoryBagWithOneKey, keysIn, restrictions);
 			@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
 			Set<String> keySet = new HashSet(entityKeys);
"
juddi,1713f5007adac67110e99b102a583396085b88e2,"JUDDI-545 rewriting the way combinedCategories queries are implemented. For Businesses is now also looks at the categoryBags on the Bindings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467686 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 20:02:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 01441f3..325dbe3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -287,7 +287,7 @@
 		doFindTModelEmbeddedSearch(em, body.getFindQualifiers(), body.getFindTModel(), body.getTModelBag());
 		
 		keysFound = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), body.getBusinessKey(), keysFound);
-                if (findQualifiers.isCombineCategoryBags()) {
+        if (findQualifiers.isCombineCategoryBags()) {
 		    keysFound = FindServiceByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
 		} else {
 			keysFound = FindServiceByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
"
juddi,1713f5007adac67110e99b102a583396085b88e2,"JUDDI-545 rewriting the way combinedCategories queries are implemented. For Businesses is now also looks at the categoryBags on the Bindings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467686 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 20:02:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
index dc7753f..e4aa319 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByCombinedCategoryQuery.java
@@ -49,8 +49,12 @@
  */
 public class FindBusinessByCombinedCategoryQuery {
         
-        private static final String ENTITY_NAME_CHILD = ""BusinessCategoryBag"";
-        private static final String ENTITY_NAME_CHILD2  = ""ServiceCategoryBag"";
+        private static final String ENTITY_NAME_CHILD  = ""BusinessCategoryBag"";
+        private static final String ENTITY_FIELD2      = ""businessService."" + BusinessEntityQuery.ENTITY_FIELD;
+        private static final String ENTITY_NAME_CHILD2 = ""ServiceCategoryBag"";
+        private static final String ENTITY_FIELD3      = ""bindingTemplate.businessService."" + BusinessEntityQuery.ENTITY_FIELD;
+        private static final String ENTITY_NAME_CHILD3 = ""BindingCategoryBag"";
+        
 
         private static FindEntityByCombinedCategoryQuery findQuery;
         
@@ -60,7 +64,10 @@
                             BusinessEntityQuery.KEY_NAME, 
                             BusinessEntityQuery.ENTITY_FIELD, 
                             ENTITY_NAME_CHILD,
-                            ENTITY_NAME_CHILD2);
+                            ENTITY_FIELD2,
+                            ENTITY_NAME_CHILD2,
+                            ENTITY_FIELD3,
+                            ENTITY_NAME_CHILD3);
         }
         
         public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
"
juddi,1713f5007adac67110e99b102a583396085b88e2,"JUDDI-545 rewriting the way combinedCategories queries are implemented. For Businesses is now also looks at the categoryBags on the Bindings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467686 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 20:02:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index df338e0..7531eb4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -18,18 +18,18 @@
 package org.apache.juddi.query;
 
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 import javax.persistence.EntityManager;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.juddi.query.util.KeyedRefTModelComparator;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.KeyedReference;
 
@@ -77,27 +77,31 @@
 	
 	@SuppressWarnings(""unused"")
 	private static Log log = LogFactory.getLog(FindEntityByCombinedCategoryQuery.class);
-
-	private static final String ENTITY_KEYEDREFERENCE = ""KeyedReference"";
-	private static final String ALIAS_KEYEDREFERENCE = buildAlias(ENTITY_KEYEDREFERENCE);
-	private static final String FIELD_CATEGORYBAG = ""categoryBag"";
 	
-	private String joinClause;
-	private String currentAlias;
-	
+	protected String entityField2;
 	protected String entityNameChild2;
 	protected String entityAliasChild2;
+	
+	protected String entityField3;
+	protected String entityNameChild3;
+	protected String entityAliasChild3;
 
 	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
 		super(entityName, entityAlias, keyName, entityField, entityNameChild);
 	}
 	
 	public FindEntityByCombinedCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild,
-			String entityNameChild2) {
+			String entityField2, String entityNameChild2, String entityField3, String entityNameChild3) {
 		super(entityName, entityAlias, keyName, entityField, entityNameChild);
 		
 		this.entityNameChild2 = entityNameChild2;
 		this.entityAliasChild2 = buildAlias(entityNameChild2);
+		this.entityField2 = entityField2;
+		if (entityNameChild3!=null) {
+			this.entityField3 = entityField3;
+			this.entityNameChild3 = entityNameChild3;
+			this.entityAliasChild3 = buildAlias(entityNameChild3);
+		}
 		
 		selectSQL = """";
 	}
@@ -109,284 +113,115 @@
 	public String getEntityAliasChild2() {
 		return entityAliasChild2;
 	}
+	
+	public String getEntityNameChild3() {
+		return entityNameChild3;
+	}
+	
+	public String getEntityAliasChild3() {
+		return entityAliasChild3;
+	}
 		
 	public List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
-	        StringBuffer queryOne = new StringBuffer(200);
-                StringBuffer queryTwo = new StringBuffer(200);
-	    
-                // If keysIn is not null and empty, then search is over.
+	        
+        // If keysIn is not null and empty, then search is over.
 		if ((keysIn != null) && (keysIn.size() == 0))
 			return keysIn;
 		
 		if (categoryBag == null)
 			return keysIn;
 		
-		List<KeyedReference> categories = categoryBag.getKeyedReference();
-		if (categories == null || categories.size() == 0)
+		List<KeyedReference> keyRefsInCategories = categoryBag.getKeyedReference();
+		if (keyRefsInCategories == null || keyRefsInCategories.size() == 0)
 			return keysIn;
 		
-		queryOne.append(""select "" + entityAlias + ""."" + keyName + "", "" + entityAliasChild + "".id ""
-	                    + ""from "" + entityName + "" "" + entityAlias + "", "" + entityNameChild + "" "" + entityAliasChild + "" "");
-		
-		ArrayList<List> aggregatedResultsOne = new ArrayList<List>();
-                ArrayList<List> aggregatedResultsTwo = new ArrayList<List>();
-
-		for (KeyedReference elem : categories) {
-		    List<KeyedReference> keyedRefs = new ArrayList<KeyedReference>(0);
-
-		    if (elem instanceof KeyedReference)
-			keyedRefs.add((KeyedReference)elem);
-	            DynamicQuery dynamicQry = new DynamicQuery(queryOne.toString());
-	            currentAlias = entityAliasChild;
-	            joinClause = entityAlias + ""."" + keyName + "" = ""
-	                + entityAliasChild + ""."" + entityField + ""."" + keyName + "" "";
-	            appendConditions(dynamicQry, fq, keyedRefs);
-	            if (restrictions != null && restrictions.length > 0)
-	                dynamicQry.AND().pad().appendGroupedAnd(restrictions);
-
-	            if (keyedRefs.size() != 0) {
-	                List list = getQueryResult(em, dynamicQry, keysIn, entityAlias + ""."" + keyName);
-	                aggregatedResultsOne.addAll(list);
-	            }
-		}		
-
-	        queryTwo.append(""select  "" + entityAlias + ""."" + keyName + "", "" + entityAliasChild2 + "".id ""
-	                + ""from "" + entityName + "" "" + entityAlias + "", "" + entityNameChild + "" "" + entityAliasChild + "", ""
-	                + entityNameChild2 + "" "" + entityAliasChild2 + "" "");
-
-                for (KeyedReference elem : categories) {
-                    List<KeyedReference> keyedRefs = new ArrayList<KeyedReference>(0);
-
-                    if (elem instanceof KeyedReference)
-                        keyedRefs.add((KeyedReference)elem);
-                    DynamicQuery dynamicQry = new DynamicQuery(queryTwo.toString());
-                    currentAlias = entityAliasChild2;
-                    
-                    if (BusinessEntityQuery.ENTITY_NAME.equals(entityName)) {
-                        joinClause = entityAlias + "".entityKey"" + "" = ""
-                        + entityAliasChild + ""."" + entityField + "".entityKey"" + "" and ""
-                        + entityAliasChild + ""."" + entityField + "".entityKey"" + "" = ""
-                        + entityAliasChild2 + "".businessService.businessEntity.entityKey"";
-                    } else {
-                        joinClause = entityAlias + "".entityKey"" + "" = ""
-                            + entityAliasChild + ""."" + entityField + "".entityKey"" + "" and ""
-                            + entityAliasChild + ""."" + entityField + "".entityKey"" + "" = ""
-                            + entityAliasChild2 + "".bindingTemplate.businessService.entityKey"";
-                    }
-
-                    appendConditions(dynamicQry, fq, keyedRefs);
-                    if (restrictions != null && restrictions.length > 0)
-                        dynamicQry.AND().pad().appendGroupedAnd(restrictions);
-
-                    if (keyedRefs.size() != 0) {
-                        List list = getQueryResult(em, dynamicQry, keysIn, entityAlias + ""."" + keyName);
-                        aggregatedResultsTwo.addAll(list);
-                    }
-                }               
-
-                ArrayList results = new ArrayList();
-                if (BusinessServiceQuery.ENTITY_NAME.equals(entityName)) {
-                    ArrayList idsOne = new ArrayList();
-                    ArrayList idsTwo = new ArrayList();
-                    
-                    for (Iterator i = aggregatedResultsOne.iterator(); i.hasNext();) {
-                        Object[] l = (Object[]) i.next();
-                        String id = (String) l[0];
-                        idsOne.add(id);
-                    }
-                    for (Iterator i = aggregatedResultsTwo.iterator(); i.hasNext();) {
-                        Object[] l = (Object[]) i.next();
-                        String id = (String) l[0];
-                        idsTwo.add(id);
-                    }
-                    
-                    results.addAll(idsOne);
-                    results.retainAll(idsTwo);
-                } else if (BusinessEntityQuery.ENTITY_NAME.equals(entityName)) {
-                    ArrayList idsOne = new ArrayList();
-                    ArrayList idsTwo = new ArrayList();
-
-                    for (Iterator i = aggregatedResultsOne.iterator(); i.hasNext();) {
-                        Object[] l = (Object[]) i.next();
-                        String id = (String) l[0];
-                        idsOne.add(id);                        
-                    }
-                    for (Iterator i = aggregatedResultsTwo.iterator(); i.hasNext();) {
-                        Object[] l = (Object[]) i.next();
-                        String id = (String) l[0];
-                        idsTwo.add(id);
-                    }
-                    
-                    results.addAll(idsOne);
-                    results.retainAll(idsTwo);                    
-                }
-                		
-		return results;
-	}
-	
-	
-	/*
-	 * Appends the conditions to the query based on the keyedReference list.  With the default or when ""orAllKeys"" is passed, the keyedReferences are autonomous and are
-	 * all AND'd or OR'd respectively.  However, ""orLikeKeys"" requires special treatment.  The goal is to create the conditions in this format:
-	 * 
-	 * (likeKey1 = X or likeKey1 = Y) and (likeKey2 = A or likeKey2 = B or likeKey2 = C) 
-	 * 
-	 * ie. the ""like"" KeyedReferences are OR'd and the groups of ""like"" KeyedReferences are AND'd with each other.
-	 */
-	public void appendConditions(DynamicQuery qry, FindQualifiers fq, List<KeyedReference> keyedRefs) {
-		
-		// Append the necessary tables (two will always be added connecting the entity to its category table and then the category table to the keyed references).
-		appendJoinTables(qry, fq, keyedRefs);
-		qry.AND().pad().openParen().pad();
-		
-		String predicate = DynamicQuery.PREDICATE_EQUALS;
-		if (fq.isApproximateMatch()) {
-			predicate = DynamicQuery.PREDICATE_LIKE;
+		Map<KeyedReference,Set<String>> map  = new HashMap<KeyedReference,Set<String>>();
+		//1. First match at the top level (i.e. categoryBag on business)
+		findEntityByCategoryQuery(map, em, fq, categoryBag, entityField, entityNameChild, keysIn, restrictions);
+		//2. Now match at the second level (i.e. categoryBag on services for businesses)
+		findEntityByCategoryQuery(map, em, fq, categoryBag, entityField2, entityNameChild2, keysIn, restrictions);
+		//3. Now match at the third level (i.e. categoryBag on binding for businesses)
+		//   This does only apply to businesses (not for services)
+		if (entityNameChild3!=null) {
+			findEntityByCategoryQuery(map, em, fq, categoryBag, entityField3, entityNameChild3, keysIn, restrictions);
 		}
 		
-		// Sorting the collection by tModel Key
-		Collections.sort(keyedRefs, new KeyedRefTModelComparator());
-
-		String prevTModelKey = null;
-		int count = 0;
-		int tblCount = -1;
-		for(KeyedReference keyedRef : keyedRefs) {
-			String tmodelKey = keyedRef.getTModelKey();
-			String keyValue = keyedRef.getKeyValue();
-			String keyName = keyedRef.getKeyName();
-			
-			if (fq.isApproximateMatch()) {
-				// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
-				//keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
-				//keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
+		//Now build the results taking into account AND/OR/LIKE
+		Set<String> resultingEntityKeys = new HashSet<String>();
+		if (fq.isOrAllKeys()) {
+			//in this case get ALL businessKeys
+			for (KeyedReference keyRef: map.keySet()) {
+				resultingEntityKeys.addAll(map.get(keyRef));
 			}
-
-			// Either opening up (and AND'ing) a new ""group"" of like keys or simply appending an ""or"".  If this is not ""orLikeKeys"", then just need to increment
-			// the table count.
-			if (fq.isOrLikeKeys()) {
-				if (count == 0) {
-					qry.openParen().pad();
-					tblCount++;
-				}
-				else {
-					if (!tmodelKey.equals(prevTModelKey)) {
-						qry.closeParen().pad().AND().pad().openParen().pad();
-						tblCount++;
-					}
-					else
-						qry.OR().pad();
+		} else if (fq.isOrLikeKeys()) {
+			// any keyedReference filters that come from the same namespace (e.g. have the same tModelKey value) 
+			// are OR’d together rather than AND’d
+			// 1. OR if we have keys with similar namespaces (keyValue)
+			Map<String,Set<String>> likeMap  = new HashMap<String,Set<String>>();
+			for (KeyedReference keyRef: map.keySet()) {
+				String keyValue = keyRef.getKeyValue();
+				if (likeMap.containsKey(keyValue)) {
+					likeMap.get(keyValue).addAll(map.get(keyRef));
+				} else {
+					likeMap.put(keyValue, map.get(keyRef));
 				}
 			}
-			else
-				tblCount++;
-			
-			String keyValueTerm = (fq.isOrAllKeys()?ALIAS_KEYEDREFERENCE + ""0"":ALIAS_KEYEDREFERENCE + tblCount) + "".keyValue"";
-			String keyNameTerm = (fq.isOrAllKeys()?ALIAS_KEYEDREFERENCE + ""0"":ALIAS_KEYEDREFERENCE + tblCount) + "".keyName"";
-			String tmodelKeyTerm = (fq.isOrAllKeys()?ALIAS_KEYEDREFERENCE + ""0"":ALIAS_KEYEDREFERENCE + tblCount) + "".tmodelKeyRef"";
-			if (fq.isCaseInsensitiveMatch()) {
-				keyValueTerm = ""upper("" + keyValueTerm + "")"";
-				keyValue = keyValue.toUpperCase();
-				
-				keyNameTerm = ""upper("" + keyNameTerm + "")"";
-				keyName = keyName.toUpperCase();
-			}
-			
-			
-			// According to specification, if the ""general keyword"" tmodel is used, then the keyName must be part of the query.
-			if (Constants.GENERAL_KEYWORD_TMODEL.equalsIgnoreCase(tmodelKey)) {
-				qry.appendGroupedAnd(new DynamicQuery.Parameter(tmodelKeyTerm, tmodelKey, DynamicQuery.PREDICATE_EQUALS),
-									 new DynamicQuery.Parameter(keyValueTerm, keyValue, predicate),
-									 new DynamicQuery.Parameter(keyNameTerm, keyName, predicate));
-			}
-			else {
-				qry.appendGroupedAnd(new DynamicQuery.Parameter(tmodelKeyTerm, tmodelKey, DynamicQuery.PREDICATE_EQUALS),
-									 new DynamicQuery.Parameter(keyValueTerm, keyValue, predicate));
-				
-			}
-			
-			if (count + 1 < keyedRefs.size()) {
-				if (fq.isOrAllKeys())
-					qry.OR().pad();
-				else if (fq.isOrLikeKeys()) {
+			// 2. Now AND the likeMap
+			boolean firstTime = true;
+			for (String keyValue: likeMap.keySet()) {
+				if (firstTime) {
+					resultingEntityKeys = map.get(keyValue);
+					firstTime = false;
+				} else {
+					resultingEntityKeys.retainAll(map.get(keyValue));
 				}
-				else
-					qry.AND().pad();
 			}
-			
-			// The ""orLikeKeys"" will always leave an unclosed parenthesis.  This will close it.
-			if (fq.isOrLikeKeys() && (count + 1 == keyedRefs.size()))
-				qry.closeParen().pad();
-
-			prevTModelKey = tmodelKey;
-			count++;
+		} else {
+			// AND keys by default, in this case each entity (business or service)
+			// needs to have ALL keys
+			boolean firstTime = true;
+			for (KeyedReference keyRef: map.keySet()) {
+				if (firstTime) {
+					resultingEntityKeys = map.get(keyRef);
+					firstTime = false;
+				} else {
+					resultingEntityKeys.retainAll(map.get(keyRef));
+				}
+			}
 		}
-		qry.closeParen().pad();
-		
+		return new ArrayList<String>(resultingEntityKeys);
 	}
-
-	
-	
-	/*
-	 * Appends the necessary join table for the child entity and additional tables for when keys are AND'd.  When ""orLikeKeys"" is used, 
-	 * we only need an extra table for each distinct tmodelKey.
+	/**
+	 * Finding the entities (businesses or services) that have a matching keyedReference in their
+	 * categoryBag.
+	 * 
+	 * @param map - result map of keyedReference and matching businesses
+	 * @param em
+	 * @param fq
+	 * @param categoryBag
+	 * @param entityField
+	 * @param entityNameChild
+	 * @param keysIn
+	 * @param restrictions
 	 */
-	public void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<KeyedReference> keyedRefs) {
-		
-		if (keyedRefs != null && keyedRefs.size() > 0) {
-			// Sorting the collection by tModel Key
-			Collections.sort(keyedRefs, new KeyedRefTModelComparator());
-
-			StringBuffer thetaJoins = new StringBuffer(200);
-			int tblCount = 0;
-			int count = 0;
-			String curTModelKey = null;
-			String prevTModelKey = null;
-			for(KeyedReference kr : keyedRefs) {
-				curTModelKey = kr.getTModelKey();
-				if (count != 0) {
-					if (!fq.isOrAllKeys()) {
-						if (fq.isOrLikeKeys() && curTModelKey.equals(prevTModelKey)) {
-							// Do nothing
-						}
-						else {
-							tblCount++;
-							qry.comma().pad().append(ENTITY_KEYEDREFERENCE + "" "" + ALIAS_KEYEDREFERENCE + tblCount).pad();
-							thetaJoins.append(ALIAS_KEYEDREFERENCE + (tblCount - 1) + ""."" + FIELD_CATEGORYBAG + "".id = "" + ALIAS_KEYEDREFERENCE + tblCount + ""."" + FIELD_CATEGORYBAG + "".id "");
-					//		thetaJoins.append(DynamicQuery.OPERATOR_AND + "" "");
-						}
-					}
-
-				}
-				else {
-					qry.comma().pad().append(ENTITY_KEYEDREFERENCE + "" "" + ALIAS_KEYEDREFERENCE + tblCount).pad();
-					//thetaJoins.append("" ( "");
-                                        thetaJoins.append(DynamicQuery.OPERATOR_AND + "" "");
-					thetaJoins.append(currentAlias + "".id = "" + ALIAS_KEYEDREFERENCE + tblCount + ""."" + FIELD_CATEGORYBAG + "".id "");
-					//thetaJoins.append(DynamicQuery.OPERATOR_OR + "" "");
-					//thetaJoins.append(entityAliasChild2 + "".id = "" + ALIAS_KEYEDREFERENCE + tblCount + ""."" + FIELD_CATEGORYBAG + "".id "");
-					///thetaJoins.append("" ) "");
-					thetaJoins.append(DynamicQuery.OPERATOR_AND + "" "");
-					
-				}
-				prevTModelKey = curTModelKey;
-				count++;
+	private void findEntityByCategoryQuery(Map<KeyedReference,Set<String>> map, EntityManager em, 
+			FindQualifiers fq, CategoryBag categoryBag, String entityField, String entityNameChild, 
+			List<?> keysIn, DynamicQuery.Parameter... restrictions) 
+	{
+		FindEntityByCategoryQuery findEntityByCategoryQuery2 = new FindEntityByCategoryQuery(
+				entityName, entityAlias, keyName, entityField, entityNameChild);
+		for (KeyedReference keyedReference : categoryBag.getKeyedReference()) {
+			CategoryBag categoryBagWithOneKey = new CategoryBag();
+			categoryBagWithOneKey.getKeyedReference().add(keyedReference);
+			List<?> entityKeys =  findEntityByCategoryQuery2.select(
+					em, fq, categoryBagWithOneKey, keysIn, restrictions);
+			@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
+			Set<String> keySet = new HashSet(entityKeys);
+			if (map.containsKey(keyedReference)) {
+				map.get(keyedReference).addAll(keySet);
+			} else {
+				map.put(keyedReference, keySet);
 			}
-			
-			qry.WHERE().pad().openParen().pad();
-			
-                        qry.append(joinClause).pad();
-
-			
-			// Appending the middling entity-specific category table condition
-			//qry.append(entityAlias + ""."" + keyName + "" = "" + entityAliasChild + ""."" + entityField + ""."" + KEY_NAME).pad();
-//			qry.AND().pad();
-
-			String thetaJoinsStr = thetaJoins.toString();
-			if (thetaJoinsStr.endsWith(DynamicQuery.OPERATOR_AND + "" ""))
-				thetaJoinsStr = thetaJoinsStr.substring(0, thetaJoinsStr.length() - (DynamicQuery.OPERATOR_AND + "" "").length());
-			qry.append(thetaJoinsStr);
-
-			qry.closeParen().pad();
 		}
 	}
 	
"
juddi,1713f5007adac67110e99b102a583396085b88e2,"JUDDI-545 rewriting the way combinedCategories queries are implemented. For Businesses is now also looks at the categoryBags on the Bindings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467686 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 20:02:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
index d16ae55..6d9afa0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCategoryQuery.java
@@ -52,7 +52,8 @@
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
 		if (parentKey != null && parentKey.length() > 0) {
-			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
+			DynamicQuery.Parameter param = new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" 
+					+ BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS); 
 			return findQuery.select(em, fq, categoryBag, keysIn, param);
 		}
 		else
"
juddi,1713f5007adac67110e99b102a583396085b88e2,"JUDDI-545 rewriting the way combinedCategories queries are implemented. For Businesses is now also looks at the categoryBags on the Bindings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1467686 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-13 20:02:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
index e22d97d..5718c5b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByCombinedCategoryQuery.java
@@ -38,12 +38,16 @@
  * and bindingTemplate elements were combined.  Searching for a category will yield a positive match on a registered 
  * business if any of the categoryBag elements contained within the full businessEntity element (including the 
  * categoryBag elements within contained or referenced businessService elements or bindingTemplate elements) 
- * contains the filter criteria.  In the case of find_service, this qualifier makes the categoryBag entries 
+ * contains the filter criteria. 
+ * 
+ * In the case of find_service, this qualifier makes the categoryBag entries 
  * for the full businessService element behave as though all categoryBag elements found at the businessService level 
  * and in all contained or referenced elements in the bindingTemplate elements were combined.  Searching for a category 
  * will yield a positive match on a registered service if any of the categoryBag elements contained within the 
  * full businessService element (including the categoryBag elements within contained or referenced bindingTemplate 
- * elements) contains the filter criteria. This find qualifier does not cause the keyedReferences in categoryBags 
+ * elements) contains the filter criteria. 
+ * 
+ * This find qualifier does not cause the keyedReferences in categoryBags 
  * to be combined with the keyedReferences in keyedReferenceGroups in categoryBags when performing the comparison.  
  * The keyedReferences are combined with each other, and the keyedReferenceGroups are combined with each other.""
  * 
@@ -54,17 +58,21 @@
 public class FindServiceByCombinedCategoryQuery {
 	
 	private static final String ENTITY_NAME_CHILD  = ""ServiceCategoryBag"";
+	private static final String ENTITY_FIELD2      = ""bindingTemplate."" + BusinessServiceQuery.ENTITY_FIELD;
 	private static final String ENTITY_NAME_CHILD2 = ""BindingCategoryBag"";
 	
 	private static FindEntityByCombinedCategoryQuery findQuery;
 	
 	static {
 		findQuery = new FindEntityByCombinedCategoryQuery(BusinessServiceQuery.ENTITY_NAME, 
-				BusinessServiceQuery.ENTITY_ALIAS, 
-				BusinessServiceQuery.KEY_NAME, 
-				BusinessServiceQuery.ENTITY_FIELD, 
-				ENTITY_NAME_CHILD,
-				ENTITY_NAME_CHILD2);
+														  BusinessServiceQuery.ENTITY_ALIAS, 
+														  BusinessServiceQuery.KEY_NAME, 
+														  BusinessServiceQuery.ENTITY_FIELD, 
+														  ENTITY_NAME_CHILD,
+														  ENTITY_FIELD2,
+														  ENTITY_NAME_CHILD2,
+														  null,
+														  null);
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, String parentKey, List<?> keysIn) {
@@ -75,15 +83,4 @@
 		else
 			return findQuery.select(em, fq, categoryBag, keysIn);
 	}
-	
-//	select service.entity_key, scb.id from juddiv3.j3_business_service service 
-//	join juddiv3.j3_service_category_bag scb on service.entity_key = scb.entity_key, 
-//	juddiv3.j3_keyed_reference kr0, juddiv3.j3_keyed_reference kr1 
-//	where (kr0.category_bag_id=scb.id and kr0.tmodel_key_ref='uddi:uddi.joepublisher.com:tmodel01' and kr0.key_value='value-z') or (kr1.category_bag_id=scb.id and
-//	kr1.tmodel_key_ref='uddi:uddi.joepublisher.com:tmodel02' and kr1.key_value='value-x') group by  service.entity_key, scb.id UNION
-//	select service.entity_key, bcb.id from juddiv3.j3_business_service service join juddiv3.j3_binding_template bt on service.entity_key = bt.service_key join
-//	juddiv3.j3_binding_category_bag bcb on bt.entity_key = bcb.entity_key,
-//	juddiv3.j3_keyed_reference kr0, juddiv3.j3_keyed_reference kr1 
-//	where (kr0.category_bag_id=bcb.id and kr0.tmodel_key_ref='uddi:uddi.joepublisher.com:tmodel01' and kr0.key_value='value-z') or (kr1.category_bag_id=bcb.id and
-//	kr1.tmodel_key_ref='uddi:uddi.joepublisher.com:tmodel02' and kr1.key_value='value-x') group by  service.entity_key, bcb.id ;
 }
"
juddi,fee75fd78c7b9f8845ea846e5a3152acdf6e86b7,"JUDDI-572, OpenJPA can throw a ClassCastException if an invalid key is given. Now catching this and sending out an InvalidKeyException.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1466229 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-09 21:00:40,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index b02aedc..01441f3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -192,11 +192,11 @@
 		keysFound = FindBusinessByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), keysFound);
 		keysFound = FindBusinessByIdentifierQuery.select(em, findQualifiers, body.getIdentifierBag(), keysFound);
 		keysFound = FindBusinessByDiscoveryURLQuery.select(em, findQualifiers, body.getDiscoveryURLs(), keysFound);
-                if (findQualifiers.isCombineCategoryBags()) {
-                    keysFound = FindBusinessByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
-                } else {
-                    keysFound = FindBusinessByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
-                }
+        if (findQualifiers.isCombineCategoryBags()) {
+            keysFound = FindBusinessByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
+        } else {
+            keysFound = FindBusinessByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
+        }
 
 		keysFound = FindBusinessByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
 		keysFound = FindBusinessByNameQuery.select(em, findQualifiers, body.getName(), keysFound);
@@ -470,8 +470,10 @@
 			throws DispositionReportFaultMessage {
 		if (relatedBusinessInfos == null)
 			relatedBusinessInfos = new org.uddi.api_v3.RelatedBusinessInfos();
-		
-		org.apache.juddi.model.BusinessEntity focalBusiness = em.find(org.apache.juddi.model.BusinessEntity.class, focalKey);
+		org.apache.juddi.model.BusinessEntity focalBusiness = null;
+		try {
+			focalBusiness = em.find(org.apache.juddi.model.BusinessEntity.class, focalKey);
+		} catch (ClassCastException e) {}
 		if (focalBusiness == null)
 			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", focalKey));
 
"
juddi,fee75fd78c7b9f8845ea846e5a3152acdf6e86b7,"JUDDI-572, OpenJPA can throw a ClassCastException if an invalid key is given. Now catching this and sending out an InvalidKeyException.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1466229 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-09 21:00:40,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index fb27614..af2c368 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -175,9 +175,11 @@
 			
 			List<String> publisherIdList = body.getPublisherId();
 			for (String publisherId : publisherIdList) {
-				
-				org.apache.juddi.model.Publisher modelPublisher = em.find(org.apache.juddi.model.Publisher.class, publisherId);
-				if (modelPublisher == null) {
+				org.apache.juddi.model.Publisher modelPublisher = null;
+				try {
+					modelPublisher = em.find(org.apache.juddi.model.Publisher.class, publisherId);
+				} catch (ClassCastException e) {}
+					if (modelPublisher == null) {
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.PublisherNotFound"", publisherId));
 				}
 				
@@ -388,8 +390,10 @@
 			List<String> subscriptionKeyList = body.getClientSubscriptionKey();
 			for (String subscriptionKey : subscriptionKeyList) {
 				
-				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo =
-					em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo = null;
+				try {
+					modelClientSubscriptionInfo = em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				} catch (ClassCastException e) {}
 				if (modelClientSubscriptionInfo == null) {
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.SubscripKeyNotFound"", subscriptionKey));
 				}
@@ -523,8 +527,10 @@
 			this.getEntityPublisher(em, body.getAuthInfo());
 			for (GetSubscriptionResults getSubscriptionResult : body.getGetSubscriptionResultsList()) {
 				String subscriptionKey = getSubscriptionResult.getSubscriptionKey();
-				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo =
-					em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo = null;
+				try {
+					modelClientSubscriptionInfo = em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				} catch (ClassCastException e) {}
 				if (modelClientSubscriptionInfo == null) {
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.SubscripKeyNotFound"", subscriptionKey));
 				}
"
juddi,fee75fd78c7b9f8845ea846e5a3152acdf6e86b7,"JUDDI-572, OpenJPA can throw a ClassCastException if an invalid key is given. Now catching this and sending out an InvalidKeyException.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1466229 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-09 21:00:40,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index f2b40dd..bb7c517 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -108,9 +108,12 @@
 			        // Check that we were passed a valid serviceKey per
         			// 5.1.12.4 of the UDDI v3 spec
         			String serviceKey = body.getServiceKey();
-        			org.apache.juddi.model.BusinessService modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
-        	                if (modelBusinessService == null)
-        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+        			org.apache.juddi.model.BusinessService modelBusinessService = null;
+        			try {
+        				em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+        			} catch (ClassCastException e) {}
+	                if (modelBusinessService == null)
+	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
 
 			    }
 			}
@@ -236,12 +239,15 @@
 		        if (keysFound.size() == 0) {
 		            if (body.getBusinessKey() != null) {
 		                // Check that we were passed a valid businessKey per
-        	                // 5.1.12.4 of the UDDI v3 spec
-        	                String businessKey = body.getBusinessKey();
-        	                org.apache.juddi.model.BusinessEntity modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
-        	                if (modelBusinessEntity == null) {
-        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", businessKey));
-        	                }
+    	                // 5.1.12.4 of the UDDI v3 spec
+    	                String businessKey = body.getBusinessKey();
+    	                org.apache.juddi.model.BusinessEntity modelBusinessEntity = null;
+    	                try {
+    	                	modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
+    	                } catch (ClassCastException e) {}
+    	                if (modelBusinessEntity == null) {
+    	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", businessKey));
+    	                }
 		            }
 		        }
 
@@ -324,8 +330,10 @@
 
 			List<String> bindingKeyList = body.getBindingKey();
 			for (String bindingKey : bindingKeyList) {
-
-				org.apache.juddi.model.BindingTemplate modelBindingTemplate = em.find(org.apache.juddi.model.BindingTemplate.class, bindingKey);
+				org.apache.juddi.model.BindingTemplate modelBindingTemplate = null;
+				try {
+					modelBindingTemplate = em.find(org.apache.juddi.model.BindingTemplate.class, bindingKey);
+				} catch (ClassCastException e) {}
 				if (modelBindingTemplate == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BindingTemplateNotFound"", bindingKey));
 
@@ -373,8 +381,10 @@
 
 			List<String> businessKeyList = body.getBusinessKey();
 			for (String businessKey : businessKeyList) {
-
-				org.apache.juddi.model.BusinessEntity modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
+				org.apache.juddi.model.BusinessEntity modelBusinessEntity = null;
+				try {
+					modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
+				} catch (ClassCastException e) {}
 				if (modelBusinessEntity == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", businessKey));
 
@@ -422,8 +432,10 @@
 
 			List<String> entityKeyList = body.getEntityKey();
 			for (String entityKey : entityKeyList) {
-
-				org.apache.juddi.model.UddiEntity modelUddiEntity = em.find(org.apache.juddi.model.UddiEntity.class, entityKey);
+				org.apache.juddi.model.UddiEntity modelUddiEntity = null;
+				try {
+					modelUddiEntity = em.find(org.apache.juddi.model.UddiEntity.class, entityKey);
+				} catch (ClassCastException e) {}
 				if (modelUddiEntity == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.EntityNotFound"", entityKey));
 
@@ -450,14 +462,14 @@
 	
     public ServiceDetail getServiceDetail(GetServiceDetail body)
 			throws DispositionReportFaultMessage {
-                long startTime = System.nanoTime();
-                try {
-                    new ValidateInquiry(null).validateGetServiceDetail(body);
-                } catch (DispositionReportFaultMessage drfm) {
-                    long procTime = System.nanoTime() - startTime;
-                    serviceCounter.update(InquiryQuery.GET_SERVICEDETAIL, QueryStatus.FAILED, procTime);                      
-                    throw drfm;
-                }
+        long startTime = System.nanoTime();
+        try {
+            new ValidateInquiry(null).validateGetServiceDetail(body);
+        } catch (DispositionReportFaultMessage drfm) {
+            long procTime = System.nanoTime() - startTime;
+            serviceCounter.update(InquiryQuery.GET_SERVICEDETAIL, QueryStatus.FAILED, procTime);                      
+            throw drfm;
+        }
 
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
@@ -471,8 +483,10 @@
 
 			List<String> serviceKeyList = body.getServiceKey();
 			for (String serviceKey : serviceKeyList) {
-
-				org.apache.juddi.model.BusinessService modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+				org.apache.juddi.model.BusinessService modelBusinessService = null;
+				try {
+					modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+				} catch (ClassCastException e){}
 				if (modelBusinessService == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
 
@@ -521,11 +535,12 @@
 
 			List<String> tmodelKeyList = body.getTModelKey();
 			for (String tmodelKey : tmodelKeyList) {
-
-				org.apache.juddi.model.Tmodel modelTModel = em.find(org.apache.juddi.model.Tmodel.class, tmodelKey);
-				if (modelTModel == null) {
+				org.apache.juddi.model.Tmodel modelTModel = null;
+				try {
+					modelTModel = em.find(org.apache.juddi.model.Tmodel.class, tmodelKey);
+				} catch (ClassCastException e) {}
+				if (modelTModel == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.TModelNotFound"", tmodelKey));
-				}
 
 				org.uddi.api_v3.TModel apiTModel = new org.uddi.api_v3.TModel();
 
"
juddi,fee75fd78c7b9f8845ea846e5a3152acdf6e86b7,"JUDDI-572, OpenJPA can throw a ClassCastException if an invalid key is given. Now catching this and sending out an InvalidKeyException.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1466229 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-09 21:00:40,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index aed417a..e907dda 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -75,8 +75,10 @@
 		
 				this.getEntityPublisher(em, body.getAuthInfo());
 				String subscriptionKey = body.getSubscriptionResultsList().getSubscription().getSubscriptionKey();
-				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo =
-					em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				org.apache.juddi.model.ClientSubscriptionInfo modelClientSubscriptionInfo = null;
+				try {
+					modelClientSubscriptionInfo = em.find(org.apache.juddi.model.ClientSubscriptionInfo.class, subscriptionKey);
+				} catch (ClassCastException e) {}
 				if (modelClientSubscriptionInfo == null) {
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.SubscripKeyNotFound"", subscriptionKey));
 				}
"
juddi,b8d8da738b5c9c383ac45c95a76bf583f23ef319,"JUDDI-572, reading release version from manifest

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1466138 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-09 17:15:00,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Release.java b/juddi-core/src/main/java/org/apache/juddi/config/Release.java
index f4642dc..e5ae4ab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Release.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Release.java
@@ -15,22 +15,28 @@
 package org.apache.juddi.config;
 
 /**
- * WARNING:
- * Do not modify this class as it is generated. Rather update the Release.java.template
- * in main/java/resources/version
+ * 
  */
 public class Release {
-	private static final String REGISTRY_VERSION = ""3.1.5-SNAPSHOT"";
+	
 	private static final String UDDI_VERSION = ""3.0"";
+	private static final String JAR_NAME = ""juddi-core"";
+	private static String registryVersion = null;
    
 	private Release () {
 	}
 
 	public static String getRegistryVersion() {
-		return REGISTRY_VERSION;
+		if (registryVersion == null) {
+			registryVersion = org.apache.juddi.v3.client.Release.getVersionFromManifest(JAR_NAME);
+		}
+		return registryVersion;
+		
 	}
 
 	public static String getUDDIVersion() {
 		return UDDI_VERSION;	
 	} 
+	
+	
 }
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 9a9945f..f2b40dd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -18,6 +18,7 @@
 package org.apache.juddi.api.impl;
 
 import java.util.List;
+import java.util.UUID;
 
 import javax.jws.WebService;
 import javax.persistence.EntityManager;
@@ -33,6 +34,7 @@
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.model.TempKey;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
@@ -113,7 +115,7 @@
 			    }
 			}
 			BindingDetail result = InquiryHelper.getBindingDetailFromKeys(body, findQualifiers, em, keysFound);
-			tx.commit();
+			tx.rollback();
                         long procTime = System.nanoTime() - startTime;
                         serviceCounter.update(InquiryQuery.FIND_BINDING, QueryStatus.SUCCESS, procTime);                      
 
@@ -153,7 +155,7 @@
 
 			BusinessList result = InquiryHelper.getBusinessListFromKeys(body, findQualifiers, em, keysFound);
 
-			tx.commit();
+			tx.rollback();
                         long procTime = System.nanoTime() - startTime;
                         serviceCounter.update(InquiryQuery.FIND_BUSINESS, QueryStatus.SUCCESS, procTime);                      
 
@@ -193,7 +195,7 @@
 
 			RelatedBusinessesList result = InquiryHelper.getRelatedBusinessesList(body, em);
 
-			tx.commit();
+			tx.rollback();
                         long procTime = System.nanoTime() - startTime;
                         serviceCounter.update(InquiryQuery.FIND_RELATEDBUSINESSES, QueryStatus.SUCCESS, procTime);                      
 
@@ -245,7 +247,7 @@
 
 			ServiceList result = InquiryHelper.getServiceListFromKeys(body, findQualifiers, em, keysFound);
 
-			tx.commit();
+			tx.rollback();
                         long procTime = System.nanoTime() - startTime;
                         serviceCounter.update(InquiryQuery.FIND_SERVICE, QueryStatus.SUCCESS, procTime);                      
 
@@ -285,7 +287,7 @@
 
 			TModelList result = InquiryHelper.getTModelListFromKeys(body, findQualifiers, em, keysFound);
 
-			tx.commit();
+			tx.rollback();
                         long procTime = System.nanoTime() - startTime;
                         serviceCounter.update(InquiryQuery.FIND_TMODEL, QueryStatus.SUCCESS, procTime);                      
 
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index dc0bad7..26923fd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Collections;
+
 import javax.persistence.EntityManager;
 import javax.persistence.Query;
 
@@ -29,6 +30,7 @@
 import org.uddi.api_v3.ListDescription;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
+import org.apache.juddi.model.TempKey;
 import org.apache.juddi.query.util.DynamicQuery;
 
 /**
@@ -38,6 +40,10 @@
 	private static Log log = LogFactory.getLog(EntityQuery.class);
 
 	public static final String KEY_NAME = ""entityKey"";
+	public static final String TEMP_ENTITY_NAME = ""TempKey"";
+	public static final String TEMP_ENTITY_ALIAS = ""tk"";
+	public static final String TEMP_ENTITY_PK_TXID_NAME = TEMP_ENTITY_ALIAS + "".pk.txId"";
+	public static final String TEMP_ENTITY_PK_KEY_NAME = TEMP_ENTITY_ALIAS + "".pk.entityKey"";
 
 	public static final int DEFAULT_MAXROWS = 1000;
 	public static final int DEFAULT_MAXINCLAUSE = 1000;
@@ -162,4 +168,13 @@
 
 	}
 	
+	public static void storeIntermediateKeySetResults (EntityManager em, String txId,  List<?> keysIn) {
+		
+		for (Object key : keysIn) {
+			TempKey tempKey = new TempKey();
+			tempKey.setPk(txId,key.toString());
+			em.persist(tempKey);
+		}
+	}
+	
 }
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
index 5d0a973..19dcd26 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
@@ -19,10 +19,15 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -51,15 +56,30 @@
 		selectSQL = sql.toString();
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRows, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
+	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRowsUser, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
 		
 		// If keysIn is null or empty, then nothing to fetch.
 		if ((keysIn == null) || (keysIn.size() == 0))
 			return Collections.emptyList();
-
+		int maxRows = DEFAULT_MAXROWS;
+		try {
+			maxRows = AppConfig.getConfiguration().getInteger(Property.JUDDI_MAX_ROWS, DEFAULT_MAXROWS);
+		}
+		catch(ConfigurationException ce) {
+			log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_ROWS);
+		}
 		DynamicQuery dynamicQry = new DynamicQuery(selectSQL);
-		appendSortTables(dynamicQry);
-		dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		if (keysIn.size() > maxRows) {
+			UUID uuid = UUID.randomUUID();
+			storeIntermediateKeySetResults(em, uuid.toString(), keysIn);
+			appendTempTable(dynamicQry);
+			appendSortTables(dynamicQry);
+			appendTempJoin(dynamicQry, uuid.toString());
+		}
+		else {
+			appendSortTables(dynamicQry);
+			dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		}
 		if (restrictions != null && restrictions.length > 0)
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
@@ -67,7 +87,18 @@
 
 		log.debug(dynamicQry);
 		
-		return getPagedResult(em, dynamicQry, maxRows, listHead, listDesc);
+		return getPagedResult(em, dynamicQry, maxRowsUser, listHead, listDesc);
+	}
+	
+	private static void appendTempTable(DynamicQuery qry) {
+		qry.comma().append(TEMP_ENTITY_NAME + "" "" +  TEMP_ENTITY_ALIAS );
+	}
+	
+	private static void appendTempJoin(DynamicQuery qry, String uuid) {
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_KEY_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.pad().append(ENTITY_ALIAS + ""."" + KEY_NAME);
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_TXID_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(""'"" + uuid + ""'"").pad();
 	}
 	
 	private static void appendSortTables(DynamicQuery qry) {
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
index 0e12eb9..1f41d81 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
@@ -19,10 +19,15 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -51,23 +56,49 @@
 		selectSQL = sql.toString();
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRows, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
+	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRowsUser, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
 		
 		// If keysIn is null or empty, then nothing to fetch.
 		if ((keysIn == null) || (keysIn.size() == 0))
-			return Collections.emptyList();
-
+		return Collections.emptyList();
+		
+		int maxRows = DEFAULT_MAXROWS;
+		try {
+			maxRows = AppConfig.getConfiguration().getInteger(Property.JUDDI_MAX_ROWS, DEFAULT_MAXROWS);
+		}
+		catch(ConfigurationException ce) {
+			log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_ROWS);
+		}
 		DynamicQuery dynamicQry = new DynamicQuery(selectSQL);
-		appendSortTables(dynamicQry);
-		dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		if (keysIn.size() > maxRows) {
+			UUID uuid = UUID.randomUUID();
+			storeIntermediateKeySetResults(em, uuid.toString(), keysIn);
+			appendTempTable(dynamicQry);
+			appendSortTables(dynamicQry);
+			appendTempJoin(dynamicQry, uuid.toString());
+		}
+		else {
+			appendSortTables(dynamicQry);
+			dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		}
 		if (restrictions != null && restrictions.length > 0)
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 
 		appendSortCriteria(dynamicQry, fq);
 
 		log.debug(dynamicQry);
-		
-		return getPagedResult(em, dynamicQry, maxRows, listHead, listDesc);
+		return getPagedResult(em, dynamicQry, maxRowsUser, listHead, listDesc);
+	}
+	
+	private static void appendTempTable(DynamicQuery qry) {
+		qry.comma().append(TEMP_ENTITY_NAME + "" "" +  TEMP_ENTITY_ALIAS );
+	}
+	
+	private static void appendTempJoin(DynamicQuery qry, String uuid) {
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_KEY_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.pad().append(ENTITY_ALIAS + ""."" + KEY_NAME);
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_TXID_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(""'"" + uuid + ""'"").pad();
 	}
 	
 	private static void appendSortTables(DynamicQuery qry) {
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
index 25501be..eb14a83 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
@@ -19,10 +19,15 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -51,23 +56,49 @@
 		selectSQL = sql.toString();
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRows, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
+	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRowsUser, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
 		
 		// If keysIn is null or empty, then nothing to fetch.
 		if ((keysIn == null) || (keysIn.size() == 0))
 			return Collections.emptyList();
-
+		
+		int maxRows = DEFAULT_MAXROWS;
+		try {
+			maxRows = AppConfig.getConfiguration().getInteger(Property.JUDDI_MAX_ROWS, DEFAULT_MAXROWS);
+		}
+		catch(ConfigurationException ce) {
+			log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_ROWS);
+		}
 		DynamicQuery dynamicQry = new DynamicQuery(selectSQL);
-		appendSortTables(dynamicQry);
-		dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		if (keysIn.size() > maxRows) {
+			UUID uuid = UUID.randomUUID();
+			storeIntermediateKeySetResults(em, uuid.toString(), keysIn);
+			appendTempTable(dynamicQry);
+			appendSortTables(dynamicQry);
+			appendTempJoin(dynamicQry, uuid.toString());
+		}
+		else {
+			appendSortTables(dynamicQry);
+			dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		}
 		if (restrictions != null && restrictions.length > 0)
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
 
 		log.debug(dynamicQry);
-		
-		return getPagedResult(em, dynamicQry, maxRows, listHead, listDesc);
+		return getPagedResult(em, dynamicQry, maxRowsUser, listHead, listDesc);
+	}
+	
+	private static void appendTempTable(DynamicQuery qry) {
+		qry.comma().append(TEMP_ENTITY_NAME + "" "" +  TEMP_ENTITY_ALIAS );
+	}
+	
+	private static void appendTempJoin(DynamicQuery qry, String uuid) {
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_KEY_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(ENTITY_ALIAS + ""."" + KEY_NAME);
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_TXID_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(""'"" + uuid + ""'"").pad();
 	}
 	
 	private static void appendSortTables(DynamicQuery qry) {
"
juddi,30696b35f5be9b89ec4de794778f7bcd3cc1149a,"JUDDI-569 fixing performance issue with fetching services.
We now use a temporary key table so we can use a JOIN, rather then an IN clause when the number of keys hit the maxRows (as defined in the juddiv3.properties), which defaults to 1000. Applied same fix to fetching businesses, bindingTemplates and tModels. This also fixes JUDDI-89.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464858 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 06:28:13,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
index e660ac5..dfd8618 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
@@ -19,10 +19,15 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.UUID;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -51,15 +56,30 @@
 		selectSQL = sql.toString();
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRows, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
+	public static List<?> select(EntityManager em, FindQualifiers fq, List<?> keysIn, Integer maxRowsUser, Integer listHead, ListDescription listDesc, DynamicQuery.Parameter... restrictions) throws DispositionReportFaultMessage {
 		
 		// If keysIn is null or empty, then nothing to fetch.
 		if ((keysIn == null) || (keysIn.size() == 0))
 			return Collections.emptyList();
-
+		int maxRows = DEFAULT_MAXROWS;
+		try {
+			maxRows = AppConfig.getConfiguration().getInteger(Property.JUDDI_MAX_ROWS, DEFAULT_MAXROWS);
+		}
+		catch(ConfigurationException ce) {
+			log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_MAX_ROWS);
+		}
 		DynamicQuery dynamicQry = new DynamicQuery(selectSQL);
-		appendSortTables(dynamicQry);
-		dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		if (keysIn.size() > maxRows) {
+			UUID uuid = UUID.randomUUID();
+			storeIntermediateKeySetResults(em, uuid.toString(), keysIn);
+			appendTempTable(dynamicQry);
+			appendSortTables(dynamicQry);
+			appendTempJoin(dynamicQry, uuid.toString());
+		}
+		else {
+			appendSortTables(dynamicQry);
+			dynamicQry.appendInListWithAnd(ENTITY_ALIAS + ""."" + KEY_NAME, keysIn);
+		}
 		if (restrictions != null && restrictions.length > 0)
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
@@ -67,7 +87,18 @@
 
 		log.debug(dynamicQry);
 		
-		return getPagedResult(em, dynamicQry, maxRows, listHead, listDesc);
+		return getPagedResult(em, dynamicQry, maxRowsUser, listHead, listDesc);
+	}
+	
+	private static void appendTempTable(DynamicQuery qry) {
+		qry.comma().append(TEMP_ENTITY_NAME + "" "" +  TEMP_ENTITY_ALIAS );
+	}
+	
+	private static void appendTempJoin(DynamicQuery qry, String uuid) {
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_KEY_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(ENTITY_ALIAS + ""."" + KEY_NAME);
+		qry.pad().AND().pad().append(TEMP_ENTITY_PK_TXID_NAME).append(DynamicQuery.PREDICATE_EQUALS);
+		qry.append(""'"" + uuid + ""'"").pad();
 	}
 	
 	private static void appendSortTables(DynamicQuery qry) {
"
juddi,8bff1dbc32af47e691e94c34a3f00b11fce024ba,"JUDDI-573 fixing performance issue while querying for busineses with lots of services. There is no need o re-query each service in this case. This optimization brought the query time down to less then 1 second.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464796 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 00:20:47,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 039c342..b02aedc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -201,6 +201,9 @@
 		keysFound = FindBusinessByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
 		keysFound = FindBusinessByNameQuery.select(em, findQualifiers, body.getName(), keysFound);
 		
+		// If there no keys in the bag then remove the empty TModelBag
+		if (body.getTModelBag().getTModelKey().size()==0) body.setTModelBag(null);
+				
 		return keysFound;
 	}
 
@@ -208,7 +211,6 @@
 		return getBusinessListFromKeys(body, findQualifiers, em, keysFound, null, null, null, null);
 	}
 	
-	@SuppressWarnings(""unchecked"")
 	public static BusinessList getBusinessListFromKeys(FindBusiness body, FindQualifiers findQualifiers, EntityManager em, List<?> keysFound,
 													   Date modifiedAfter, Date modifiedBefore, Holder<Integer> subscriptionStartIndex, Integer subscriptionMaxRows)
 				   throws DispositionReportFaultMessage {
@@ -218,28 +220,8 @@
 		result.setListDescription(listDesc);
 
 		// Sort and retrieve the final results taking paging into account
-		List<?> queryResults = FetchBusinessEntitiesQuery.select(em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
-		List<?> serviceResults = null;
-		for (int i = 0; i<queryResults.size(); i++) {
-			org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
-			
-			List<Object> keysIn = new ArrayList<Object>();
-			List<org.apache.juddi.model.BusinessService> services = be.getBusinessServices();
-			for (int j = 0; j<services.size(); j++) {
-				keysIn.add(services.get(j).getEntityKey());
-			}
-
-			serviceResults = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), null, keysIn);
-			if (serviceResults == null) {
-				be.setBusinessServices(null);
-			} else { 
-				ListDescription ldesc = new ListDescription();
-				result.setListDescription(listDesc);
-				List<?> srvcs = FetchBusinessServicesQuery.select(em, findQualifiers, serviceResults, body.getMaxRows(), 
-						body.getListHead(), ldesc);
-				be.setBusinessServices((List<org.apache.juddi.model.BusinessService>)srvcs);
-			}
-		}
+		List<?> queryResults = FetchBusinessEntitiesQuery.select(
+				em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
 			
 		if (queryResults != null && queryResults.size() > 0)
 			result.setBusinessInfos(new org.uddi.api_v3.BusinessInfos());
@@ -304,7 +286,6 @@
 			body.setTModelBag(new TModelBag());
 		doFindTModelEmbeddedSearch(em, body.getFindQualifiers(), body.getFindTModel(), body.getTModelBag());
 		
-		
 		keysFound = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), body.getBusinessKey(), keysFound);
                 if (findQualifiers.isCombineCategoryBags()) {
 		    keysFound = FindServiceByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
@@ -347,7 +328,7 @@
 			org.apache.juddi.model.BusinessService modelBusinessService = (org.apache.juddi.model.BusinessService)item;
 			org.uddi.api_v3.ServiceInfo apiServiceInfo = new org.uddi.api_v3.ServiceInfo();
 			
-			logger.info(modelBusinessService.getEntityKey() + "" is modified "" + modelBusinessService.getModifiedIncludingChildren() + "" "" + modelBusinessService.getModifiedIncludingChildren().getTime() );
+			logger.debug(modelBusinessService.getEntityKey() + "" is modified "" + modelBusinessService.getModifiedIncludingChildren() + "" "" + modelBusinessService.getModifiedIncludingChildren().getTime() );
 			if (modifiedAfter != null && modifiedAfter.after(modelBusinessService.getModifiedIncludingChildren())) {
 				currentIndex++;
 				continue;
"
juddi,8bff1dbc32af47e691e94c34a3f00b11fce024ba,"JUDDI-573 fixing performance issue while querying for busineses with lots of services. There is no need o re-query each service in this case. This optimization brought the query time down to less then 1 second.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464796 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 00:20:47,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 3e68d9c..9a9945f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -33,6 +33,7 @@
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.validation.ValidateInquiry;
@@ -232,12 +233,12 @@
 
 		        if (keysFound.size() == 0) {
 		            if (body.getBusinessKey() != null) {
-		                // Check that we were passed a valid serviceKey per
+		                // Check that we were passed a valid businessKey per
         	                // 5.1.12.4 of the UDDI v3 spec
         	                String businessKey = body.getBusinessKey();
         	                org.apache.juddi.model.BusinessEntity modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
         	                if (modelBusinessEntity == null) {
-        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", businessKey));
+        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", businessKey));
         	                }
 		            }
 		        }
"
juddi,8bff1dbc32af47e691e94c34a3f00b11fce024ba,"JUDDI-573 fixing performance issue while querying for busineses with lots of services. There is no need o re-query each service in this case. This optimization brought the query time down to less then 1 second.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1464796 13f79535-47bb-0310-9956-ffa450edef68
",2013-04-05 00:20:47,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
index 98222ea..d9107d1 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
@@ -22,6 +22,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
 import org.junit.Assert;
+import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.FindQualifiers;
@@ -76,8 +77,8 @@
 		saveService2(authInfoJoe, JOE_SERVICE_KEY, JOE_SERVICE_XML_2, JOE_SERVICE_KEY_2);
 	}
 
-	public void saveJoePublisherServices(String authInfoJoe, int numberOfCopies) {
-		saveServices(authInfoJoe, JOE_SERVICE_XML, JOE_SERVICE_KEY, numberOfCopies);
+	public void saveJoePublisherServices(String authInfoJoe, int businessInt, int numberOfCopies) {
+		saveServices(authInfoJoe, businessInt, JOE_SERVICE_XML, JOE_SERVICE_KEY, numberOfCopies);
 	}
 	
 	public void deleteJoePublisherService(String authInfoJoe) {
@@ -97,40 +98,48 @@
 	}
 
 	
-	public void deleteJoePublisherServices(String authInfoJoe, int numberOfCopies) {
-		deleteServices(authInfoJoe, JOE_SERVICE_KEY, numberOfCopies);
+	public void deleteJoePublisherServices(String authInfoJoe, int businessInt, int numberOfCopies) {
+		deleteServices(authInfoJoe, businessInt,JOE_SERVICE_KEY, numberOfCopies);
 	}
 	
 	public void saveSamSyndicatorService(String authInfoSam) {
 		saveService(authInfoSam, SAM_SERVICE_XML, SAM_SERVICE_KEY);
 	}
 	
-	public void saveSamSyndicatorServices(String authInfoSam, int numberOfCopies) {
-		saveServices(authInfoSam, SAM_SERVICE_XML, SAM_SERVICE_KEY, numberOfCopies);
+	public void saveSamSyndicatorServices(String authInfoSam, int businessInt, int numberOfCopies) {
+		saveServices(authInfoSam, businessInt, SAM_SERVICE_XML, SAM_SERVICE_KEY, numberOfCopies);
 	}
 	
 	public void deleteSamSyndicatorService(String authInfoSam) {
 		deleteService(authInfoSam, SAM_SERVICE_KEY);
 	}
 	
-	public void deleteSamSyndicatorServices(String authInfoSam, int numberOfCopies) {
-		deleteServices(authInfoSam, SAM_SERVICE_KEY, numberOfCopies);
+	public void deleteSamSyndicatorServices(String authInfoSam, int businessInt, int numberOfCopies) {
+		deleteServices(authInfoSam, businessInt, SAM_SERVICE_KEY, numberOfCopies);
 	}
 	
-	public void saveServices(String authInfo, String serviceXML, String serviceKey, int numberOfCopies) {
+	public void saveServices(String authInfo, int businessInt, String serviceXML, String serviceKey, int numberOfCopies) {
+		SaveService ss = null;
 		try {
 			org.uddi.api_v3.BusinessService bsIn = (org.uddi.api_v3.BusinessService)EntityCreator.buildFromDoc(serviceXML, ""org.uddi.api_v3"");
 			String serviceName = bsIn.getName().get(0).getValue();
 			String bindingKey = bsIn.getBindingTemplates().getBindingTemplate().get(0).getBindingKey();
 			for (int i=0; i<numberOfCopies; i++) {
 			    // save the entity
-				SaveService ss = new SaveService();
+				ss = new SaveService();
 				ss.setAuthInfo(authInfo);
 				bsIn.getName().get(0).setValue(serviceName + ""-"" + i);
-				
-				bsIn.setServiceKey(serviceKey + ""-"" + i);
-				bsIn.getBindingTemplates().getBindingTemplate().get(0).setBindingKey(bindingKey + ""-"" + i);
+				bsIn.setBusinessKey(TckBusiness.JOE_BUSINESS_KEY + ""-"" + businessInt);
+				bsIn.setServiceKey(serviceKey + ""-"" + businessInt + ""-"" + i);
+				bsIn.getBindingTemplates().getBindingTemplate().get(0).setBindingKey(bindingKey + ""-"" + businessInt + ""-"" + i);
+				bsIn.getBindingTemplates().getBindingTemplate().get(0).setServiceKey(serviceKey + ""-"" + businessInt + ""-"" + i);
 				ss.getBusinessService().add(bsIn);
+				
+				BindingTemplate bt = bsIn.getBindingTemplates().getBindingTemplate().get(0);
+				if (! bt.getServiceKey().equals(serviceKey + ""-"" + businessInt + ""-"" + i)) {
+					System.out.println(""not the same"");
+				}
+				
 				publication.saveService(ss);
 				logger.debug(""Add service with key "" + bsIn.getServiceKey());
 			}
@@ -223,16 +232,15 @@
 		}
 	}
 	
-	public void deleteServices(String authInfo, String serviceKey, int numberOfCopies) {
+	public void deleteServices(String authInfo, int businessInt, String serviceKey, int numberOfCopies) {
 		try {
 			for (int i=0; i<numberOfCopies; i++) {
 				// Delete the entity and make sure it is removed
 				DeleteService ds = new DeleteService();
 				ds.setAuthInfo(authInfo);
-				
-				ds.getServiceKey().add(serviceKey + ""-"" + i);
+				ds.getServiceKey().add(serviceKey + ""-"" + businessInt + ""-"" + i);
 				publication.deleteService(ds);
-				logger.debug(""Deleted Service with key "" + serviceKey + ""-"" + i);
+				logger.debug(""Deleted Service with key "" + businessInt + ""-"" + serviceKey + ""-"" + i);
 			}
 		}
 		catch(Exception e) {
"
juddi,84a0de3ebc02381f1b2b86d526b3e67ba037eb1e,"JUDDI-574 fix to return the langcode

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1460933 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-25 23:32:05,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 417ad57..03170f1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -901,6 +901,7 @@
 		apiTModelInfo.setTModelKey(modelTModel.getEntityKey());
 		org.uddi.api_v3.Name apiName = new org.uddi.api_v3.Name();
 		apiName.setValue(modelTModel.getName());
+		apiName.setLang(modelTModel.getLangCode());
 		apiTModelInfo.setName(apiName);
 
 		mapTModelDescriptions(modelTModel.getTmodelDescrs(), apiTModelInfo.getDescription());
"
juddi,361a5c47790d987e09e840fba08c7c69b36f6a83,"Adding a simple readme to help people get up and running quickly.
ValidatePublish removed some unused flags
Adding UDDI_141_JIRAIntegrationTest which covers
JIRA: JUDDI-574 - this will probably break the build until someone solves the root cause
JIRA: JUDDI-571

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1460909 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-25 21:52:21,alexoree,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 1bdbda8..6708531 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -103,37 +103,6 @@
 
     public ValidatePublish(UddiEntityPublisher publisher) {
         super(publisher);
-        buildInTmodels = new HashSet<String>();
-        buildInTmodels.add(""uddi:uddi.org:keygenerator"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:types"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:keygenerator"");
-        buildInTmodels.add(""uddi:uddi.org:sortorder:keygenerator"");
-        buildInTmodels.add(""uddi:uddi.org:transport:keygenerator"");
-        buildInTmodels.add(""uddi:uddi.org:v3_inquiry"");
-        buildInTmodels.add(""uddi:uddi.org:v3_publication"");
-        buildInTmodels.add(""uddi:uddi.org:v3_security"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:general_keywords"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:nodes"");
-        buildInTmodels.add(""uddi:uddi.org:relationships"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:owningbusiness"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:entitykeyvalues"");
-        buildInTmodels.add(""uddi:uddi.org:identifier:isreplacedby"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:validatedby"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:derivedfrom"");
-        buildInTmodels.add(""uddi:uddi.org:categorization:entitykeyvalues"");
-        buildInTmodels.add(""uddi:uddi.org:protocol:serverauthenticatedssl3"");
-        buildInTmodels.add(""uddi:uddi.org:protocol:mutualauthenticatedssl3"");
-        buildInTmodels.add(""uddi:uddi.org:transport:http"");
-        buildInTmodels.add(""uddi:uddi.org:transport:smtp"");
-        buildInTmodels.add(""uddi:uddi.org:transport:ftp"");
-        buildInTmodels.add(""uddi:uddi.org:transport:fax"");
-        buildInTmodels.add(""uddi:uddi.org:transport:telephone"");
-        buildInTmodels.add(""uddi:uddi.org:transport:rmi"");
-        buildInTmodels.add(""uddi:uddi.org:transport:jndi-rmi"");
-        buildInTmodels.add(""uddi:uddi.org:findqualifier:approximatematch"");
-        //note save tmodel/catbag/kr can reference itself!
-
-
     }
 
     public void validateDeleteBusiness(EntityManager em, DeleteBusiness body) throws DispositionReportFaultMessage {
"
juddi,c73771253747bacfc11667ff26f5a8569541bf3f,"JUDDI-566 Fixing NPE

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1454879 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-10 17:14:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index cc819e1..1f6d048 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -500,8 +500,11 @@
 
 		modelBindingTemplate.setBusinessService(modelBusinessService);
 		modelBindingTemplate.setEntityKey(apiBindingTemplate.getBindingKey());
-		modelBindingTemplate.setAccessPointType(apiBindingTemplate.getAccessPoint().getUseType());
-		modelBindingTemplate.setAccessPointUrl(apiBindingTemplate.getAccessPoint().getValue());
+        if (apiBindingTemplate.getAccessPoint()!=null)
+        {
+        	modelBindingTemplate.setAccessPointType(apiBindingTemplate.getAccessPoint().getUseType());
+        	modelBindingTemplate.setAccessPointUrl(apiBindingTemplate.getAccessPoint().getValue());
+        }
 		if (apiBindingTemplate.getHostingRedirector() != null) {
 			modelBindingTemplate.setHostingRedirector(apiBindingTemplate.getHostingRedirector().getBindingKey());
 		}
"
juddi,46002aafe8c12781abebf3f282a36c0b8f6594e9,"JUDDI-562 fixing build issues. Somehow we started running into the LOB max of 255 issue on Derby with Hibernate. Good catch by CI.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1453917 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-07 15:39:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/KeyDataValue.java b/juddi-core/src/main/java/org/apache/juddi/model/KeyDataValue.java
index fafc4bf..5dfdd6d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/KeyDataValue.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/KeyDataValue.java
@@ -121,7 +121,7 @@
     }
 
     @Lob
-    @Column(name=""key_data_value"")
+    @Column(name=""key_data_value"", length = 65636)
     public byte[] getKeyDataValueBytes() {
         return keyDataValueBytes;
     }
@@ -131,7 +131,7 @@
     }
 
     @Lob
-    @Column(name=""key_data_value_string"")
+    @Column(name=""key_data_value_string"", length = 65636)
     public String getKeyDataValueString() {
         return keyDataValueString;
     }
"
juddi,46002aafe8c12781abebf3f282a36c0b8f6594e9,"JUDDI-562 fixing build issues. Somehow we started running into the LOB max of 255 issue on Derby with Hibernate. Good catch by CI.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1453917 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-07 15:39:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ObjectTypeContent.java b/juddi-core/src/main/java/org/apache/juddi/model/ObjectTypeContent.java
index 6420549..45a752f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ObjectTypeContent.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ObjectTypeContent.java
@@ -15,6 +15,7 @@
  */
 package org.apache.juddi.model;
 
+import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
 import javax.persistence.GeneratedValue;
@@ -58,6 +59,7 @@
     }
     
     @Lob
+    @Column(length = 65636)
     public byte[] getContent() {
         return content;
     }
"
juddi,46002aafe8c12781abebf3f282a36c0b8f6594e9,"JUDDI-562 fixing build issues. Somehow we started running into the LOB max of 255 issue on Derby with Hibernate. Good catch by CI.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1453917 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-07 15:39:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Reference.java b/juddi-core/src/main/java/org/apache/juddi/model/Reference.java
index 0a8f60c..42de588 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Reference.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Reference.java
@@ -88,7 +88,7 @@
     }
 
     @Lob
-    @Column(name=""digest_value"")
+    @Column(name=""digest_value"", length = 65636)
     public byte[] getDigestValue() {
         return digestValue;
     }
"
juddi,46002aafe8c12781abebf3f282a36c0b8f6594e9,"JUDDI-562 fixing build issues. Somehow we started running into the LOB max of 255 issue on Derby with Hibernate. Good catch by CI.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1453917 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-07 15:39:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
index 6c95d90..99323ab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SignatureTransformDataValue.java
@@ -69,7 +69,7 @@
     }
 
     @Lob
-    @Column(name=""content_bytes"")
+    @Column(name=""content_bytes"", length = 65636)
     public byte[] getContentBytes() {
         return contentBytes;
     }
"
juddi,46002aafe8c12781abebf3f282a36c0b8f6594e9,"JUDDI-562 fixing build issues. Somehow we started running into the LOB max of 255 issue on Derby with Hibernate. Good catch by CI.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1453917 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-07 15:39:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SignatureValue.java b/juddi-core/src/main/java/org/apache/juddi/model/SignatureValue.java
index 458b9b1..de80749 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SignatureValue.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SignatureValue.java
@@ -45,7 +45,7 @@
         this.id = id;
     }
 
-    @Column(name=""value_bytes"")
+    @Column(name=""value_bytes"", length = 65636)
     @Lob
     public byte[] getValue() {
         return value;
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index acf67fe..83cc221 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -143,6 +143,7 @@
 			subscriptions.add(subscription);
 			holder.value = subscriptions;
 			getUDDINode().getTransport().getUDDISubscriptionService(node.getSubscriptionUrl()).saveSubscription(authToken, holder);
+			if (log.isDebugEnabled()) log.debug(""Registering subscription "" +  subscription.getSubscriptionKey() + "" completed."");
 		} catch (Exception e) {
 			log.error(""Unable to register subscription "" +  subscription.getSubscriptionKey()
 					+ "" ."" + e.getMessage(),e);
@@ -150,7 +151,6 @@
 			log.error(""Unable to register subscriptionl "" +  subscription.getSubscriptionKey()
 					+ "" ."" + t.getMessage(),t);
 		}
-		log.debug(""Registering subscription "" +  subscription.getSubscriptionKey() + "" completed."");
 		subscription = holder.value.get(0);
 		return subscription;
 	}
@@ -175,6 +175,7 @@
 			saveTModel.setAuthInfo(authToken);
 			saveTModel.getTModel().add(tModel);
 			tModelDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveTModel(saveTModel);
+			if (log.isDebugEnabled()) log.debug(""Registering tModel "" +  tModel.getTModelKey() + "" completed."");
 		} catch (Exception e) {
 			log.error(""Unable to register tModel "" +  tModel.getTModelKey()
 					+ "" ."" + e.getMessage(),e);
@@ -182,7 +183,6 @@
 			log.error(""Unable to register tModel "" +  tModel.getTModelKey()
 					+ "" ."" + t.getMessage(),t);
 		}
-		log.debug(""Registering tModel "" +  tModel.getTModelKey() + "" completed."");
 		return tModelDetail;
 	}
 	
@@ -208,6 +208,7 @@
 			saveBinding.getBindingTemplate().add(binding);
 			BindingDetail bindingDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBinding(saveBinding);
 			bindingTemplate = bindingDetail.getBindingTemplate().get(0);
+			if (log.isDebugEnabled()) log.debug(""Registering template binding "" + binding.getBindingKey() + "" completed."");
 		} catch (Exception e) {
 			log.error(""Unable to register template binding "" + bindingTemplate.getBindingKey()
 					+ "" ."" + e.getMessage(),e);
@@ -215,7 +216,6 @@
 			log.error(""Unable to register template binding "" + bindingTemplate.getBindingKey()
 					+ "" ."" + t.getMessage(),t);
 		}
-		log.debug(""Registering template binding "" + binding.getBindingKey() + "" completed."");
 		return bindingTemplate;
 	}
 	/**
@@ -241,6 +241,7 @@
 			saveService.getBusinessService().add(service);
 			ServiceDetail serviceDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveService(saveService);
 			businessService = serviceDetail.getBusinessService().get(0);
+			if (log.isDebugEnabled()) log.debug(""Registering service "" + service.getName().get(0).getValue() + "" completed."");
 		} catch (Exception e) {
 			log.error(""Unable to register service "" + service.getName().get(0).getValue()
 					+ "" ."" + e.getMessage(),e);
@@ -248,7 +249,6 @@
 			log.error(""Unable to register service "" + service.getName().get(0).getValue()
 					+ "" ."" + t.getMessage(),t);
 		}
-		log.debug(""Registering service "" + service.getName().get(0).getValue() + "" completed."");
 		return businessService;
 	}
 	public BusinessEntity register(BusinessEntity business) {
@@ -256,7 +256,7 @@
 	}
 	/**
 	 * Register a service.
-	 * 
+	 * returns null if not successful 
 	 */
 	public BusinessEntity register(BusinessEntity business, Node node) {
 		
@@ -270,6 +270,7 @@
 			saveBusiness.getBusinessEntity().add(business);
 			BusinessDetail businessDetail = getUDDINode().getTransport().getUDDIPublishService(node.getPublishUrl()).saveBusiness(saveBusiness);
 			businessEntity = businessDetail.getBusinessEntity().get(0);
+			if (log.isDebugEnabled()) log.debug(""Registering businessEntity "" + businessEntity.getName().get(0).getValue() + "" completed."");
 		} catch (Exception e) {
 			log.error(""Unable to register business "" + business.getName().get(0).getValue()
 					+ "" ."" + e.getMessage(),e);
@@ -277,7 +278,6 @@
 			log.error(""Unable to register business "" + business.getName().get(0).getValue()
 					+ "" ."" + t.getMessage(),t);
 		}
-		log.debug(""Registering businessEntity "" + businessEntity.getName().get(0).getValue() + "" completed."");
 		return businessEntity;
 	}
 	
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
index 1e58dc2..c013de4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
@@ -480,8 +480,8 @@
     	
     	FindTModel findTModel = new FindTModel();
     	CategoryBag categoryBag = new CategoryBag();
-    	
-    	if (namespace!=null && namespace!="""") {
+    
+    	if (namespace!=null && namespace.length()!=0) {
     		KeyedReference namespaceReference = newKeyedReference(
     			""uddi:uddi.org:xml:namespace"", namespace);
     		categoryBag.getKeyedReference().add(namespaceReference);
@@ -516,7 +516,7 @@
     	findTModel.setName(name);
     	
     	CategoryBag categoryBag = new CategoryBag();
-    	if (namespace!=null && namespace!="""") {
+    	if (namespace!=null && namespace.length()!=0) {
     		KeyedReference namespaceReference = newKeyedReference(
     			""uddi:uddi.org:xml:namespace"", namespace);
     		categoryBag.getKeyedReference().add(namespaceReference);
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
index 60ba793..301ea54 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDLLocatorImpl.java
@@ -84,7 +84,10 @@
 		} catch (Exception e) {
 			log.error(e.getMessage(),e);
 		}
-		log.debug(""importUrl: "" + importUrl.toExternalForm());
+		if (importUrl != null)
+			log.debug(""importUrl: "" + importUrl.toExternalForm());
+		else
+			log.error(""importUrl is null!"");
 		return importUrl;
 	}
 
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
index 106d3e3..6f99497 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
@@ -122,7 +122,7 @@
 	 */
 	public static void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<String> tmodelKeys) {
 		
-		if (tmodelKeys != null & tmodelKeys.size() > 0) {
+		if (tmodelKeys != null && tmodelKeys.size() > 0) {
 
 			StringBuffer thetaJoins = new StringBuffer(200);
 			int tblCount = 0;
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
index f877a9a..72acba7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
@@ -121,7 +121,7 @@
 	public static void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<String> tmodelKeys) {
 		
 
-		if (tmodelKeys != null & tmodelKeys.size() > 0) {
+		if (tmodelKeys != null && tmodelKeys.size() > 0) {
 			qry.comma().pad().append(BusinessServiceQuery.ENTITY_NAME + "" "" + BusinessServiceQuery.ENTITY_ALIAS).pad();
 			qry.comma().pad().append(BindingTemplateQuery.ENTITY_NAME + "" "" + BindingTemplateQuery.ENTITY_ALIAS).pad();
 			
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index da960b5..d37b03b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -243,7 +243,7 @@
 	 */
 	public void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<KeyedReference> keyedRefs) {
 		
-		if (keyedRefs != null & keyedRefs.size() > 0) {
+		if (keyedRefs != null && keyedRefs.size() > 0) {
 			// Sorting the collection by tModel Key
 			Collections.sort(keyedRefs, new KeyedRefTModelComparator());
 
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index c26fe55..df338e0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -332,7 +332,7 @@
 	 */
 	public void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<KeyedReference> keyedRefs) {
 		
-		if (keyedRefs != null & keyedRefs.size() > 0) {
+		if (keyedRefs != null && keyedRefs.size() > 0) {
 			// Sorting the collection by tModel Key
 			Collections.sort(keyedRefs, new KeyedRefTModelComparator());
 
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index cf5acc5..3e69c0b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -228,7 +228,7 @@
 	 */
 	public void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<KeyedReference> keyedRefs) {
 		
-		if (keyedRefs != null & keyedRefs.size() > 0) {
+		if (keyedRefs != null && keyedRefs.size() > 0) {
 			// Sorting the collection by tModel Key
 			Collections.sort(keyedRefs, new KeyedRefTModelComparator());
 
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index d554075..7956fa0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -126,7 +126,7 @@
 	public static void appendJoinTables(DynamicQuery qry, FindQualifiers fq, List<String> tmodelKeys) {
 		
 
-		if (tmodelKeys != null & tmodelKeys.size() > 0) {
+		if (tmodelKeys != null && tmodelKeys.size() > 0) {
 			qry.comma().pad().append(BindingTemplateQuery.ENTITY_NAME + "" "" + BindingTemplateQuery.ENTITY_ALIAS).pad();
 			
 			StringBuffer thetaJoins = new StringBuffer(200);
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
index 4b1c5cd..8b827d0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
@@ -82,8 +82,12 @@
 		}
 	
 		try {
-			// try to instantiate the Authenticator implementation
-			auth = (Authenticator)authClass.newInstance();
+			if (authClass!=null) {
+				// try to instantiate the Authenticator implementation
+				auth = (Authenticator)authClass.newInstance();
+			} else {
+				log.error(""Could not load "" + className + "" authClass is null"");
+			}
 		}
 		catch(Exception e) {
 			log.error(""Exception while attempting to instantiate the implementation of Authenticator: "" + authClass.getName() + ""\n"" + e.getMessage());
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
index b6ca856..3943e19 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
@@ -112,7 +112,7 @@
 		// a userID must be specified.
 		if (userID == null) {
 			throw new UnknownUserException(new ErrorMessage(
-					""errors.auth.InvalidUserId"", userID));
+					""errors.auth.InvalidUserId""));
 		}
 		// credential (password) must be specified.
 		if (credential == null) {
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index cdeb232..f4d7b20 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -80,6 +80,7 @@
     		authURL = AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_URL, DEFAULT_URL);
     	} catch (ConfigurationException ce) {
     		logger.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_AUTHENTICATOR_URL);
+    		throw new NamingException(Property.JUDDI_AUTHENTICATOR_URL + "" missing from config or config is not available."");
     	}
     	init(authURL);
     }
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
index 26de579..e21c94f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
@@ -109,7 +109,7 @@
 	{
 		// a userID must be specified.
 		if (userID == null)
-			throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidUserId"", userID));
+			throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidUserId""));
 
 		// credential (password) must be specified.
 		if (credential == null)
"
juddi,8ceda47b73c2d38199e3118bff16ece4d9192e11,"JUDDI-560

There's a number of issues uncovered using the latest findbugs.
A number of singular & for if-then-else logic when it clearly should have been &&
A large number of null pointer dereferences.
String comparisions using == """" 

applying patch by Alex O'Ree

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1452466 13f79535-47bb-0310-9956-ffa450edef68
",2013-03-04 19:43:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index de96bf1..367ded0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -288,6 +288,7 @@
 			}
 		} catch (ConfigurationException e) {
 			log.error(e.getMessage(), e);
+			maxBusinesses =-1; //in case the configuration is not available
 		}
 		//if we have the maxBusinesses set for this publisher then we need to make sure we did not exceed it.
 		if (maxBusinesses > 0) {
@@ -338,6 +339,7 @@
 			}
 		} catch (ConfigurationException e) {
 			log.error(e.getMessage(), e);
+			maxServices = -1; //incase the configuration isn't available
 		}
 		//if we have the maxServices set for a business then we need to make sure we did not exceed it.
 		if (maxServices > 0) {
@@ -386,6 +388,7 @@
 			}
 		} catch (ConfigurationException e) {
 			log.error(e.getMessage(), e);
+			maxBindings = -1; //incase the config isn't available
 		}
 		//if we have the maxBindings set for a service then we need to make sure we did not exceed it.
 		if (maxBindings > 0) {
@@ -434,6 +437,7 @@
 			}
 		} catch (ConfigurationException e) {
 			log.error(e.getMessage(), e);
+			maxTModels = -1; //incase the config isn't available
 		}
 		//if we have the TModels set for a publisher then we need to make sure we did not exceed it.
 		if (maxTModels > 0) {
"
juddi,71a2dadc3025925bfcd682ef58d0bde4e131d4e1,"JUDDI-382 always going through getURI() first.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1329389 13f79535-47bb-0310-9956-ffa450edef68
",2012-04-23 19:28:56,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 415ec88..8f819cd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -507,12 +507,14 @@
 		}
 		
 		String path = null;
+		
 		try {
-			path = url.toURI().getPath();
+			path = url.toURI().getSchemeSpecificPart();
 		} catch (URISyntaxException e) {
 			throw new ConfigurationException(e);
 		}
 		
+		
 		File dir = new File(path);
 		String rootPublisherStr = config.getString(Property.JUDDI_ROOT_PUBLISHER);
 		if (dir.exists()) {
"
juddi,1f0959268f7b50be59a2461c960282560a404396,"JUDDI-382 always going through getURI() first.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1329329 13f79535-47bb-0310-9956-ffa450edef68
",2012-04-23 16:53:11,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index af5e2ec..415ec88 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -507,14 +507,10 @@
 		}
 		
 		String path = null;
-		if (""vfsfile"".equals(url.getProtocol())) {
-			try {
-				path = url.toURI().getPath() ;
-			} catch (URISyntaxException e) {
-				throw new ConfigurationException(e);
-			}
-		} else {
-			path = url.getPath();
+		try {
+			path = url.toURI().getPath();
+		} catch (URISyntaxException e) {
+			throw new ConfigurationException(e);
 		}
 		
 		File dir = new File(path);
"
juddi,0a5a1b99eb14f342a57ee36ca47eca04614babc4,"JUDDI-534 adding validation on publisher

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1329296 13f79535-47bb-0310-9956-ffa450edef68
",2012-04-23 15:50:51,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
index 511da43..68c1753 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
@@ -33,7 +33,7 @@
 public class Publisher implements Serializable{
 	private static final long serialVersionUID = 2384133177092719820L;
 	@NotNull
-    @Size(min=1,max=10)
+    @Size(min=1,max=50)
 	protected String publisherName;
     protected String emailAddress;
     protected String isAdmin;
@@ -42,6 +42,8 @@
     protected Integer maxBusinesses;
     protected Integer maxServicePerBusiness;
     protected Integer maxTModels;
+    @NotNull
+    @Size(min=1,max=20)
     protected String authorizedName;
 
     /**
"
juddi,ef41a9d8e73a40ba7f4d9bf8f1b6a941d4047646,"JUDDI-534 adding validation on publisher

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1329292 13f79535-47bb-0310-9956-ffa450edef68
",2012-04-23 15:42:18,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
index 2f21207..511da43 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
@@ -20,6 +20,9 @@
 
 import java.io.Serializable;
 
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
 
 /**
  * <p>Java class for Publisher type.  Specific to juddi.
@@ -29,6 +32,8 @@
  */
 public class Publisher implements Serializable{
 	private static final long serialVersionUID = 2384133177092719820L;
+	@NotNull
+    @Size(min=1,max=10)
 	protected String publisherName;
     protected String emailAddress;
     protected String isAdmin;
"
juddi,c5ef36a9873a38ad37ae2e72062fe671dd50ad05,"JUDDI-543 allow using tokens in name, managername, description, proxytransport, and jndi settings.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1297531 13f79535-47bb-0310-9956-ffa450edef68
",2012-03-06 15:35:15,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index e433c04..9967c46 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -162,10 +162,10 @@
 				uddiNode.setProperties(properties);
 			}
 			uddiNode.setHomeJUDDI(              config.getBoolean(""manager.nodes.node("" + i +"")[@isHomeJUDDI]"",false));
-			uddiNode.setName(                   config.getString(""manager.nodes.node("" + i +"").name""));
-			uddiNode.setManagerName(            config.getString(""manager[@name]""));
-			uddiNode.setDescription(            config.getString(""manager.nodes.node("" + i +"").description""));
-			uddiNode.setProxyTransport(         config.getString(""manager.nodes.node("" + i +"").proxyTransport""));
+			uddiNode.setName(                   TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").name""),properties));
+			uddiNode.setManagerName(            TokenResolver.replaceTokens(config.getString(""manager[@name]""),properties));
+			uddiNode.setDescription(            TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").description""),properties));
+			uddiNode.setProxyTransport(         TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").proxyTransport""),properties));
 			uddiNode.setInquiryUrl(             TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").inquiryUrl""),properties));
 			uddiNode.setPublishUrl(             TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").publishUrl""),properties));
 			uddiNode.setCustodyTransferUrl(     TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").custodyTransferUrl""),properties));
@@ -173,8 +173,8 @@
 			uddiNode.setSubscriptionUrl(        TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").subscriptionUrl""),properties));
 			uddiNode.setSubscriptionListenerUrl(TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").subscriptionListenerUrl""),properties));
 			uddiNode.setJuddiApiUrl(            TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").juddiApiUrl""),properties));
-			uddiNode.setFactoryInitial(         config.getString(""manager.nodes.node("" + i +"").javaNamingFactoryInitial""));
-			uddiNode.setFactoryURLPkgs(         config.getString(""manager.nodes.node("" + i +"").javaNamingFactoryUrlPkgs""));
+			uddiNode.setFactoryInitial(         TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").javaNamingFactoryInitial""),properties));
+			uddiNode.setFactoryURLPkgs(         TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").javaNamingFactoryUrlPkgs""),properties));
 			uddiNode.setFactoryNamingProvider(  TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").javaNamingProviderUrl""),properties));
 			nodes.put(nodeName,uddiNode);
 		}
"
juddi,6031c6fc8f9d70239538d6905bb0d7ba6ab62c99,"JUDDI-539 fixing exception handling

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1235266 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-24 14:34:26,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index eca0155..c74b5a3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -16,10 +16,7 @@
 package org.apache.juddi.v3.client.transport.wrapper;
 
 import java.io.StringWriter;
-import java.io.UnsupportedEncodingException;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.net.URLEncoder;
 import java.rmi.Remote;
 import java.util.List;
 
@@ -39,12 +36,14 @@
 import org.uddi.api_v3.AssertionStatusItem;
 import org.uddi.api_v3.AssertionStatusReport;
 import org.uddi.api_v3.CompletionStatus;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetAssertionStatusReport;
 import org.uddi.api_v3.GetPublisherAssertions;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.PublisherAssertions;
 import org.uddi.api_v3.PublisherAssertionsResponse;
 import org.uddi.api_v3.SetPublisherAssertions;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -56,15 +55,14 @@
 public class RequestHandler
 {
   // private reference to the webapp's logger.
-  private static Log log = LogFactory.getLog(RequestHandler.class);
+  //private static Log log = LogFactory.getLog(RequestHandler.class);
   
   // XML Document Builder
   private static DocumentBuilder docBuilder = null;
   
   private volatile String version;
   private volatile String operation;
-  private volatile Node response;
-  private volatile String exception;
+
   private volatile Remote portType; 
   private volatile String methodName;
   private volatile Class<?> operationClass;
@@ -129,8 +127,15 @@
   }
 
   
-  public Node invoke(Element uddiReq)
+  @SuppressWarnings(""unchecked"")
+public Node invoke(Element uddiReq) throws Exception
   {
+    Node response = null;
+    // Create a new 'temp' XML element to use as a container 
+    // in which to marshal the UDDI response data into.
+    DocumentBuilder docBuilder = getDocumentBuilder();
+    Document document = docBuilder.newDocument();
+    Element element = document.createElement(""temp"");
     try 
     { 
       // Lookup the appropriate XML handler.  Throw an 
@@ -149,12 +154,11 @@
       } else if (operationClass.equals(SetPublisherAssertions.class)) {
           SetPublisherAssertions setPublisherAssertions = (SetPublisherAssertions) uddiReqObj;
           Method method = portType.getClass().getMethod(methodName, String.class, Holder.class);
-          Holder holder = new Holder(setPublisherAssertions.getPublisherAssertion());
+          Holder<List<PublisherAssertion>> holder = new Holder<List<PublisherAssertion>>(setPublisherAssertions.getPublisherAssertion());
           result = method.invoke(portType, setPublisherAssertions.getAuthInfo(), holder);
-          List<PublisherAssertion> publisherAssertionList = (List<PublisherAssertion>) holder.value;
           PublisherAssertions assertions = new PublisherAssertions();
-          if (publisherAssertionList!=null) {
-              assertions.getPublisherAssertion().addAll(publisherAssertionList);
+          if (holder.value!=null) {
+              assertions.getPublisherAssertion().addAll(holder.value);
           }
           result = assertions;
       } else if (operationClass.equals(GetPublisherAssertions.class)) {
@@ -162,11 +166,11 @@
           Method method = portType.getClass().getMethod(methodName, String.class);
           result = method.invoke(portType, getPublisherAssertions.getAuthInfo());
           List<PublisherAssertion> assertionList = (List<PublisherAssertion>) result;
-          PublisherAssertionsResponse response = new PublisherAssertionsResponse();
+          PublisherAssertionsResponse publisherAssertionsResponse = new PublisherAssertionsResponse();
           if (assertionList!=null) {
-              response.getPublisherAssertion().addAll(assertionList);
+              publisherAssertionsResponse.getPublisherAssertion().addAll(assertionList);
           }
-          result = response;
+          result = publisherAssertionsResponse;
       } else {
           Method method = portType.getClass().getMethod(methodName, operationClass);
           result = method.invoke(portType, (Object) uddiReqObj);
@@ -183,12 +187,6 @@
           ""type is unknown: "" +uddiResObj.getClass().getName());
       */
       
-      // Create a new 'temp' XML element to use as a container 
-      // in which to marshal the UDDI response data into.
-     
-      DocumentBuilder docBuilder = getDocumentBuilder();
-      Document document = docBuilder.newDocument();
-      Element element = document.createElement(""temp"");
       // Lookup the appropriate response handler and marshal 
       // the juddi object into the appropriate xml format (we 
       // only support UDDI v2.0 at this time).  Attach the
@@ -201,40 +199,17 @@
           // this child to the soap response body
           document.appendChild(element.getFirstChild());
       }
-      
-      setResponse(document);
-    } catch (InvocationTargetException ite) {
-    	Throwable t = ite.getTargetException();
-    	String errorMessage = """";
-    	if (t.getCause() != null) {
-    		while (t.getCause() != null) {
-    			t = t.getCause();
-    		}
-    		errorMessage = t.getMessage() != null ?
-    				t.getMessage() : """";
+      response = document;
+    } catch (Exception e) {
+    	DispositionReport dr = DispositionReportFaultMessage.getDispositionReport(e);
+    	if (dr != null) {
+    	    JAXBMarshaller.marshallToElement(dr, ""org.uddi.api_v3"", element);
+    	    document.appendChild(element.getFirstChild());
+    	    response = document;
     	} else {
-    		errorMessage = ite.getTargetException().getMessage() != null ? 
-    				ite.getTargetException().getMessage() : """";
+    	    throw e;
     	}
-    	String message;
-		try {
-			message = URLEncoder.encode(errorMessage,""UTF-8"");
-		} catch (UnsupportedEncodingException e) {
-			message = e.getMessage();
-		}
-    	log.error(message);
-    	setException(message);
-    }
-    catch(Exception ex) // Catch any other exceptions
-    {
-    	String message;
-		try {
-			message = URLEncoder.encode(ex.getMessage(), ""UTF-8"");
-		} catch (UnsupportedEncodingException e) {
-			message = e.getMessage();
-		}
-        log.error(ex.getMessage(),ex);
-        setException(message);
+    	//log.error(e.getMessage(),e);
     }
     return response;
   }
@@ -276,12 +251,7 @@
 public void setOperation(String operation) {
     this.operation = operation;
 }
-public Node getResponse() {
-    return response;
-}
-public void setResponse(Node response) {
-    this.response = response;
-}
+
 public Remote getPortType() {
 	return portType;
 }
@@ -306,10 +276,5 @@
 public void setVersion(String version) {
     this.version = version;
 }
-public String getException() {
-    return exception;
-}
-public void setException(String exception) {
-    this.exception = exception;
-}
+
 }
"
juddi,6031c6fc8f9d70239538d6905bb0d7ba6ab62c99,"JUDDI-539 fixing exception handling

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1235266 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-24 14:34:26,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 2d1a4b4..9f1de36 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -112,9 +112,6 @@
 	    validateRequest(operation);
 
 	    Node temp = requestHandler.invoke(uddiReq);
-	    if (requestHandler.getException()!=null) {
-	    	throw new Exception(requestHandler.getException());
-	    }
 
 	    return temp;
 	}
"
juddi,c437b85509ba73c6bba0ab1a2022a7f129a1ac77,"JUDDI-537, Fixing NPE for methods that return void (null). Also the wrappers needed to handle cases where the Response and Request Wrapper annotations are used in the API. I special cased these cases in the RequestsHandler.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1234391 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-21 18:48:30,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusReport.java b/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusReport.java
index c5b274f..f017cad 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusReport.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusReport.java
@@ -23,6 +23,7 @@
 import java.util.List;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -50,6 +51,7 @@
 @XmlType(name = ""assertionStatusReport"", propOrder = {
     ""assertionStatusItem""
 })
+@XmlRootElement
 public class AssertionStatusReport implements Serializable {	
 	@XmlTransient
 	private static final long serialVersionUID = 4363994518196953147L;
"
juddi,c437b85509ba73c6bba0ab1a2022a7f129a1ac77,"JUDDI-537, Fixing NPE for methods that return void (null). Also the wrappers needed to handle cases where the Response and Request Wrapper annotations are used in the API. I special cased these cases in the RequestsHandler.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1234391 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-21 18:48:30,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertions.java b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertions.java
index da61286..0422b32 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertions.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertions.java
@@ -23,6 +23,7 @@
 import java.util.List;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -50,6 +51,7 @@
 @XmlType(name = ""publisherAssertions"", propOrder = {
     ""publisherAssertion""
 })
+@XmlRootElement
 public class PublisherAssertions implements Serializable{
 	@XmlTransient
 	private static final long serialVersionUID = 7655445656778820255L;
"
juddi,c437b85509ba73c6bba0ab1a2022a7f129a1ac77,"JUDDI-537, Fixing NPE for methods that return void (null). Also the wrappers needed to handle cases where the Response and Request Wrapper annotations are used in the API. I special cased these cases in the RequestsHandler.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1234391 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-21 18:48:30,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertionsResponse.java b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertionsResponse.java
index 4389beb..0031cb7 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertionsResponse.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertionsResponse.java
@@ -23,6 +23,7 @@
 import java.util.List;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -50,6 +51,7 @@
 @XmlType(name = ""publisherAssertionsResponse"", propOrder = {
     ""publisherAssertion""
 })
+@XmlRootElement
 public class PublisherAssertionsResponse implements Serializable{
 	@XmlTransient
 	private static final long serialVersionUID = 6579381609449920785L;
"
juddi,1b0186ef009684061067a2ee33d983135a2abbb0,"JUDDI-537, Fixing NPE for methods that return void (null). Also the wrappers needed to handle cases where the Response and Request Wrapper annotations are used in the API. I special cased these cases in the RequestsHandler.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1234387 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-21 18:29:09,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
index 3558042..a0c4228 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
@@ -223,17 +223,19 @@
 	private void setCredentials(Map<String, Object> requestContext) throws ConfigurationException {
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
 		Properties properties = manager.getClientConfig().getUDDINode(nodeName).getProperties();
-		String username = null;
-		String password = null;
-		if (properties.containsKey(Property.BASIC_AUTH_USERNAME)) {
-			username = properties.getProperty(Property.BASIC_AUTH_USERNAME);
-		}
-		if (properties.containsKey(Property.BASIC_AUTH_PASSWORD)) {
-			password = properties.getProperty(Property.BASIC_AUTH_PASSWORD);
-		}
-		if (username!=null && password!=null) {
-			requestContext.put(BindingProvider.USERNAME_PROPERTY, username);
-			requestContext.put(BindingProvider.PASSWORD_PROPERTY, password);
+		if (properties!=null) {
+    		String username = null;
+    		String password = null;
+    		if (properties.containsKey(Property.BASIC_AUTH_USERNAME)) {
+    			username = properties.getProperty(Property.BASIC_AUTH_USERNAME);
+    		}
+    		if (properties.containsKey(Property.BASIC_AUTH_PASSWORD)) {
+    			password = properties.getProperty(Property.BASIC_AUTH_PASSWORD);
+    		}
+    		if (username!=null && password!=null) {
+    			requestContext.put(BindingProvider.USERNAME_PROPERTY, username);
+    			requestContext.put(BindingProvider.PASSWORD_PROPERTY, password);
+    		}
 		}
 	}
 
"
juddi,1b0186ef009684061067a2ee33d983135a2abbb0,"JUDDI-537, Fixing NPE for methods that return void (null). Also the wrappers needed to handle cases where the Response and Request Wrapper annotations are used in the API. I special cased these cases in the RequestsHandler.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1234387 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-21 18:29:09,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index 25a7e74..eca0155 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -21,6 +21,7 @@
 import java.lang.reflect.Method;
 import java.net.URLEncoder;
 import java.rmi.Remote;
+import java.util.List;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -30,10 +31,20 @@
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+import javax.xml.ws.Holder;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.JAXBMarshaller;
+import org.uddi.api_v3.AssertionStatusItem;
+import org.uddi.api_v3.AssertionStatusReport;
+import org.uddi.api_v3.CompletionStatus;
+import org.uddi.api_v3.GetAssertionStatusReport;
+import org.uddi.api_v3.GetPublisherAssertions;
+import org.uddi.api_v3.PublisherAssertion;
+import org.uddi.api_v3.PublisherAssertions;
+import org.uddi.api_v3.PublisherAssertionsResponse;
+import org.uddi.api_v3.SetPublisherAssertions;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -127,8 +138,40 @@
       //String reqString = getText(uddiReq);
       //Object uddiReqObj = JAXBMarshaller.unmarshallFromString(reqString, ""org.uddi.api_v3"");
       Object uddiReqObj = JAXBMarshaller.unmarshallFromElement(uddiReq, ""org.uddi.api_v3"");
-      Method method = portType.getClass().getMethod(methodName, operationClass);
-      Object result = method.invoke(portType, (Object) uddiReqObj);
+      Object result = null;
+      if (operationClass.equals(GetAssertionStatusReport.class)) {
+          GetAssertionStatusReport getAssertionStatusReport = (GetAssertionStatusReport) uddiReqObj;
+          Method method = portType.getClass().getMethod(methodName, String.class, CompletionStatus.class);
+          result = method.invoke(portType, getAssertionStatusReport.getAuthInfo(), getAssertionStatusReport.getCompletionStatus());
+          AssertionStatusReport assertionStatusReport = new AssertionStatusReport();
+          assertionStatusReport.getAssertionStatusItem().addAll((List<AssertionStatusItem>)result);
+          result = assertionStatusReport;
+      } else if (operationClass.equals(SetPublisherAssertions.class)) {
+          SetPublisherAssertions setPublisherAssertions = (SetPublisherAssertions) uddiReqObj;
+          Method method = portType.getClass().getMethod(methodName, String.class, Holder.class);
+          Holder holder = new Holder(setPublisherAssertions.getPublisherAssertion());
+          result = method.invoke(portType, setPublisherAssertions.getAuthInfo(), holder);
+          List<PublisherAssertion> publisherAssertionList = (List<PublisherAssertion>) holder.value;
+          PublisherAssertions assertions = new PublisherAssertions();
+          if (publisherAssertionList!=null) {
+              assertions.getPublisherAssertion().addAll(publisherAssertionList);
+          }
+          result = assertions;
+      } else if (operationClass.equals(GetPublisherAssertions.class)) {
+          GetPublisherAssertions getPublisherAssertions = (GetPublisherAssertions) uddiReqObj;
+          Method method = portType.getClass().getMethod(methodName, String.class);
+          result = method.invoke(portType, getPublisherAssertions.getAuthInfo());
+          List<PublisherAssertion> assertionList = (List<PublisherAssertion>) result;
+          PublisherAssertionsResponse response = new PublisherAssertionsResponse();
+          if (assertionList!=null) {
+              response.getPublisherAssertion().addAll(assertionList);
+          }
+          result = response;
+      } else {
+          Method method = portType.getClass().getMethod(methodName, operationClass);
+          result = method.invoke(portType, (Object) uddiReqObj);
+      }
+      
       // Lookup the appropriate response handler which will
       // be used to marshal the UDDI object into the appropriate 
       // xml format.
@@ -150,13 +193,15 @@
       // the juddi object into the appropriate xml format (we 
       // only support UDDI v2.0 at this time).  Attach the
       // results to the body of the SOAP response.
-      JAXBMarshaller.marshallToElement(result, ""org.uddi.api_v3"", element);
+      if (result!=null) {
+          JAXBMarshaller.marshallToElement(result, ""org.uddi.api_v3"", element);
+       // Grab a reference to the 'temp' element's
+          // only child here (this has the effect of
+          // discarding the temp element) and append 
+          // this child to the soap response body
+          document.appendChild(element.getFirstChild());
+      }
       
-      // Grab a reference to the 'temp' element's
-      // only child here (this has the effect of
-      // discarding the temp element) and append 
-      // this child to the soap response body
-      document.appendChild(element.getFirstChild());
       setResponse(document);
     } catch (InvocationTargetException ite) {
     	Throwable t = ite.getTargetException();
@@ -188,7 +233,7 @@
 		} catch (UnsupportedEncodingException e) {
 			message = e.getMessage();
 		}
-        log.error(message);
+        log.error(ex.getMessage(),ex);
         setException(message);
     }
     return response;
"
juddi,1d3654adf2f9e1e1a4c6477587f3fb0d84e1d611,"JUDDI-536, checking the publisher exists before handing out a security token.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1226927 13f79535-47bb-0310-9956-ffa450edef68
",2012-01-03 19:23:47,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index 06b33ee..e3fbe27 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -36,6 +36,7 @@
 import org.apache.juddi.api.util.SecurityQuery;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.model.Publisher;
 import org.apache.juddi.v3.auth.Authenticator;
 import org.apache.juddi.v3.auth.AuthenticatorFactory;
 import org.apache.juddi.v3.error.ErrorMessage;
@@ -98,7 +99,7 @@
 		Authenticator authenticator = AuthenticatorFactory.getAuthenticator();
 		
 		String publisherId = authenticator.authenticate(body.getUserID(), body.getCred());
-
+		
 		return getAuthToken(publisherId);
 	}
 	
@@ -113,7 +114,10 @@
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-
+			//Check if this publisher exists 
+			Publisher publisher = em.find(Publisher.class, publisherId);
+			if (publisher == null)
+				throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidCredentials"", publisherId));
 
 			// Generate auth token and store it!
 			String authInfo = AUTH_TOKEN_PREFIX + UUID.randomUUID();
"
juddi,ceaf341b8a944850e0c06456605318c5f74b6188,"JUDDI-535 fixing key reference

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1211597 13f79535-47bb-0310-9956-ffa450edef68
",2011-12-07 18:54:58,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
index 4a7e7ec..1e58dc2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
@@ -320,7 +320,7 @@
 	    	//  A keyedReference with a tModelKey of the UDDI Types category system and a keyValue of 
 	    	// ""wsdlSpec"" for backward compatibility.
 	    	KeyedReference typesReferenceBackwardsCompatible = newKeyedReference(
-	    			""uddi:uddi-org:types"", ""uddi-org:types"", ""wsdlSpec"");
+	    			""uddi:uddi.org:categorization:types"", ""uddi-org:types"", ""wsdlSpec"");
 	    	categoryBag.getKeyedReference().add(typesReferenceBackwardsCompatible);
 	    	
 	    	// One or two keyedReferences as required to capture the protocol
"
juddi,40659cef43b5fa43f3da3b9fd0e108d9908af7bb,"JUDDI-532 fixing nullpointer and refreshing when an deleted service is selected

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177512 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-30 05:34:34,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index d4a9871..f9e98d1 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -161,6 +161,7 @@
 					}
 				} else {
 					Window.alert(""error: "" + response.getMessage());
+					Window.Location.reload();
 				}
 			}
 		});
"
juddi,40659cef43b5fa43f3da3b9fd0e108d9908af7bb,"JUDDI-532 fixing nullpointer and refreshing when an deleted service is selected

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177512 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-30 05:34:34,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index 62bb1ec..ab3200a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -16,11 +16,13 @@
  */
 package org.apache.juddi.portlets.server.service;
 
+import java.lang.reflect.UndeclaredThrowableException;
 import java.util.HashMap;
 import java.util.Map;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
+import javax.xml.ws.soap.SOAPFaultException;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -37,12 +39,14 @@
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.GetTModelDetail;
 import org.uddi.api_v3.ServiceDetail;
 import org.uddi.api_v3.TModel;
 import org.uddi.api_v3.TModelDetail;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIInquiryPortType;
 
 import com.google.gwt.user.server.rpc.RemoteServiceServlet;
@@ -55,38 +59,38 @@
 
 	private static final long serialVersionUID = 8509627428299232161L;
 	private Log logger = LogFactory.getLog(this.getClass());
-	
+
 	public InquiryServiceImpl() {
 		super();
-		
+
 	}
 
 	public SearchResponse queryJUDDI(String query) {
 		HttpServletRequest request = this.getThreadLocalRequest();
 		HttpSession session = request.getSession();
 		SearchResponse response = new SearchResponse();
-		 try {
-			 Transport transport = WebHelper.getTransport(session.getServletContext());
-			 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
-			 org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService uis = 
-				 new org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService();
-       		 String reply = uis.inquire(inquiryService, query);
-       		 response.setMessage(reply);
-       		 response.setSuccess(true);       	 
-	     } catch (Exception e) {
-	    	 logger.error(""Could not obtain token. "" + e.getMessage(), e);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(e.getMessage());
-	    	 response.setErrorCode(""102"");
-	     }  catch (Throwable t) {
-	    	 logger.error(""Could not obtain token. "" + t.getMessage(), t);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(t.getMessage());
-	    	 response.setErrorCode(""102"");
-	     } 
-		 return response;
+		try {
+			Transport transport = WebHelper.getTransport(session.getServletContext());
+			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
+			org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService uis = 
+				new org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService();
+			String reply = uis.inquire(inquiryService, query);
+			response.setMessage(reply);
+			response.setSuccess(true);       	 
+		} catch (Exception e) {
+			logger.error(""Could not obtain token. "" + e.getMessage(), e);
+			response.setSuccess(false);
+			response.setMessage(e.getMessage());
+			response.setErrorCode(""102"");
+		}  catch (Throwable t) {
+			logger.error(""Could not obtain token. "" + t.getMessage(), t);
+			response.setSuccess(false);
+			response.setMessage(t.getMessage());
+			response.setErrorCode(""102"");
+		} 
+		return response;
 	}
-	
+
 	public InquiryResponse getTModelDetail(String authToken, String tModelKey) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
@@ -98,121 +102,140 @@
 		logger.debug(""TModelDetail "" + getTModelDetail + "" sending tmodelDetail request.."");
 		Map<String,String> tmodelDetailMap = new HashMap<String,String>();
 		try {
-			 Transport transport = WebHelper.getTransport(session.getServletContext());
-        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
-        	 TModelDetail tmodelDetail = inquiryService.getTModelDetail(getTModelDetail);
-        	 //demo code fix up what to return for real.
-        	 for (TModel tmodel : tmodelDetail.getTModel()) {
-        		 tmodelDetailMap.put(""name"",tmodel.getName().getValue());
-			 }
-        	 response.setSuccess(true);
-        	 
-	     } catch (Exception e) {
-	    	 logger.error(""Could not obtain token. "" + e.getMessage(), e);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(e.getMessage());
-	    	 response.setErrorCode(""102"");
-	     }  catch (Throwable t) {
-	    	 logger.error(""Could not obtain token. "" + t.getMessage(), t);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(t.getMessage());
-	    	 response.setErrorCode(""102"");
-	     } 
-		 return response;
+			Transport transport = WebHelper.getTransport(session.getServletContext());
+			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
+			TModelDetail tmodelDetail = inquiryService.getTModelDetail(getTModelDetail);
+			//demo code fix up what to return for real.
+			for (TModel tmodel : tmodelDetail.getTModel()) {
+				tmodelDetailMap.put(""name"",tmodel.getName().getValue());
+			}
+			response.setSuccess(true);
+
+		} catch (Exception e) {
+			logger.error(""Could not obtain token. "" + e.getMessage(), e);
+			response.setSuccess(false);
+			response.setMessage(e.getMessage());
+			response.setErrorCode(""102"");
+		}  catch (Throwable t) {
+			logger.error(""Could not obtain token. "" + t.getMessage(), t);
+			response.setSuccess(false);
+			response.setMessage(t.getMessage());
+			response.setErrorCode(""102"");
+		} 
+		return response;
 	}
-	
+
 	public InquiryResponse getBusinessDetail(String authToken, String businessKey) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
 		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
-		
+
 		GetBusinessDetail getBusinessDetail = new GetBusinessDetail();
 		getBusinessDetail.setAuthInfo(authToken);
 		getBusinessDetail.getBusinessKey().add(businessKey);
 		InquiryResponse response = new InquiryResponse();
 		logger.debug(""BusinessDetail "" + getBusinessDetail + "" sending businessDetail request.."");
 		try {
-			 Transport transport = WebHelper.getTransport(session.getServletContext());
-        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
-        	 BusinessDetail businessDetail = inquiryService.getBusinessDetail(getBusinessDetail);
-        	 for (BusinessEntity businessEntity : businessDetail.getBusinessEntity()) {
-        		 Business business = new Business(
-        				 businessEntity.getBusinessKey(),
-        				 EntityForLang.getName(businessEntity.getName(),lang).getValue(),
-        				 EntityForLang.getDescription(businessEntity.getDescription(),lang).getValue());
-        		 if (businessEntity.getBusinessServices()!=null) {
-	        		 for (BusinessService businessService : businessEntity.getBusinessServices().getBusinessService()) {
-	        			 Service service = new Service(
-	        					 businessService.getServiceKey(),
-	        					 EntityForLang.getName(businessService.getName(),lang).getValue(),
-	        					 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
-	        			 business.getServices().add(service);
-	        		 }
-        		 }
-        		 //for (Contact contact : businessEntity.getContacts().getContact()) {
-        			 //contact.get
-        		 //}
-        		 response.setBusiness(business);
-			 }
-        	 
-        	 response.setSuccess(true);
-	     } catch (Exception e) {
-	    	 logger.error(""Could not obtain token. "" + e.getMessage(), e);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(e.getMessage());
-	    	 response.setErrorCode(""102"");
-	     }  catch (Throwable t) {
-	    	 logger.error(""Could not obtain token. "" + t.getMessage(), t);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(t.getMessage());
-	    	 response.setErrorCode(""102"");
-	     } 
-		 return response;
+			Transport transport = WebHelper.getTransport(session.getServletContext());
+			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
+			BusinessDetail businessDetail = inquiryService.getBusinessDetail(getBusinessDetail);
+			for (BusinessEntity businessEntity : businessDetail.getBusinessEntity()) {
+				Business business = new Business(
+						businessEntity.getBusinessKey(),
+						EntityForLang.getName(businessEntity.getName(),lang).getValue(),
+						EntityForLang.getDescription(businessEntity.getDescription(),lang).getValue());
+				if (businessEntity.getBusinessServices()!=null) {
+					for (BusinessService businessService : businessEntity.getBusinessServices().getBusinessService()) {
+						Service service = new Service(
+								businessService.getServiceKey(),
+								EntityForLang.getName(businessService.getName(),lang).getValue(),
+								EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
+						business.getServices().add(service);
+					}
+				}
+				//for (Contact contact : businessEntity.getContacts().getContact()) {
+					//contact.get
+					//}
+				response.setBusiness(business);
+			}
+
+			response.setSuccess(true);
+		} catch (Exception e) {
+			logger.error(""Could not obtain token. "" + e.getMessage(), e);
+			response.setSuccess(false);
+			response.setMessage(e.getMessage());
+			response.setErrorCode(""102"");
+		}  catch (Throwable t) {
+			logger.error(""Could not obtain token. "" + t.getMessage(), t);
+			response.setSuccess(false);
+			response.setMessage(t.getMessage());
+			response.setErrorCode(""102"");
+		} 
+		return response;
 	}
-	
+
 	public InquiryResponse getServiceDetail(String authToken, String serviceKey) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
 		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
-	
+
 		GetServiceDetail getServiceDetail = new GetServiceDetail();
 		getServiceDetail.setAuthInfo(authToken);
 		getServiceDetail.getServiceKey().add(serviceKey);
 		InquiryResponse response = new InquiryResponse();
 		logger.debug(""ServiceDetail "" + getServiceDetail + "" sending serviceDetail request.."");
+		DispositionReport report = null;
+		String message = null;
 		try {
-			 Transport transport = WebHelper.getTransport(session.getServletContext());
-        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
-        	 ServiceDetail serviceDetail = inquiryService.getServiceDetail(getServiceDetail);
-        	 for (BusinessService businessService : serviceDetail.getBusinessService()) {
-        		 Service service = new Service(
-        				 businessService.getServiceKey(),
-        				 EntityForLang.getName(businessService.getName(),lang).getValue(),
-        				 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
-        		 for (BindingTemplate bindingTemplate : businessService.getBindingTemplates().getBindingTemplate()) {
-        			 ServiceBinding serviceBinding = new ServiceBinding(
-        					 bindingTemplate.getBindingKey(),
-        					 bindingTemplate.getAccessPoint().getValue(),
-        					 EntityForLang.getDescription(bindingTemplate.getDescription(),lang).getValue(),
-        					 bindingTemplate.getAccessPoint().getUseType());
-        			 service.getServiceBindings().add(serviceBinding);
-        		 }
-        		 response.setService(service);
-			 }
-        	 response.setSuccess(true);
-	     } catch (Exception e) {
-	    	 logger.error(""Could not obtain token. "" + e.getMessage(), e);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(e.getMessage());
-	    	 response.setErrorCode(""102"");
-	     }  catch (Throwable t) {
-	    	 logger.error(""Could not obtain token. "" + t.getMessage(), t);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(t.getMessage());
-	    	 response.setErrorCode(""102"");
-	     } 
-		 return response;
+			Transport transport = WebHelper.getTransport(session.getServletContext());
+			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
+			ServiceDetail serviceDetail = inquiryService.getServiceDetail(getServiceDetail);
+			for (BusinessService businessService : serviceDetail.getBusinessService()) {
+				Service service = new Service(
+						businessService.getServiceKey(),
+						EntityForLang.getName(businessService.getName(),lang).getValue(),
+						EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
+				if (businessService.getBindingTemplates()!=null) {
+					for (BindingTemplate bindingTemplate : businessService.getBindingTemplates().getBindingTemplate()) {
+						ServiceBinding serviceBinding = new ServiceBinding(
+								bindingTemplate.getBindingKey(),
+								bindingTemplate.getAccessPoint().getValue(),
+								EntityForLang.getDescription(bindingTemplate.getDescription(),lang).getValue(),
+								bindingTemplate.getAccessPoint().getUseType());
+						service.getServiceBindings().add(serviceBinding);
+					}
+				}
+				response.setService(service);
+			}
+			response.setSuccess(true);
+		} catch (DispositionReportFaultMessage dr) {
+			report = DispositionReportFaultMessage.getDispositionReport(dr);
+			message = """";
+		} catch (SOAPFaultException sfe) {
+			report = DispositionReportFaultMessage.getDispositionReport(sfe);
+			message = """";
+		} catch (UndeclaredThrowableException ute) {
+			report = DispositionReportFaultMessage.getDispositionReport(ute);
+			message = """";
+		} catch (Exception e) {
+			logger.error(""Could not obtain token. "" + e.getMessage(), e);
+			response.setSuccess(false);
+			response.setMessage(e.getMessage());
+			response.setErrorCode(""102"");
+		}  catch (Throwable t) {
+			logger.error(""Could not obtain token. "" + t.getMessage(), t);
+			response.setSuccess(false);
+			response.setMessage(t.getMessage());
+			response.setErrorCode(""102"");
+		}
+		if (report!=null || message!=null) {
+			response.setSuccess(false);
+			response.setMessage(""Invalid ServiceKey"");
+			response.setErrorCode(""103"");
+		}
+		return response;
 	}
+
 }
"
juddi,fa0d12df8558555e086ad4419004af677dcd7b3f,"JUDDI-531, black listing bad notification endpoints for an hour after 3 unsuccessful notification attempts

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177485 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-30 03:03:15,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index a9bbadd..9f9c373 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -30,6 +30,8 @@
 	public final static String JUDDI_NOTIFICATION_START_BUFFER       =""juddi.notification.start.buffer"";
 	public final static String JUDDI_NOTIFICATION_INTERVAL           =""juddi.notification.interval"";
 	public final static String JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME =""juddi.notification.acceptable.lagtime"";
+	public final static String JUDDI_NOTIFICATION_MAX_TRIES      =""juddi.notification.max.tries"";
+	public final static String JUDDI_NOTIFICATION_LIST_RESET_INTERVAL  =""juddi.notification.list.reset.interval"";
 	public final static String JUDDI_SUBSCRIPTION_CHUNKEXPIRATION_MINUTES=""juddi.subscription.chunkexpiration.minutes"";
 	public final static String JUDDI_JNDI_REGISTRATION           =""juddi.jndi.registration"";
 	public final static String JUDDI_RMI_PORT                    =""juddi.rmi.port"";
"
juddi,fa0d12df8558555e086ad4419004af677dcd7b3f,"JUDDI-531, black listing bad notification endpoints for an hour after 3 unsuccessful notification attempts

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177485 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-30 03:03:15,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 1bebbee..b910c59 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -16,12 +16,15 @@
  */
 package org.apache.juddi.subscription;
 
+import java.io.IOException;
 import java.net.MalformedURLException;
 import java.util.Collection;
 import java.util.Date;
 import java.util.GregorianCalendar;
+import java.util.Map;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
@@ -29,6 +32,7 @@
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
 import javax.xml.datatype.Duration;
+import javax.xml.ws.WebServiceException;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
@@ -63,7 +67,9 @@
 	private Timer timer = null;
 	private long startBuffer = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_START_BUFFER, 20000l); // 20s startup delay default 
 	private long interval = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_INTERVAL, 300000l); //5 min default
-	private long acceptableLagTime = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME, 500l); //500 milliseconds
+	private long acceptableLagTime = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME, 1000l); //1000 milliseconds
+	private int maxTries = AppConfig.getConfiguration().getInt(Property.JUDDI_NOTIFICATION_MAX_TRIES, 3);
+	private long badListResetInterval = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_LIST_RESET_INTERVAL, 1000l * 3600); //one hour
 	private UDDISubscriptionImpl subscriptionImpl = new UDDISubscriptionImpl();
 	private Boolean alwaysNotify = false;
 	private Date desiredDate = null;
@@ -74,6 +80,8 @@
 			""delete_business"",""delete_service"",""delete_binding"",""delete_tmodel"",
 			""add_publisherassertions"",""set_publisherassertions"",""delete_publisherassertions""
 	};
+	private static Map<String,Integer> badNotifications= new ConcurrentHashMap<String,Integer>();
+	private static Date lastBadNotificationReset = new Date();
 	
 	public SubscriptionNotifier() throws ConfigurationException {
 		super();
@@ -96,8 +104,8 @@
 	protected boolean registryMayContainUpdates() {
 		boolean isUpdated = false;
 		int updateCounter = 0;
-		//if the desiredDate is set it means that we've declined sending out a notification befor
-		//because the a client did not want a notification yet. However if this desided
+		//if the desiredDate is set it means that we've declined sending out a notification before
+		//because the a client did not want a notification yet. However if this desired
 		//notification time has come we should try sending out the notification now.
 		if (desiredDate!=null && new Date().getTime() > desiredDate.getTime()) {
 			return true;
@@ -114,14 +122,18 @@
 				isUpdated = true;
 			}
 		} catch (Exception e) {
-		
-			e.printStackTrace();
+			log.error(e.getMessage(),e);
 		}
 		return isUpdated;
 	}
 
-	public void run() 
+	public synchronized void run() 
 	{
+		if (badListResetInterval > 0 && new Date().getTime() > lastBadNotificationReset.getTime() + badListResetInterval) {
+			badNotifications = new ConcurrentHashMap<String,Integer>();
+			lastBadNotificationReset = new Date();
+			log.debug(""badNotificationList was reset"");
+		}
 		if ((firedOnTime(scheduledExecutionTime()) || alwaysNotify) && registryMayContainUpdates()) {
 			long startTime = System.currentTimeMillis();
 			desiredDate = null;
@@ -130,7 +142,9 @@
 			Collection<Subscription> subscriptions = getAllAsyncSubscriptions();
 			for (Subscription subscription : subscriptions) {
 				
-				if (subscription.getExpiresAfter()==null || subscription.getExpiresAfter().getTime() > startTime) {
+				
+				if (subscription.getExpiresAfter()==null || subscription.getExpiresAfter().getTime() > startTime ||
+						!isTemporarilyDisabled(subscription.getSubscriptionKey())) {
 					try {
 						//build a query with a coverage period from the lastNotified time to 
 						//now (the scheduled Execution time)
@@ -293,9 +307,10 @@
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
-			
+			String subscriptionKey = resultList.getSubscription().getSubscriptionKey();
 			org.apache.juddi.model.Subscription modelSubscription = 
-				em.find(org.apache.juddi.model.Subscription.class, resultList.getSubscription().getSubscriptionKey());
+				em.find(org.apache.juddi.model.Subscription.class, subscriptionKey);
+			Date lastNotifiedDate = modelSubscription.getLastNotified();
 			//now log to the db that we are sending the notification.
 			tx.begin();
 			modelSubscription.setLastNotified(notificationDate);
@@ -342,15 +357,34 @@
 							notifier.notifySubscriptionListener(body);
 							chunkToken=body.getSubscriptionResultsList().getChunkToken();
 						}
+						//successful notification so remove from the badNotificationList
+						if (badNotifications.containsKey(resultList.getSubscription().getSubscriptionKey()))
+							badNotifications.remove(resultList.getSubscription().getSubscriptionKey());
+					} catch (WebServiceException e) {
+						if (e.getCause() instanceof IOException) {
+							addBadNotificationToList(subscriptionKey, bindingTemplate.getAccessPointUrl());
+							//we could not notify so compensate the transaction above
+							modelSubscription.setLastNotified(lastNotifiedDate);
+							tx.begin();
+							em.persist(modelSubscription);
+							tx.commit();
+						} else {
+							log.warn(""Unexpected WebServiceException "" + e.getMessage() + e.getCause());
+						}
 						
 					} catch (Exception e) {
-						log.error(e.getMessage(),e);
+						log.warn(""Unexpected notification exception:"" + e.getMessage() + e.getCause());
 					}
 				} else {
-					log.error(""Unsupported binding type."");
+					log.info(""Binding "" + bindingTemplate.getEntityKey() + "" has an unsupported binding type of "" 
+							+ bindingTemplate.getAccessPointType() + "". Only "" 
+							+ AccessPointType.END_POINT.toString() + "" and ""
+							+ AccessPointType.WSDL_DEPLOYMENT.toString() + "" are supported."");
+					addBadNotificationToList(subscriptionKey, bindingTemplate.getAccessPointType() + "" not supported"");
 				}
 			} else {
-				log.error(""There is no valid binding template defined for this subscription: "" + modelSubscription.getBindingKey());
+				log.info(""There is no valid binding template defined for this subscription: "" + modelSubscription.getBindingKey());
+				addBadNotificationToList(subscriptionKey, modelSubscription.getBindingKey() + "" not found"");
 			}
 			
 		} finally {
@@ -364,5 +398,24 @@
 	protected UDDISubscriptionImpl getSubscriptionImpl() {
 		return subscriptionImpl;
 	}
+	
+	private boolean isTemporarilyDisabled(String subscriptionKey) {
+		if (maxTries > 0 && badNotifications.containsKey(subscriptionKey) && badNotifications.get(subscriptionKey) > maxTries ) {
+			log.debug(""Subscription "" + subscriptionKey + "" is temperarily disabled. The notification endpoint"" +
+					"" could not be reached more then "" + maxTries + "" times"");
+			return true;
+		}
+		return false;
+	}
+	
+	private int addBadNotificationToList(String subscriptionKey, String endPoint) {
+		Integer numberOfBadNotifications = 0;
+		if (badNotifications.containsKey(subscriptionKey))
+			numberOfBadNotifications = badNotifications.get(subscriptionKey);
+		badNotifications.put(subscriptionKey, ++numberOfBadNotifications);
+		log.debug(""bad notification number "" + numberOfBadNotifications + "" for subscription "" 
+				+  subscriptionKey + "" "" + endPoint);
+		return numberOfBadNotifications;
+	}
 
 }
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/devguide/en-US/extras/Authentication_2.java b/docs/devguide/en-US/extras/Authentication_2.java
index 6dee155..2c638e3 100644
--- a/docs/devguide/en-US/extras/Authentication_2.java
+++ b/docs/devguide/en-US/extras/Authentication_2.java
@@ -1 +1 @@
-juddi.auth = org.apache.juddi.auth.JUDDIAuthentication
\ No newline at end of file
+juddi.authenticator = org.apache.juddi.auth.JUDDIAuthentication
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/devguide/en-US/extras/Authentication_3.java b/docs/devguide/en-US/extras/Authentication_3.java
index d4561ad..4470fd7 100644
--- a/docs/devguide/en-US/extras/Authentication_3.java
+++ b/docs/devguide/en-US/extras/Authentication_3.java
@@ -1,2 +1,2 @@
-juddi.auth = org.apache.juddi.auth.XMLDocAuthentication
-juddi.usersfile = juddi-users.xml
\ No newline at end of file
+juddi.authenticator = org.apache.juddi.auth.XMLDocAuthentication
+juddi.usersfile = juddi-users.xml
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/devguide/en-US/extras/Authentication_4.java b/docs/devguide/en-US/extras/Authentication_4.java
index 04598d4..dea2c93 100644
--- a/docs/devguide/en-US/extras/Authentication_4.java
+++ b/docs/devguide/en-US/extras/Authentication_4.java
@@ -1,3 +1,3 @@
-juddi.auth = org.apache.juddi.auth.CryptedXMLDocAuthentication
+juddi.authenticator = org.apache.juddi.auth.CryptedXMLDocAuthentication
 juddi.usersfile = juddi-users-encrypted.xml
-juddi.cryptor = org.apache.juddi.cryptor.DefaultCryptor
\ No newline at end of file
+juddi.cryptor = org.apache.juddi.cryptor.DefaultCryptor
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/userguide/en-US/extras/Authentication_2.java b/docs/userguide/en-US/extras/Authentication_2.java
index 6dee155..2c638e3 100644
--- a/docs/userguide/en-US/extras/Authentication_2.java
+++ b/docs/userguide/en-US/extras/Authentication_2.java
@@ -1 +1 @@
-juddi.auth = org.apache.juddi.auth.JUDDIAuthentication
\ No newline at end of file
+juddi.authenticator = org.apache.juddi.auth.JUDDIAuthentication
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/userguide/en-US/extras/Authentication_3.java b/docs/userguide/en-US/extras/Authentication_3.java
index d4561ad..4470fd7 100644
--- a/docs/userguide/en-US/extras/Authentication_3.java
+++ b/docs/userguide/en-US/extras/Authentication_3.java
@@ -1,2 +1,2 @@
-juddi.auth = org.apache.juddi.auth.XMLDocAuthentication
-juddi.usersfile = juddi-users.xml
\ No newline at end of file
+juddi.authenticator = org.apache.juddi.auth.XMLDocAuthentication
+juddi.usersfile = juddi-users.xml
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/docs/userguide/en-US/extras/Authentication_4.java b/docs/userguide/en-US/extras/Authentication_4.java
index 04598d4..dea2c93 100644
--- a/docs/userguide/en-US/extras/Authentication_4.java
+++ b/docs/userguide/en-US/extras/Authentication_4.java
@@ -1,3 +1,3 @@
-juddi.auth = org.apache.juddi.auth.CryptedXMLDocAuthentication
+juddi.authenticator = org.apache.juddi.auth.CryptedXMLDocAuthentication
 juddi.usersfile = juddi-users-encrypted.xml
-juddi.cryptor = org.apache.juddi.cryptor.DefaultCryptor
\ No newline at end of file
+juddi.cryptor = org.apache.juddi.cryptor.DefaultCryptor
"
juddi,3cab968daf03f3528d14fc9a2a3e082ce2f0c22c,"JUDDI-529
Fix LdapSimpleAuthenticator and update documents to refer to the correct
properties - juddi.authenticator and juddi.authenticator.url instead of the
previous juddi.auth and juddi.auth.url.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1177406 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-29 19:34:57,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index c817838..cdeb232 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -27,6 +27,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
@@ -37,6 +38,8 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.UnknownUserException;
 
+import org.apache.commons.configuration.ConfigurationException;
+
 /**
  * This is a implementation of jUDDI's Authenticator interface, that uses the
  * LDAP.
@@ -63,8 +66,7 @@
  * @author <a href=""mailto:gunnlaugursig@gmail.com"">Gunnlaugur Sigurðsson</a>
  */
 public class LdapSimpleAuthenticator implements Authenticator {
-
-	private Log log = LogFactory.getLog(this.getClass());
+    private Log logger = LogFactory.getLog(this.getClass());
 
     private LdapContext ctx = null;
     private Hashtable<String, String> env = null;
@@ -77,7 +79,7 @@
     	try {
     		authURL = AppConfig.getConfiguration().getString(Property.JUDDI_AUTHENTICATOR_URL, DEFAULT_URL);
     	} catch (ConfigurationException ce) {
-    		log.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_AUTHENTICATOR_URL);
+    		logger.error(""Configuration exception occurred retrieving: "" + Property.JUDDI_AUTHENTICATOR_URL);
     	}
     	init(authURL);
     }
@@ -97,7 +99,7 @@
         try {
             ctx = new InitialLdapContext(env, null);
         } catch (NamingException e) {
-            log.error(""Naming exception "" + e);
+            logger.error(""Naming exception "" + e);
             throw e;
         }
     }
@@ -117,17 +119,17 @@
             env.put(Context.SECURITY_PRINCIPAL, authorizedName);
         	env.put(Context.SECURITY_CREDENTIALS, cred);
             ctx = new InitialLdapContext(env, null);
-            
-            log.info(authorizedName + "" is authenticated"");
+            isLdapUser = true;
+            logger.info(authorizedName + "" is authenticated"");
            
         } catch (NamingException e) {
-            log.error(authorizedName + "" is not authenticated"");
+            logger.error(authorizedName + "" is not authenticated"");
             throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
         } finally {
             try {
                 ctx.close();
             } catch (NamingException e) {
-                log.error(""Context close failure "" + e);
+                logger.error(""Context close failure "" + e);
             }
         }
 
@@ -138,7 +140,7 @@
                 tx.begin();
                 Publisher publisher = em.find(Publisher.class, authorizedName);
                 if (publisher == null) {
-                    log.warn(""Publisher was not found, adding the publisher in on the fly."");
+                    logger.warn(""Publisher was not found, adding the publisher in on the fly."");
                     publisher = new Publisher();
                     publisher.setAuthorizedName(authorizedName);
                     publisher.setIsAdmin(""false"");
@@ -179,4 +181,4 @@
             em.close();
         }
     }
-}
\ No newline at end of file
+}
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
index 052443d..d3c48d8 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
@@ -23,7 +23,6 @@
 import org.apache.juddi.portlets.client.service.FindResponse;
 import org.apache.juddi.portlets.client.service.FindService;
 import org.apache.juddi.portlets.client.service.FindServiceAsync;
-import org.apache.juddi.portlets.client.service.PublicationResponse;
 import org.apache.juddi.portlets.client.service.PublicationService;
 import org.apache.juddi.portlets.client.service.PublicationServiceAsync;
 
@@ -106,7 +105,7 @@
 		findService.getBusinesses(name, findQualifyers, new AsyncCallback<FindResponse>() 
 		{
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(FindResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index 2043fe8..d4a9871 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -49,7 +49,7 @@
 	public void displayServices( String businessKey) {
 		inquiryService.getBusinessDetail(UDDIBrowser.getInstance().getToken(), businessKey, new AsyncCallback<InquiryResponse>() {
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(InquiryResponse response) {
@@ -79,7 +79,7 @@
 	public void displayBusiness( String businessKey) {
 		inquiryService.getBusinessDetail(UDDIBrowser.getInstance().getToken(), businessKey, new AsyncCallback<InquiryResponse>() {
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(InquiryResponse response) {
@@ -111,7 +111,7 @@
 
 		inquiryService.getServiceDetail(UDDIBrowser.getInstance().getToken(), serviceKey, new AsyncCallback<InquiryResponse>() {
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(InquiryResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
index 96e2a0e..8058485 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
@@ -79,7 +79,7 @@
 		securityService.get(user, password, new AsyncCallback<SecurityResponse>() 
 		{
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error: "" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(SecurityResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
index 9dbc96f..12cd354 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
@@ -17,7 +17,6 @@
 package org.apache.juddi.portlets.client;
 
 import com.google.gwt.core.client.GWT;
-import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.ClickListener;
 import com.google.gwt.user.client.ui.FlowPanel;
 import com.google.gwt.user.client.ui.HorizontalPanel;
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
index 1d027d7..3e40dfe 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
@@ -87,7 +87,7 @@
 		juddiApiService.getPublishers(token, publisherId,  new AsyncCallback<JUDDIApiResponse>() 
 				{
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error: "" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(JUDDIApiResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
index 0978923..6243764 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
@@ -27,7 +27,9 @@
 import com.google.gwt.user.client.ui.CheckBox;
 import com.google.gwt.user.client.ui.FlexTable;
 import com.google.gwt.user.client.ui.FlowPanel;
+import com.google.gwt.user.client.ui.HTML;
 import com.google.gwt.user.client.ui.Label;
+import com.google.gwt.user.client.ui.RootPanel;
 import com.google.gwt.user.client.ui.TextBox;
 
 public class PublisherPanel extends FlowPanel {
@@ -139,7 +141,8 @@
 				juddiApiService.deletePublisher(token, publisher.getAuthorizedName(), new AsyncCallback<JUDDIApiResponse>() 
 				{
 					public void onFailure(Throwable caught) {
-						Window.alert(""Error: "" + caught.getMessage());
+						RootPanel.get(""publisher"").clear();
+						RootPanel.get(""publisher"").add(new HTML(caught.getMessage()));
 					}
 		
 					public void onSuccess(JUDDIApiResponse response) {
@@ -178,7 +181,7 @@
 			juddiApiService.savePublisher(token, publisher, new AsyncCallback<JUDDIApiResponse>() 
 			{
 				public void onFailure(Throwable caught) {
-					Window.alert(""Error:  "" + caught.getMessage());
+					Window.Location.reload();
 				}
 	
 				public void onSuccess(JUDDIApiResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionPanel.java
index 68b902d..afbf34f 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionPanel.java
@@ -174,7 +174,7 @@
 			subscriptionServiceAsync.invokeSyncSubscription(authToken, subscription, new AsyncCallback<SubscriptionResponse>()
 					{
 				public void onFailure(Throwable caught) {
-					Window.alert(""error:"" + caught.getMessage());
+					Window.Location.reload();
 				}
 	
 				public void onSuccess(SubscriptionResponse response) {
@@ -197,7 +197,7 @@
 			subscriptionServiceAsync.deleteSubscription(authToken, subscription, new AsyncCallback<SubscriptionResponse>()
 					{
 						public void onFailure(Throwable caught) {
-							Window.alert(""Error: "" + caught.getMessage());
+							Window.Location.reload();
 						}
 			
 						public void onSuccess(SubscriptionResponse response) {
@@ -250,7 +250,7 @@
 			subscriptionServiceAsync.saveSubscription(authToken, subscription, new AsyncCallback<SubscriptionResponse>()
 			{
 				public void onFailure(Throwable caught) {
-					Window.alert(""Error: "" + caught.getMessage());
+					Window.Location.reload();
 				}
 	
 				public void onSuccess(SubscriptionResponse response) {
"
juddi,c40de835fe324d8a43a7c8c14d715a590f4c0b5b,"JUDDI-511, if communication between the browser and the backend is not working then it makes sense to reload the page. In most cases this will happen when the session expires, and the user will be redirected to login.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1170238 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-13 17:03:35,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionTreePanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionTreePanel.java
index ae5a921..98e4209 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionTreePanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/SubscriptionTreePanel.java
@@ -53,7 +53,7 @@
 		subscriptionService.getSubscriptions(new AsyncCallback<SubscriptionResponse>() 
 		{
 			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
+				Window.Location.reload();
 			}
 
 			public void onSuccess(SubscriptionResponse response) {
"
juddi,bf619e4cef49ac50f059cb63e0f1aed5aba044be,"JUDDI-524

Refresh the tree to reflect changes in the registry.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1169831 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-12 16:59:13,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
index c2fadb0..052443d 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/BusinessTreePanel.java
@@ -48,53 +48,52 @@
 		initWidget(publisherTree);
 	}
 	
-	public void loadBusinesses() {
-		getBusinesses(""all"");
-	}
-	
-	public void findAllBusiness() {
-		findAllBusinesses();
-	}
-	
-	protected void getBusinesses(String infoSelection) {
-
-		publicationService.getBusinesses(UDDIBrowser.getInstance().getToken(), infoSelection, new AsyncCallback<PublicationResponse>() 
-		{
-			public void onFailure(Throwable caught) {
-				Window.alert(""Error:"" + caught.getMessage());
-			}
-
-			public void onSuccess(PublicationResponse response) {
-				if (response.isSuccess()) {
-					List<Business> businesses= response.getBusinesses();
-					System.out.println(""Businesses="" + businesses);
-					
-					for (Business business : businesses) {
-					
-						TreeItem businessTree = new TreeItem(UDDIBrowser.images.business().getHTML() + "" "" + business.getName());
-						businessTree.setStyleName(""portlet-form-field-label"");
-						businessTree.setState(true);
-						businessTree.setUserObject(business);
-						TreeItem serviceTree = new TreeItem(UDDIBrowser.images.services().getHTML() + SERVICES_LABEL);
-						serviceTree.setUserObject(business);
-						for (Service service : business.getServices()) {
-							TreeItem serviceItem = new TreeItem(UDDIBrowser.images.service().getHTML() + "" "" + service.getName());
-							serviceItem.setStyleName(""portlet-form-field-label"");
-							serviceItem.setUserObject(service);
-							serviceTree.addItem(serviceItem);
-							serviceTree.setTitle(""Service:"" +  service.getKey());
-						}
-						businessTree.addItem(serviceTree);
-
-						publisherTree.addItem(businessTree);
-					}
-					
-				} else {
-					Window.alert(""error: "" + response.getMessage());
-				}
-			}
-		});
-	}
+//	public void loadBusinesses() {
+//		getBusinesses(""all"");
+//	}
+//	
+//	protected void getBusinesses(String infoSelection) {
+//
+//		publicationService.getBusinesses(UDDIBrowser.getInstance().getToken(), infoSelection, new AsyncCallback<PublicationResponse>() 
+//		{
+//			public void onFailure(Throwable caught) {
+//				Window.alert(""Error:"" + caught.getMessage());
+//			}
+//
+//			public void onSuccess(PublicationResponse response) {
+//				if (response.isSuccess()) {
+//					publisherTree.clear();
+//					List<Business> businesses= response.getBusinesses();
+//					System.out.println(""Businesses="" + businesses);
+//					
+//					for (Business business : businesses) {
+//					
+//						TreeItem businessTree = new TreeItem(UDDIBrowser.images.business().getHTML() + "" "" + business.getName());
+//						businessTree.setStyleName(""portlet-form-field-label"");
+//						businessTree.setState(true);
+//						businessTree.setUserObject(business);
+//						TreeItem serviceTree = new TreeItem(UDDIBrowser.images.services().getHTML() + SERVICES_LABEL);
+//						serviceTree.setUserObject(business);
+//						serviceTree.setState(true);
+//						for (Service service : business.getServices()) {
+//							TreeItem serviceItem = new TreeItem(UDDIBrowser.images.service().getHTML() + "" "" + service.getName());
+//							serviceItem.setStyleName(""portlet-form-field-label"");
+//							serviceItem.setUserObject(service);
+//							serviceItem.setState(true);
+//							serviceTree.addItem(serviceItem);
+//							serviceTree.setTitle(""Service:"" +  service.getKey());
+//						}
+//						businessTree.addItem(serviceTree);
+//
+//						publisherTree.addItem(businessTree);
+//					}
+//					
+//				} else {
+//					Window.alert(""error: "" + response.getMessage());
+//				}
+//			}
+//		});
+//	}
 	
 	protected void findAllBusinesses() {
 
@@ -114,25 +113,32 @@
 				if (response.isSuccess()) {
 					List<Business> businesses= response.getBusinesses();
 					System.out.println(""Businesses="" + businesses);
-					
+					publisherTree.clear();
 					for (Business business : businesses) {
 					
 						TreeItem businessTree = new TreeItem(UDDIBrowser.images.business().getHTML() + "" "" + business.getName());
 						businessTree.setStyleName(""portlet-form-field-label"");
-						businessTree.setState(true);
+						
 						businessTree.setUserObject(business);
 						TreeItem serviceTree = new TreeItem(UDDIBrowser.images.services().getHTML() + SERVICES_LABEL);
 						serviceTree.setUserObject(business);
+						
 						for (Service service : business.getServices()) {
 							TreeItem serviceItem = new TreeItem(UDDIBrowser.images.service().getHTML() + "" "" + service.getName());
 							serviceItem.setStyleName(""portlet-form-field-label"");
 							serviceItem.setUserObject(service);
+							serviceItem.setState(true);
+							serviceItem.setTitle(""Service:"" +  service.getKey());
 							serviceTree.addItem(serviceItem);
-							serviceTree.setTitle(""Service:"" +  service.getKey());
+							
 						}
+						serviceTree.setState(true);
+						
 						businessTree.addItem(serviceTree);
+						businessTree.setState(true);
 
 						publisherTree.addItem(businessTree);
+						
 					}
 					
 				} else {
@@ -150,6 +156,7 @@
 			UDDIBrowser.getInstance().getDetailPanel().setVisible(true);
 			UDDIBrowser.getInstance().getDetailPanel().displayService(service.getKey());
 		} else if (treeItem.getUserObject()!=null && Business.class.equals(treeItem.getUserObject().getClass())) {
+			findAllBusinesses();
 			Business business = (Business) treeItem.getUserObject();
 			UDDIBrowser.getInstance().getDetailPanel().setVisible(true);
 			if (SERVICES_LABEL.equals(treeItem.getText())) {
"
juddi,bf619e4cef49ac50f059cb63e0f1aed5aba044be,"JUDDI-524

Refresh the tree to reflect changes in the registry.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1169831 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-12 16:59:13,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
index 186e573..a2d1528 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
@@ -69,7 +69,7 @@
 		} else {
 			loginPanel.setVisible(false);
 			applicationPanel.setVisible(true);
-			applicationPanel.findAllBusiness();
+			applicationPanel.findAllBusinesses();
 		}
 	}
 	
"
juddi,bf619e4cef49ac50f059cb63e0f1aed5aba044be,"JUDDI-524

Refresh the tree to reflect changes in the registry.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1169831 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-12 16:59:13,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
index b11cc49..c73b2a8 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
@@ -67,7 +67,8 @@
 		} else {
 			loginPanel.setVisible(false);
 			applicationPanel.setVisible(true);
-			applicationPanel.loadBusinesses();
+			applicationPanel.findAllBusinesses(); //we prob want to change this to only
+			//select the business that are owned by the current publisher.
 		}
 	}
 	
"
juddi,41c2c6e9d1abdd95a7f8943f71ce3b4f03c49ff7,"JUDDI-518 - make juddi console work with XMLDocAuthenticator

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167182 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 14:05:18,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index 32a3861..ad66707 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -30,6 +30,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.service.SecurityResponse;
 import org.apache.juddi.portlets.client.service.SecurityService;
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.apache.juddi.v3.client.config.WebHelper;
@@ -70,6 +71,15 @@
 		if (username==null && user!=null) {
 			username = user.getName();
 			password = """";
+			try {
+				//if we can find this class we get obtain the password from the Tomcat User.
+				ClassUtil.forName(""org.apache.catalina.User"", this.getClass());
+				password = new CatalinaUser().getPassword(user);
+			} catch ( ClassNotFoundException cnfe) {
+				logger.warn(""The class org.apache.cataline.User was not found. You may"" +
+						"" need a SSO solution take care of authentication, or fall back"" +
+						"" to JUDDIAuthentication."");
+			}
 		} 
 		if (token==null) {
 			if (username==null) {
"
juddi,fb40ac11c03887bff0dfa73c6b198a8ca0169313,"JUDDI-521, fixing 'Max Service Per Business' value gets overridden by 'Max Bindings Per Service'.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167022 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 07:08:29,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
index f812b3a..0978923 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
@@ -170,9 +170,9 @@
 			publisher.setEmailAddress(emailAddressBox.getText());
 			publisher.setIsAdmin(isAdminBox.isChecked()?""true"":""false"");
 			publisher.setIsEnabled(isEnabledBox.isChecked()?""true"":""false"");
-			publisher.setMaxBindingsPerService(("""".equals(maxServicesPerBusinessBox))?null:Integer.valueOf(maxBindingsPerServiceBox.getText()));
+			publisher.setMaxBindingsPerService(("""".equals(maxBindingsPerServiceBox))?null:Integer.valueOf(maxBindingsPerServiceBox.getText()));
 			publisher.setMaxBusinesses(("""".equals(maxBusinessesBox.getText()))?null:Integer.valueOf(maxBusinessesBox.getText()));
-			publisher.setMaxServicePerBusiness(("""".equals(maxBindingsPerServiceBox.getText()))?null:Integer.valueOf(maxBindingsPerServiceBox.getText()));
+			publisher.setMaxServicePerBusiness(("""".equals(maxServicesPerBusinessBox.getText()))?null:Integer.valueOf(maxServicesPerBusinessBox.getText()));
 			publisher.setMaxTModels(("""".equals(maxTModelBox.getText()))?null:Integer.valueOf(maxTModelBox.getText()));
 			
 			juddiApiService.savePublisher(token, publisher, new AsyncCallback<JUDDIApiResponse>() 
"
juddi,6d940f189adeaa0093fdfa40248800d22170b3ec,"JUDDI-520, adding a confirmation box on delete

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167018 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:55:41,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
index 9e61bc9..f18907c 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
@@ -160,6 +160,8 @@
 	public void deletePublisher() {
 		if (publisherPanel!=null) {
 			publisherPanel.deletePublisher(getToken());
+		} else {
+			Window.alert(""Please select a publisher first."");
 		}
 	}
 	
"
juddi,6d940f189adeaa0093fdfa40248800d22170b3ec,"JUDDI-520, adding a confirmation box on delete

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167018 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:55:41,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
index 7ef6c89..9dbc96f 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
@@ -17,6 +17,7 @@
 package org.apache.juddi.portlets.client;
 
 import com.google.gwt.core.client.GWT;
+import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.ClickListener;
 import com.google.gwt.user.client.ui.FlowPanel;
 import com.google.gwt.user.client.ui.HorizontalPanel;
@@ -64,7 +65,7 @@
 			syncButton.setTitle(""Refresh subscriptions"");
 			pushPanel.add(syncButton);
 			newButton.setTitle(""Create New Subscription"");
-			deleteButton.setTitle(""Delete Subscription"");
+			deleteButton.setTitle(""Delete Selected Subscription"");
 			saveButton.setTitle(""Save Subscription"");
 		}
 		
@@ -75,7 +76,7 @@
 			managerButton.setTitle(""Restart ClerkManager"");
 			pushPanel.add(managerButton);
 			newButton.setTitle(""Create New Publisher"");
-			deleteButton.setTitle(""Delete Publisher"");
+			deleteButton.setTitle(""Delete Selected Publisher"");
 			saveButton.setTitle(""Save Publisher"");
 			
 		}
"
juddi,6d940f189adeaa0093fdfa40248800d22170b3ec,"JUDDI-520, adding a confirmation box on delete

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167018 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:55:41,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
index c28f8b2..f812b3a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
@@ -135,20 +135,22 @@
 	
 	protected void deletePublisher(String token){
 		if (publisher!=null) {
-			juddiApiService.deletePublisher(token, publisher.getAuthorizedName(), new AsyncCallback<JUDDIApiResponse>() 
-			{
-				public void onFailure(Throwable caught) {
-					Window.alert(""Error: "" + caught.getMessage());
-				}
-	
-				public void onSuccess(JUDDIApiResponse response) {
-					if (response.isSuccess()) {
-						JUDDIPublisher.getInstance().hidePublisher();
-					} else {
-						Window.alert(""error: "" + response.getMessage());
+			if (Window.confirm(""Are you sure you want to delete Publisher '"" + publisher.getAuthorizedName() + ""'?"")) {
+				juddiApiService.deletePublisher(token, publisher.getAuthorizedName(), new AsyncCallback<JUDDIApiResponse>() 
+				{
+					public void onFailure(Throwable caught) {
+						Window.alert(""Error: "" + caught.getMessage());
 					}
-				}
-			});
+		
+					public void onSuccess(JUDDIApiResponse response) {
+						if (response.isSuccess()) {
+							JUDDIPublisher.getInstance().hidePublisher();
+						} else {
+							Window.alert(""error: "" + response.getMessage());
+						}
+					}
+				});
+			}
 		}
 	}
 	
"
juddi,6d940f189adeaa0093fdfa40248800d22170b3ec,"JUDDI-520, adding a confirmation box on delete

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167018 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:55:41,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
index 1c6faab..2419ea2 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
@@ -19,6 +19,7 @@
 import org.apache.juddi.portlets.client.model.Subscription;
 
 import com.google.gwt.core.client.EntryPoint;
+import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.DockPanel;
 import com.google.gwt.user.client.ui.RootPanel;
 
@@ -117,7 +118,11 @@
 	
 	public void deleteSubscription() {
 		if (detailPanel!=null) {
-			detailPanel.deleteSubscription(getToken());
+			if (Window.confirm(""Are you sure you want to delete Subscription?"")) {
+				detailPanel.deleteSubscription(getToken());
+			}
+		} else {
+			Window.alert(""Please select a subscription first."");
 		}
 	}
 	
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Images.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Images.java
index 4ae10ba..6eded32 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Images.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Images.java
@@ -38,6 +38,7 @@
 	AbstractImagePrototype create();
 	AbstractImagePrototype save();
 	AbstractImagePrototype delete();
+	AbstractImagePrototype logout();
 	AbstractImagePrototype sync();
 	AbstractImagePrototype manager();
 }
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
index 3f1e9d6..9e61bc9 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/JUDDIPublisher.java
@@ -26,6 +26,7 @@
 import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.gwt.user.client.ui.DockPanel;
+import com.google.gwt.user.client.ui.FlowPanel;
 import com.google.gwt.user.client.ui.RootPanel;
 
 /**
@@ -37,13 +38,16 @@
 
 	private static JUDDIPublisher singleton;
 	
+	private FlowPanel flowPanel = new FlowPanel();
 	private MenuBarPanel menuBar = new MenuBarPanel(MenuBarPanel.PUBLISHER);
+	private StatusBarPanel statusBar = new StatusBarPanel(this);
 	private DockPanel dockPanel = new DockPanel();
 	private LoginPanel loginPanel = new LoginPanel(this);
 	private PublisherListPanel publisherListPanel = new PublisherListPanel();
 	private PublisherPanel publisherPanel = null;
 	private JUDDIApiServiceAsync juddiApiService = (JUDDIApiServiceAsync) GWT.create(JUDDIApiService.class);
-
+	private boolean isAdmin = false;
+	
 	public static JUDDIPublisher getInstance() {
 		return singleton;
 	}
@@ -55,9 +59,19 @@
 		
 		dockPanel.setWidth(""100%"");
 		dockPanel.setSpacing(8);
+		
 		menuBar.setVisible(false);
-		menuBar.setHeight(""20px"");
-		dockPanel.add(menuBar,DockPanel.NORTH);
+		menuBar.setStyleName(""menu"");
+		
+		flowPanel.setWidth(""100%"");
+		flowPanel.add(menuBar);
+		
+		statusBar.setVisible(false);
+		statusBar.setStyleName(""status"");
+		
+		flowPanel.add(statusBar);
+		
+		dockPanel.add(flowPanel,DockPanel.NORTH);
 		
 		loginPanel.setVisible(false);
 		dockPanel.add(loginPanel,DockPanel.WEST);
@@ -75,24 +89,36 @@
 			loginPanel.setVisible(true);
 			publisherListPanel.setVisible(false);
 			menuBar.setVisible(false);
+			statusBar.setUser("""");
+			statusBar.setVisible(false);
 		} else {
 			loginPanel.setVisible(false);
 			menuBar.setVisible(true);
+			if (getIsAdmin()) menuBar.setVisible(true);
+			statusBar.setVisible(true);
+			statusBar.setUser(getPublisherId());
 			publisherListPanel.setVisible(true);
-			String publisherId = loginPanel.getPublisherId();
-			publisherListPanel.listPublishers(token, publisherId);
+			publisherListPanel.listPublishers(this);
 		}
 	}
 	
+	public void logout() {
+		loginPanel.setToken(null);
+		loginPanel.setVisible(true);
+		publisherListPanel.setVisible(false);
+		menuBar.setVisible(false);
+		statusBar.setUser("""");
+		statusBar.setVisible(false);
+		if (publisherPanel!=null) publisherPanel.setVisible(false);
+	}
+	
 	public void displayPublisher(Publisher publisher) {
 		if (publisherPanel!=null ) dockPanel.remove(publisherPanel);
 		publisherPanel = new PublisherPanel(publisher);
 		publisherPanel.setWidth(""100%"");
 		publisherPanel.setStyleName(""detail-panel"");
 		dockPanel.add(publisherPanel,DockPanel.EAST);
-		String token = loginPanel.getToken();
-		String publisherId = loginPanel.getPublisherId();
-		publisherListPanel.listPublishers(token, publisherId);
+		publisherListPanel.listPublishers(this);
 	}
 	
 	public void setSelectedPublisher(String selectedPublisherId) {
@@ -101,22 +127,25 @@
 	
 	public void hidePublisher() {
 		publisherPanel.setVisible(false);
-		String token = loginPanel.getToken();
-		String publisherId = loginPanel.getPublisherId();
 		publisherListPanel.selectRow(0);
 		if (publisherPanel!=null ) dockPanel.remove(publisherPanel);
 		publisherPanel=null;
-		publisherListPanel.listPublishers(token, publisherId);
+		publisherListPanel.listPublishers(this);
 	}
 
 	public String getToken() {
 		return loginPanel.getToken();
 	}
 	
+	public String getPublisherId() {
+		return loginPanel.getPublisherId();
+	}
+	
 	public void savePublisher() {
 		if (publisherPanel!=null) {
 			publisherPanel.savePublisher(getToken());
 		}
+		publisherListPanel.listPublishers(this);
 	}
 	
 	public void newPublisher() {
@@ -151,6 +180,18 @@
 			}
 		});
 	}
-
+	
+	public boolean getIsAdmin() {
+		return isAdmin;
+	}
+	
+	public void setIsAdmin(boolean isAdmin) {
+		this.isAdmin = isAdmin;
+		
+		menuBar.setVisible(isAdmin);
+		if (publisherPanel!=null) {
+			publisherPanel.setUserIsAdmin(isAdmin);
+		}
+	}
 	
 }
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Login.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Login.java
index 5ffe79c..c294a35 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Login.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/Login.java
@@ -19,4 +19,5 @@
 public interface Login {
 
 	public void login();
+	public void logout();
 }
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
index 3f871e4..96e2a0e 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/LoginPanel.java
@@ -21,17 +21,17 @@
 import org.apache.juddi.portlets.client.service.SecurityServiceAsync;
 
 import com.google.gwt.core.client.GWT;
+import com.google.gwt.event.dom.client.ClickEvent;
+import com.google.gwt.event.dom.client.ClickHandler;
 import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.gwt.user.client.ui.Button;
-import com.google.gwt.user.client.ui.ClickListener;
 import com.google.gwt.user.client.ui.FlowPanel;
 import com.google.gwt.user.client.ui.Label;
 import com.google.gwt.user.client.ui.PasswordTextBox;
 import com.google.gwt.user.client.ui.TextBox;
-import com.google.gwt.user.client.ui.Widget;
 
-public class LoginPanel extends FlowPanel implements ClickListener {
+public class LoginPanel extends FlowPanel {
 	
 	//UI Widgets
 	private Button tokenButton = new Button(""Login"");
@@ -61,18 +61,15 @@
 		passwordBox.setStyleName(""portlet-form-input-field"");
 		add(passwordBox);
 		
-		tokenButton.addClickListener(this);
+		tokenButton.addClickHandler(new ClickHandler() {
+	          public void onClick(ClickEvent event) {
+	        	  getToken(usernameBox.getText(), passwordBox.getText());
+	          }
+	      });
 		tokenButton.setStyleName((""portlet-form-button""));
 		add(tokenButton); 
 	}
 	
-	public void onClick(Widget sender) {
-		if (sender == tokenButton) {
-			getToken(usernameBox.getText(), passwordBox.getText());
-		} else {
-			System.err.println(""undefined"");
-		}
-	}
 	/**
 	 * Obtains an authenticationToken
 	 * @param user
@@ -91,16 +88,41 @@
 					publisherId = response.getUsername();
 					application.login();
 				} else {
-					Window.alert(""error: "" + response.getMessage());
+					application.login();
+					//Window.alert(""error: "" + response.getMessage());
 				}
 			}
 		}); 
 	}
 	
+	/**
+	 * Obtains an authenticationToken
+	 * @param user
+	 * @param password
+	 */
+	protected void destroyToken(String user, String password) {
+		securityService.logout(new AsyncCallback<SecurityResponse>() 
+		{
+			public void onFailure(Throwable caught) {
+				Window.alert(""Error: "" + caught.getMessage());
+			}
+
+			public void onSuccess(SecurityResponse response) {
+				token = null;
+				publisherId = null;
+				application.logout();
+			}
+		}); 
+	}
+	
 	public String getToken() {
 		return token;
 	}
 	
+	public void setToken(String token) {
+		this.token = token;
+	}
+	
 	public String getPublisherId() {
 		return publisherId;
 	}
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
index 05f6deb..7ef6c89 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/MenuBarPanel.java
@@ -61,15 +61,25 @@
 			syncButton.setHTML(images.sync().getHTML());
 			syncButton.setStyleName((""portlet-form-button""));
 			syncButton.addClickListener(this);
+			syncButton.setTitle(""Refresh subscriptions"");
 			pushPanel.add(syncButton);
+			newButton.setTitle(""Create New Subscription"");
+			deleteButton.setTitle(""Delete Subscription"");
+			saveButton.setTitle(""Save Subscription"");
 		}
 		
 		if (PUBLISHER.equals(context)) {
 			managerButton.setHTML(images.manager().getHTML());
 			managerButton.setStyleName((""portlet-form-button""));
 			managerButton.addClickListener(this);
+			managerButton.setTitle(""Restart ClerkManager"");
 			pushPanel.add(managerButton);
+			newButton.setTitle(""Create New Publisher"");
+			deleteButton.setTitle(""Delete Publisher"");
+			saveButton.setTitle(""Save Publisher"");
+			
 		}
+		
 		add(pushPanel);
 		
 	}
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
index 9ace3c4..1d027d7 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherListPanel.java
@@ -76,11 +76,14 @@
 	}
 
 	/**
-	 * Obtains an authenticationToken
+	 * Obtains a list of all publishers
 	 * @param user
 	 * @param password
 	 */
-	protected List<Publisher> listPublishers(String token, String publisherId) {
+	protected void listPublishers(final JUDDIPublisher juddiPublisher) {
+		final String token = juddiPublisher.getToken();
+		final String publisherId = juddiPublisher.getPublisherId();
+		juddiPublisher.setIsAdmin(false);
 		juddiApiService.getPublishers(token, publisherId,  new AsyncCallback<JUDDIApiResponse>() 
 				{
 			public void onFailure(Throwable caught) {
@@ -99,13 +102,16 @@
 						if (selectedRow==i+1 || selectedPublisher.equals(publishers.get(i).getAuthorizedName())) {
 							selectRow(i+1);
 						}
+						if ( (publishers.get(i).getAuthorizedName().equals(publisherId) ) && 
+								(""true"".equalsIgnoreCase(publishers.get(i).getIsAdmin())) ) {
+							juddiPublisher.setIsAdmin(true);
+						}
 					}
 				} else {
 					Window.alert(""error: "" + response.getMessage());
 				}
 			}
 				});
-		return publishers;
 	}
 
 	public void onCellClicked(SourcesTableEvents sender, int row, int cell) {
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
index 81d76ce..c28f8b2 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/PublisherPanel.java
@@ -56,14 +56,14 @@
 		FlexTable flexTable = new FlexTable();
 		add(flexTable);
 
-		Label id = new Label (""Id:"");
+		Label id = new Label (""Username:"");
 		id.setStyleName(""portlet-form-field-label-right"");
 		flexTable.setWidget(0, 0, id);
 		idBox.setText(this.publisher.getAuthorizedName());
 		idBox.setStyleName(""portlet-form-input-field"");
 		flexTable.setWidget(0, 1, idBox);
 		
-		Label name = new Label (""Name:"");
+		Label name = new Label (""Full Name:"");
 		name.setStyleName(""portlet-form-field-label-right"");
 		flexTable.setWidget(1, 0, name);
 		nameBox.setText(this.publisher.getPublisherName());
@@ -121,6 +121,18 @@
 		
 	}
 	
+	public void setUserIsAdmin(boolean isAdmin) {
+		idBox.setEnabled(isAdmin);
+		nameBox.setEnabled(isAdmin);
+		emailAddressBox.setEnabled(isAdmin);
+		isAdminBox.setEnabled(isAdmin);
+		isEnabledBox.setEnabled(isAdmin);
+		maxBindingsPerServiceBox.setEnabled(isAdmin);
+		maxBusinessesBox.setEnabled(isAdmin);
+		maxServicesPerBusinessBox.setEnabled(isAdmin);
+		maxTModelBox.setEnabled(isAdmin);
+	}
+	
 	protected void deletePublisher(String token){
 		if (publisher!=null) {
 			juddiApiService.deletePublisher(token, publisher.getAuthorizedName(), new AsyncCallback<JUDDIApiResponse>() 
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
index 41f21b7..186e573 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIBrowser.java
@@ -80,6 +80,11 @@
 	protected DetailPanel getDetailPanel() {
 		return detailPanel;
 	}
+	
+	public void logout() {
+		loginPanel.setVisible(true);
+		applicationPanel.setVisible(false);
+	}
 
 	
 }
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
index deaeca7..b11cc49 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDIEditor.java
@@ -71,6 +71,10 @@
 		}
 	}
 	
+	public void logout() {
+	
+	}
+	
 	public String getToken() {
 		return loginPanel.getToken();
 	}
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
index 6dba574..1c6faab 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscription.java
@@ -74,6 +74,10 @@
 		}
 	}
 	
+	public void logout() {
+		
+	}
+	
 	public void displaySubscription(Subscription subscription) {
 		if (detailPanel!=null ) dockPanel.remove(detailPanel);
 		detailPanel = new SubscriptionPanel(subscription, subscription.getNode());
"
juddi,70ff0ea9a1eb6853e9ac2cb632dfdd32a12d5f83,"JUDDI-510, Action buttons in the Publisher portlet should be disabled for non-admin users

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1167014 13f79535-47bb-0310-9956-ffa450edef68
",2011-09-09 06:25:01,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityService.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityService.java
index c1c28b8..07e315a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityService.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityService.java
@@ -26,4 +26,5 @@
 @RemoteServiceRelativePath(""security"")
 public interface SecurityService extends RemoteService {
 	public SecurityResponse get(String username, String password);
+	public SecurityResponse logout();
 }
"
juddi,e793bc9e3343c01e362713528d0787a241175504,"JUDDI-508, fixing typos

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1144059 13f79535-47bb-0310-9956-ffa450edef68
",2011-07-07 21:37:18,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 7291d11..08a4520 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -61,11 +61,11 @@
 	  	operations.put(""save_business"", new Handler(""saveBusiness"", SaveBusiness.class));
 	  	operations.put(""save_service"", new Handler(""saveService"", SaveService.class));
 	  	operations.put(""save_binding"", new Handler(""saveBinding"", SaveBinding.class));
-	  	operations.put(""save_tmodel"", new Handler(""saveTModel"", SaveTModel.class));
+	  	operations.put(""save_tModel"", new Handler(""saveTModel"", SaveTModel.class));
 	  	operations.put(""delete_business"", new Handler(""deleteBusiness"", DeleteBusiness.class));
 	  	operations.put(""delete_service"", new Handler(""deleteService"", DeleteService.class));
 	  	operations.put(""delete_binding"", new Handler(""deleteBinding"", DeleteBinding.class));
-	  	operations.put(""delete_tmodel"", new Handler(""deleteTModel"", DeleteTModel.class));
+	  	operations.put(""delete_tModel"", new Handler(""deleteTModel"", DeleteTModel.class));
 	  	operations.put(""add_publisherAssertions"", new Handler(""addPublisherAssertions"", AddPublisherAssertions.class));
 	  	operations.put(""set_publisherAssertions"", new Handler(""setPublisherAssertions"", SetPublisherAssertions.class));
 	  	operations.put(""get_publisherAssertions"", new Handler(""getPublisherAssertions"", GetPublisherAssertions.class));
"
juddi,821164cb7163b15cde66c8633cf0dca35b2f8e82,"JUDDI-507 A SOAP validation error will occur if an empty list of tModels or Businesses is returned. Instead, if the list is empty we should not return it. 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1141164 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-29 17:00:20,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 6ee9e69..0fd6be4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -459,28 +459,32 @@
 			
 			// Sort and retrieve the final results
 			List<?> queryResults = FetchBusinessEntitiesQuery.select(em, new FindQualifiers(), businessKeysFound, null, null, null);
-			result.setBusinessInfos(new org.uddi.api_v3.BusinessInfos());
-			
-			for (Object item : queryResults) {
-				org.apache.juddi.model.BusinessEntity modelBusinessEntity = (org.apache.juddi.model.BusinessEntity)item;
-				org.uddi.api_v3.BusinessInfo apiBusinessInfo = new org.uddi.api_v3.BusinessInfo();
+			if (queryResults.size() > 0) {
+				result.setBusinessInfos(new org.uddi.api_v3.BusinessInfos());
 				
-				MappingModelToApi.mapBusinessInfo(modelBusinessEntity, apiBusinessInfo);
-				
-				result.getBusinessInfos().getBusinessInfo().add(apiBusinessInfo);
+				for (Object item : queryResults) {
+					org.apache.juddi.model.BusinessEntity modelBusinessEntity = (org.apache.juddi.model.BusinessEntity)item;
+					org.uddi.api_v3.BusinessInfo apiBusinessInfo = new org.uddi.api_v3.BusinessInfo();
+					
+					MappingModelToApi.mapBusinessInfo(modelBusinessEntity, apiBusinessInfo);
+					
+					result.getBusinessInfos().getBusinessInfo().add(apiBusinessInfo);
+				}
 			}
 	
 			// Sort and retrieve the final results
 			queryResults = FetchTModelsQuery.select(em, new FindQualifiers(), tmodelKeysFound, null, null, null);
-			result.setTModelInfos(new org.uddi.api_v3.TModelInfos());
-			
-			for (Object item : queryResults) {
-				org.apache.juddi.model.Tmodel modelTModel = (org.apache.juddi.model.Tmodel)item;
-				org.uddi.api_v3.TModelInfo apiTModelInfo = new org.uddi.api_v3.TModelInfo();
+			if (queryResults.size() > 0) {
+				result.setTModelInfos(new org.uddi.api_v3.TModelInfos());
 				
-				MappingModelToApi.mapTModelInfo(modelTModel, apiTModelInfo);
-				
-				result.getTModelInfos().getTModelInfo().add(apiTModelInfo);
+				for (Object item : queryResults) {
+					org.apache.juddi.model.Tmodel modelTModel = (org.apache.juddi.model.Tmodel)item;
+					org.uddi.api_v3.TModelInfo apiTModelInfo = new org.uddi.api_v3.TModelInfo();
+					
+					MappingModelToApi.mapTModelInfo(modelTModel, apiTModelInfo);
+					
+					result.getTModelInfos().getTModelInfo().add(apiTModelInfo);
+				}
 			}
 			
 			tx.commit();	
"
juddi,436d4d63d7844047ffe330b4dc4da281b0e135a2,"JUDDI-506, fixing capitalization

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1140322 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-27 21:06:00,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 63ee8fb..7291d11 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -66,11 +66,11 @@
 	  	operations.put(""delete_service"", new Handler(""deleteService"", DeleteService.class));
 	  	operations.put(""delete_binding"", new Handler(""deleteBinding"", DeleteBinding.class));
 	  	operations.put(""delete_tmodel"", new Handler(""deleteTModel"", DeleteTModel.class));
-	  	operations.put(""add_publisherassertions"", new Handler(""addPublisherAssertions"", AddPublisherAssertions.class));
-	  	operations.put(""set_publisherassertions"", new Handler(""setPublisherAssertions"", SetPublisherAssertions.class));
-	  	operations.put(""get_publisherassertions"", new Handler(""getPublisherAssertions"", GetPublisherAssertions.class));
-	  	operations.put(""delete_publisherassertions"", new Handler(""deletePublisherAssertions"", DeletePublisherAssertions.class));
-	  	operations.put(""get_assertionstatusreport"", new Handler(""getAssertionStatusReport"", GetAssertionStatusReport.class));
+	  	operations.put(""add_publisherAssertions"", new Handler(""addPublisherAssertions"", AddPublisherAssertions.class));
+	  	operations.put(""set_publisherAssertions"", new Handler(""setPublisherAssertions"", SetPublisherAssertions.class));
+	  	operations.put(""get_publisherAssertions"", new Handler(""getPublisherAssertions"", GetPublisherAssertions.class));
+	  	operations.put(""delete_publisherAssertions"", new Handler(""deletePublisherAssertions"", DeletePublisherAssertions.class));
+	  	operations.put(""get_assertionStatusReport"", new Handler(""getAssertionStatusReport"", GetAssertionStatusReport.class));
 	}
 
 	//Verify that the appropriate endpoint was targeted for
"
juddi,9f0cfdb10fcfa296776554d2cf50944ee5c258a4,"JUDDI-498, fixing so it returns an empty response (again, I think something got changed accidentally)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1137035 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-17 21:23:52,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index b280435..6ee9e69 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -57,8 +57,6 @@
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
-import org.apache.juddi.v3.error.RegistryException;
-import org.apache.juddi.v3.error.UDDIErrorHelper;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
 import org.apache.juddi.query.FetchTModelsQuery;
@@ -68,7 +66,6 @@
 import org.apache.juddi.query.DeletePublisherAssertionByBusinessQuery;
 import org.apache.juddi.query.TModelQuery;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.api.util.InquiryQuery;
 import org.apache.juddi.api.util.PublicationQuery;
 import org.apache.juddi.api.util.QueryStatus;
 import org.apache.juddi.config.AppConfig;
@@ -93,7 +90,7 @@
             serviceCounter = ServiceCounterLifecycleResource.getServiceCounter(this.getClass());
         }
 	
-	public DispositionReport addPublisherAssertions(AddPublisherAssertions body)
+	public void addPublisherAssertions(AddPublisherAssertions body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -168,10 +165,9 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public DispositionReport deleteBinding(DeleteBinding body)
+	public void deleteBinding(DeleteBinding body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -209,10 +205,9 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public DispositionReport deleteBusiness(DeleteBusiness body)
+	public void deleteBusiness(DeleteBusiness body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -244,10 +239,9 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public DispositionReport deletePublisherAssertions(DeletePublisherAssertions body)
+	public void deletePublisherAssertions(DeletePublisherAssertions body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -281,10 +275,9 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public DispositionReport deleteService(DeleteService body)
+	public void deleteService(DeleteService body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -320,11 +313,10 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
 
-	public DispositionReport deleteTModel(DeleteTModel body)
+	public void deleteTModel(DeleteTModel body)
 			throws DispositionReportFaultMessage {
 	        long startTime = System.nanoTime();
 
@@ -358,7 +350,6 @@
 			}
 			em.close();
 		}
-		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
 
"
juddi,9f0cfdb10fcfa296776554d2cf50944ee5c258a4,"JUDDI-498, fixing so it returns an empty response (again, I think something got changed accidentally)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1137035 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-17 21:23:52,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
index f780905..cf2494a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
@@ -33,7 +33,6 @@
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
-import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
@@ -59,34 +58,34 @@
 		super(port);
 	}
 
-	public DispositionReport addPublisherAssertions(AddPublisherAssertions body)
+	public void addPublisherAssertions(AddPublisherAssertions body)
 			throws RemoteException {
-		return publication.addPublisherAssertions(body);
+		publication.addPublisherAssertions(body);
 	}
 
-	public DispositionReport deleteBinding(DeleteBinding body)
+	public void deleteBinding(DeleteBinding body)
 			throws RemoteException {
-		return publication.deleteBinding(body);
+		publication.deleteBinding(body);
 	}
 
-	public DispositionReport deleteBusiness(DeleteBusiness body)
+	public void deleteBusiness(DeleteBusiness body)
 			throws RemoteException {
-		return publication.deleteBusiness(body);
+		publication.deleteBusiness(body);
 	}
 
-	public DispositionReport deletePublisherAssertions(DeletePublisherAssertions body)
+	public void deletePublisherAssertions(DeletePublisherAssertions body)
 			throws RemoteException {
-		return publication.deletePublisherAssertions(body);
+		publication.deletePublisherAssertions(body);
 	}
 
-	public DispositionReport deleteService(DeleteService body)
+	public void deleteService(DeleteService body)
 			throws RemoteException {
-		return publication.deleteService(body);
+		publication.deleteService(body);
 	}
 
-	public DispositionReport deleteTModel(DeleteTModel body)
+	public void deleteTModel(DeleteTModel body)
 			throws RemoteException {
-		return publication.deleteTModel(body);
+		publication.deleteTModel(body);
 	}
 
 	public List<AssertionStatusItem> getAssertionStatusReport(String authInfo,
"
juddi,9f0cfdb10fcfa296776554d2cf50944ee5c258a4,"JUDDI-498, fixing so it returns an empty response (again, I think something got changed accidentally)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1137035 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-17 21:23:52,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
index b85200f..57855fc 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
@@ -40,7 +40,6 @@
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
-import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
@@ -82,9 +81,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""add_publisherAssertions"", action = ""add_publisherAssertions"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport addPublisherAssertions(
+    public void addPublisherAssertions(
         @WebParam(name = ""add_publisherAssertions"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         AddPublisherAssertions body)
         throws DispositionReportFaultMessage, RemoteException
@@ -96,9 +94,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_binding"", action = ""delete_binding"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport deleteBinding(
+    public void deleteBinding(
         @WebParam(name = ""delete_binding"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteBinding body)
         throws DispositionReportFaultMessage, RemoteException
@@ -110,9 +107,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_business"", action = ""delete_business"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport deleteBusiness(
+    public void deleteBusiness(
         @WebParam(name = ""delete_business"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteBusiness body)
         throws DispositionReportFaultMessage, RemoteException
@@ -124,9 +120,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_publisherAssertions"", action = ""delete_publisherAssertions"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport deletePublisherAssertions(
+    public void deletePublisherAssertions(
         @WebParam(name = ""delete_publisherAssertions"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeletePublisherAssertions body)
         throws DispositionReportFaultMessage, RemoteException
@@ -138,9 +133,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_service"", action = ""delete_service"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport deleteService(
+    public void deleteService(
         @WebParam(name = ""delete_service"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteService body)
         throws DispositionReportFaultMessage, RemoteException
@@ -152,9 +146,8 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_tModel"", action = ""delete_tModel"")
-    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public DispositionReport deleteTModel(
+    public void deleteTModel(
         @WebParam(name = ""delete_tModel"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteTModel body)
         throws DispositionReportFaultMessage, RemoteException
"
juddi,26c01e79ad6b51b54afce8a9e366e11f7f9d83b9,"JUDDI-500 applying patch to fix deletion SQL

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1135564 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-14 13:35:52,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/PublisherAssertionQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/PublisherAssertionQuery.java
index cef0fd5..6d15700 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/PublisherAssertionQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/PublisherAssertionQuery.java
@@ -38,7 +38,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""delete "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""delete from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		deleteSQL = sql.toString();
 	}
 	
"
juddi,9e77562bdb1c3467e2183942c6256c72a2925ee8,"JUDDI-492 adding option to run registration asynchronously, and allow to pass in properties

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1134009 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 17:27:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 7006384..5339ec2 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -56,10 +56,18 @@
 	 */
 	public ClientConfig(String configurationFile) throws ConfigurationException 
 	{
-		loadConfiguration(configurationFile);
+		loadConfiguration(configurationFile, null);
 	}
-	protected void loadManager() throws ConfigurationException {
-		uddiNodes = readNodeConfig(config);
+	/**
+	 * Constructor (note Singleton pattern).
+	 * @throws ConfigurationException
+	 */
+	public ClientConfig(String configurationFile, Properties properties) throws ConfigurationException 
+	{
+		loadConfiguration(configurationFile, properties);
+	}
+	protected void loadManager(Properties properties) throws ConfigurationException {
+		uddiNodes = readNodeConfig(config, properties);
 		uddiClerks = readClerkConfig(config, uddiNodes);
 		xServiceBindingRegistrations = readXServiceBindingRegConfig(config,uddiClerks);
 		xBusinessRegistrations = readXBusinessRegConfig(config, uddiClerks);
@@ -70,7 +78,7 @@
 	 * file is updated the file will be reloaded. By default the reloadDelay is
 	 * set to 1 second to prevent excessive date stamp checking.
 	 */
-	private void loadConfiguration(String configurationFile) throws ConfigurationException {
+	private void loadConfiguration(String configurationFile, Properties properties) throws ConfigurationException {
 		//Properties from system properties
 		CompositeConfiguration compositeConfig = new CompositeConfiguration();
 		compositeConfig.addConfiguration(new SystemConfiguration());
@@ -96,7 +104,7 @@
 		compositeConfig.addConfiguration(xmlConfig);
 		//Making the new configuration globally accessible.
 		config = compositeConfig;
-		loadManager();
+		loadManager(properties);
 	}
 
 	private Map<String,UDDIClerk> readClerkConfig(Configuration config, Map<String,UDDINode> uddiNodes) 
@@ -133,7 +141,7 @@
 		return isRegisterOnStartup;
 	}
 
-	private Map<String,UDDINode> readNodeConfig(Configuration config) 
+	private Map<String,UDDINode> readNodeConfig(Configuration config, Properties properties) 
 	throws ConfigurationException {
 		String[] names = config.getStringArray(""manager.nodes.node.name"");
 		Map<String,UDDINode> nodes = new HashMap<String,UDDINode>();
@@ -142,9 +150,9 @@
 			UDDINode uddiNode = new UDDINode();
 			String nodeName = config.getString(""manager.nodes.node("" + i +"").name"");
 			String[] propertyKeys = config.getStringArray(""manager.nodes.node("" + i +"").properties.property[@name]"");
-			Properties properties = null;
+			
 			if (propertyKeys!=null && propertyKeys.length>0) {
-				properties = new Properties();
+				if (properties==null) properties = new Properties();
 				for (int p=0; p<propertyKeys.length; p++) {
 					String name=config.getString(""manager.nodes.node("" + i +"").properties.property("" + p + "")[@name]"");
 					String value=config.getString(""manager.nodes.node("" + i +"").properties.property("" + p + "")[@value]"");
"
juddi,9e77562bdb1c3467e2183942c6256c72a2925ee8,"JUDDI-492 adding option to run registration asynchronously, and allow to pass in properties

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1134009 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 17:27:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index 946a0b8..8ae9de6 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -20,6 +20,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.Properties;
 import java.util.Set;
 
 import org.apache.commons.configuration.ConfigurationException;
@@ -39,10 +40,12 @@
 	private static Log log = LogFactory.getLog(UDDIClerkManager.class);
     private ClientConfig clientConfig = null;
     private String CONFIG_FILE = ""META-INF/uddi.xml"";
+    private Properties properties = null;
 	
     public UDDIClerkManager() throws ConfigurationException {
     	super();
-		clientConfig = new ClientConfig(CONFIG_FILE);
+		clientConfig = new ClientConfig(CONFIG_FILE, properties);
+		
     }
 	/**
 	 * Manages the clerks. Initiates reading the client configuration from the uddi.xml.
@@ -53,6 +56,14 @@
 		clientConfig = new ClientConfig(configurationFile);
 	}
 	/**
+	 * Manages the clerks. Initiates reading the client configuration from the uddi.xml.
+	 * @throws ConfigurationException 
+	 */
+	public UDDIClerkManager(String configurationFile, Properties properties) throws ConfigurationException {
+		super();
+		clientConfig = new ClientConfig(configurationFile, properties);
+	}
+	/**
 	 * Stops the clerks.
 	 * @throws ConfigurationException 
 	 */
"
juddi,9e77562bdb1c3467e2183942c6256c72a2925ee8,"JUDDI-492 adding option to run registration asynchronously, and allow to pass in properties

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1134009 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 17:27:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/AsyncRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/AsyncRegistration.java
index ff88057..5abf840 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/AsyncRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/AsyncRegistration.java
@@ -45,20 +45,23 @@
 	}
 
 	public void run() {
+		
 		try {
-			if (RegistrationType.WSDL.equals(registrationInfo.getRegistrationType())) {
-				WSDL2UDDI wsdl2UDDI = new WSDL2UDDI(clerk, urlLocalizer, properties);
-				BindingTemplate binding = wsdl2UDDI.register(registrationInfo.getServiceQName(), 
-								   registrationInfo.getPortName(),
-								   registrationInfo.getServiceUrl(),
-								   registrationInfo.getWsdlDefinition());
-				ServiceLocator serviceLocator = null;
+			ServiceLocator serviceLocator = null;
+			synchronized (serviceLocators) {
 				if (!serviceLocators.containsKey(clerk.getName())) {
 					serviceLocator = new ServiceLocator(clerk, urlLocalizer, properties);
 					serviceLocators.put(clerk.getName(), serviceLocator);
 				} else {
 					serviceLocator = serviceLocators.get(clerk.getName());
 				}
+			}
+			if (RegistrationType.WSDL.equals(registrationInfo.getRegistrationType())) {
+				WSDL2UDDI wsdl2UDDI = new WSDL2UDDI(clerk, urlLocalizer, properties);
+				BindingTemplate binding = wsdl2UDDI.register(registrationInfo.getServiceQName(), 
+								   registrationInfo.getPortName(),
+								   registrationInfo.getServiceUrl(),
+								   registrationInfo.getWsdlDefinition());
 				serviceLocator.addService(binding.getServiceKey());
 				
 			} else if (RegistrationType.BPEL.equals(registrationInfo.getRegistrationType())) {
@@ -67,13 +70,6 @@
 								   registrationInfo.getPortName(),
 								   registrationInfo.getServiceUrl(),
 								   registrationInfo.getWsdlDefinition());
-				ServiceLocator serviceLocator = null;
-				if (!serviceLocators.containsKey(clerk.getName())) {
-					serviceLocator = new ServiceLocator(clerk, urlLocalizer, properties);
-					serviceLocators.put(clerk.getName(), serviceLocator);
-				} else {
-					serviceLocator = serviceLocators.get(clerk.getName());
-				}
 				serviceLocator.addService(binding.getServiceKey());
 			} else {
 				log.error(""Registration error, due to unsupported registration type of "" + registrationInfo.getRegistrationType());
"
juddi,9e77562bdb1c3467e2183942c6256c72a2925ee8,"JUDDI-492 adding option to run registration asynchronously, and allow to pass in properties

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1134009 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 17:27:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
index 41efb64..53de540 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/UDDIServiceCache.java
@@ -82,13 +82,14 @@
 		String url = urlLocalizer.rewrite(new URL(""http://localhost:8080/subscriptionlistener_"" + clerk.getManagerName()));
 		serviceUrl = new URL(url);
 		
+		bindingKey = Property.getBindingKey(properties, serviceQName, portName, serviceUrl);
+		endpoint = Endpoint.create(new UDDIClientSubscriptionListenerImpl(bindingKey,this));
+		endpoint.publish(serviceUrl.toExternalForm());
+		
 		WSDL2UDDI wsdl2UDDI = new WSDL2UDDI(clerk, urlLocalizer, properties);
 		Definition wsdlDefinition = new ReadWSDL().readWSDL(""uddi_v3_service.wsdl"");
 		bindingKey = wsdl2UDDI.register(serviceQName, portName, serviceUrl, wsdlDefinition).getBindingKey();
 		
-		endpoint = Endpoint.create(new UDDIClientSubscriptionListenerImpl(bindingKey,this));
-		endpoint.publish(serviceUrl.toExternalForm());
-		
 		registerSubscription();
 	}
 	
"
juddi,9e77562bdb1c3467e2183942c6256c72a2925ee8,"JUDDI-492 adding option to run registration asynchronously, and allow to pass in properties

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1134009 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 17:27:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
index 8af65a8..776542d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/mapping/WSDL2UDDI.java
@@ -614,13 +614,13 @@
 		return service;
 	}
 	
-	public BindingTemplate createWSDLBinding(QName serviceName, String portName, URL serviceUrl, Definition wsdlDefinition) {
+	public BindingTemplate createWSDLBinding(QName serviceQName, String portName, URL serviceUrl, Definition wsdlDefinition) {
 			
     	BindingTemplate bindingTemplate = new BindingTemplate();
 		// Set BusinessService Key
-		bindingTemplate.setServiceKey(Property.getServiceKey(properties, serviceName));
+		bindingTemplate.setServiceKey(Property.getServiceKey(properties, serviceQName));
 		// Set Binding Key
-		String bindingKey = Property.getBindingKey(properties, serviceName, portName, serviceUrl);
+		String bindingKey = Property.getBindingKey(properties, serviceQName, portName, serviceUrl);
 		bindingTemplate.setBindingKey(bindingKey);
 		// Set AccessPoint
 		AccessPoint accessPoint = new AccessPoint();
@@ -628,7 +628,7 @@
 		accessPoint.setValue(urlLocalizer.rewrite(serviceUrl));
 		bindingTemplate.setAccessPoint(accessPoint);
 		
-		Service service =  wsdlDefinition.getService(serviceName);
+		Service service =  wsdlDefinition.getService(serviceQName);
 		if (service!=null) {
 			TModelInstanceDetails tModelInstanceDetails = new TModelInstanceDetails();
 			
@@ -680,7 +680,7 @@
 				log.error(""Could not find Port with portName: "" + portName);
 			}
 		} else {
-			log.error(""Could not find Service with serviceName: "" + serviceName.getLocalPart());
+			log.error(""Could not find Service with serviceName: "" + serviceQName.getLocalPart());
 		}
 		
 		return bindingTemplate;
"
juddi,fce5d3efdc25a2138f0582c7fcad06b681e31dab,"JUDDI-494, fixing NPE when running on with JBossWS stack trying to get the DispositionReport when a SOAPFault is thrown.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1133888 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 14:25:51,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 646bed5..215ad50 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -94,7 +94,7 @@
     	} else if (e instanceof SOAPFaultException) {
     		SOAPFaultException soapFault = (SOAPFaultException) e;
     		Detail detail = soapFault.getFault().getDetail();
-    		if (detail.getFirstChild()!=null) {
+    		if (detail != null && detail.getFirstChild()!=null) {
     			try {
     				report =  new DispositionReport(detail.getFirstChild());
     			} catch (JAXBException je) {
"
juddi,c95195caec5d422b09c8387bb4d5d1c48d4368ae,"JUDDI-493 renewing the token when it is set to an empty string

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1133886 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-09 14:23:30,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 8dbfd6a..59aaa5f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -558,13 +558,13 @@
 	
 	private String getAuthToken(String endpointURL) throws TransportException, DispositionReportFaultMessage, RemoteException {
 		//if the token is older then 10 minutes discard it, and create a new one.
-		if (tokenBirthDate !=null && System.currentTimeMillis() > tokenBirthDate.getTime() + 600000 ) {
+		if ((authToken!=null && !"""".equals(authToken)) && (tokenBirthDate !=null && System.currentTimeMillis() > tokenBirthDate.getTime() + 600000 )) {
 			DiscardAuthToken discardAuthToken = new DiscardAuthToken();
 			discardAuthToken.setAuthInfo(authToken);
 			getUDDINode().getTransport().getUDDISecurityService(endpointURL).discardAuthToken(discardAuthToken);
 			authToken=null;
 		}
-		if (authToken==null) {
+		if (authToken==null || """".equals(authToken)) {
 			tokenBirthDate = new Date();
 			GetAuthToken getAuthToken = new GetAuthToken();
 			getAuthToken.setUserID(getPublisher());
"
juddi,cf78ce35693cbbde55b0c3104fb607aefd93931e,"JUDDI-490
Change the property order of InstanceDetails and OverviewDoc.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130894 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-03 03:59:46,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
index 3bbc494..fa76d7a 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
@@ -56,7 +56,7 @@
  */
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = ""instanceDetails"", propOrder = {
-    ""instanceParms"", ""description"", ""overviewDoc""
+    ""description"", ""overviewDoc"", ""instanceParms""
 })
 public class InstanceDetails implements Serializable {
 	@XmlTransient
"
juddi,cf78ce35693cbbde55b0c3104fb607aefd93931e,"JUDDI-490
Change the property order of InstanceDetails and OverviewDoc.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130894 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-03 03:59:46,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/OverviewDoc.java b/uddi-ws/src/main/java/org/uddi/api_v3/OverviewDoc.java
index 7303db9..0c870fb 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/OverviewDoc.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/OverviewDoc.java
@@ -55,7 +55,7 @@
  */
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = ""overviewDoc"", propOrder = {
-    ""overviewURL"", ""description""
+        ""description"", ""overviewURL""
 })
 public class OverviewDoc implements Serializable {
 	@XmlTransient
"
juddi,d4ba1c675e025abaf81f2d75973b2ba1201373ef,"JUDDI-487 fixing the notificationDate (setting it to the endpoint of the interval)

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130609 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-02 15:31:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 51b7e27..c64c735 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -134,8 +134,9 @@
 					try {
 						//build a query with a coverage period from the lastNotified time to 
 						//now (the scheduled Execution time)
+						Date notificationDate = new Date(scheduledExecutionTime());
 						GetSubscriptionResults getSubscriptionResults = 
-							buildGetSubscriptionResults(subscription, new Date(scheduledExecutionTime()));
+							buildGetSubscriptionResults(subscription, notificationDate);
 						if (getSubscriptionResults!=null) {
 							getSubscriptionResults.setSubscriptionKey(subscription.getSubscriptionKey());
 							UddiEntityPublisher publisher = new UddiEntityPublisher();
@@ -143,7 +144,7 @@
 							SubscriptionResultsList resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
 							if (resultListContainsChanges(resultList)) {
 								log.info(""We have a change and need to notify.."");
-								notify(getSubscriptionResults,resultList);
+								notify(getSubscriptionResults,resultList, notificationDate);
 							} else {
 								log.info(""No changes where recorded, no need to notify."");
 							}
@@ -287,7 +288,7 @@
 	 * @throws MalformedURLException 
 	 * @throws DispositionReportFaultMessage 
 	 */
-	protected void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList) 
+	protected void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList, Date notificationDate) 
 	{
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
@@ -295,7 +296,6 @@
 			
 			org.apache.juddi.model.Subscription modelSubscription = 
 				em.find(org.apache.juddi.model.Subscription.class, resultList.getSubscription().getSubscriptionKey());
-			Date notificationDate = new Date();
 			//now log to the db that we are sending the notification.
 			tx.begin();
 			modelSubscription.setLastNotified(notificationDate);
"
juddi,a56dd62389d103c7bf949151943fb0a92cbf22d3,"JUDDI-489, using the jboss.server.temp.dir on jboss 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130586 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-02 14:48:05,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index e4bdb3d..ef2ccfe 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -6,10 +6,18 @@
 import java.io.InputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
+import java.net.URISyntaxException;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
+import javax.xml.transform.Source;
+import javax.xml.transform.stream.StreamSource;
+
+import org.apache.juddi.v3.client.config.Property;
+
 public class UDDIServiceWSDL {
 	
 	/** The WSDLEnpoint Types as defined in the UDDI v3 specification. */
@@ -61,6 +69,17 @@
 		specEndPoints.put(WSDLEndPointType.VALUESETCACHING      , ""http://localhost/uddi/valuesetcaching/"");
 	}
 	
+	public List<Source> getWSDLFilePaths(String destDir) throws IOException {
+		File tmpDir = new File(destDir);
+		if (!tmpDir.exists()) copyImportFiles(destDir);
+		List<Source> metadata = new ArrayList<Source>();
+		for (String importFileName : imports) {
+			File file = new File(destDir + File.separator + importFileName);
+			Source source = new StreamSource(file);
+			metadata.add(source);
+		}
+	    return metadata;
+	}
 	/**
 	 * Returns the path to a temporary uddi_v3_service.wsdl file, where the soap:address location
 	 * of the given endPointType has been updated with the value specified in the soapAddressLocation.
@@ -69,26 +88,30 @@
 	 * @param soapAddressLocation
 	 * @return WSDL File Path
 	 * @throws IOException
+	 * @throws URISyntaxException 
 	 */
-	public URL getWSDLFilePath(WSDLEndPointType endpointType, String soapAddressLocation) throws IOException 
+	public URL getWSDLFilePath(WSDLEndPointType endpointType, String soapAddressLocation) throws IOException
 	{
 		String wsdlString = getServiceWSDLContent();
 	    String specEndPoint = specEndPoints.get(endpointType);
-	    wsdlString = wsdlString.replace(specEndPoint, soapAddressLocation);
-	    String destDir = System.getProperty(""java.io.tmpdir"");
+	    if (soapAddressLocation!=null) {
+	    	wsdlString = wsdlString.replace(specEndPoint, soapAddressLocation);
+	    }
+	    String destDir = Property.getTempDir();
 	    File tmpDir = new File(destDir);
 	    if (!tmpDir.exists()) {
 	    	tmpDir.mkdirs();
 	    }
-	    File tmpWSDLFile = File.createTempFile(""uddi_v3_service"", ""wsdl"", tmpDir);
+	    copyImportFiles(destDir);
+	    
+	    File tmpWSDLFile = File.createTempFile( ""uddi_v3_service.wsdl"", "".wsdl"", tmpDir);
 	    Writer out = new OutputStreamWriter(new FileOutputStream(tmpWSDLFile));
 	    try {
 	      out.write(wsdlString);
 	    } finally {
 	      out.close();
 	    }
-	    copyImportFiles();
-	    URL url = new URL(""file:"" + tmpWSDLFile.getAbsolutePath());
+	    URL url = tmpWSDLFile.toURI().toURL();
 	    return url;
 	}
 	
@@ -104,7 +127,7 @@
 	    return read(serviceWSDLURL);
 	}
 	
-	private void copyImportFiles() throws IOException
+	private void copyImportFiles(String destDir) throws IOException
 	{
 		URL serviceWSDLURL = ClassUtil.getResource(getUddiV3ServiceWSDL(),this.getClass());
 		if (serviceWSDLURL==null) throw new IOException(""Could not locate resource "" + getUddiV3ServiceWSDL());
@@ -113,7 +136,6 @@
     		endIndex = getUddiV3ServiceWSDL().lastIndexOf(File.separator);
     	}
 		String srcDir  = getUddiV3ServiceWSDL().substring(0,endIndex);
-		String destDir = System.getProperty(""java.io.tmpdir"");
 		for (String importFileName : imports) {
 			URL url = ClassUtil.getResource(srcDir + importFileName, this.getClass());
 			String content = read(url);
"
juddi,a56dd62389d103c7bf949151943fb0a92cbf22d3,"JUDDI-489, using the jboss.server.temp.dir on jboss 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130586 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-02 14:48:05,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/Property.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/Property.java
index 0c33dd5..74803cd 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/Property.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/Property.java
@@ -16,6 +16,8 @@
  */
 package org.apache.juddi.v3.client.config;
 
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.Properties;
 
@@ -52,6 +54,14 @@
 	public static final String DEFAULT_BINDING_KEY_FORMAT       = ""uddi:${keyDomain}:binding_${nodeName}_${serviceName}_${portName}_${port}"";
 	public static final String DEFAULT_SERVICE_DESCRIPTION      = ""Default service description when no <wsdl:document> element is defined inside the <wsdl:service> element."";
 	public static final String DEFAULT_BINDING_DESCRIPTION      = ""Default binding description when no <wsdl:document> element is defined inside the <wsdl:binding> element."";
+	
+	public static String getTempDir() {
+		String tmpDir = System.getProperty(""jboss.server.temp.dir"");
+		if (tmpDir == null) {
+			tmpDir = System.getProperty(""java.io.tmpdir"");
+		}
+		return tmpDir;
+	}
 	/**
 	 * Constructs the serviceKey based on the bindingKeyFormat specified in the properties. When no
 	 * businessKeyFormat is specific the default format of uddi:${keyDomain}:${businessName} is used. The businessName
@@ -88,6 +98,19 @@
 		String serviceKey = TokenResolver.replaceTokens(keyFormat, tempProperties).toLowerCase();
 		return serviceKey;
 	}
+	
+	public static String getBindingKey(Properties properties, QName serviceName, String portName, URL bindingUrl) {
+		
+		String bindingKey = null;
+		try {
+			URI bindingURI = bindingUrl.toURI();
+			bindingKey =  getBindingKey(properties, serviceName, portName, bindingURI);
+		} catch (URISyntaxException e) {
+			
+		}
+		return bindingKey;
+		
+	}
 	/**
 	 * Constructs the bindingKey based on the bindingKeyFormat specified in the properties. When no
 	 * bindingKeyFormat is specific the default format of uddi:${keyDomain}:${nodeName}-${serviceName}-{portName} is used.
@@ -97,20 +120,20 @@
 	 * @param portName
 	 * @return the bindingKey
 	 */
-	public static String getBindingKey(Properties properties, QName serviceName, String portName, URL bindingUrl) {
+	public static String getBindingKey(Properties properties, QName serviceName, String portName, URI bindingUrl) {
 		Properties tempProperties = new Properties();
 		tempProperties.putAll(properties);
 		tempProperties.put(""serviceName"", serviceName.getLocalPart());
 		tempProperties.put(""portName"", portName);
 		int port = bindingUrl.getPort();
 		if (port==-1) {
-			if (""http"".equals(bindingUrl.getProtocol())) {
+			if (""http"".equals(bindingUrl.getScheme())) {
 				port = 80;
-			} else if (""https"".equals(bindingUrl.getProtocol())) {
+			} else if (""https"".equals(bindingUrl.getScheme())) {
 				port = 443;
 			}
 		}
-		tempProperties.put(""port"", port);
+		tempProperties.put(""port"", String.valueOf(port));
 		//Constructing the binding Key
 		String keyFormat = properties.getProperty(BINDING_KEY_FORMAT, DEFAULT_BINDING_KEY_FORMAT);
 		String bindingKey = TokenResolver.replaceTokens(keyFormat, tempProperties).toLowerCase();
"
juddi,a00a62b24cbb4360dfa683835abf3f389eb5d3b0,"JUDDI-423 Making sure we only notify once on an asynchronous subscription. Now also supporting endPoint types.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130566 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-02 14:15:58,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 68afcec..51b7e27 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -66,6 +66,7 @@
 	private long acceptableLagTime = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME, 500l); //500 milliseconds
 	private UDDISubscriptionImpl subscriptionImpl = new UDDISubscriptionImpl();
 	private Boolean alwaysNotify = false;
+	private Date desiredDate = null;
 	private int lastUpdateCounter;
 	private UDDIServiceCounter serviceCounter = ServiceCounterLifecycleResource.getServiceCounter(UDDIPublicationImpl.class);
 	private String[] attributes = {
@@ -95,6 +96,12 @@
 	protected boolean registryMayContainUpdates() {
 		boolean isUpdated = false;
 		int updateCounter = 0;
+		//if the desiredDate is set it means that we've declined sending out a notification befor
+		//because the a client did not want a notification yet. However if this desided
+		//notification time has come we should try sending out the notification now.
+		if (desiredDate!=null && new Date().getTime() > desiredDate.getTime()) {
+			return true;
+		}
 		try {
 			for (String attribute : attributes) {
 				String counter = serviceCounter.getAttribute(attribute + "" successful queries"").toString();
@@ -117,6 +124,7 @@
 	{
 		if ((firedOnTime(scheduledExecutionTime()) || alwaysNotify) && registryMayContainUpdates()) {
 			long startTime = System.currentTimeMillis();
+			desiredDate = null;
 			log.info(""Start Notification background task; checking if subscription notifications need to be send out.."");
 			
 			Collection<Subscription> subscriptions = getAllAsyncSubscriptions();
@@ -136,6 +144,8 @@
 							if (resultListContainsChanges(resultList)) {
 								log.info(""We have a change and need to notify.."");
 								notify(getSubscriptionResults,resultList);
+							} else {
+								log.info(""No changes where recorded, no need to notify."");
 							}
 						}
 					} catch (Exception e) {
@@ -152,8 +162,9 @@
             long endTime   = System.currentTimeMillis();
             
             if ((endTime-startTime) > interval) {
-            	log.warn(""Notification background task duration exceeds the JUDDI_NOTIFICATION_INTERVAL of "" + interval);
-            	log.warn(""Notification background task took "" + (endTime - startTime) + "" milliseconds."");
+            	log.debug(""Notification background task duration exceeds the JUDDI_NOTIFICATION_INTERVAL"" +
+            			"" of "" + interval + "". Notification background task took "" 
+            			+ (endTime - startTime) + "" milliseconds."");
             } else {
             	log.debug(""Notification background task took "" + (endTime - startTime) + "" milliseconds."");
             }
@@ -205,6 +216,12 @@
 			period.setEndPoint(DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar));
 			if (log.isDebugEnabled()) log.debug(""Period "" + period.getStartPoint() + "" "" + period.getEndPoint());
 			getSubscriptionResults.setCoveragePeriod(period);
+		} else {
+			log.info(""Client does not yet want a notification. The next desidered notification Date "" + nextDesiredNotificationDate + "". The current interval ["" 
+				+ startPoint + "" , "" + endPoint + ""] therefore skipping this notification cycle."");
+			if (desiredDate==null || nextDesiredNotificationDate.getTime() < desiredDate.getTime()) {
+				desiredDate = nextDesiredNotificationDate;
+			}
 		}
 		return getSubscriptionResults;
 		
@@ -219,6 +236,9 @@
 	     || resultList.getTModelList()    !=null || resultList.getRelatedBusinessesList() !=null) {
 			return true;
 		}
+		//When the response is 'brief', or when there are deleted only keyBags are used.
+		if (resultList.getKeyBag()!=null && resultList.getKeyBag().size() > 0) return true;
+		//there are no changes to what was subscribed to
 		return false;
 	}
 	/**
"
juddi,a00a62b24cbb4360dfa683835abf3f389eb5d3b0,"JUDDI-423 Making sure we only notify once on an asynchronous subscription. Now also supporting endPoint types.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1130566 13f79535-47bb-0310-9956-ffa450edef68
",2011-06-02 14:15:58,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
index 2510069..1a6ba72 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/NotifierFactory.java
@@ -35,11 +35,12 @@
 			}
 		}
 		if (notifierClassName == null) {
-			log.error(""The bindingTemplate "" + bindingTemplate.getEntityKey() + "" does not contain a tModel to define its type of transport."" +
-				"" Therefore no notification can be sent out. The user needs to fix the subscription data."");
-		} else {
-			if (log.isDebugEnabled()) log.debug(""Going find and instantiate notifier class: "" + notifierClassName);
+			log.info(""The bindingTemplate "" + bindingTemplate.getEntityKey() + "" does not contain a tModel to define its type of transport. Defaulting "" 
+				  +	""to http."");
+			notifierClassName = ""org.apache.juddi.subscription.notify.HTTPNotifier"";
 		}
+		if (log.isDebugEnabled()) log.debug(""Going find and instantiate notifier class: "" + notifierClassName);
+		
 		@SuppressWarnings(""unchecked"")
 		Class<Notifier> notifierClass = (Class<Notifier>) ClassUtil.forName(notifierClassName,this.getClass());
 		Notifier notifier = notifierClass.getConstructor(BindingTemplate.class).newInstance(bindingTemplate);
"
juddi,4190b139f4b03f43876d32ac74a37c9aaa987d20,"JUDDI-365 let's not expose APIs that are not implemented

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1127312 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-24 21:49:48,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 40b58e3..bf7dd28 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -36,9 +36,9 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIReplicationPortType;
 
-@WebService(serviceName=""UDDIReplicationService"", 
-			endpointInterface=""org.uddi.v3_service.UDDIReplicationPortType"",
-			targetNamespace = ""urn:uddi-org:v3_service"")
+//@WebService(serviceName=""UDDIReplicationService"", 
+//			endpointInterface=""org.uddi.v3_service.UDDIReplicationPortType"",
+//			targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDIReplicationImpl extends AuthenticatedService implements UDDIReplicationPortType {
         private static Log log = LogFactory.getLog(UDDIReplicationImpl.class);
         private UDDIServiceCounter serviceCounter;
"
juddi,64b001ef89d5020e44e921b555b52de042d3c236,"JUDDI-481, skip reinstalling the root data on 'juddi.seed.always' is true.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1127309 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-24 21:40:38,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 1c803e8..af5e2ec 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -86,9 +86,11 @@
 		try {
 			tx.begin();
 			boolean seedAlways = config.getBoolean(""juddi.seed.always"", false);
-			if (!seedAlways && alreadyInstalled(config))
+			boolean alreadyInstalled = alreadyInstalled(config);
+			if (!seedAlways && alreadyInstalled)
 				new FatalErrorException(new ErrorMessage(""errors.install.AlreadyInstalled""));
 			
+			
 			String rootPublisherStr = config.getString(Property.JUDDI_ROOT_PUBLISHER);
 			String fileRootTModelKeygen = rootPublisherStr + FILE_TMODELKEYGEN;
 			TModel rootTModelKeyGen = (TModel)buildInstallEntity(fileRootTModelKeygen, ""org.uddi.api_v3"", config);
@@ -99,13 +101,16 @@
 			String nodeId = getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition);
 			
 			String fileRootPublisher = rootPublisherStr + FILE_PUBLISHER;
-			log.info(""Loading the root Publisher from file "" + fileRootPublisher);
-			rootPublisher = installPublisher(em, fileRootPublisher, config);
+			if (!alreadyInstalled) {
+				log.info(""Loading the root Publisher from file "" + fileRootPublisher);
 			
-			installRootPublisherKeyGen(em, rootTModelKeyGen, rootPartition, rootPublisher, nodeId);
-
-			rootBusinessEntity.setBusinessKey(nodeId);
-			installBusinessEntity(true, em, rootBusinessEntity, rootPublisher, rootPartition, config);
+				rootPublisher = installPublisher(em, fileRootPublisher, config);
+				installRootPublisherKeyGen(em, rootTModelKeyGen, rootPartition, rootPublisher, nodeId);
+				rootBusinessEntity.setBusinessKey(nodeId);
+				installBusinessEntity(true, em, rootBusinessEntity, rootPublisher, rootPartition, config);
+			} else {
+				log.debug(""juddi.seed.always reapplies all seed files except for the root data."");
+			}
 			
 			List<String> juddiPublishers = getPublishers(config);
 			for (String publisherStr : juddiPublishers) {
"
juddi,fee74ea9f61c684c27ccc3fe22526cd1633e76b3,"JUDDI-423 Making sure we only notify once on an asynchronous subscription. Now also supporting endPoint types.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1127255 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-24 20:12:43,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 83202aa..68afcec 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -121,10 +121,13 @@
 			
 			Collection<Subscription> subscriptions = getAllAsyncSubscriptions();
 			for (Subscription subscription : subscriptions) {
-				//expireCache after subscription.getExpiresAfter().getTime()
+				
 				if (subscription.getExpiresAfter()==null || subscription.getExpiresAfter().getTime() > startTime) {
 					try {
-						GetSubscriptionResults getSubscriptionResults = buildGetSubscriptionResults(subscription, new Date(scheduledExecutionTime()));
+						//build a query with a coverage period from the lastNotified time to 
+						//now (the scheduled Execution time)
+						GetSubscriptionResults getSubscriptionResults = 
+							buildGetSubscriptionResults(subscription, new Date(scheduledExecutionTime()));
 						if (getSubscriptionResults!=null) {
 							getSubscriptionResults.setSubscriptionKey(subscription.getSubscriptionKey());
 							UddiEntityPublisher publisher = new UddiEntityPublisher();
@@ -139,6 +142,11 @@
 						log.error(""Could not obtain subscriptionResult for subscriptionKey "" 
 								+ subscription.getSubscriptionKey() + "". "" + e.getMessage(),e);
 					}	
+				} else {
+					// the subscription expired, we should delete it
+					log.info(""Subcription with key "" + subscription.getSubscriptionKey() 
+							+ "" expired "" + subscription.getExpiresAfter());
+					deleteSubscription(subscription);
 				}
 			}
             long endTime   = System.currentTimeMillis();
@@ -152,7 +160,7 @@
 		} else {
 			log.debug(""Skipping current notification cycle because lagtime is too great."");
 		}
-	}
+ 	}
 	/**
 	 * Checks to see that the event are fired on time. If they are late this may indicate that the server
 	 * is under load. The acceptableLagTime is configurable using the ""juddi.notification.acceptable.lagtime""
@@ -167,7 +175,7 @@
 		if (lagTime <= acceptableLagTime || acceptableLagTime < 0) {
 			return true;
 		} else {
-			log.warn(""NotificationTimer is lagging "" + lagTime + "" milli seconds behind. A lag time ""
+			log.debug(""NotificationTimer is lagging "" + lagTime + "" milli seconds behind. A lag time ""
 					+ ""which exceeds an acceptable lagtime of "" + acceptableLagTime + ""ms indicates ""
 					+ ""that the registry server is under load or was in sleep mode. We are therefore skipping this notification ""
 					+ ""cycle."");
@@ -184,7 +192,9 @@
 		if (startPoint==null) startPoint = subscription.getCreateDate();
 		nextDesiredNotificationDate = new Date(startPoint.getTime());
 		duration.addTo(nextDesiredNotificationDate);
-
+		//nextDesiredNotificationDate = lastTime + the Interval Duration, which should be:
+		//AFTER the lastNotified time and BEFORE the endTime (current time). If it is
+		//after the endTime, then the user does not want a notification yet, so we accumulate.
 		if (subscription.getLastNotified()==null || nextDesiredNotificationDate.after(startPoint) && nextDesiredNotificationDate.before(endPoint)) {
 			getSubscriptionResults = new GetSubscriptionResults();
 			CoveragePeriod period = new CoveragePeriod();
@@ -234,34 +244,39 @@
 	    return subscriptions;
 	}
 	/**
+	 * Deletes the subscription. i.e. when it is expired.
+	 * @param subscription
+	 */
+	protected void deleteSubscription(Subscription subscription) {
+		EntityManager em = PersistenceManager.getEntityManager();
+		EntityTransaction tx = em.getTransaction();
+		try {
+			tx.begin();
+			em.remove(subscription);
+		    tx.commit();
+		} finally {
+			if (tx.isActive()) {
+				tx.rollback();
+			}
+			em.close();
+		}
+	}
+	/**
 	 * Sends out the notifications.
 	 * @param resultList
 	 * @throws MalformedURLException 
 	 * @throws DispositionReportFaultMessage 
 	 */
-	protected synchronized void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList) 
+	protected void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList) 
 	{
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			
-			org.apache.juddi.model.Subscription modelSubscription = em.find(org.apache.juddi.model.Subscription.class, resultList.getSubscription().getSubscriptionKey());
-			//log.debug(""Taking out a write lock on this subscription, and bail if we can't get it since that would mean"" 
-			// + "" another jUDDI instance is in the process of sending out the notification."");
-			//em.lock(modelSubscription, LockModeType.WRITE);
+			org.apache.juddi.model.Subscription modelSubscription = 
+				em.find(org.apache.juddi.model.Subscription.class, resultList.getSubscription().getSubscriptionKey());
 			Date notificationDate = new Date();
-			Date startPoint = resultList.getCoveragePeriod().getStartPoint().toGregorianCalendar().getTime();
-			Date endPoint   = resultList.getCoveragePeriod().getEndPoint().toGregorianCalendar().getTime();
-			
-			
-			if (modelSubscription.getLastNotified()!=null 
-					&& startPoint.before(modelSubscription.getLastNotified()) 
-					&& endPoint.after(modelSubscription.getLastNotified())) {
-				 log.info(""We already send out a notification within this coverage period, no need to send another one."");
-				 return;
-			}
-			
-			//now log to the db that we completed sending the notification.
+			//now log to the db that we are sending the notification.
 			tx.begin();
 			modelSubscription.setLastNotified(notificationDate);
 			em.persist(modelSubscription);
@@ -269,10 +284,10 @@
 			
 			org.apache.juddi.model.BindingTemplate bindingTemplate= em.find(org.apache.juddi.model.BindingTemplate.class, modelSubscription.getBindingKey());
 			NotifySubscriptionListener body = new NotifySubscriptionListener();
-			if (resultList.getServiceList()!=null && resultList.getServiceList().getServiceInfos()!=null &&
-					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0) {
-				resultList.getServiceList().setServiceInfos(null);
-			}
+//			if (resultList.getServiceList()!=null && resultList.getServiceList().getServiceInfos()!=null &&
+//					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0) {
+//				resultList.getServiceList().setServiceInfos(null);
+//			}
 			body.setSubscriptionResultsList(resultList);
 			String authorizedName = modelSubscription.getAuthorizedName();
 			UDDISecurityImpl security = new UDDISecurityImpl();
"
juddi,fee74ea9f61c684c27ccc3fe22526cd1633e76b3,"JUDDI-423 Making sure we only notify once on an asynchronous subscription. Now also supporting endPoint types.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1127255 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-24 20:12:43,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
index e5fedb2..b883676 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/notify/HTTPNotifier.java
@@ -21,7 +21,7 @@
 public class HTTPNotifier implements Notifier {
 	
 	private static String SUBR_V3_NAMESPACE = ""urn:uddi-org:v3_service"";
-	private static String SUBSCRIPTION_LISTENER_SERVICE = ""UDDI_SubscriptionListener_Port"";
+	private static String SUBSCRIPTION_LISTENER_SERVICE = ""UDDISubscriptionListenerImplPort"";
 	
 	Log log = LogFactory.getLog(this.getClass());
 	UDDISubscriptionListenerPortType subscriptionListenerPort = null;
@@ -34,7 +34,7 @@
 					"" should start with 'http' or 'https'"");
 		}
 		if (AccessPointType.WSDL_DEPLOYMENT.toString().equalsIgnoreCase(bindingTemplate.getAccessPointType())) {
-			//WSDL deployment types
+			//WSDL deployment type
 			//TODO, let user override the SUBSCRIPTION_LISTENER_SERVICE setting
 			QName qName = new QName(SUBR_V3_NAMESPACE, SUBSCRIPTION_LISTENER_SERVICE);
 			Service service = Service.create(new URL(bindingTemplate.getAccessPointUrl()), qName);
"
juddi,9840e04e7e1981b9439c66f4c6e9c09c97e3edd6,"JUDDI-485 adding ""www.w3.org/2001/xml.xsd"",
		""www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd"" files

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1127249 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-24 20:08:59,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index c5afb15..e4bdb3d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -44,7 +44,9 @@
 		""uddi_vs_v3_binding.wsdl"",
 		""uddi_vs_v3_portType.wsdl"",
 		""uddi_vscache_v3_binding.wsdl"",
-		""uddi_vscache_v3_portType.wsdl""
+		""uddi_vscache_v3_portType.wsdl"",
+		""www.w3.org/2001/xml.xsd"",
+		""www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd""
 	};
 	
 	static {
@@ -115,7 +117,10 @@
 		for (String importFileName : imports) {
 			URL url = ClassUtil.getResource(srcDir + importFileName, this.getClass());
 			String content = read(url);
+			
 			File importFile = new File(destDir + File.separator + importFileName);
+			if (!importFile.getParentFile().exists()) 
+				importFile.getParentFile().mkdirs();
 		    Writer out = new OutputStreamWriter(new FileOutputStream(importFile));
 		    try {
 		      out.write(content);
"
juddi,f57196b599abd6925e746b919f00e3526754b7d7,"JUDDI-483, Taking out the write lock. it is unlikely we would see multiple notifications being sent out. 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1125382 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-20 13:45:07,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 947ddb4..52fddc7 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -50,7 +50,7 @@
     final static String SAM_BUSINESS_KEY        = ""uddi:www.samco.com:samco"";
     final static String COMBINE_CATBAGS_BIZ_XML = ""uddi_data/joepublisher/combineCatBagsBusinessServices.xml"";
     final static String COMBINE_CATBAGS_BIZ_KEY = ""uddi:uddi.joepublisher.com:business01"";
-    public final static String RIFTSAW_BUSINESS_KEY    = ""uddi:riftsaw.jboss.org:business_redhat-jboss"";
+    public final static String RIFTSAW_BUSINESS_KEY    = ""uddi:riftsaw.jboss.org:redhat-jboss"";
     public final static String RIFTSAW_BUSINESS_XML    = ""uddi_data/bpel/riftsaw/businessEntity.xml"";
 
     
"
juddi,f57196b599abd6925e746b919f00e3526754b7d7,"JUDDI-483, Taking out the write lock. it is unlikely we would see multiple notifications being sent out. 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1125382 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-20 13:45:07,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
index 6e42c1c..172c213 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
@@ -157,7 +157,7 @@
 		}
 		catch(Exception e) {
 			logger.error(e.getMessage(), e);
-			//Assert.fail(""No exception should be thrown."");
+			Assert.fail(""No exception should be thrown."");
 		}
 	}	
 }
\ No newline at end of file
"
juddi,664825f270c6c08eac8f5964a7bd5d9a9418e15d,"JUDDI-483, Taking out the write lock. it is unlikely we would see multiple notifications being sent out.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1125378 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-20 13:33:58,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index ebf9e9a..83202aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -25,7 +25,6 @@
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
-import javax.persistence.LockModeType;
 import javax.persistence.Query;
 import javax.xml.datatype.DatatypeConfigurationException;
 import javax.xml.datatype.DatatypeFactory;
@@ -118,7 +117,7 @@
 	{
 		if ((firedOnTime(scheduledExecutionTime()) || alwaysNotify) && registryMayContainUpdates()) {
 			long startTime = System.currentTimeMillis();
-			log.debug(""Start Notification background task; checking if subscription notifications need to be send out.."");
+			log.info(""Start Notification background task; checking if subscription notifications need to be send out.."");
 			
 			Collection<Subscription> subscriptions = getAllAsyncSubscriptions();
 			for (Subscription subscription : subscriptions) {
@@ -170,7 +169,7 @@
 		} else {
 			log.warn(""NotificationTimer is lagging "" + lagTime + "" milli seconds behind. A lag time ""
 					+ ""which exceeds an acceptable lagtime of "" + acceptableLagTime + ""ms indicates ""
-					+ ""that the registry server is under stress. We are therefore skipping this notification ""
+					+ ""that the registry server is under load or was in sleep mode. We are therefore skipping this notification ""
 					+ ""cycle."");
 			return false;
 		}
@@ -240,24 +239,34 @@
 	 * @throws MalformedURLException 
 	 * @throws DispositionReportFaultMessage 
 	 */
-	protected void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList) 
+	protected synchronized void notify(GetSubscriptionResults getSubscriptionResults, SubscriptionResultsList resultList) 
 	{
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
-			tx.begin();
+			
 			org.apache.juddi.model.Subscription modelSubscription = em.find(org.apache.juddi.model.Subscription.class, resultList.getSubscription().getSubscriptionKey());
-			log.debug(""Taking out a write lock on this subscription, and bail if we can't get it since that would mean"" 
-			 + "" another jUDDI instance is in the process of sending out the notification."");
-			em.lock(modelSubscription, LockModeType.WRITE);
+			//log.debug(""Taking out a write lock on this subscription, and bail if we can't get it since that would mean"" 
+			// + "" another jUDDI instance is in the process of sending out the notification."");
+			//em.lock(modelSubscription, LockModeType.WRITE);
+			Date notificationDate = new Date();
 			Date startPoint = resultList.getCoveragePeriod().getStartPoint().toGregorianCalendar().getTime();
 			Date endPoint   = resultList.getCoveragePeriod().getEndPoint().toGregorianCalendar().getTime();
+			
+			
 			if (modelSubscription.getLastNotified()!=null 
 					&& startPoint.before(modelSubscription.getLastNotified()) 
 					&& endPoint.after(modelSubscription.getLastNotified())) {
 				 log.info(""We already send out a notification within this coverage period, no need to send another one."");
 				 return;
 			}
+			
+			//now log to the db that we completed sending the notification.
+			tx.begin();
+			modelSubscription.setLastNotified(notificationDate);
+			em.persist(modelSubscription);
+			tx.commit();
+			
 			org.apache.juddi.model.BindingTemplate bindingTemplate= em.find(org.apache.juddi.model.BindingTemplate.class, modelSubscription.getBindingKey());
 			NotifySubscriptionListener body = new NotifySubscriptionListener();
 			if (resultList.getServiceList()!=null && resultList.getServiceList().getServiceInfos()!=null &&
@@ -267,13 +276,16 @@
 			body.setSubscriptionResultsList(resultList);
 			String authorizedName = modelSubscription.getAuthorizedName();
 			UDDISecurityImpl security = new UDDISecurityImpl();
-			try {
-				//obtain a token for this publisher
-				org.uddi.api_v3.AuthToken token = security.getAuthToken(authorizedName);
-				body.setAuthInfo(token.getAuthInfo());
-			} catch (DispositionReportFaultMessage e) {
-				body.setAuthInfo(""Failed to generate token, please contact UDDI admin"");
-				log.error(e.getMessage(),e);
+			
+			if (authorizedName != null) { // add a security token if needed
+				try {
+					//obtain a token for this publisher
+					org.uddi.api_v3.AuthToken token = security.getAuthToken(authorizedName);
+					body.setAuthInfo(token.getAuthInfo());
+				} catch (DispositionReportFaultMessage e) {
+					body.setAuthInfo(""Failed to generate token, please contact UDDI admin"");
+					log.error(e.getMessage(),e);
+				}
 			}
 			
 			if (bindingTemplate!=null) {
@@ -295,10 +307,7 @@
 							notifier.notifySubscriptionListener(body);
 							chunkToken=body.getSubscriptionResultsList().getChunkToken();
 						}
-						//now log to the db that we completed sending the notification.
-						Date notificationDate = new Date();
-						modelSubscription.setLastNotified(notificationDate);
-						em.persist(modelSubscription);
+						
 					} catch (Exception e) {
 						log.error(e.getMessage(),e);
 					}
@@ -308,7 +317,7 @@
 			} else {
 				log.error(""There is no valid binding template defined for this subscription: "" + modelSubscription.getBindingKey());
 			}
-			tx.commit();
+			
 		} finally {
 			if (tx.isActive()) {
 				tx.rollback();
"
juddi,664825f270c6c08eac8f5964a7bd5d9a9418e15d,"JUDDI-483, Taking out the write lock. it is unlikely we would see multiple notifications being sent out.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1125378 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-20 13:33:58,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 52fddc7..947ddb4 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -50,7 +50,7 @@
     final static String SAM_BUSINESS_KEY        = ""uddi:www.samco.com:samco"";
     final static String COMBINE_CATBAGS_BIZ_XML = ""uddi_data/joepublisher/combineCatBagsBusinessServices.xml"";
     final static String COMBINE_CATBAGS_BIZ_KEY = ""uddi:uddi.joepublisher.com:business01"";
-    public final static String RIFTSAW_BUSINESS_KEY    = ""uddi:riftsaw.jboss.org:redhat-jboss"";
+    public final static String RIFTSAW_BUSINESS_KEY    = ""uddi:riftsaw.jboss.org:business_redhat-jboss"";
     public final static String RIFTSAW_BUSINESS_XML    = ""uddi_data/bpel/riftsaw/businessEntity.xml"";
 
     
"
juddi,e226c65ec0f1209418978417be0b0553abfcece8,"JUDDI-483, Do a best effort to remove the artifacts but don't fail the test.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1124560 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-19 06:49:19,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
index 172c213..6e42c1c 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
@@ -157,7 +157,7 @@
 		}
 		catch(Exception e) {
 			logger.error(e.getMessage(), e);
-			Assert.fail(""No exception should be thrown."");
+			//Assert.fail(""No exception should be thrown."");
 		}
 	}	
 }
\ No newline at end of file
"
juddi,88c76d879853ac5c32dc6df20b359070afc5f506,"JUDDI-456
Change references to BusinessService/BusinessEntity.id to entityKey.   
openJPA does not do the mapping to UDDIEntity that hibernate does.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1124513 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-19 02:05:09,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
index 29530ba..c26fe55 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCombinedCategoryQuery.java
@@ -163,15 +163,15 @@
                     currentAlias = entityAliasChild2;
                     
                     if (BusinessEntityQuery.ENTITY_NAME.equals(entityName)) {
-                        joinClause = entityAlias + "".id"" + "" = ""
-                        + entityAliasChild + ""."" + entityField + "".id"" + "" and ""
-                        + entityAliasChild + ""."" + entityField + "".id"" + "" = ""
-                        + entityAliasChild2 + "".businessService.businessEntity.id"";
+                        joinClause = entityAlias + "".entityKey"" + "" = ""
+                        + entityAliasChild + ""."" + entityField + "".entityKey"" + "" and ""
+                        + entityAliasChild + ""."" + entityField + "".entityKey"" + "" = ""
+                        + entityAliasChild2 + "".businessService.businessEntity.entityKey"";
                     } else {
-                        joinClause = entityAlias + "".id"" + "" = ""
-                            + entityAliasChild + ""."" + entityField + "".id"" + "" and ""
-                            + entityAliasChild + ""."" + entityField + "".id"" + "" = ""
-                            + entityAliasChild2 + "".bindingTemplate.businessService.id"";
+                        joinClause = entityAlias + "".entityKey"" + "" = ""
+                            + entityAliasChild + ""."" + entityField + "".entityKey"" + "" and ""
+                            + entityAliasChild + ""."" + entityField + "".entityKey"" + "" = ""
+                            + entityAliasChild2 + "".bindingTemplate.businessService.entityKey"";
                     }
 
                     appendConditions(dynamicQry, fq, keyedRefs);
"
juddi,0d9e30a0aeea1d12d254baa85484b48f2249013e,"JUDDI-456
Added query classes for FindServiceByCombinedCategoryQuery and 
FindBusinessByCategoryquery, added tests for both the find_business and the
find_service instance, and added calls to both within InquiryHelper.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1124478 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-19 00:31:17,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 6df3328..039c342 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -35,12 +35,14 @@
 import org.apache.juddi.query.FindBindingByTModelKeyQuery;
 import org.apache.juddi.query.FindBusinessByCategoryGroupQuery;
 import org.apache.juddi.query.FindBusinessByCategoryQuery;
+import org.apache.juddi.query.FindBusinessByCombinedCategoryQuery;
 import org.apache.juddi.query.FindBusinessByDiscoveryURLQuery;
 import org.apache.juddi.query.FindBusinessByIdentifierQuery;
 import org.apache.juddi.query.FindBusinessByNameQuery;
 import org.apache.juddi.query.FindBusinessByTModelKeyQuery;
 import org.apache.juddi.query.FindServiceByCategoryGroupQuery;
 import org.apache.juddi.query.FindServiceByCategoryQuery;
+import org.apache.juddi.query.FindServiceByCombinedCategoryQuery;
 import org.apache.juddi.query.FindServiceByNameQuery;
 import org.apache.juddi.query.FindServiceByTModelKeyQuery;
 import org.apache.juddi.query.FindTModelByCategoryGroupQuery;
@@ -65,7 +67,7 @@
 import org.uddi.api_v3.TModelList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
-/**
+/**Co
  * Used to factor out inquiry functionality as it is used in more than one spot.
  * 
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -190,7 +192,12 @@
 		keysFound = FindBusinessByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), keysFound);
 		keysFound = FindBusinessByIdentifierQuery.select(em, findQualifiers, body.getIdentifierBag(), keysFound);
 		keysFound = FindBusinessByDiscoveryURLQuery.select(em, findQualifiers, body.getDiscoveryURLs(), keysFound);
-		keysFound = FindBusinessByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
+                if (findQualifiers.isCombineCategoryBags()) {
+                    keysFound = FindBusinessByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
+                } else {
+                    keysFound = FindBusinessByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
+                }
+
 		keysFound = FindBusinessByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), keysFound);
 		keysFound = FindBusinessByNameQuery.select(em, findQualifiers, body.getName(), keysFound);
 		
@@ -299,7 +306,11 @@
 		
 		
 		keysFound = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), body.getBusinessKey(), keysFound);
-		keysFound = FindServiceByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
+                if (findQualifiers.isCombineCategoryBags()) {
+		    keysFound = FindServiceByCombinedCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
+		} else {
+			keysFound = FindServiceByCategoryQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
+		}
 		keysFound = FindServiceByCategoryGroupQuery.select(em, findQualifiers, body.getCategoryBag(), body.getBusinessKey(), keysFound);
 		keysFound = FindServiceByNameQuery.select(em, findQualifiers, body.getName(), body.getBusinessKey(), keysFound);
 		
"
juddi,0d9e30a0aeea1d12d254baa85484b48f2249013e,"JUDDI-456
Added query classes for FindServiceByCombinedCategoryQuery and 
FindBusinessByCategoryquery, added tests for both the find_business and the
find_service instance, and added calls to both within InquiryHelper.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1124478 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-19 00:31:17,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index 494cea9..da960b5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -57,13 +57,13 @@
 	private static final String ALIAS_KEYEDREFERENCE = buildAlias(ENTITY_KEYEDREFERENCE);
 	private static final String FIELD_CATEGORYBAG = ""categoryBag"";
 	
-	private String entityName;
-	private String entityAlias;
-	private String keyName;
-	private String entityField;
-	private String entityNameChild;
-	private String entityAliasChild;
-	private String selectSQL;
+	protected String entityName;
+	protected String entityAlias;
+	protected String keyName;
+	protected String entityField;
+	protected String entityNameChild;
+	protected String entityAliasChild;
+	protected String selectSQL;
 
 	public FindEntityByCategoryQuery(String entityName, String entityAlias, String keyName, String entityField, String entityNameChild) {
 		this.entityName = entityName;
"
juddi,8ef346b11b0d27a88010a56771781db4982508ce,"JUDDI-471 adding mapping for the LangCode on TModels

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1101482 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-10 14:40:33,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 4c47672..cad7d57 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -491,6 +491,7 @@
 
 		modelTModel.setEntityKey(apiTModel.getTModelKey());
 		modelTModel.setName(apiTModel.getName().getValue());
+		modelTModel.setLangCode(apiTModel.getName().getLang());
 		modelTModel.setDeleted(apiTModel.isDeleted());
 
 		mapTModelDescriptions(apiTModel.getDescription(), modelTModel.getTmodelDescrs(), modelTModel);
@@ -583,15 +584,10 @@
 			modelSubscription.setBrief(new Boolean(false));
 		}
 			
-		try {
-			String rawFilter = JAXBMarshaller.marshallToString(new ObjectFactory().createSubscriptionFilter(apiSubscription.getSubscriptionFilter()), ""org.uddi.sub_v3"");
-			logger.debug(""marshalled subscription filter:  "" + rawFilter);
-			modelSubscription.setSubscriptionFilter(rawFilter);
-
-		} catch (JAXBException e) {
-			logger.error(""JAXBException while marshalling subscription filter"", e);
-			throw new FatalErrorException(new ErrorMessage(""errors.Unspecified""));
-		}
+		
+		String rawFilter = JAXBMarshaller.marshallToString(new ObjectFactory().createSubscriptionFilter(apiSubscription.getSubscriptionFilter()), ""org.uddi.sub_v3"");
+		logger.debug(""marshalled subscription filter:  "" + rawFilter);
+		modelSubscription.setSubscriptionFilter(rawFilter);
 		
 	}
 	
"
juddi,8ef346b11b0d27a88010a56771781db4982508ce,"JUDDI-471 adding mapping for the LangCode on TModels

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1101482 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-10 14:40:33,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index f5a5783..2d59164 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -549,6 +549,7 @@
 		apiTModel.setTModelKey(modelTModel.getEntityKey());
 		org.uddi.api_v3.Name apiName = new org.uddi.api_v3.Name();
 		apiName.setValue(modelTModel.getName());
+		apiName.setLang(modelTModel.getLangCode());
 		apiTModel.setName(apiName);
 		apiTModel.setDeleted(modelTModel.getDeleted());
 		
"
juddi,6c34420f37e7d2865d0b0c605ab2c0d9a593dc01,"JUDDI-456, adding data used by testing

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1099545 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-04 17:58:52,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index c1f69d5..bd4576e 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -48,6 +48,8 @@
     final static String SAM_BUSINESS_XML        = ""uddi_data/samsyndicator/businessEntity.xml"";
     final static String SAM_BUSINESS_WITHPROJECTION_XML = ""uddi_data/samsyndicator/businessEntity_withProjection.xml"";
     final static String SAM_BUSINESS_KEY        = ""uddi:www.samco.com:samco"";
+    final static String COMBINE_CATBAGS_BIZ_XML = ""uddi_data/joepublisher/combineCatBagsBusinessServices.xml"";
+    final static String COMBINE_CATBAGS_BIZ_KEY = ""uddi:uddi.joepublisher.com:business01"";
     
     private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
@@ -84,6 +86,10 @@
 		saveBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY);
     }
 	
+	public void saveCombineCatBagsPublisherBusiness(String authInfoJoe) {
+		saveBusiness(authInfoJoe, COMBINE_CATBAGS_BIZ_XML, COMBINE_CATBAGS_BIZ_KEY);
+    }
+	
 	public void saveJoePublisherBusiness3(String authInfoJoe) {
 		saveBusiness(authInfoJoe, JOE_BUSINESS3_XML, JOE_BUSINESS3_KEY);
     }
"
juddi,6c34420f37e7d2865d0b0c605ab2c0d9a593dc01,"JUDDI-456, adding data used by testing

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1099545 13f79535-47bb-0310-9956-ffa450edef68
",2011-05-04 17:58:52,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index 01dad67..c5a3300 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -71,6 +71,8 @@
 	final static String FIND_SERVICE_XML              = ""uddi_data/find/findService1.xml"";
 	final static String FIND_BINDING_XML              = ""uddi_data/find/findBinding1.xml"";
 	final static String FIND_TMODEL_XML               = ""uddi_data/find/findTModel1.xml"";
+	final static String COMBINE_CAT_FIND_SERVICES     = ""uddi_data/joepublisher/combineCatBagsFindServices.xml"";
+	   
    
 	private Log logger = LogFactory.getLog(this.getClass());
 	UDDIInquiryPortType inquiry =null;
@@ -268,6 +270,30 @@
 		}
 		return serviceKey;
 	}
+	
+	public String findService_CombinedCatBag() {
+		String serviceKey = null;
+		try {
+			FindService body = (FindService)EntityCreator.buildFromDoc(COMBINE_CAT_FIND_SERVICES, ""org.uddi.api_v3"");
+			ServiceList result = inquiry.findService(body);
+			if (result == null)
+				Assert.fail(""Null result from find service operation"");
+			ServiceInfos sInfos = result.getServiceInfos();
+			if (sInfos == null)
+				Assert.fail(""No result from find service operation"");
+			List<ServiceInfo> siList = sInfos.getServiceInfo();
+			if (siList == null || siList.size() == 0)
+				Assert.fail(""No result from find service operation"");
+			ServiceInfo siOut = siList.get(0);
+			
+			serviceKey = siOut.getServiceKey();
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+		return serviceKey;
+	}
 
 	public void findServiceDetail(String serviceKey) {
 		try {
"
juddi,be3542a0f579451ac9acf7f48fba627de4924492,"JUDDI-469
Change JUDDIRegistry package name.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1089480 13f79535-47bb-0310-9956-ffa450edef68
",2011-04-06 15:05:49,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index 267b69c..889350c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -91,9 +91,9 @@
  	}
 	
 	protected void startEmbeddedServer() throws ConfigurationException {
-		
+
 		try {
-			String embeddedServerClass = getClientConfig().getHomeNode().getProperties().getProperty(""embeddedServer"",""org.apache.juddi.client.JUDDIRegistry"");
+			String embeddedServerClass = getClientConfig().getHomeNode().getProperties().getProperty(""embeddedServer"",""org.apache.juddi.v3.client.embed.JUDDIRegistry"");
 			Class<?> clazz =  ClassUtil.forName(embeddedServerClass, this.getClass());
 			EmbeddedRegistry embeddedRegistry = (EmbeddedRegistry) clazz.newInstance();
 			embeddedRegistry.start();
@@ -105,7 +105,7 @@
 	protected void stopEmbeddedServer() throws ConfigurationException {
 
 		try {
-			String embeddedServerClass = getClientConfig().getHomeNode().getProperties().getProperty(""embeddedServer"",""org.apache.juddi.client.JUDDIRegistry"");
+			String embeddedServerClass = getClientConfig().getHomeNode().getProperties().getProperty(""embeddedServer"",""org.apache.juddi.v3.client.embed.JUDDIRegistry"");
 			Class<?> clazz =  ClassUtil.forName(embeddedServerClass, this.getClass());
 			EmbeddedRegistry embeddedRegistry = (EmbeddedRegistry) clazz.newInstance();
 			embeddedRegistry.stop();
"
juddi,7ae4f694904ebd3558a639139ecdcb6cf5e47eb3,"JUDDI-468
Use the managerName,nodeName constructor for Transport.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1089473 13f79535-47bb-0310-9956-ffa450edef68
",2011-04-06 14:53:25,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index 55ca4e0..827ce78 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -89,7 +89,7 @@
 	    UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
 	    String clazz = manager.getClientConfig().getUDDINode(nodeName).getProxyTransport();
             Class<?> transportClass = ClassUtil.forName(clazz,this.getClass());
-            Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(nodeName);
+            Transport transport = (Transport) transportClass.getConstructor(String.class, String.class).newInstance(managerName, nodeName);
             UDDIInquiryPortType inquiry = transport.getUDDIInquiryService();
 
 	    //new RequestHandler on it's own thread
"
juddi,7ae4f694904ebd3558a639139ecdcb6cf5e47eb3,"JUDDI-468
Use the managerName,nodeName constructor for Transport.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1089473 13f79535-47bb-0310-9956-ffa450edef68
",2011-04-06 14:53:25,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 6c0cf14..63ee8fb 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -88,7 +88,7 @@
 	    UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
 	    String clazz = manager.getClientConfig().getUDDINode(nodeName).getProxyTransport();
             Class<?> transportClass = ClassUtil.forName(clazz, this.getClass());
-            Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(nodeName);
+            Transport transport = (Transport) transportClass.getConstructor(String.class, String.class).newInstance(managerName, nodeName);
             UDDIPublicationPortType publish = transport.getUDDIPublishService();
 
 	    //new RequestHandler on it's own thread
"
juddi,7ae4f694904ebd3558a639139ecdcb6cf5e47eb3,"JUDDI-468
Use the managerName,nodeName constructor for Transport.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1089473 13f79535-47bb-0310-9956-ffa450edef68
",2011-04-06 14:53:25,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
index a3f7c2c..c86c14e 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
@@ -65,7 +65,7 @@
 	    UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
 	    String clazz = manager.getClientConfig().getUDDINode(nodeName).getProxyTransport();
             Class<?> transportClass = ClassUtil.forName(clazz, this.getClass());
-            Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(nodeName);
+            Transport transport = (Transport) transportClass.getConstructor(String.class, String.class).newInstance(managerName, nodeName);
 	    UDDISecurityPortType security = transport.getUDDISecurityService();
 
 	    //new RequestHandler on it's own thread
"
juddi,2aee02e881fb21ea7c885c0bfa807da82b4b5875,"JUDDI-466, the Authenticator should check with the jUDDI database and set the jUDDI Publisher properties like 'isAdmin'

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1086999 13f79535-47bb-0310-9956-ffa450edef68
",2011-03-30 15:58:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
index 72a4062..26de579 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
@@ -21,6 +21,8 @@
 import java.io.InputStream;
 import java.util.Hashtable;
 
+import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBElement;
 import javax.xml.bind.JAXBException;
@@ -32,7 +34,9 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
+import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.error.AuthenticationException;
 import org.apache.juddi.v3.error.ErrorMessage;
@@ -124,7 +128,23 @@
 	}
 	
 	public UddiEntityPublisher identify(String authInfo, String authorizedName) throws AuthenticationException {
-		return new UddiEntityPublisher(authorizedName);
+
+		EntityManager em = PersistenceManager.getEntityManager();
+		EntityTransaction tx = em.getTransaction();
+		try {
+			tx.begin();
+			Publisher publisher = em.find(Publisher.class, authorizedName);
+			if (publisher == null)
+				throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
+			
+			return publisher;
+		} finally {
+			if (tx.isActive()) {
+				tx.rollback();
+			}
+			em.close();
+		}
+		
 	}
 
 }
\ No newline at end of file
"
juddi,59df396963d4af685a6917128d52b48d2cd9490a,"JUDDI-464, stop timer on cancel

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1084216 13f79535-47bb-0310-9956-ffa450edef68
",2011-03-22 15:26:47,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 1791e60..5f71551 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -71,6 +71,12 @@
 		timer = new Timer(true);
 		timer.scheduleAtFixedRate(this, startBuffer, interval);
 	}
+	
+	@Override
+	public boolean cancel() {
+		timer.cancel();
+		return super.cancel();
+	}
 
 	public void run() 
 	{
"
juddi,5c182afd46efd6ad6129a844f4d34d0cbb7ae285,"JUDDI-463, now returning a real java.util.Date object to avoid issues with TimeStamp.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1084214 13f79535-47bb-0310-9956-ffa450edef68
",2011-03-22 15:24:28,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 25d3e5a..6df3328 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -329,7 +329,7 @@
 			currentIndex = subscriptionStartIndex.value;
 
 		int returnedRowCount = 0;
-		logger.info(""Period = "" + modifiedAfter + "" ---- "" + modifiedBefore);
+		if (logger.isDebugEnabled()) logger.debug(""Period = "" + modifiedAfter + "" ---- "" + modifiedBefore);
 		while (currentIndex < queryResults.size()) {
 			Object item = queryResults.get(currentIndex);
 
@@ -337,20 +337,15 @@
 			org.uddi.api_v3.ServiceInfo apiServiceInfo = new org.uddi.api_v3.ServiceInfo();
 			
 			logger.info(modelBusinessService.getEntityKey() + "" is modified "" + modelBusinessService.getModifiedIncludingChildren() + "" "" + modelBusinessService.getModifiedIncludingChildren().getTime() );
-			if (modifiedAfter != null && modifiedAfter.getTime() > (modelBusinessService.getModifiedIncludingChildren().getTime())) {
+			if (modifiedAfter != null && modifiedAfter.after(modelBusinessService.getModifiedIncludingChildren())) {
 				currentIndex++;
-				logger.info(modifiedAfter.getTime() + "" "" + modelBusinessService.getModifiedIncludingChildren().getTime());
-				logger.info(""after"");
 				continue;
 			}
 			
-			if (modifiedBefore != null && modifiedBefore.getTime() < (modelBusinessService.getModifiedIncludingChildren().getTime())) {
+			if (modifiedBefore != null && modifiedBefore.before(modelBusinessService.getModifiedIncludingChildren())) {
 				currentIndex++;
-				logger.info(modifiedBefore.getTime() + "" "" + modelBusinessService.getModifiedIncludingChildren().getTime());
-				logger.info(""before"");
 				continue;
 			}
-			logger.info(""keeping"");
 			MappingModelToApi.mapServiceInfo(modelBusinessService, apiServiceInfo);
 			
 			result.getServiceInfos().getServiceInfo().add(apiServiceInfo);
"
juddi,5c182afd46efd6ad6129a844f4d34d0cbb7ae285,"JUDDI-463, now returning a real java.util.Date object to avoid issues with TimeStamp.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1084214 13f79535-47bb-0310-9956-ffa450edef68
",2011-03-22 15:24:28,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
index 7b90e36..654ebaf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
@@ -53,7 +53,11 @@
 	@Temporal(TemporalType.TIMESTAMP)
 	@Column(name = ""created"", length = 29)
 	public Date getCreated() {
-		return created;
+		if (created!=null) {
+			return new Date(created.getTime());
+		} else {
+			return null;
+		}
 	}
 	public void setCreated(Date created) {
 		this.created = created;
@@ -62,7 +66,11 @@
 	@Temporal(TemporalType.TIMESTAMP)
 	@Column(name = ""modified"", nullable = false, length = 29)
 	public Date getModified() {
-		return this.modified;
+		if (modified!=null) {
+			return new Date(modified.getTime());
+		} else {
+			return null;
+		}
 	}
 	public void setModified(Date modified) {
 		this.modified = modified;
@@ -71,7 +79,11 @@
 	@Temporal(TemporalType.TIMESTAMP)
 	@Column(name = ""modified_including_children"", length = 29)
 	public Date getModifiedIncludingChildren() {
-		return modifiedIncludingChildren;
+		if (modifiedIncludingChildren!=null) {
+			return new Date(modifiedIncludingChildren.getTime());
+		} else {
+			return null;
+		}
 	}
 	public void setModifiedIncludingChildren(Date modifiedIncludingChildren) {
 		this.modifiedIncludingChildren = modifiedIncludingChildren;
"
juddi,3e829b2733b5c4ec0520199ff9ea6dbada46c3ad,"JUDDI-447
Change the GENERAL_KEYWORD_TMODEL key name to match the tmodelKeyName rather than the
tmodel name.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1079971 13f79535-47bb-0310-9956-ffa450edef68
",2011-03-09 20:19:27,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Constants.java b/juddi-core/src/main/java/org/apache/juddi/config/Constants.java
index 5565afe..94cd5e4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Constants.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Constants.java
@@ -24,7 +24,7 @@
  */
 public class Constants {
 	
-	public static final String GENERAL_KEYWORD_TMODEL = ""uddi:uddi-org:general_keywords"";
+	public static final String GENERAL_KEYWORD_TMODEL = ""uddi:uddi.org:categorization:general_keywords"";
 	public static final String NODE_CATEGORY_TMODEL = ""uddi:uddi.org:categorization:nodes"";
 	public static final String NODE_KEYVALUE = ""node"";
 }
"
juddi,ea87f533d1ea058ad113b99e7db633d3320989f4,"JUDDI-452, creating the tmp directory if it does not exist

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1063392 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-25 18:36:22,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index b416fd4..c5afb15 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -76,15 +76,9 @@
 	    String destDir = System.getProperty(""java.io.tmpdir"");
 	    File tmpDir = new File(destDir);
 	    if (!tmpDir.exists()) {
-	    	System.out.println(""tmp dir does not exist:"" + destDir);
 	    	tmpDir.mkdirs();
 	    }
-	    File tmpWSDLFile = new File(destDir + File.separator + ""uddi_v3_service.wsdl"");
-	    
-	    if (tmpWSDLFile.exists()) {
-	    	tmpWSDLFile.delete();
-	    }
-	    tmpWSDLFile.createNewFile();
+	    File tmpWSDLFile = File.createTempFile(""uddi_v3_service"", ""wsdl"", tmpDir);
 	    Writer out = new OutputStreamWriter(new FileOutputStream(tmpWSDLFile));
 	    try {
 	      out.write(wsdlString);
"
juddi,e1ff0683bec3a11b95ef988257466cf98db2412d,"JUDDI-452, fixing the name of the wsdl file

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1063387 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-25 18:17:43,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index 9bd1028..b416fd4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -77,6 +77,7 @@
 	    File tmpDir = new File(destDir);
 	    if (!tmpDir.exists()) {
 	    	System.out.println(""tmp dir does not exist:"" + destDir);
+	    	tmpDir.mkdirs();
 	    }
 	    File tmpWSDLFile = new File(destDir + File.separator + ""uddi_v3_service.wsdl"");
 	    
"
juddi,6e1c483ea085c516c4e62a0914a016ec6b490920,"JUDDI-452, fixing the name of the wsdl file

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1063385 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-25 18:11:46,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index ccb7227..9bd1028 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -74,7 +74,16 @@
 	    String specEndPoint = specEndPoints.get(endpointType);
 	    wsdlString = wsdlString.replace(specEndPoint, soapAddressLocation);
 	    String destDir = System.getProperty(""java.io.tmpdir"");
+	    File tmpDir = new File(destDir);
+	    if (!tmpDir.exists()) {
+	    	System.out.println(""tmp dir does not exist:"" + destDir);
+	    }
 	    File tmpWSDLFile = new File(destDir + File.separator + ""uddi_v3_service.wsdl"");
+	    
+	    if (tmpWSDLFile.exists()) {
+	    	tmpWSDLFile.delete();
+	    }
+	    tmpWSDLFile.createNewFile();
 	    Writer out = new OutputStreamWriter(new FileOutputStream(tmpWSDLFile));
 	    try {
 	      out.write(wsdlString);
"
juddi,8ce7ebbdbb30b12a1493e9fdd0d5aa135b4ea44f,"JUDDI-452, fixing the name of the wsdl file

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1063380 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-25 17:56:57,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index e540467..ccb7227 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -73,7 +73,8 @@
 		String wsdlString = getServiceWSDLContent();
 	    String specEndPoint = specEndPoints.get(endpointType);
 	    wsdlString = wsdlString.replace(specEndPoint, soapAddressLocation);
-	    File tmpWSDLFile = File.createTempFile(""uddi_v3_service"", "".wsdl"");
+	    String destDir = System.getProperty(""java.io.tmpdir"");
+	    File tmpWSDLFile = new File(destDir + File.separator + ""uddi_v3_service.wsdl"");
 	    Writer out = new OutputStreamWriter(new FileOutputStream(tmpWSDLFile));
 	    try {
 	      out.write(wsdlString);
"
juddi,4c977228b4a79bbe4d1521a4c14dc0aad6de80c0,"JUDDI-421: altering a bindingTemplate will now update the modifiedIncludingChildren of the containing businessEntity

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1061984 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-21 19:52:20,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index e20fedf..a408eab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -168,6 +168,8 @@
 				Object obj = em.find(org.apache.juddi.model.BindingTemplate.class, entityKey);
 	
 				((org.apache.juddi.model.BindingTemplate)obj).getBusinessService().setModifiedIncludingChildren(new Date());
+				// JUDDI-421:  now the businessEntity parent will have it's modifiedIncludingChildren set
+				((org.apache.juddi.model.BindingTemplate)obj).getBusinessService().getBusinessEntity().setModifiedIncludingChildren(new Date());
 				
 				em.remove(obj);
 			}
@@ -721,6 +723,11 @@
 			org.apache.juddi.model.BusinessService parent = em.find(org.apache.juddi.model.BusinessService.class, uddiEntity.getBusinessService().getEntityKey());
 			parent.setModifiedIncludingChildren(now);
 			em.persist(parent);
+			
+			// JUDDI-421:  now the businessEntity parent will have it's modifiedIncludingChildren set
+			org.apache.juddi.model.BusinessEntity businessParent = em.find(org.apache.juddi.model.BusinessEntity.class, parent.getBusinessEntity().getEntityKey());
+			businessParent.setModifiedIncludingChildren(now);
+			em.persist(businessParent);
 		}
 
 		String nodeId = """";
"
juddi,37451bb596051e9ba34877b97692a7065e8ce203,"JUDDI-252, fixing coding issue (circular reference) in saveSubscription

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1061966 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-21 18:56:40,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
index 1c0b319..48f98fa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
@@ -64,7 +64,7 @@
 	public void saveSubscription(String authInfo,
 			Holder<List<Subscription>> subscription)
 			throws DispositionReportFaultMessage, RemoteException {
-		this.saveSubscription(authInfo, subscription);
+		this.subscription.saveSubscription(authInfo, subscription);
 		
 	}
 
"
juddi,fb364fda42a2397b433a08d3404d2b20fa17be34,"JUDDI-252, upgrading to use JAXWS-2.0 which is implemented by CXF 2.3.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1061965 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-21 18:47:42,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
index 9bd8f94..784b13f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
@@ -65,9 +65,9 @@
 	private void initContext() throws NamingException, ConfigurationException {
 		Properties env = new Properties();
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
-		String factoryInitial = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_INITIAL);
-		String factoryURLPkgs = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_URL_PKS);
-		String factoryNamingProvider = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_PROVIDER_URL);
+		String factoryInitial = manager.getClientConfig().getHomeNode().getFactoryInitial();
+		String factoryURLPkgs = manager.getClientConfig().getHomeNode().getFactoryURLPkgs();
+		String factoryNamingProvider = manager.getClientConfig().getHomeNode().getFactoryNamingProvider();
         if (factoryInitial!=null && factoryInitial!="""") env.setProperty(Property.UDDI_PROXY_FACTORY_INITIAL, factoryInitial);
         if (factoryURLPkgs!=null && factoryURLPkgs!="""") env.setProperty(Property.UDDI_PROXY_FACTORY_URL_PKS, factoryURLPkgs);
         if (factoryNamingProvider!=null && factoryNamingProvider!="""") env.setProperty(Property.UDDI_PROXY_PROVIDER_URL, factoryNamingProvider);
"
juddi,c5f823f5b8a13d79c4063d01f7fbe2985355263d,"JUDDI-445, fixing issue where the results are non-unique

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1055548 13f79535-47bb-0310-9956-ffa450edef68
",2011-01-05 17:36:25,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index c3ad380..b236da2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -78,7 +78,14 @@
 		
 		
 		Query qry = dynamicQry.buildJPAQuery(em);
-		List<?> result = qry.getResultList();
+		List<Object> result = new ArrayList<Object>();
+		//Filter out non-unique results
+		for (Object object : qry.getResultList()) {
+			if (!result.contains(object)) {
+				result.add(object);
+			}
+		}
+		
 		int resultSize = result.size();
 
 		if (listDesc != null) {
"
juddi,ccb456e891b218d93bb99bb5f18c5cd4f19e8822,"JUDDI-432
If we get no results back, and if the businessKey/serviceKey is not null,
then check to see if the businessKey/serviceKey actually exists.    If it
doesn't, throw an E_InvalidKeyPassed (spelled out in sections 5.1.12.4
and 5.1.9.4).

Changes here were made to FindBinding and FindService.


git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1052016 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-22 18:06:31,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index dc77368..2fcf48f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -1,12 +1,12 @@
 /*
  * Copyright 2001-2008 The Apache Software Foundation.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an ""AS IS"" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -18,20 +18,21 @@
 package org.apache.juddi.api.impl;
 
 import java.util.List;
+
 import javax.jws.WebService;
-import javax.persistence.EntityTransaction;
 import javax.persistence.EntityManager;
+import javax.persistence.EntityTransaction;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.config.Property;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.validation.ValidateInquiry;
-import org.apache.juddi.config.AppConfig;
-import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.config.Property;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessList;
@@ -58,33 +59,46 @@
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
-@WebService(serviceName=""UDDIInquiryService"", 
+@WebService(serviceName=""UDDIInquiryService"",
 			endpointInterface=""org.uddi.v3_service.UDDIInquiryPortType"",
 			targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDIInquiryImpl extends AuthenticatedService implements UDDIInquiryPortType {
 
 	private static Log log = LogFactory.getLog(UDDIInquiryImpl.class);
 
-	public BindingDetail findBinding(FindBinding body)
+	@Override
+    public BindingDetail findBinding(FindBinding body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateFindBinding(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
-			
+
 			List<?> keysFound = InquiryHelper.findBinding(body, findQualifiers, em);
-	
+
+			if (keysFound.size() == 0) {
+			    if (body.getServiceKey() != null) {
+			        // Check that we were passed a valid serviceKey per
+        			// 5.1.12.4 of the UDDI v3 spec
+        			String serviceKey = body.getServiceKey();
+        			org.apache.juddi.model.BusinessService modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
+        	                if (modelBusinessService == null)
+        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
+
+			    }
+			}
 			BindingDetail result = InquiryHelper.getBindingDetailFromKeys(body, findQualifiers, em, keysFound);
 			tx.commit();
+
 			return result;
 		} finally {
 			if (tx.isActive()) {
@@ -94,26 +108,27 @@
 		}
 	}
 
-	public BusinessList findBusiness(FindBusiness body)
+	@Override
+    public BusinessList findBusiness(FindBusiness body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateFindBusiness(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
-	
+
 			List<?> keysFound = InquiryHelper.findBusiness(body, findQualifiers, em);
-	
+
 			BusinessList result = InquiryHelper.getBusinessListFromKeys(body, findQualifiers, em, keysFound);
-			
+
 			tx.commit();
 			return result;
 		} finally {
@@ -124,26 +139,27 @@
 		}
 	}
 
-	public RelatedBusinessesList findRelatedBusinesses(FindRelatedBusinesses body) 
+	@Override
+    public RelatedBusinessesList findRelatedBusinesses(FindRelatedBusinesses body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateFindRelatedBusinesses(body, false);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			// TODO: findQualifiers aren't really used for this call, except maybe for sorting.  Sorting must be done in Java due to the retrieval method used.  Right now
 			// no sorting is performed.
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
-			
+
 			RelatedBusinessesList result = InquiryHelper.getRelatedBusinessesList(body, em);
-			
+
 			tx.commit();
 			return result;
 		} finally {
@@ -154,26 +170,39 @@
 		}
 	}
 
-	public ServiceList findService(FindService body)
+	@Override
+    public ServiceList findService(FindService body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateFindService(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-			
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
-	
+
 			List<?> keysFound = InquiryHelper.findService(body, findQualifiers, em);
-	
+
+		        if (keysFound.size() == 0) {
+		            if (body.getBusinessKey() != null) {
+		                // Check that we were passed a valid serviceKey per
+        	                // 5.1.12.4 of the UDDI v3 spec
+        	                String businessKey = body.getBusinessKey();
+        	                org.apache.juddi.model.BusinessEntity modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
+        	                if (modelBusinessEntity == null) {
+        	                    throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", businessKey));
+        	                }
+		            }
+		        }
+
 			ServiceList result = InquiryHelper.getServiceListFromKeys(body, findQualifiers, em, keysFound);
-			
+
 			tx.commit();
 			return result;
 		} finally {
@@ -184,26 +213,27 @@
 		}
 	}
 
-	public TModelList findTModel(FindTModel body)
+	@Override
+    public TModelList findTModel(FindTModel body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateFindTModel(body, false);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
 			findQualifiers.mapApiFindQualifiers(body.getFindQualifiers());
-	
+
 			List<?> keysFound = InquiryHelper.findTModel(body, findQualifiers, em);
-	
+
 			TModelList result = InquiryHelper.getTModelListFromKeys(body, findQualifiers, em, keysFound);
-			
+
 			tx.commit();
 			return result;
 		} finally {
@@ -214,35 +244,36 @@
 		}
 	}
 
-	public BindingDetail getBindingDetail(GetBindingDetail body)
+	@Override
+    public BindingDetail getBindingDetail(GetBindingDetail body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateGetBindingDetail(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			BindingDetail result = new BindingDetail();
-	
+
 			List<String> bindingKeyList = body.getBindingKey();
 			for (String bindingKey : bindingKeyList) {
-				
+
 				org.apache.juddi.model.BindingTemplate modelBindingTemplate = em.find(org.apache.juddi.model.BindingTemplate.class, bindingKey);
 				if (modelBindingTemplate == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BindingTemplateNotFound"", bindingKey));
-				
+
 				org.uddi.api_v3.BindingTemplate apiBindingTemplate = new org.uddi.api_v3.BindingTemplate();
-				
+
 				MappingModelToApi.mapBindingTemplate(modelBindingTemplate, apiBindingTemplate);
-				
+
 				result.getBindingTemplate().add(apiBindingTemplate);
 			}
-	
+
 			tx.commit();
 			return result;
 		} finally {
@@ -253,35 +284,36 @@
 		}
 	}
 
-	public BusinessDetail getBusinessDetail(GetBusinessDetail body)
+	@Override
+    public BusinessDetail getBusinessDetail(GetBusinessDetail body)
 			throws DispositionReportFaultMessage {
-		
+
 		new ValidateInquiry(null).validateGetBusinessDetail(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			BusinessDetail result = new BusinessDetail();
-			
+
 			List<String> businessKeyList = body.getBusinessKey();
 			for (String businessKey : businessKeyList) {
-				
+
 				org.apache.juddi.model.BusinessEntity modelBusinessEntity = em.find(org.apache.juddi.model.BusinessEntity.class, businessKey);
 				if (modelBusinessEntity == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", businessKey));
-				
+
 				org.uddi.api_v3.BusinessEntity apiBusinessEntity = new org.uddi.api_v3.BusinessEntity();
-				
+
 				MappingModelToApi.mapBusinessEntity(modelBusinessEntity, apiBusinessEntity);
-				
+
 				result.getBusinessEntity().add(apiBusinessEntity);
 			}
-	
+
 			tx.commit();
 			return result;
 		} finally {
@@ -292,7 +324,8 @@
 		}
 	}
 
-	public OperationalInfos getOperationalInfo(GetOperationalInfo body)
+	@Override
+    public OperationalInfos getOperationalInfo(GetOperationalInfo body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateGetOperationalInfo(body);
@@ -301,26 +334,26 @@
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			OperationalInfos result = new OperationalInfos();
-			
+
 			List<String> entityKeyList = body.getEntityKey();
 			for (String entityKey : entityKeyList) {
-				
+
 				org.apache.juddi.model.UddiEntity modelUddiEntity = em.find(org.apache.juddi.model.UddiEntity.class, entityKey);
 				if (modelUddiEntity == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.EntityNotFound"", entityKey));
-				
+
 				org.uddi.api_v3.OperationalInfo apiOperationalInfo = new org.uddi.api_v3.OperationalInfo();
-				
+
 				MappingModelToApi.mapOperationalInfo(modelUddiEntity, apiOperationalInfo);
-				
+
 				result.getOperationalInfo().add(apiOperationalInfo);
 			}
-	
+
 			tx.commit();
 			return result;
 		} finally {
@@ -331,38 +364,39 @@
 		}
 	}
 
-	public ServiceDetail getServiceDetail(GetServiceDetail body)
+	@Override
+    public ServiceDetail getServiceDetail(GetServiceDetail body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateGetServiceDetail(body);
-		
+
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			ServiceDetail result = new ServiceDetail();
-	
+
 			List<String> serviceKeyList = body.getServiceKey();
 			for (String serviceKey : serviceKeyList) {
-				
+
 				org.apache.juddi.model.BusinessService modelBusinessService = em.find(org.apache.juddi.model.BusinessService.class, serviceKey);
 				if (modelBusinessService == null)
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.ServiceNotFound"", serviceKey));
-				
+
 				org.uddi.api_v3.BusinessService apiBusinessService = new org.uddi.api_v3.BusinessService();
-				
+
 				MappingModelToApi.mapBusinessService(modelBusinessService, apiBusinessService);
-				
+
 				result.getBusinessService().add(apiBusinessService);
 			}
-	
+
 			tx.commit();
 			return result;
-			
+
 		} finally {
 			if (tx.isActive()) {
 				tx.rollback();
@@ -371,7 +405,8 @@
 		}
 	}
 
-	public TModelDetail getTModelDetail(GetTModelDetail body)
+	@Override
+    public TModelDetail getTModelDetail(GetTModelDetail body)
 			throws DispositionReportFaultMessage {
 
 		new ValidateInquiry(null).validateGetTModelDetail(body);
@@ -380,28 +415,28 @@
 		EntityTransaction tx = em.getTransaction();
 		try {
 			tx.begin();
-	
+
 			if (isAuthenticated())
 				this.getEntityPublisher(em, body.getAuthInfo());
-			
+
 			TModelDetail result = new TModelDetail();
-			
+
 			List<String> tmodelKeyList = body.getTModelKey();
 			for (String tmodelKey : tmodelKeyList) {
-				
+
 				org.apache.juddi.model.Tmodel modelTModel = em.find(org.apache.juddi.model.Tmodel.class, tmodelKey);
 				if (modelTModel == null) {
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.TModelNotFound"", tmodelKey));
 				}
-				
+
 				org.uddi.api_v3.TModel apiTModel = new org.uddi.api_v3.TModel();
-				
+
 				MappingModelToApi.mapTModel(modelTModel, apiTModel);
-				
+
 				result.getTModel().add(apiTModel);
 			}
-	
-			tx.commit();	
+
+			tx.commit();
 			return result;
 		} finally {
 			if (tx.isActive()) {
"
juddi,d673514d8a06c3fcddd7a6d0fb50dbfa27347fc1,"JUDDI-446. As per 5.1.4 Find Qualifiers: ""Find qualifiers not recognized by a node will return the error E_unsupported. Applying patch by 	Lyudmil Latinov

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1051269 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-20 20:05:37,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java b/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
index b40e0ae..dbc6fb2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
@@ -19,6 +19,10 @@
 
 import java.util.List;
 
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.UnsupportedException;
+import org.uddi.v3_service.DispositionReportFaultMessage;
+
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
@@ -122,7 +126,8 @@
 		
 	}
 
-	public void mapApiFindQualifiers(org.uddi.api_v3.FindQualifiers apiFindQualifiers) {
+	public void mapApiFindQualifiers(org.uddi.api_v3.FindQualifiers apiFindQualifiers) 
+			throws DispositionReportFaultMessage {
 		if (apiFindQualifiers == null)
 			return;
 		
@@ -173,6 +178,8 @@
 					this.setSuppressProjectedServices(true);
 				else if (fq.equalsIgnoreCase(UTS_10) || fq.equalsIgnoreCase(UTS_10_TMODEL))
 					this.setUts10(true);
+				else 
+					throw new UnsupportedException(new ErrorMessage(""errors.Unsupported.findQualifier"", fq));
 			}
 		}
 	}
"
juddi,36071ba392682c24b7ce83f75bdc05d3a367ea7f,"JUDDI-444, also rejecting an empty string

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1051246 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-20 19:18:44,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 357f117..403ee7b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -785,7 +785,7 @@
 		
 		// TODO: validate ""checked"" categories or category groups (see section 5.2.3 of spec)? optional to support
 		
-		if (tModel.getName() == null)
+		if (tModel.getName() == null || tModel.getName().equals(""""))
 			throw new ValueNotAllowedException(new ErrorMessage(""errors.tmodel.NoName""));
 		
 		validateCategoryBag(tModel.getCategoryBag(), config);
"
juddi,e8a572ac41820a4e4df2214101407c46f3d92548,"JUDDI-449 Applying fix suggested for highly concurrent access.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1051240 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-20 18:50:03,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index 6756fe7..cf86034 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -41,10 +41,10 @@
 			log.debug(""Deprecated, please specify a manager name"");
 			return managers.values().iterator().next();
 		} else {
-			log.debug(""Deprecated, please specify a manager name"");
+			log.info(""Deprecated, please specify a manager name"");
 			UDDIClerkManager manager = new UDDIClerkManager(null);
-			manager.start();
 			addClerkManager(manager);
+			manager.start();
 			return manager;
 		}
 	}
"
juddi,887611bc84735fdab945ee5301c01d0bd395051c,"JUDDI-435, removing the TODO and allowing moving of services if both businesses are owned by the same publisher.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1049724 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-15 21:50:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index a8bf78a..357f117 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -522,15 +522,21 @@
 						businessService.setBusinessKey(parentKey);
 					}
 					
-					// If existing service trying to be saved has a different parent key, then we have a problem
-					// TODO: moving services is allowed according to spec?
-					if (!parentKey.equalsIgnoreCase(bs.getBusinessEntity().getEntityKey()))
-						throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.businessservice.ParentMismatch"", parentKey + "", "" + bs.getBusinessEntity().getEntityKey()));
-					
 					// Make sure publisher owns this entity.
 					if (!publisher.isOwner((UddiEntity)obj))
 						throw new UserMismatchException(new ErrorMessage(""errors.usermismatch.InvalidOwner"", entityKey));
 					
+					// If existing service trying to be saved has a different parent key, then we have a problem
+					if (!parentKey.equalsIgnoreCase(bs.getBusinessEntity().getEntityKey())) {
+						// if both businesses are owned by this publisher then we allow it.
+						// we already check the current business is owned, lets see if the old one is too
+						if (!publisher.isOwner(bs.getBusinessEntity())) {
+							throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.businessservice.ParentMismatch"", parentKey + "", "" + bs.getBusinessEntity().getEntityKey()));
+						} else {
+							if (log.isDebugEnabled()) log.debug(""Services moved from business "" + bs.getBusinessEntity() + "" to "" + businessService.getBusinessKey());
+						}
+					}
+					
 				}
 				else {
 					// Inside this block, we have a key proposed by the publisher on a new entity
"
juddi,887611bc84735fdab945ee5301c01d0bd395051c,"JUDDI-435, removing the TODO and allowing moving of services if both businesses are owned by the same publisher.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1049724 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-15 21:50:21,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index faa0b5c..c1f69d5 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -17,6 +17,7 @@
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNotNull;
 
+import java.rmi.RemoteException;
 import java.util.List;
 
 import org.apache.commons.logging.Log;
@@ -39,6 +40,9 @@
 {
 	final static String JOE_BUSINESS_XML        = ""uddi_data/joepublisher/businessEntity.xml"";
     final static String JOE_BUSINESS_KEY        = ""uddi:uddi.joepublisher.com:businessone"";
+    final static String JOE_BUSINESS3_XML       = ""uddi_data/joepublisher/businessEntity3.xml"";
+    final static String JOE_BUSINESS3_KEY       = ""uddi:uddi.joepublisher.com:businessthree.com"";
+    final static String JOE_BUSINESS_MOVE_XML   = ""uddi_data/joepublisher/moveBusinessService1to3.xml"";
     final static String MARY_BUSINESS_XML       = ""uddi_data/marypublisher/businessEntity.xml"";
     final static String MARY_BUSINESS_KEY       = ""uddi:uddi.marypublisher.com:marybusinessone"";
     final static String SAM_BUSINESS_XML        = ""uddi_data/samsyndicator/businessEntity.xml"";
@@ -80,6 +84,14 @@
 		saveBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY);
     }
 	
+	public void saveJoePublisherBusiness3(String authInfoJoe) {
+		saveBusiness(authInfoJoe, JOE_BUSINESS3_XML, JOE_BUSINESS3_KEY);
+    }
+	
+	public void saveJoePublisherBusiness1to3(String authInfoJoe) {
+		saveBusiness(authInfoJoe, JOE_BUSINESS_MOVE_XML, JOE_BUSINESS3_KEY);
+    }
+	
 	public void saveMaryPublisherBusiness(String authInfoMary) {
 		saveBusiness(authInfoMary, MARY_BUSINESS_XML, MARY_BUSINESS_KEY);
     }
@@ -96,6 +108,10 @@
     	deleteBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY);
     }
 	
+	public void deleteJoePublisherBusiness3(String authInfoJoe) {
+    	deleteBusiness(authInfoJoe, JOE_BUSINESS3_XML, JOE_BUSINESS3_KEY);
+    }
+	
 	public void deleteMaryPublisherBusiness(String authInfoMary) {
     	deleteBusiness(authInfoMary, MARY_BUSINESS_XML, MARY_BUSINESS_KEY);
     }
@@ -103,6 +119,14 @@
 	public void deleteJoePublisherBusinesses(String authInfoJoe, int numberOfCopies) {
     	deleteBusinesses(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY, numberOfCopies);
     }
+	
+	public void checkServicesBusinessOne(int expectedNumberOfServices) {
+		checkNumberOfServices(JOE_BUSINESS_KEY,expectedNumberOfServices);
+	}
+	
+	public void checkServicesBusinessThree(int expectedNumberOfServices) {
+		checkNumberOfServices(JOE_BUSINESS3_KEY,expectedNumberOfServices);
+	}
 	 
 	public void saveBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
 		try {			
@@ -123,6 +147,26 @@
 			Assert.fail(""No exception should be thrown"");
 		}
 	}
+	
+	public void checkNumberOfServices(String businessKey, int expectedServices) {
+		
+		try {
+			GetBusinessDetail gb = new GetBusinessDetail();
+			gb.getBusinessKey().add(businessKey);
+			BusinessDetail bd;
+			bd = inquiry.getBusinessDetail(gb);
+			List<BusinessEntity> beOutList = bd.getBusinessEntity();
+			BusinessEntity beOut = beOutList.get(0);
+			if (expectedServices > 0) {
+				assertEquals(expectedServices, beOut.getBusinessServices().getBusinessService().size());
+			} else {
+				Assert.assertNull(beOut.getBusinessServices());
+			}
+		} catch (RemoteException e) {
+			logger.error(e.getMessage(),e);
+			Assert.fail(""No exception should be thrown"");
+		}
+	}
 		
 	public void saveBusiness(String authInfo, String businessXML, String businessKey) {
 		try {
"
juddi,bf060358340b27a5427bedc37d63617dbfd84f85,"JUDDI-438 fixing bug where logically deleted tmodels where returned.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1049147 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 16:29:37,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
index 402757a..fedb5a4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryGroupQuery.java
@@ -21,6 +21,7 @@
 
 import javax.persistence.EntityManager;
 
+import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.api_v3.CategoryBag;
 
@@ -57,6 +58,7 @@
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
-		return findQuery.select(em, fq, categoryBag, keysIn);
+		return findQuery.select(em, fq, categoryBag, keysIn,  new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
+				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
 }
"
juddi,bf060358340b27a5427bedc37d63617dbfd84f85,"JUDDI-438 fixing bug where logically deleted tmodels where returned.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1049147 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 16:29:37,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
index fde806b..0aa92dc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByCategoryQuery.java
@@ -21,6 +21,7 @@
 
 import javax.persistence.EntityManager;
 
+import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.uddi.api_v3.CategoryBag;
 
@@ -51,6 +52,7 @@
 	}
 	
 	public static List<?> select(EntityManager em, FindQualifiers fq, CategoryBag categoryBag, List<?> keysIn) {
-		return findQuery.select(em, fq, categoryBag, keysIn);
+		return findQuery.select(em, fq, categoryBag, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS 
+				+ "".deleted"", Boolean.FALSE, DynamicQuery.PREDICATE_EQUALS));
 	}
 }
"
juddi,bf060358340b27a5427bedc37d63617dbfd84f85,"JUDDI-438 fixing bug where logically deleted tmodels where returned.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1049147 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 16:29:37,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index ec5b897..fcdfabe 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -23,10 +23,12 @@
 import org.apache.juddi.jaxb.EntityCreator;
 import org.junit.Assert;
 import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.FindTModel;
 import org.uddi.api_v3.GetTModelDetail;
 import org.uddi.api_v3.OverviewDoc;
 import org.uddi.api_v3.SaveTModel;
 import org.uddi.api_v3.TModelDetail;
+import org.uddi.api_v3.TModelList;
 import org.uddi.v3_service.UDDIInquiryPortType;
 import org.uddi.v3_service.UDDIPublicationPortType;
 /**
@@ -41,6 +43,8 @@
     final static String MARY_PUBLISHER_TMODEL_KEY     = ""uddi:uddi.marypublisher.com:keygenerator"";
     final static String SAM_SYNDICATOR_TMODEL_XML     = ""uddi_data/samsyndicator/tModelKeyGen.xml"";
     final static String SAM_SYNDICATOR_TMODEL_KEY     = ""uddi:www.samco.com:keygenerator"";
+    final static String FIND_TMODEL_XML               = ""uddi_data/find/findTModel1.xml"";
+    final static String FIND_TMODEL_XML_BY_CAT        = ""uddi_data/find/findTModelByCategoryBag.xml"";
  
     private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
@@ -103,6 +107,55 @@
 		}
 	}
 	
+	public TModelDetail getTModelDetail(String authInfo, String tModelXml, String tModelKey) {
+		try {
+			//Try to get the TModel
+			GetTModelDetail tmodelDetail = new GetTModelDetail();
+			tmodelDetail.setAuthInfo(authInfo);
+			tmodelDetail.getTModelKey().add(tModelKey);
+			
+			return inquiry.getTModelDetail(tmodelDetail);
+			
+		} catch(Exception e) {
+			logger.error(e.getMessage(),e);
+			Assert.fail(""No exception should be thrown"");
+		}
+		Assert.fail(""We should already have returned"");
+		return null;
+	}
+	
+	public TModelList findJoeTModelDetail() {
+		try {
+			
+			FindTModel body = (FindTModel)EntityCreator.buildFromDoc(FIND_TMODEL_XML, ""org.uddi.api_v3"");
+			TModelList result = inquiry.findTModel(body);
+			
+			return result;
+			
+		} catch(Exception e) {
+			logger.error(e.getMessage(),e);
+			Assert.fail(""No exception should be thrown"");
+		}
+		Assert.fail(""We should already have returned"");
+		return null;
+	}
+	
+	public TModelList findJoeTModelDetailByCategoryBag() {
+		try {
+			
+			FindTModel body = (FindTModel)EntityCreator.buildFromDoc(FIND_TMODEL_XML_BY_CAT, ""org.uddi.api_v3"");
+			TModelList result = inquiry.findTModel(body);
+			
+			return result;
+			
+		} catch(Exception e) {
+			logger.error(e.getMessage(),e);
+			Assert.fail(""No exception should be thrown"");
+		}
+		Assert.fail(""We should already have returned"");
+		return null;
+	}
+	
 	public void saveJoePublisherTmodel(String authInfoJoe) {
 		saveTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY);
 	}
@@ -111,6 +164,14 @@
 		deleteTModel(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY);
 	}
 	
+	public TModelDetail getJoePublisherTmodel(String authInfoJoe) {
+		return getTModelDetail(authInfoJoe, JOE_PUBLISHER_TMODEL_XML, JOE_PUBLISHER_TMODEL_KEY);
+	}
+	
+	public TModelList findJoePublisherTmodel(String authInfoJoe) {
+		return findJoeTModelDetail();
+	}
+	
 	public void saveMaryPublisherTmodel(String authInfoMary) {
 		saveTModel(authInfoMary, MARY_PUBLISHER_TMODEL_XML, MARY_PUBLISHER_TMODEL_KEY);
 	}
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index d7a768a..a57fd0e 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -22,6 +22,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.FindResponse;
@@ -29,7 +31,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BusinessInfo;
 import org.uddi.api_v3.BusinessList;
 import org.uddi.api_v3.FindBusiness;
@@ -47,7 +48,7 @@
 public class FindServiceImpl extends RemoteServiceServlet implements FindService {
 
 	private static final long serialVersionUID = 1939609260067702168L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 
 
 	public FindResponse getBusinesses(String nameStr, String[] findQualifyers) 
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index c81d5d2..62bb1ec 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -22,6 +22,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.model.ServiceBinding;
@@ -31,7 +33,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
@@ -53,7 +54,7 @@
 public class InquiryServiceImpl extends RemoteServiceServlet implements InquiryService {
 
 	private static final long serialVersionUID = 8509627428299232161L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	
 	public InquiryServiceImpl() {
 		super();
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
index b292a9f..3ae5660 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
@@ -24,6 +24,8 @@
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.DeletePublisher;
 import org.apache.juddi.api_v3.GetAllPublisherDetail;
 import org.apache.juddi.api_v3.GetPublisherDetail;
@@ -36,7 +38,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
-import org.apache.log4j.Logger;
 
 import com.google.gwt.user.server.rpc.RemoteServiceServlet;
 /**
@@ -47,7 +48,7 @@
 public class JUDDIApiServiceImpl extends RemoteServiceServlet implements JUDDIApiService {
 
 	private static final long serialVersionUID = -4079331701560975888L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	
 	
 	public JUDDIApiServiceImpl() {
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
index 3250b1c..87ba2ee 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
@@ -22,9 +22,10 @@
 import java.net.URL;
 import java.net.URLConnection;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.service.NotifyResponse;
 import org.apache.juddi.portlets.client.service.NotifyService;
-import org.apache.log4j.Logger;
 
 import com.google.gwt.user.server.rpc.RemoteServiceServlet;
 
@@ -36,7 +37,7 @@
 public class NotifyServiceImpl extends RemoteServiceServlet implements NotifyService {
 	
 	private static final long serialVersionUID = 6312615857204115941L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	
 	
 	public NotifyServiceImpl() {
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index 924ed37..e0e97ab 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -22,6 +22,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.PublicationResponse;
@@ -29,7 +31,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BusinessInfo;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.InfoSelection;
@@ -46,7 +47,7 @@
 public class PublicationServiceImpl extends RemoteServiceServlet implements PublicationService {
 
 	private static final long serialVersionUID = 8903795371009202903L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	
 	
 	public PublicationResponse getBusinesses(String authToken, String infoSelection) 
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index 8b7312a..4a71ce4 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -26,6 +26,8 @@
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.portlets.client.service.SecurityResponse;
 import org.apache.juddi.portlets.client.service.SecurityService;
 import org.apache.juddi.v3.client.config.UDDIClerk;
@@ -33,7 +35,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3.client.transport.TransportException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.AuthToken;
 import org.uddi.api_v3.DiscardAuthToken;
 import org.uddi.api_v3.GetAuthToken;
@@ -51,21 +52,21 @@
 		SecurityService {
 
 	private static final long serialVersionUID = -154327520485409858L;
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	
 
 	public SecurityResponse get(String username, String password) {
 		HttpServletRequest request = getThreadLocalRequest();
 		HttpSession session = request.getSession();
 		
-		log.debug(""User "" + username + "" sending token request.."");
+		logger.debug(""User "" + username + "" sending token request.."");
 		SecurityResponse response = new SecurityResponse();
 		String token = (String) session.getAttribute(""AuthToken"");
 		if (username==null) {
 			username = (String) session.getAttribute(""UserName"");
 		}
 		Principal user = request.getUserPrincipal();
-		log.debug(""UserPrincipal "" + user);
+		logger.debug(""UserPrincipal "" + user);
 		if (username==null && user!=null) {
 			username = user.getName();
 			password = """";
@@ -85,12 +86,12 @@
 					
 				    setClerkAuthenticationTokensInSession(username);
 				} catch (Exception e) {
-					log.error(""Could not obtain token. "" + e.getMessage(), e);
+					logger.error(""Could not obtain token. "" + e.getMessage(), e);
 					response.setSuccess(false);
 					response.setMessage(e.getMessage());
 					response.setErrorCode(""101"");
 				} catch (Throwable t) {
-					log.error(""Could not obtain token. "" + t.getMessage(), t);
+					logger.error(""Could not obtain token. "" + t.getMessage(), t);
 					response.setSuccess(false);
 					response.setMessage(t.getMessage());
 					response.setErrorCode(""101"");
@@ -102,12 +103,12 @@
 				response.setSuccess(true);
 				response.setResponse(token);
 			} catch (Exception e) {
-				log.error(""Could not obtain token. "" + e.getMessage(), e);
+				logger.error(""Could not obtain token. "" + e.getMessage(), e);
 				response.setSuccess(false);
 				response.setMessage(e.getMessage());
 				response.setErrorCode(""101"");
 			} catch (Throwable t) {
-				log.error(""Could not obtain token. "" + t.getMessage(), t);
+				logger.error(""Could not obtain token. "" + t.getMessage(), t);
 				response.setSuccess(false);
 				response.setMessage(t.getMessage());
 				response.setErrorCode(""101"");
@@ -127,7 +128,7 @@
 		getAuthToken.setUserID(username);
 		getAuthToken.setCred(password);
 		AuthToken authToken = securityService.getAuthToken(getAuthToken);
-		log.info(""User "" + username + "" obtained token from node="" + WebHelper.getUDDIHomeNode(servletContext).getName());
+		logger.info(""User "" + username + "" obtained token from node="" + WebHelper.getUDDIHomeNode(servletContext).getName());
 		return authToken;
 	}
 	
@@ -148,7 +149,7 @@
 						session.setAttribute(""token-"" + clerk.getName(), clerkToken.getAuthInfo());
 					}
 				} catch (Exception e) {
-					log.warn(""Could not obtain authToken for clerk="" + clerk.getName());
+					logger.warn(""Could not obtain authToken for clerk="" + clerk.getName());
 				} 
 			}
 		}
@@ -164,9 +165,9 @@
 			DiscardAuthToken discardAuthToken = new DiscardAuthToken();
 			discardAuthToken.setAuthInfo(token);
 			securityService.discardAuthToken(discardAuthToken);
-			log.info(""User "" + username + "" invalided token"");
+			logger.info(""User "" + username + "" invalided token"");
 		} catch (Exception e) {
-			log.error(e.getMessage(),e);
+			logger.error(e.getMessage(),e);
 		}
 	}
 }
"
juddi,14fe6a4e410cfaef5c0f71345e4fdf5498fc0efc,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048892 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:30:25,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
index ca7f27c..11b8310 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
@@ -28,6 +28,8 @@
 import javax.xml.datatype.XMLGregorianCalendar;
 import javax.xml.ws.Holder;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api_v3.ClientSubscriptionInfo;
 import org.apache.juddi.api_v3.DeleteClientSubscriptionInfo;
@@ -48,7 +50,6 @@
 import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
-import org.apache.log4j.Logger;
 import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.GetSubscriptionResults;
@@ -66,7 +67,7 @@
 public class SubscriptionServiceImpl extends RemoteServiceServlet implements SubscriptionService {
 
 	private static final long serialVersionUID = 6366224282740095468L;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	private final static String UP = ""Up"";
 
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/annotations/AnnotationProcessor.java b/juddi-client/src/main/java/org/apache/juddi/v3/annotations/AnnotationProcessor.java
index 0f12ac6..95413c7 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/annotations/AnnotationProcessor.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/annotations/AnnotationProcessor.java
@@ -22,10 +22,11 @@
 
 import javax.jws.WebService;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.AccessPointType;
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.config.TokenResolver;
-import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.AccessPoint;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BindingTemplates;
@@ -44,7 +45,7 @@
 	private static final String KEY_VALUE=""keyValue="";
 	private static final String TMODEL_KEY=""tModelKey="";
 	
-	private Logger log = Logger.getLogger(AnnotationProcessor.class);
+	private Log log = LogFactory.getLog(AnnotationProcessor.class);
 	
 	public Collection<BusinessService> readServiceAnnotations(String[] classesWithAnnotations, Properties properties) {
 		Collection<BusinessService> services = new ArrayList<BusinessService>();
@@ -62,7 +63,7 @@
 	public BusinessService readServiceAnnotations(String classWithAnnotations, Properties properties) throws ClassNotFoundException {
 		
 		BusinessService service = new BusinessService();
-		Class<?> clazz = Loader.loadClass(classWithAnnotations);
+		Class<?> clazz = ClassUtil.forName(classWithAnnotations, this.getClass());
 		UDDIService uddiService= (UDDIService) clazz.getAnnotation(UDDIService.class);
 		WebService webServiceAnnotation = (WebService) clazz.getAnnotation(WebService.class);
 		
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/ClassUtil.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/ClassUtil.java
index 71414be..7a169b3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/ClassUtil.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/ClassUtil.java
@@ -16,6 +16,8 @@
  */
 package org.apache.juddi.v3.client;
 
+import java.net.URL;
+
 /**
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
@@ -49,4 +51,22 @@
 	    
 	    return Class.forName(name, true, ClassLoader.getSystemClassLoader()) ;
     }
+	
+	public static URL getResource(String name, Class<?> caller)
+	{
+		ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
+		if (threadClassLoader != null) {
+
+			URL url = threadClassLoader.getResource(name);
+
+			if (url != null)
+				return url;
+
+		}
+
+		ClassLoader callerClassLoader = caller.getClassLoader();
+
+		return callerClassLoader.getResource(name);
+	}
+
 }
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
index 72ed190..47623aa 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIService.java
@@ -25,7 +25,6 @@
 import javax.xml.ws.WebServiceClient;
 import javax.xml.ws.WebServiceFeature;
 
-import org.apache.log4j.helpers.Loader;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
 import org.uddi.v3_service.UDDIInquiryPortType;
 import org.uddi.v3_service.UDDIPublicationPortType;
@@ -51,7 +50,7 @@
     private final static URL UDDISERVICE_WSDL_LOCATION;
    
     static {
-        URL url = Loader.getResource(""uddi_v3_service.wsdl"");
+        URL url = ClassUtil.getResource(""uddi_v3_service.wsdl"",UDDIService.class);
         UDDISERVICE_WSDL_LOCATION = url;
     }
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
index d0ef4b5..e540467 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/UDDIServiceWSDL.java
@@ -10,8 +10,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.log4j.helpers.Loader;
-
 public class UDDIServiceWSDL {
 	
 	/** The WSDLEnpoint Types as defined in the UDDI v3 specification. */
@@ -94,14 +92,14 @@
 	 */
 	protected String getServiceWSDLContent() throws IOException 
 	{
-		URL serviceWSDLURL = Loader.getResource(getUddiV3ServiceWSDL());
+		URL serviceWSDLURL = ClassUtil.getResource(getUddiV3ServiceWSDL(), this.getClass());
 		if (serviceWSDLURL==null) throw new IOException(""Could not locate resource "" + getUddiV3ServiceWSDL());
 	    return read(serviceWSDLURL);
 	}
 	
 	private void copyImportFiles() throws IOException
 	{
-		URL serviceWSDLURL = Loader.getResource(getUddiV3ServiceWSDL());
+		URL serviceWSDLURL = ClassUtil.getResource(getUddiV3ServiceWSDL(),this.getClass());
 		if (serviceWSDLURL==null) throw new IOException(""Could not locate resource "" + getUddiV3ServiceWSDL());
 		int endIndex = 0;
     	if (getUddiV3ServiceWSDL().contains(File.separator)) {
@@ -110,7 +108,7 @@
 		String srcDir  = getUddiV3ServiceWSDL().substring(0,endIndex);
 		String destDir = System.getProperty(""java.io.tmpdir"");
 		for (String importFileName : imports) {
-			URL url = Loader.getResource(srcDir + importFileName);
+			URL url = ClassUtil.getResource(srcDir + importFileName, this.getClass());
 			String content = read(url);
 			File importFile = new File(destDir + File.separator + importFileName);
 		    Writer out = new OutputStreamWriter(new FileOutputStream(importFile));
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
index 6c1d058..35056b9 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
@@ -17,14 +17,14 @@
 package org.apache.juddi.v3.client.config;
 
 import org.apache.commons.configuration.ConfigurationException;
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class BackGroundRegistration implements Runnable {
 
 	private UDDIClerkManager manager = null;
-	private static Logger log = Logger.getLogger(UDDIClerkManager.class);
+	private static Log log = LogFactory.getLog(BackGroundRegistration.class);
 	
-
 	public BackGroundRegistration(UDDIClerkManager manager) {
 		super();
 		this.manager = manager;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 1bdb3be..951dd66 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -28,7 +28,8 @@
 import org.apache.commons.configuration.SystemConfiguration;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * Handles the client configuration of the uddi-client. By default it first
@@ -40,7 +41,7 @@
 {
 	private final static String UDDI_CONFIG_FILENAME_PROPERTY = ""uddi.client.xml"";
 	public final static String DEFAULT_UDDI_CONFIG = ""META-INF/uddi.xml"";
-	private Logger log = Logger.getLogger(ClientConfig.class);
+	private Log log = LogFactory.getLog(ClientConfig.class);
 	private Configuration config = null;;
 	private Map<String,UDDINode> uddiNodes = null;
 	private Map<String,UDDIClerk> uddiClerks = null;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/TokenResolver.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/TokenResolver.java
index 6b1cbd9..6744758 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/TokenResolver.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/TokenResolver.java
@@ -20,11 +20,12 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class TokenResolver {
 	
-	private static Logger log = Logger.getLogger(TokenResolver.class);
+	private static Log log = LogFactory.getLog(TokenResolver.class);
 	
 	public synchronized static String replaceTokens(String string, Properties properties) {
     	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index eca7b91..e988955 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -27,6 +27,8 @@
 import javax.xml.ws.soap.SOAPFaultException;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.api_v3.ClerkDetail;
 import org.apache.juddi.api_v3.Node;
@@ -34,7 +36,6 @@
 import org.apache.juddi.api_v3.SaveClerk;
 import org.apache.juddi.api_v3.SaveNode;
 import org.apache.juddi.v3.client.transport.TransportException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessDetail;
@@ -59,7 +60,7 @@
 public class UDDIClerk implements Serializable {
 
 	private static final long serialVersionUID = -8597375975981358134L;
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	
 	protected String name;
 	protected UDDINode uddiNode;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index d717ccc..6ee157b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -23,15 +23,16 @@
 import java.util.Set;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.annotations.AnnotationProcessor;
 import org.apache.juddi.v3.client.transport.TransportException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessService;
 
 public class UDDIClerkManager {
 	
-	private static Logger log = Logger.getLogger(UDDIClerkManager.class);
+	private static Log log = LogFactory.getLog(UDDIClerkManager.class);
     private ClientConfig clientConfig = null;
     private String CONFIG_FILE = ""META-INF/uddi.xml"";
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index 52ff9b3..a5c9d99 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -19,7 +19,8 @@
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * This servlet is to initialize the UDDIclient on deployment and
@@ -30,7 +31,7 @@
 public class UDDIClerkServlet extends HttpServlet {
 	
 	private static final long serialVersionUID = -91998529871296125L;
-	private Logger logger = Logger.getLogger(UDDIClerkServlet.class);
+	private Log logger = LogFactory.getLog(UDDIClerkServlet.class);
 	private UDDIClerkManager manager = null;
 	
 	/**
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index 9195a8c..6756fe7 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -19,11 +19,12 @@
 import java.util.Map;
 
 import org.apache.commons.configuration.ConfigurationException;
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class UDDIClientContainer {
 
-	private static Logger log = Logger.getLogger(UDDIClientContainer.class);
+	private static Log log = LogFactory.getLog(UDDIClientContainer.class);
 	private static Map<String,UDDIClerkManager> managers = new HashMap<String, UDDIClerkManager>();
 	
 	public static UDDIClerkManager getUDDIClerkManager(String managerName) 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index 110fb1d..490d675 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -20,9 +20,9 @@
 import java.util.Properties;
 
 import org.apache.juddi.api_v3.Node;
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3.client.transport.TransportException;
-import org.apache.log4j.helpers.Loader;
 
 public class UDDINode implements Serializable {
 
@@ -100,7 +100,7 @@
 		if (transport==null) {
 			try {
 				String clazz = getProxyTransport();
-				Class<?> transportClass = Loader.loadClass(clazz);
+				Class<?> transportClass = ClassUtil.forName(clazz,this.getClass());
 				transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(managerName,name);
 			} catch (Exception e) {
 				throw new TransportException(e.getMessage(),e);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 3af1883..2b88326 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -5,13 +5,14 @@
 import javax.servlet.ServletContext;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.Logger;
 
 public class WebHelper {
 	
-	public static Logger logger = Logger.getLogger(WebHelper.class);
+	public static Log logger = LogFactory.getLog(WebHelper.class);
 	public static final String UDDI_CLIENT_MANAGER_NAME  = ""uddi.client.manager.name"";
 	public static final String UDDI_CLIENT_CONFIG_FILE    = ""uddi.client.config.file"";
 	public static final String JUDDI_CLIENT_MANAGER_NAME  = ""juddi.client.manager.name"";
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
index 5864471..3d41538 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
@@ -16,14 +16,15 @@
  */
 package org.apache.juddi.v3.client.config;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
 
 public class XRegistration {
 
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	private UDDIClerk toClerk;
 	private UDDIClerk fromClerk;
 	private String entityKey;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
index 4b28c84..9bd8f94 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
@@ -23,11 +23,12 @@
 import javax.naming.NamingException;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.v3.client.config.Property;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
-import org.apache.log4j.Logger;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
 import org.uddi.v3_service.UDDIInquiryPortType;
 import org.uddi.v3_service.UDDIPublicationPortType;
@@ -39,7 +40,7 @@
 public class RMITransport extends Transport {
 
 	InitialContext context = null;
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	private String nodeName = null;
 	private String managerName = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index 9a8b45b..236b264 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -26,7 +26,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
-import org.apache.log4j.helpers.Loader;
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.transport.Transport;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
@@ -84,7 +84,7 @@
 	public Node inquire(Element uddiReq) throws Exception {
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
 		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
-        Class<?> transportClass = Loader.loadClass(clazz);
+        Class<?> transportClass = ClassUtil.forName(clazz,this.getClass());
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 		UDDIInquiryPortType inquiry = transport.getUDDIInquiryService();
         
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 04ca2b7..49ac2f4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -18,10 +18,10 @@
 
 import java.util.HashMap;
 
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeleteBinding;
 import org.uddi.api_v3.DeleteBusiness;
@@ -84,7 +84,7 @@
 	{
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
 		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
-        Class<?> transportClass = Loader.loadClass(clazz);
+        Class<?> transportClass = ClassUtil.forName(clazz, this.getClass());
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 		UDDIPublicationPortType publish = transport.getUDDIPublishService();
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
index 8d9b9f8..3358568 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
@@ -18,10 +18,10 @@
 
 import java.util.HashMap;
 
+import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.v3_service.UDDISecurityPortType;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -60,7 +60,7 @@
 	{
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
 		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
-        Class<?> transportClass = Loader.loadClass(clazz);
+        Class<?> transportClass = ClassUtil.forName(clazz, this.getClass());
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 	    UDDISecurityPortType security = transport.getUDDISecurityService();
 		
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java b/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
index db0ff4c..82b729b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
+++ b/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
@@ -16,6 +16,8 @@
  */
 package org.apache.juddi;
 
+import java.net.URL;
+
 /**
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
@@ -49,4 +51,21 @@
 	    
 	    return Class.forName(name, true, ClassLoader.getSystemClassLoader()) ;
     }
+	
+	public static URL getResource(String name, Class<?> caller)
+	{
+		ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
+		if (threadClassLoader != null) {
+
+			URL url = threadClassLoader.getResource(name);
+
+			if (url != null)
+				return url;
+
+		}
+
+		ClassLoader callerClassLoader = caller.getClassLoader();
+
+		return callerClassLoader.getResource(name);
+	}
 }
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/Registry.java b/juddi-core/src/main/java/org/apache/juddi/Registry.java
index cea15aa..9ce6efc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/Registry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/Registry.java
@@ -3,16 +3,17 @@
 import javax.naming.NamingException;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.rmi.JNDIRegistration;
 import org.apache.juddi.subscription.SubscriptionNotifier;
-import org.apache.log4j.Logger;
 
 public class Registry {
 	
 	private static Registry registry = null;
-	private static Logger log = Logger.getLogger(Registry.class);
+	private static Log log = LogFactory.getLog(Registry.class);
 	private static SubscriptionNotifier subscriptionNotifier = null;
 	/**
 	 * Singleton.
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index d5f70ef..fb27614 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -30,6 +30,9 @@
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.Marshaller;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.api_v3.ClerkDetail;
 import org.apache.juddi.api_v3.ClientSubscriptionInfoDetail;
@@ -63,8 +66,6 @@
 import org.apache.juddi.validation.ValidateNode;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.validation.ValidatePublisher;
-import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.DeleteTModel;
 import org.uddi.sub_v3.GetSubscriptionResults;
 import org.uddi.sub_v3.SubscriptionResultsList;
@@ -80,7 +81,7 @@
 			targetNamespace = ""urn:juddi-apache-org:v3_service"")
 public class JUDDIApiImpl extends AuthenticatedService implements JUDDIApiPortType {
 
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	
 	/**
 	 * Saves publisher(s) to the persistence layer.  This method is specific to jUDDI.
@@ -546,7 +547,7 @@
 				Clerk fromClerk = clientSubscriptionInfoMap.get(subscriptionKey).getFromClerk();
 				Clerk toClerk = clientSubscriptionInfoMap.get(subscriptionKey).getToClerk();
 				String clazz = fromClerk.getNode().getProxyTransport();
-				Class<?> transportClass = Loader.loadClass(clazz);
+				Class<?> transportClass = ClassUtil.forName(clazz, this.getClass());
 				Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(fromClerk.getNode().getName()); 
 				UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService(fromClerk.getNode().getSubscriptionUrl());
 				SubscriptionResultsList list = subscriptionService.getSubscriptionResults(getSubscriptionResult);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 8c91716..dc77368 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -23,6 +23,8 @@
 import javax.persistence.EntityManager;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
@@ -51,7 +53,6 @@
 import org.uddi.api_v3.TModelList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIInquiryPortType;
-import org.apache.log4j.Logger;
 
 
 /**
@@ -62,7 +63,7 @@
 			targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDIInquiryImpl extends AuthenticatedService implements UDDIInquiryPortType {
 
-	private static Logger log = Logger.getLogger(UDDIInquiryImpl.class);
+	private static Log log = LogFactory.getLog(UDDIInquiryImpl.class);
 
 	public BindingDetail findBinding(FindBinding body)
 			throws DispositionReportFaultMessage {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index a1a4719..5b50c4d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -60,6 +60,8 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISubscriptionPortType;
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
@@ -74,15 +76,13 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.InvalidValueException;
 import org.apache.juddi.validation.ValidateSubscription;
-import org.apache.log4j.Logger;
-
 
 @WebService(serviceName=""UDDISubscriptionService"", 
 			endpointInterface=""org.uddi.v3_service.UDDISubscriptionPortType"",
 			targetNamespace = ""urn:uddi-org:v3_service"")
 public class UDDISubscriptionImpl extends AuthenticatedService implements UDDISubscriptionPortType {
 
-	private static Logger logger = Logger.getLogger(UDDISubscriptionImpl.class);
+	private static Log logger = LogFactory.getLog(UDDISubscriptionImpl.class);
 
 	public static final int DEFAULT_SUBSCRIPTIONEXPIRATION_DAYS = 30;
 	public static final int DEFAULT_CHUNKEXPIRATION_MINUTES = 5;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index 0d3eb36..aed417a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -26,6 +26,8 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.subscription.NotificationList;
@@ -33,7 +35,6 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.validation.ValidateSubscriptionListener;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.Result;
 import org.uddi.subr_v3.NotifySubscriptionListener;
@@ -46,7 +47,7 @@
 public class UDDISubscriptionListenerImpl extends AuthenticatedService implements
 		UDDISubscriptionListenerPortType {
 	
-	private static Logger logger = Logger.getLogger(UDDISubscriptionListenerImpl.class);
+	private static Log logger = LogFactory.getLog(UDDISubscriptionListenerImpl.class);
 		
 	@SuppressWarnings(""unchecked"")
 	public DispositionReport notifySubscriptionListener(
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 84bf8b5..88e3442 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -16,10 +16,11 @@
  */
 package org.apache.juddi.api.impl;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.XRegistration;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessDetail;
@@ -37,7 +38,7 @@
  */
 public class XRegisterHelper {
 
-	private static Logger log = Logger.getLogger(XRegisterHelper.class);
+	private static Log log = LogFactory.getLog(XRegisterHelper.class);
 
 	public static void handle(Clerk fromClerk, Clerk toClerk, SubscriptionResultsList list) {
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 82b903e..86cd1b6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -30,13 +30,14 @@
 import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.commons.configuration.SystemConfiguration;
 import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.Registry;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.FindBusinessByCategoryQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.KeyedReference;
 
@@ -49,7 +50,7 @@
 public class AppConfig 
 {
 	private final static String JUDDI_PROPERTIES = ""juddiv3.properties"";
-	private Logger log = Logger.getLogger(AppConfig.class);
+	private Log log = LogFactory.getLog(AppConfig.class);
 	private Configuration config;
 	private static AppConfig instance=null;
 	
@@ -81,7 +82,7 @@
 		} else {
 			propConfig = new PropertiesConfiguration(JUDDI_PROPERTIES);
 		}
-		URL url = Loader.getResource(JUDDI_PROPERTIES); 
+		URL url = ClassUtil.getResource(JUDDI_PROPERTIES, this.getClass()); 
 		log.info(""Reading from properties file:  "" + url);
 		long refreshDelay = propConfig.getLong(Property.JUDDI_CONFIGURATION_RELOAD_DELAY, 1000l);
 		log.debug(""Setting refreshDelay to "" + refreshDelay);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 1db30fb..1c803e8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -43,6 +43,9 @@
 
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api.impl.UDDIInquiryImpl;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.mapping.MappingApiToModel;
@@ -54,8 +57,6 @@
 import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.validation.ValidateUDDIKey;
-import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.SaveTModel;
 import org.uddi.api_v3.TModel;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -73,7 +74,7 @@
 	public static final String FILE_PERSISTENCE = ""persistence.xml"";
 	public static final String JUDDI_INSTALL_DATA_DIR = ""juddi_install_data/"";
 	public static final String JUDDI_CUSTOM_INSTALL_DATA_DIR = ""juddi_custom_install_data/"";
-	public static Logger log = Logger.getLogger(Install.class);
+	public static Log log = LogFactory.getLog(Install.class);
 
 	protected static void install(Configuration config) throws JAXBException, DispositionReportFaultMessage, IOException, ConfigurationException {
 				
@@ -494,9 +495,9 @@
 	private static List<String> getPublishers(Configuration config) throws ConfigurationException {
 		List<String> publishers = new ArrayList<String>();
 		String basePath = JUDDI_CUSTOM_INSTALL_DATA_DIR;
-		URL url = Loader.getResource(JUDDI_CUSTOM_INSTALL_DATA_DIR);
+		URL url = ClassUtil.getResource(JUDDI_CUSTOM_INSTALL_DATA_DIR, Install.class);
 		if (url==null) {
-			url = Loader.getResource(JUDDI_INSTALL_DATA_DIR);
+			url = ClassUtil.getResource(JUDDI_INSTALL_DATA_DIR, Install.class);
 			basePath = JUDDI_INSTALL_DATA_DIR;
 		}
 		
@@ -567,12 +568,12 @@
 		InputStream resourceStream = null;
 		
 		// First try the custom install directory
-		URL url = Loader.getResource(JUDDI_CUSTOM_INSTALL_DATA_DIR + fileName);
+		URL url = ClassUtil.getResource(JUDDI_CUSTOM_INSTALL_DATA_DIR + fileName, Install.class);
 		if (url != null) resourceStream = url.openStream();
 		
 		// If the custom install directory doesn't exist, then use the standard install directory where the resource is guaranteed to exist.
 		if (resourceStream == null) {
-			url = Loader.getResource(JUDDI_INSTALL_DATA_DIR + fileName);
+			url = ClassUtil.getResource(JUDDI_INSTALL_DATA_DIR + fileName, Install.class);
 			if (url != null) { 
 				resourceStream = url.openStream();
 			}
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/PersistenceManager.java b/juddi-core/src/main/java/org/apache/juddi/config/PersistenceManager.java
index 49897a7..021c8df 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/PersistenceManager.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/PersistenceManager.java
@@ -22,10 +22,11 @@
 import javax.persistence.EntityManager;
 
 import org.apache.commons.configuration.ConfigurationException;
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class PersistenceManager {
-	private static Logger log = Logger.getLogger(PersistenceManager.class);
+	private static Log log = LogFactory.getLog(PersistenceManager.class);
 	
 	public static final String PERSISTENCE_UNIT_NAME = ""juddiDatabase"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/PublisherFileFilter.java b/juddi-core/src/main/java/org/apache/juddi/config/PublisherFileFilter.java
index 2be7557..eff120d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/PublisherFileFilter.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/PublisherFileFilter.java
@@ -3,7 +3,9 @@
 import java.io.File;
 import java.io.FileFilter;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 /**
  * From the 
  * 
@@ -12,7 +14,7 @@
  */
 public class PublisherFileFilter implements FileFilter {
 
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	
 	public boolean accept(File file) {
 		log.debug(""file="" + file);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/cryptor/CryptorFactory.java b/juddi-core/src/main/java/org/apache/juddi/cryptor/CryptorFactory.java
index 81b230c..fc035a2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/cryptor/CryptorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/cryptor/CryptorFactory.java
@@ -18,9 +18,11 @@
 package org.apache.juddi.cryptor;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
-import org.apache.log4j.Logger;
 
 /**
  * Used to create the org.apache.juddi.cryptor.Cryptor implementation
@@ -32,9 +34,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public abstract class CryptorFactory {
-	private static Logger log = Logger.getLogger(CryptorFactory.class);
-
-	
+	private static Log log = LogFactory.getLog(CryptorFactory.class);
 
 	// the shared Cryptor instance
 	private static Cryptor cryptor = null;
@@ -75,7 +75,7 @@
 		Class<?> cryptorClass = null;
 		try {
 			// Use Loader to locate & load the Cryptor implementation
-			cryptorClass = org.apache.log4j.helpers.Loader.loadClass(className);
+			cryptorClass = ClassUtil.forName(className, CryptorFactory.class);
 		}
 		catch(ClassNotFoundException e) {
 			log.error(""The specified Cryptor class '"" + className + ""' was not found in classpath."");
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
index e3077a3..985fa36 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
@@ -18,9 +18,11 @@
 package org.apache.juddi.keygen;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
-import org.apache.log4j.Logger;
 
 /**
  * Used to create the org.apache.juddi.keygen.KeyGenerator implementation
@@ -31,7 +33,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public abstract class KeyGeneratorFactory {
-	private static Logger log = Logger.getLogger(KeyGeneratorFactory.class);
+	private static Log log = LogFactory.getLog(KeyGeneratorFactory.class);
 
 	// Key Generator default implementation
 	private static final String DEFAULT_IMPL = ""org.apache.juddi.keygen.DefaultKeyGenerator"";
@@ -75,7 +77,7 @@
 		Class<?> keygenClass = null;
 		try {
 			// Use Loader to locate & load the Key Generator implementation
-			keygenClass = org.apache.log4j.helpers.Loader.loadClass(className);
+			keygenClass = ClassUtil.forName(className,KeyGeneratorFactory.class);
 			// try to instantiate the Key Generator implementation
 			keyGenerator = (KeyGenerator)keygenClass.newInstance();
 		} catch(ClassNotFoundException cnfe) {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 77adf45..4c47672 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -23,10 +23,11 @@
 
 import javax.xml.bind.JAXBException;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.Description;
 import org.uddi.sub_v3.ObjectFactory;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -38,7 +39,7 @@
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
 public class MappingApiToModel {
-	private static Logger logger = Logger.getLogger(MappingApiToModel.class);
+	private static Log logger = LogFactory.getLog(MappingApiToModel.class);
 
 	
 	public static void mapPublisher(org.apache.juddi.api_v3.Publisher apiPublisher, 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 20973fe..f5a5783 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -24,6 +24,8 @@
 import javax.xml.bind.JAXBException;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.jaxb.JAXBMarshaller;
@@ -32,7 +34,6 @@
 import org.apache.juddi.subscription.TypeConvertor;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.CompletionStatus;
 import org.uddi.api_v3.OperationalInfo;
 import org.uddi.sub_v3.SubscriptionFilter;
@@ -43,7 +44,7 @@
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  */
 public class MappingModelToApi {
-	private static Logger logger = Logger.getLogger(MappingModelToApi.class);
+	private static Log logger = LogFactory.getLog(MappingModelToApi.class);
 
 	
 	public static void mapPublisher(org.apache.juddi.model.Publisher modelPublisher, 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/DeletePublisherAssertionByBusinessQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/DeletePublisherAssertionByBusinessQuery.java
index 8178ee0..6252dcb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/DeletePublisherAssertionByBusinessQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/DeletePublisherAssertionByBusinessQuery.java
@@ -21,8 +21,9 @@
 import javax.persistence.EntityManager;
 import javax.persistence.Query;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
-import org.apache.log4j.Logger;
 
 /**
  * 
@@ -32,7 +33,7 @@
  */
 public class DeletePublisherAssertionByBusinessQuery extends PublisherAssertionQuery {
 
-	private static Logger log = Logger.getLogger(DeletePublisherAssertionByBusinessQuery.class);
+	private static Log log = LogFactory.getLog(DeletePublisherAssertionByBusinessQuery.class);
 
 	public static int delete(EntityManager em, List<?> businessKeys) {
 		if ((businessKeys == null) || (businessKeys.size() == 0))
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 199ce02..c3ad380 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -24,17 +24,18 @@
 import javax.persistence.Query;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.uddi.api_v3.ListDescription;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.query.util.DynamicQuery;
-import org.apache.log4j.Logger;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public abstract class EntityQuery {
-	private static Logger log = Logger.getLogger(EntityQuery.class);
+	private static Log log = LogFactory.getLog(EntityQuery.class);
 
 	public static final String KEY_NAME = ""entityKey"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
index b77071a..5d0a973 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
@@ -21,9 +21,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.api_v3.ListDescription;
 
@@ -40,7 +41,7 @@
  */
 public class FetchBindingTemplatesQuery extends BindingTemplateQuery {
 
-	private static Logger log = Logger.getLogger(FetchBindingTemplatesQuery.class);
+	private static Log log = LogFactory.getLog(FetchBindingTemplatesQuery.class);
 
 	protected static String selectSQL;
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
index ece5aa4..0e12eb9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
@@ -21,9 +21,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.api_v3.ListDescription;
 
@@ -40,7 +41,7 @@
  */
 public class FetchBusinessEntitiesQuery extends BusinessEntityQuery {
 
-	private static Logger log = Logger.getLogger(FetchBusinessEntitiesQuery.class);
+	private static Log log = LogFactory.getLog(FetchBusinessEntitiesQuery.class);
 
 	protected static String selectSQL;
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
index eeb9bba..25501be 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
@@ -21,9 +21,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.api_v3.ListDescription;
 
@@ -40,7 +41,7 @@
  */
 public class FetchBusinessServicesQuery extends BusinessServiceQuery {
 
-	private static Logger log = Logger.getLogger(FetchBusinessServicesQuery.class);
+	private static Log log = LogFactory.getLog(FetchBusinessServicesQuery.class);
 
 	protected static String selectSQL;
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
index 6cb61ce..e660ac5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
@@ -21,9 +21,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.api_v3.ListDescription;
 
@@ -40,7 +41,7 @@
  */
 public class FetchTModelsQuery extends TModelQuery {
 
-	private static Logger log = Logger.getLogger(FetchTModelsQuery.class);
+	private static Log log = LogFactory.getLog(FetchTModelsQuery.class);
 
 	protected static String selectSQL;
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
index 4cf7429..106d3e3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBindingByTModelKeyQuery.java
@@ -20,9 +20,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.TModelBag;
 
 /**
@@ -49,7 +50,7 @@
 public class FindBindingByTModelKeyQuery extends BindingTemplateQuery {
 	
 	@SuppressWarnings(""unused"")
-	private static Logger log = Logger.getLogger(FindBindingByTModelKeyQuery.class);
+	private static Log log = LogFactory.getLog(FindBindingByTModelKeyQuery.class);
 
 	public static final String ENTITY_NAME_CHILD = ""TmodelInstanceInfo"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
index bca39f8..9349842 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByDiscoveryURLQuery.java
@@ -20,9 +20,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.DiscoveryURLs;
 import org.uddi.api_v3.DiscoveryURL;
 
@@ -43,7 +44,7 @@
 public class FindBusinessByDiscoveryURLQuery extends BusinessEntityQuery {
 
 	@SuppressWarnings(""unused"")
-	private static Logger log = Logger.getLogger(FindBusinessByDiscoveryURLQuery.class);
+	private static Log log = LogFactory.getLog(FindBusinessByDiscoveryURLQuery.class);
 
 	private static final String ENTITY_NAME_CHILD = ""DiscoveryUrl"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
index 1902933..f877a9a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindBusinessByTModelKeyQuery.java
@@ -20,9 +20,10 @@
 import java.util.List;
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.TModelBag;
 
 /**
@@ -49,7 +50,7 @@
 public class FindBusinessByTModelKeyQuery extends BusinessEntityQuery {
 	
 	@SuppressWarnings(""unused"")
-	private static Logger log = Logger.getLogger(FindBusinessByTModelKeyQuery.class);
+	private static Log log = LogFactory.getLog(FindBusinessByTModelKeyQuery.class);
 
 	public static final String ENTITY_NAME_CHILD = ""TmodelInstanceInfo"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index 9368f50..26e0445 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -18,18 +18,19 @@
 package org.apache.juddi.query;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Collections;
 import java.util.Set;
 
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.query.util.KeyedRefGroupTModelComparator;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.KeyedReferenceGroup;
@@ -53,7 +54,7 @@
 public class FindEntityByCategoryGroupQuery extends EntityQuery {
 	
 	@SuppressWarnings(""unused"")
-	private Logger log = Logger.getLogger(FindEntityByCategoryGroupQuery.class);
+	private static Log log = LogFactory.getLog(FindEntityByCategoryGroupQuery.class);
 
 	private static final String ENTITY_KEYEDREFERENCEGROUP = ""KeyedReferenceGroup"";
 	private static final String ALIAS_KEYEDREFERENCEGROUP = ""krg"";
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index d58e8a8..494cea9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -18,15 +18,17 @@
 package org.apache.juddi.query;
 
 import java.util.ArrayList;
-import java.util.List;
 import java.util.Collections;
+import java.util.List;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.query.util.KeyedRefTModelComparator;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.CategoryBag;
 import org.uddi.api_v3.KeyedReference;
 
@@ -49,7 +51,7 @@
 public class FindEntityByCategoryQuery extends EntityQuery {
 	
 	@SuppressWarnings(""unused"")
-	private Logger log = Logger.getLogger(FindEntityByCategoryQuery.class);
+	private static Log log = LogFactory.getLog(FindEntityByCategoryQuery.class);
 
 	private static final String ENTITY_KEYEDREFERENCE = ""KeyedReference"";
 	private static final String ALIAS_KEYEDREFERENCE = buildAlias(ENTITY_KEYEDREFERENCE);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index 75c1d31..cf5acc5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -17,15 +17,17 @@
 
 package org.apache.juddi.query;
 
-import java.util.List;
 import java.util.Collections;
+import java.util.List;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.juddi.query.util.KeyedRefTModelComparator;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.IdentifierBag;
 import org.uddi.api_v3.KeyedReference;
 
@@ -48,7 +50,7 @@
 public class FindEntityByIdentifierQuery extends EntityQuery {
 	
 	@SuppressWarnings(""unused"")
-	private Logger log = Logger.getLogger(FindEntityByIdentifierQuery.class);
+	private static Log log = LogFactory.getLog(FindEntityByIdentifierQuery.class);
 
 	private String entityName;
 	private String entityAlias;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
index 4da066b..f7fe958 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
@@ -18,11 +18,13 @@
 package org.apache.juddi.query;
 
 import java.util.List;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.Name;
 
 /**
@@ -35,7 +37,7 @@
 public class FindEntityByNamesQuery extends EntityQuery {
 
 	@SuppressWarnings(""unused"")
-	private Logger log = Logger.getLogger(FindEntityByNamesQuery.class);
+	private static Log log = LogFactory.getLog(FindEntityByNamesQuery.class);
 
 	private String entityName;
 	private String entityAlias;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindPublisherAssertionByBusinessQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindPublisherAssertionByBusinessQuery.java
index 70ac849..c4b16a2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindPublisherAssertionByBusinessQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindPublisherAssertionByBusinessQuery.java
@@ -18,12 +18,14 @@
 package org.apache.juddi.query;
 
 import java.util.List;
+
 import javax.persistence.EntityManager;
 import javax.persistence.Query;
 
-import org.apache.juddi.query.util.DynamicQuery;
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.model.PublisherAssertion;
+import org.apache.juddi.query.util.DynamicQuery;
 import org.uddi.api_v3.CompletionStatus;
 
 /**
@@ -34,7 +36,7 @@
  */
 public class FindPublisherAssertionByBusinessQuery extends PublisherAssertionQuery {
 
-	private static Logger log = Logger.getLogger(FindPublisherAssertionByBusinessQuery.class);
+	private static Log log = LogFactory.getLog(FindPublisherAssertionByBusinessQuery.class);
 
 	@SuppressWarnings(""unchecked"")
 	public static List<PublisherAssertion> select(EntityManager em, List<?> businessKeys, CompletionStatus completionStatus) {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index cb69a4a..d554075 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -18,11 +18,13 @@
 package org.apache.juddi.query;
 
 import java.util.List;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.TModelBag;
 
 /**
@@ -50,7 +52,7 @@
 public class FindServiceByTModelKeyQuery extends BusinessServiceQuery {
 	
 	@SuppressWarnings(""unused"")
-	private static Logger log = Logger.getLogger(FindServiceByTModelKeyQuery.class);
+	private static Log log = LogFactory.getLog(FindServiceByTModelKeyQuery.class);
 
 	public static final String ENTITY_NAME_CHILD = ""TmodelInstanceInfo"";
 
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
index 0fcbe16..08f0f01 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
@@ -18,11 +18,13 @@
 package org.apache.juddi.query;
 
 import java.util.List;
+
 import javax.persistence.EntityManager;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.Name;
 
 /**
@@ -47,7 +49,7 @@
 public class FindTModelByNameQuery extends TModelQuery {
 
 	@SuppressWarnings(""unused"")
-	private static Logger log = Logger.getLogger(FindTModelByNameQuery.class);
+	private static Log log = LogFactory.getLog(FindTModelByNameQuery.class);
 
 	public static List<?> select(EntityManager em, FindQualifiers fq, Name name, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
 		// If keysIn is not null and empty, then search is over.
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
index 99fef7b..0abb307 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
@@ -19,7 +19,8 @@
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 /**
  * @author Kurt Stam (kstam@apache.org)
@@ -43,7 +44,7 @@
 	private UDDICustodyTransferService custodyTransferService = null;
 	private JUDDIApiService publisherService = null;
 	
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	InitialContext context = null;
 	private static JNDIRegistration registration = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 9bb8157..144dedb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -33,6 +33,8 @@
 import javax.xml.datatype.Duration;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api.impl.UDDISecurityImpl;
 import org.apache.juddi.api.impl.UDDISubscriptionImpl;
 import org.apache.juddi.api_v3.AccessPointType;
@@ -43,7 +45,6 @@
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.client.UDDIService;
 import org.apache.juddi.v3.client.UDDIServiceWSDL;
-import org.apache.log4j.Logger;
 import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.GetSubscriptionResults;
 import org.uddi.sub_v3.SubscriptionResultsList;
@@ -58,7 +59,7 @@
  */
 public class SubscriptionNotifier extends TimerTask {
 
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	private Timer timer = null;
 	private long startBuffer = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_START_BUFFER, 20000l); // 20s startup delay default 
 	private long interval = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_INTERVAL, 300000l); //5 min default
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
index 422c68b..4b1c5cd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
@@ -18,10 +18,11 @@
 package org.apache.juddi.v3.auth;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
-import org.apache.log4j.Logger;
 
 
 /**
@@ -29,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public class AuthenticatorFactory {
-	private static Logger log = Logger.getLogger(AuthenticatorFactory.class);
+	private static Log log = LogFactory.getLog(AuthenticatorFactory.class);
 
 	// Default authenticator implementation
 	private static final String DEFAULT_IMPL = ""org.apache.juddi.v3.auth.JUDDIAuthenticator"";
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
index 4055bf1..b6ca856 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
@@ -28,6 +28,8 @@
 import javax.xml.bind.JAXBException;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.cryptor.Cryptor;
@@ -37,14 +39,13 @@
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.RegistryException;
 import org.apache.juddi.v3.error.UnknownUserException;
-import org.apache.log4j.Logger;
 
 /**
  * @author Anou Manavalan
  */
 public class CryptedXMLDocAuthenticator extends XMLDocAuthenticator {
 	
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	/**
 	 * @throws IOException
 	 * @throws JAXBException
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
index 0d522eb..e3e3310 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
@@ -20,13 +20,14 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 
-import org.apache.juddi.model.Publisher;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.PersistenceManager;
+import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.error.AuthenticationException;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.UnknownUserException;
-import org.apache.log4j.Logger;
 
 /**
  * This is the default implementation of jUDDI's Authenticator interface, which
@@ -39,7 +40,7 @@
  */
 public class JUDDIAuthenticator implements Authenticator {
 	
-	private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	/**
 	 * 
 	 * @return the userId that came in on the request providing the user has a publishing account in jUDDI.
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
index 0b2a108..c817838 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/LdapSimpleAuthenticator.java
@@ -24,6 +24,9 @@
 import javax.persistence.EntityManager;
 import javax.persistence.EntityTransaction;
 
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
@@ -33,9 +36,6 @@
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.UnknownUserException;
-import org.apache.log4j.Logger;
-
-import org.apache.commons.configuration.ConfigurationException;
 
 /**
  * This is a implementation of jUDDI's Authenticator interface, that uses the
@@ -64,7 +64,7 @@
  */
 public class LdapSimpleAuthenticator implements Authenticator {
 
-    private Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 
     private LdapContext ctx = null;
     private Hashtable<String, String> env = null;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
index f9c17a4..72a4062 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
@@ -28,6 +28,9 @@
 import javax.xml.transform.stream.StreamSource;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.model.UddiEntityPublisher;
@@ -35,8 +38,6 @@
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.v3.error.UnknownUserException;
-import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 
 /**
  * This is a simple implementation of jUDDI's Authenticator interface. The credential
@@ -59,7 +60,7 @@
  */
 public class XMLDocAuthenticator implements Authenticator
 {
-	private static Logger log = Logger.getLogger(AuthenticatorFactory.class);
+	private static Log log = LogFactory.getLog(AuthenticatorFactory.class);
 	/** Container for the user credentials */
 	Hashtable<String,User> userTable;
 	
@@ -85,7 +86,7 @@
 		userTable = new Hashtable<String,User>();
 		String usersFileName = getFilename();
 		log.info(""Reading jUDDI Users File: "" + usersFileName + ""..."");
-		InputStream stream = Loader.getResource(usersFileName).openStream();
+		InputStream stream = ClassUtil.getResource(usersFileName, this.getClass()).openStream();
 		JAXBContext jaxbContext=JAXBContext.newInstance(JuddiUsers.class);
 		Unmarshaller unMarshaller = jaxbContext.createUnmarshaller();
 		JAXBElement<JuddiUsers> element = unMarshaller.unmarshal(new StreamSource(stream),JuddiUsers.class);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 5bc9d1d..a8bf78a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -25,6 +25,8 @@
 
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.api_v3.DeletePublisher;
 import org.apache.juddi.api_v3.SavePublisher;
 import org.apache.juddi.config.AppConfig;
@@ -43,7 +45,6 @@
 import org.apache.juddi.v3.error.KeyUnavailableException;
 import org.apache.juddi.v3.error.UserMismatchException;
 import org.apache.juddi.v3.error.ValueNotAllowedException;
-import org.apache.log4j.Logger;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeleteBinding;
 import org.uddi.api_v3.DeleteBusiness;
@@ -67,7 +68,7 @@
  */
 public class ValidatePublish extends ValidateUDDIApi {
 
-	Logger log = Logger.getLogger(this.getClass());
+	private Log log = LogFactory.getLog(this.getClass());
 	
 	public ValidatePublish(UddiEntityPublisher publisher) {
 		super(publisher);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
index 883ab80..4e30316 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
@@ -45,7 +45,7 @@
 		StringBuffer sb = new StringBuffer();
 
 		Buffer nl = NotificationList.getInstance().getNotifications();
-		Iterator it = nl.iterator();
+		Iterator<String> it = nl.iterator();
 		while (it.hasNext()) {
 			String notification = (String) it.next();		
 			sb.append(notification);
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/servlets/RegistryServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/servlets/RegistryServlet.java
index b059e0c..0aa61be 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/servlets/RegistryServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/servlets/RegistryServlet.java
@@ -20,8 +20,9 @@
 import javax.servlet.http.HttpServlet;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.Registry;
-import org.apache.log4j.Logger;
 
 /**
  * This servlet is ONLY used to initialize the jUDDI webapp on startup and
@@ -32,7 +33,7 @@
 public class RegistryServlet extends HttpServlet {
 	
 	private static final long serialVersionUID = 4653310291840334765L;
-	private static Logger logger = Logger.getLogger(RegistryServlet.class);
+	private static Log logger = LogFactory.getLog(RegistryServlet.class);
 
 	/**
 	 * Create the shared instance of jUDDI's Registry class and call it's
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
index 9c3e214..032e8ef 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
@@ -18,8 +18,9 @@
 
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
@@ -37,7 +38,7 @@
 	final static String JOE_BINDING_XML               = ""uddi_data/joepublisher/bindingTemplate.xml"";
     final static String JOE_BINDING_KEY               = ""uddi:uddi.joepublisher.com:bindingtwo"";
   
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
     private UDDIInquiryPortType inquiry = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index b1737d3..faa0b5c 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -19,8 +19,9 @@
 
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
@@ -44,7 +45,7 @@
     final static String SAM_BUSINESS_WITHPROJECTION_XML = ""uddi_data/samsyndicator/businessEntity_withProjection.xml"";
     final static String SAM_BUSINESS_KEY        = ""uddi:www.samco.com:samco"";
     
-	private Logger logger = Logger.getLogger(this.getClass());
+    private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
     private UDDIInquiryPortType inquiry = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
index 609ded9..ab66706 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
@@ -18,8 +18,9 @@
 
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.DeleteService;
@@ -45,7 +46,7 @@
     final static String SAM_SERVICE_XML              = ""uddi_data/samsyndicator/businessService.xml"";
     final static String SAM_SERVICE_KEY              = ""uddi:www.samco.com:listingservice"";
    
-	private Logger logger = Logger.getLogger(this.getClass());
+    private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
     private UDDIInquiryPortType inquiry = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index 712a355..01dad67 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -22,8 +22,9 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
@@ -71,7 +72,7 @@
 	final static String FIND_BINDING_XML              = ""uddi_data/find/findBinding1.xml"";
 	final static String FIND_TMODEL_XML               = ""uddi_data/find/findTModel1.xml"";
    
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	UDDIInquiryPortType inquiry =null;
 	
 	public TckFindEntity(UDDIInquiryPortType inquiry) {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
index 88748a3..0db5584 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
@@ -18,8 +18,9 @@
 
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeletePublisherAssertions;
@@ -37,7 +38,7 @@
 	final static String JOE_ASSERT2_XML    = ""uddi_data/joepublisher/publisherAssertion2.xml"";
 	final static String SAM_ASSERT_XML    = ""uddi_data/samsyndicator/publisherAssertion.xml"";
 	
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
  
 	public TckPublisherAssertion(UDDIPublicationPortType publication) {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
index b352707..9a0b736 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
@@ -19,8 +19,9 @@
 
 import javax.xml.ws.Holder;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
@@ -63,8 +64,7 @@
     final static String SAM_SUBSCRIPTION3_KEY = ""uddi:www.samco.com:subscriptionthree"";
 	final static String SAM_SUBSCRIPTIONRESULTS3_XML = ""uddi_data/subscription/subscriptionresults4.xml"";
 	
-	
-	private Logger logger = Logger.getLogger(this.getClass());
+	private Log logger = LogFactory.getLog(this.getClass());
     UDDISubscriptionPortType subscription = null;
 	UDDISecurityPortType security = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
index 3a345fd..8ecba1e 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
@@ -21,8 +21,9 @@
 
 import javax.xml.ws.Holder;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.DeleteBinding;
@@ -57,7 +58,7 @@
 	public final static String SUBSCRIPTION_XML = ""uddi_data/subscriptionnotifier/subscription1.xml"";
     public final static String SUBSCRIPTION_KEY = ""uddi:uddi.joepublisher.com:subscriptionone"";
     
-	private Logger logger = Logger.getLogger(this.getClass());
+    private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
     private UDDISubscriptionPortType subscription = null;
     private SaveService ss = null;
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
index 12aac2b..ec5b897 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckTModel.java
@@ -18,8 +18,9 @@
 
 import java.util.List;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.jaxb.EntityCreator;
-import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.uddi.api_v3.DeleteTModel;
 import org.uddi.api_v3.GetTModelDetail;
@@ -41,8 +42,7 @@
     final static String SAM_SYNDICATOR_TMODEL_XML     = ""uddi_data/samsyndicator/tModelKeyGen.xml"";
     final static String SAM_SYNDICATOR_TMODEL_KEY     = ""uddi:www.samco.com:keygenerator"";
  
-    
-	private Logger logger = Logger.getLogger(this.getClass());
+    private Log logger = LogFactory.getLog(this.getClass());
 	private UDDIPublicationPortType publication = null;
     private UDDIInquiryPortType inquiry = null;
 	
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/EntityCreator.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/EntityCreator.java
index 97836bc..bb05d06 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/EntityCreator.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/EntityCreator.java
@@ -29,11 +29,12 @@
 import javax.xml.bind.Marshaller;
 import javax.xml.bind.Unmarshaller;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 public class EntityCreator {
 
-	private static Logger logger = Logger.getLogger(EntityCreator.class);
+	private static Log logger = LogFactory.getLog(EntityCreator.class);
 	
 	@SuppressWarnings(""rawtypes"")
 	public static Object buildFromDoc(String fileName, String thePackage) throws JAXBException, IOException {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
index d7f6140..7c2ca44 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
@@ -30,14 +30,15 @@
 import javax.xml.bind.Marshaller;
 import javax.xml.bind.Unmarshaller;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.w3c.dom.Element;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 public class JAXBMarshaller {
-	private static Logger logger = Logger.getLogger(JAXBMarshaller.class);
+	private static Log logger = LogFactory.getLog(JAXBMarshaller.class);
 	
 	public static final String PACKAGE_UDDIAPI = ""org.uddi.api_v3"";
 	public static final String PACKAGE_SUBSCRIPTION = ""org.uddi.sub_v3"";
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java b/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
index 97af88d..f76a34d 100644
--- a/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
+++ b/uddi-ws/src/main/java/org/uddi/JAXBContextUtil.java
@@ -3,14 +3,15 @@
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 
 import java.util.HashMap;
 import java.util.Map;
 
 public class JAXBContextUtil {
 
-	private static Logger log = Logger.getLogger(JAXBContextUtil.class);
+	private static Log log = LogFactory.getLog(JAXBContextUtil.class);
 	private static final Map<String, JAXBContext> JAXBContexts = new HashMap<String, JAXBContext>();
 
 	public static JAXBContext getContext(String packageName) throws JAXBException {
"
juddi,36222ec0c1a56ebfc3753c0e5f1a554662ae7bed,"JUDDI-436, switching from log4j to commons.logging.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1048885 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-14 01:07:45,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 2a9c712..646bed5 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -26,7 +26,8 @@
 import javax.xml.ws.WebFault;
 import javax.xml.ws.soap.SOAPFaultException;
 
-import org.apache.log4j.Logger;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.uddi.api_v3.DispositionReport;
 
 
@@ -41,7 +42,7 @@
     extends RemoteException
 {
 	private static final long serialVersionUID = -3901821587689888649L;
-	private static transient Logger log = Logger.getLogger(DispositionReportFaultMessage.class);
+	private static transient Log log = LogFactory.getLog(DispositionReportFaultMessage.class);
 	/**
      * Java type that goes as soapenv:Fault detail element.
      * 
"
juddi,ee2d44e7513f3d0943ec418ed204ce620962f57e,"JUDDI-437, fixing potential NPE if no custom config files are found.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1045383 13f79535-47bb-0310-9956-ffa450edef68
",2010-12-13 21:39:46,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index b0a6a6c..1db30fb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -539,17 +539,20 @@
 						en = new JarFile(new File(paths[0])).entries();
 					}
 				}
-			
-				log.debug(""Discovering the Publisher XML data files in jar: "" + paths[0]);
-				while (en.hasMoreElements()) {
-					String name = en.nextElement().getName();
-					if (name.endsWith(FILE_PUBLISHER)) {
-						log.debug(""Found publisher file="" + name);
-						String publisher = name.substring(basePath.length(),name.indexOf(FILE_PUBLISHER));
-				        if (! rootPublisherStr.equalsIgnoreCase(publisher)) {
-				        	publishers.add(publisher);
-				        } 
+				if (paths.length > 0) {
+					log.debug(""Discovering the Publisher XML data files in jar: "" + paths[0]);
+					while (en.hasMoreElements()) {
+						String name = en.nextElement().getName();
+						if (name.endsWith(FILE_PUBLISHER)) {
+							log.debug(""Found publisher file="" + name);
+							String publisher = name.substring(basePath.length(),name.indexOf(FILE_PUBLISHER));
+					        if (! rootPublisherStr.equalsIgnoreCase(publisher)) {
+					        	publishers.add(publisher);
+					        } 
+						}
 					}
+				} else {
+					log.info(""No custom configuration files where found in "" + path);
 				}
 			} catch (IOException e) {
 				throw new ConfigurationException(e);
"
juddi,2b41a9f5d4e6bb81b7804f881b9b3961692a9de9,"JUDDI-427 applying patch provided by Lyudmil Latinov. Referencing the tModelKeys rather then the names.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1035915 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-17 03:43:15,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java b/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
index baaec24..b40e0ae 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/util/FindQualifiers.java
@@ -25,70 +25,70 @@
 public class FindQualifiers {
 
 	public static final String AND_ALL_KEYS = ""andAllKeys"";
-	public static final String AND_ALL_KEYS_TMODEL = ""uddi-org:andAllKeys"";
+	public static final String AND_ALL_KEYS_TMODEL = ""uddi:uddi.org:findqualifier:andallkeys"";
 
 	public static final String APPROXIMATE_MATCH = ""approximateMatch"";
-	public static final String APPROXIMATE_MATCH_TMODEL = ""uddi-org:approximateMatch:SQL99"";
+	public static final String APPROXIMATE_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:approximatematch"";
 
 	public static final String BINARY_SORT = ""binarySort"";
-	public static final String BINARY_SORT_TMODEL = ""uddi-org:binarySort)"";
+	public static final String BINARY_SORT_TMODEL = ""uddi:uddi.org:sortorder:binarysort"";
 
 	public static final String BINDING_SUBSET = ""bindingSubset"";
-	public static final String BINDING_SUBSET_TMODEL = ""uddi-org:bindingSubset"";
+	public static final String BINDING_SUBSET_TMODEL = ""uddi:uddi.org:findqualifier:bindingsubset"";
 
 	public static final String CASE_INSENSITIVE_SORT = ""caseInsensitiveSort"";
-	public static final String CASE_INSENSITIVE_SORT_TMODEL = ""uddi-org:caseInsensitiveSort"";
+	public static final String CASE_INSENSITIVE_SORT_TMODEL = ""uddi:uddi.org:findqualifier:caseinsensitivesort"";
 
 	public static final String CASE_INSENSITIVE_MATCH = ""caseInsensitiveMatch"";
-	public static final String CASE_INSENSITIVE_MATCH_TMODEL = ""uddi-org:caseInsensitiveMatch"";
+	public static final String CASE_INSENSITIVE_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:caseinsensitivematch"";
 
 	public static final String CASE_SENSITIVE_SORT = ""caseSensitiveSort"";
-	public static final String CASE_SENSITIVE_SORT_TMODEL = ""uddi-org:caseSensitiveSort"";
+	public static final String CASE_SENSITIVE_SORT_TMODEL = ""uddi:uddi.org:findqualifier:casesensitivesort"";
 
 	public static final String CASE_SENSITIVE_MATCH = ""caseSensitiveMatch"";
-	public static final String CASE_SENSITIVE_MATCH_TMODEL = ""uddi-org:caseSensitiveMatch"";
+	public static final String CASE_SENSITIVE_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:casesensitivematch"";
 
 	public static final String COMBINE_CATEGORY_BAGS = ""combineCategoryBags"";
-	public static final String COMBINE_CATEGORY_BAGS_TMODEL = ""uddi-org:combineCategoryBags)"";
+	public static final String COMBINE_CATEGORY_BAGS_TMODEL = ""uddi:uddi.org:findqualifier:combinecategorybags"";
 
 	public static final String DIACRITIC_INSENSITIVE_MATCH = ""diacriticInsensitiveMatch"";
-	public static final String DIACRITIC_INSENSITIVE_MATCH_TMODEL = ""uddi-org:diacriticInsensitiveMatch"";
+	public static final String DIACRITIC_INSENSITIVE_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:diacriticsinsensitivematch"";
 
 	public static final String DIACRITIC_SENSITIVE_MATCH = ""diacriticSensitiveMatch"";
-	public static final String DIACRITIC_SENSITIVE_MATCH_TMODEL = ""uddi-org:diacriticSensitiveMatch"";
+	public static final String DIACRITIC_SENSITIVE_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:diacriticssensitivematch"";
 
 	public static final String EXACT_MATCH = ""exactMatch"";
-	public static final String EXACT_MATCH_TMODEL = ""uddi-org:exactMatch"";
+	public static final String EXACT_MATCH_TMODEL = ""uddi:uddi.org:findqualifier:exactmatch"";
 
 	public static final String SIGNATURE_PRESENT = ""signaturePresent"";
-	public static final String SIGNATURE_PRESENT_TMODEL = ""uddi-org:signaturePresent"";
+	public static final String SIGNATURE_PRESENT_TMODEL = ""uddi:uddi.org:findqualifier:signaturepresent"";
 
 	public static final String OR_ALL_KEYS = ""orAllKeys"";
-	public static final String OR_ALL_KEYS_TMODEL = ""uddi-org:orAllKeys"";
+	public static final String OR_ALL_KEYS_TMODEL = ""uddi:uddi.org:findqualifier:orallkeys"";
 
 	public static final String OR_LIKE_KEYS = ""orLikeKeys"";
-	public static final String OR_LIKE_KEYS_TMODEL = ""uddi-org:orLikeKeys"";
+	public static final String OR_LIKE_KEYS_TMODEL = ""uddi:uddi.org:findqualifier:orlikekeys"";
 
 	public static final String SERVICE_SUBSET = ""serviceSubset"";
-	public static final String SERVICE_SUBSET_TMODEL = ""uddi-org:serviceSubset"";
+	public static final String SERVICE_SUBSET_TMODEL = ""uddi:uddi.org:findqualifier:servicesubset"";
 
 	public static final String SORT_BY_NAME_ASC = ""sortByNameAsc"";
-	public static final String SORT_BY_NAME_ASC_TMODEL = ""uddi-org:sortByNameAsc"";
+	public static final String SORT_BY_NAME_ASC_TMODEL = ""uddi:uddi.org:findqualifier:sortbynameasc"";
 
 	public static final String SORT_BY_NAME_DESC = ""sortByNameDesc"";
-	public static final String SORT_BY_NAME_DESC_TMODEL = ""uddi-org:sortByNameDesc"";
+	public static final String SORT_BY_NAME_DESC_TMODEL = ""uddi:uddi.org:findqualifier:sortbynamedesc"";
 
 	public static final String SORT_BY_DATE_ASC = ""sortByDateAsc"";
-	public static final String SORT_BY_DATE_ASC_TMODEL = ""uddi-org:sortByDateAsc"";
+	public static final String SORT_BY_DATE_ASC_TMODEL = ""uddi:uddi.org:findqualifier:sortbydateasc"";
 	
 	public static final String SORT_BY_DATE_DESC = ""sortByDateDesc"";
-	public static final String SORT_BY_DATE_DESC_TMODEL = ""uddi-org:sortByDateDesc"";
+	public static final String SORT_BY_DATE_DESC_TMODEL = ""uddi:uddi.org:findqualifier:sortbydatedesc"";
 
 	public static final String SUPPRESS_PROJECTED_SERVICES = ""suppressProjectedServices"";
-	public static final String SUPPRESS_PROJECTED_SERVICES_TMODEL = ""uddi-org:suppressProjectedServices"";
+	public static final String SUPPRESS_PROJECTED_SERVICES_TMODEL = ""uddi:uddi.org:findqualifier:suppressprojectedservices"";
 
 	public static final String UTS_10 = ""UTS-10"";
-	public static final String UTS_10_TMODEL = ""uddi-org:UTS-10"";
+	public static final String UTS_10_TMODEL = ""uddi:uddi.org:sortorder:uts-10"";
 	
 	private boolean andAllKeys = false;
 	private boolean approximateMatch = false;
"
juddi,ea819329afd3aa6a926aa28a5eafbc4cf0c28805,"JUDDI-414 adding unit and tck tests for this jira

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1035757 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-16 19:37:56,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index e6e7040..ff1d73c 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -65,6 +65,8 @@
 	final static String FIND_BUSINESS_XML             = ""uddi_data/find/findBusiness1.xml"";
 	final static String FIND_ALL_BUSINESSES_XML       = ""uddi_data/find/findAllBusinesses.xml"";
 	final static String FIND_RELATED_BUSINESS_SORT_BY_NAME_XML = ""uddi_data/find/findRelatedBusinesses_sortByName.xml"";
+	final static String FIND_RELATED_BUSINESS_FROM_KEY= ""uddi_data/find/findRelatedBusinesses_fromKey.xml"";
+	final static String FIND_RELATED_BUSINESS_TO_KEY  = ""uddi_data/find/findRelatedBusinesses_toKey.xml"";
 	final static String FIND_SERVICE_XML              = ""uddi_data/find/findService1.xml"";
 	final static String FIND_BINDING_XML              = ""uddi_data/find/findBinding1.xml"";
 	final static String FIND_TMODEL_XML               = ""uddi_data/find/findTModel1.xml"";
@@ -177,6 +179,66 @@
 		}
 	}
 	
+	public void findRelatedBusinessToKey(boolean isOneSided) {
+		try {
+			FindRelatedBusinesses body = (FindRelatedBusinesses)EntityCreator.buildFromDoc(FIND_RELATED_BUSINESS_TO_KEY, ""org.uddi.api_v3"");
+			RelatedBusinessesList result = inquiry.findRelatedBusinesses(body);
+			if (result == null)
+				Assert.fail(""Null result from find related business operation"");
+			RelatedBusinessInfos bInfos = result.getRelatedBusinessInfos();
+		
+			//both parties need to register the assertion for it to be live.
+			if (isOneSided) {
+				Assert.assertNull(bInfos);
+			} else {
+				List<RelatedBusinessInfo> biList = bInfos.getRelatedBusinessInfo();
+				if (bInfos == null)
+					Assert.fail(""No result from find related business operation"");
+				if (biList == null || biList.size() == 0)
+					Assert.fail(""No result from find related business operation"");
+				Set<String> keys = new HashSet<String>();
+				for (RelatedBusinessInfo relatedBusinessInfo : biList) {
+					keys.add(relatedBusinessInfo.getBusinessKey());
+				}
+				Assert.assertTrue(keys.contains(""uddi:uddi.joepublisher.com:businessone""));
+			}
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+	}
+	
+	public void findRelatedBusinessFromKey(boolean isOneSided) {
+		try {
+			FindRelatedBusinesses body = (FindRelatedBusinesses)EntityCreator.buildFromDoc(FIND_RELATED_BUSINESS_FROM_KEY, ""org.uddi.api_v3"");
+			RelatedBusinessesList result = inquiry.findRelatedBusinesses(body);
+			if (result == null)
+				Assert.fail(""Null result from find related business operation"");
+			RelatedBusinessInfos bInfos = result.getRelatedBusinessInfos();
+		
+			//both parties need to register the assertion for it to be live.
+			if (isOneSided) {
+				Assert.assertNull(bInfos);
+			} else {
+				List<RelatedBusinessInfo> biList = bInfos.getRelatedBusinessInfo();
+				if (bInfos == null)
+					Assert.fail(""No result from find related business operation"");
+				if (biList == null || biList.size() == 0)
+					Assert.fail(""No result from find related business operation"");
+				Set<String> keys = new HashSet<String>();
+				for (RelatedBusinessInfo relatedBusinessInfo : biList) {
+					keys.add(relatedBusinessInfo.getBusinessKey());
+				}
+				Assert.assertTrue(keys.contains(""uddi:www.samco.com:samco""));
+			}
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+	}
+	
 	public String findService() {
 		String serviceKey = null;
 		try {
"
juddi,ea819329afd3aa6a926aa28a5eafbc4cf0c28805,"JUDDI-414 adding unit and tck tests for this jira

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1035757 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-16 19:37:56,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
index 88748a3..dac4161 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
@@ -23,8 +23,12 @@
 import org.junit.Assert;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeletePublisherAssertions;
+import org.uddi.api_v3.FindRelatedBusinesses;
 import org.uddi.api_v3.KeyedReference;
 import org.uddi.api_v3.PublisherAssertion;
+import org.uddi.api_v3.RelatedBusinessInfo;
+import org.uddi.api_v3.RelatedBusinessesList;
+import org.uddi.v3_service.UDDIInquiryPortType;
 import org.uddi.v3_service.UDDIPublicationPortType;
 /**
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
"
juddi,a1293df5e54b85b3eaa1d90e2319ea26c8f4bfdc,"JUDDI-414 setting the businessKey to either the incoming businessKey, ToKey or FromKey. 

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1035755 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-16 19:27:46,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 827f7d2..a359542 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -535,11 +535,13 @@
 			InquiryHelper.getRelatedBusinesses(em, Direction.FROM_KEY, body.getBusinessKey(), body.getKeyedReference(), relatedBusinessInfos, modifiedAfter, modifiedBefore);
 			InquiryHelper.getRelatedBusinesses(em, Direction.TO_KEY, body.getBusinessKey(), body.getKeyedReference(), relatedBusinessInfos, modifiedAfter, modifiedBefore);
 		}
-		else if (body.getFromKey() != null)
+		else if (body.getFromKey() != null) {
 			InquiryHelper.getRelatedBusinesses(em, Direction.FROM_KEY, body.getFromKey(), body.getKeyedReference(), relatedBusinessInfos, modifiedAfter, modifiedBefore);
-		else if (body.getToKey() != null)
+		    result.setBusinessKey(body.getFromKey());
+		} else if (body.getToKey() != null) {
 			InquiryHelper.getRelatedBusinesses(em, Direction.TO_KEY, body.getToKey(), body.getKeyedReference(), relatedBusinessInfos, modifiedAfter, modifiedBefore);
-
+            result.setBusinessKey(body.getToKey());
+		}
 		if (relatedBusinessInfos.getRelatedBusinessInfo().size() > 0) {
 			// TODO: Do proper pagination!
 			listDesc.setActualCount(relatedBusinessInfos.getRelatedBusinessInfo().size());
"
juddi,1c7663ea951a9425041fe3dd18e57eb7a08a7d65,"JUDDI-430, switching to use context params instead of initparams

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1033121 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-09 17:52:37,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index 7e7e9f6..52ff9b3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -31,10 +31,7 @@
 	
 	private static final long serialVersionUID = -91998529871296125L;
 	private Logger logger = Logger.getLogger(UDDIClerkServlet.class);
-	UDDIClerkManager manager = null;
-	
-	public static final String UDDI_CLIENT_MANAGER_NAME = ""uddi.client.manager.name"";
-	public static final String UDDI_CLIENT_CONFIG_FILE  = ""uddi.client.config.file"";
+	private UDDIClerkManager manager = null;
 	
 	/**
 	 * Starting the UDDIClerkManager
"
juddi,1c7663ea951a9425041fe3dd18e57eb7a08a7d65,"JUDDI-430, switching to use context params instead of initparams

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1033121 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-09 17:52:37,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 0c99b5f..3af1883 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -12,36 +12,56 @@
 public class WebHelper {
 	
 	public static Logger logger = Logger.getLogger(WebHelper.class);
-	public static String JUDDI_CLIENT_MANAGER_INSTANCE   = ""juddi.client.manager.instance"";
-	public static String JUDDI_CLIENT_HOMENODE_INSTANCE  = ""juddi.client.homenode.instance"";
-	public static String JUDDI_CLIENT_TRANSPORT_INSTANCE = ""juddi.client.transport.instance"";
+	public static final String UDDI_CLIENT_MANAGER_NAME  = ""uddi.client.manager.name"";
+	public static final String UDDI_CLIENT_CONFIG_FILE    = ""uddi.client.config.file"";
+	public static final String JUDDI_CLIENT_MANAGER_NAME  = ""juddi.client.manager.name"";
+	public static final String JUDDI_CLIENT_TRANSPORT     = ""juddi.client.transport"";
 	
 
 	/**
-	 * Checks the servlet context for the manager defined in the web context, this means 
+	 * Checks the servlet context for the manager defined in the web context. Optionally, in your 
+	 * web.xml you can specify either the manager name if you want to use an existing manager 
+	 * called 'uddi-portlet-manager':
+	 * <pre>
+	 * &lt;context-param&gt;
+	 *   &lt;param-name&gt;uddi.client.manager.name&lt;/param-name&gt;
+	 *   &lt;param-value&gt;uddi-portlet-manager&lt;/param-value&gt;
+	 * &lt;/context-param&gt;
+	 * </pre>
+	 * or, if you don't want to use the default META-INF/uddi.xml file path, but 'META-INF/my-uddi.xml' instead,
+	 * then you can set:
+	 * <pre>
+	 * &lt;context-param&gt;
+	 *   &lt;param-name&gt;uddi.client.config.path&lt;/param-name&gt;
+	 *   &lt;param-value&gt;META-INF/my-uddi.xml&lt;/param-value&gt;
+	 * &lt;/context-param&gt;
+	 * </pre>
 	 * @param servletContext
 	 * @return
 	 * @throws ConfigurationException
 	 */
 	public static UDDIClerkManager getUDDIClerkManager(ServletContext servletContext) throws ConfigurationException 
 	{
-		UDDIClerkManager manager = (UDDIClerkManager) servletContext.getAttribute(JUDDI_CLIENT_MANAGER_INSTANCE);
-		if (manager==null) {
-			String managerName = String.valueOf(servletContext.getAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME));
+		if (servletContext.getAttribute(JUDDI_CLIENT_MANAGER_NAME)!=null) {
+			String managerName = String.valueOf(servletContext.getAttribute(JUDDI_CLIENT_MANAGER_NAME));
+			return UDDIClientContainer.getUDDIClerkManager(managerName);
+		} else {
+			String managerName = servletContext.getInitParameter(UDDI_CLIENT_MANAGER_NAME);
 			if (managerName!=null) {
 				try {
-					manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
 					logger.info(""Manager "" + managerName + "" was already started."");
+					servletContext.setAttribute(JUDDI_CLIENT_MANAGER_NAME, managerName);
 					return manager;
 				} catch (ConfigurationException ce) {
 					logger.debug(""Manager "" + managerName + "" is not yet started."");
 				}
 			}
-			String clientConfigFile = servletContext.getInitParameter(UDDIClerkServlet.UDDI_CLIENT_CONFIG_FILE);
+			String clientConfigFile = servletContext.getInitParameter(UDDI_CLIENT_CONFIG_FILE);
 			if (clientConfigFile==null) clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
 			
 			logger.info(""Reading the managerName from the clientConfig file "" + clientConfigFile);
-			manager = new UDDIClerkManager(clientConfigFile);
+			UDDIClerkManager manager = new UDDIClerkManager(clientConfigFile);
 			if (clientConfigFile==null && manager.getName()==null) {
 				logger.warn(""Deprecated, manager name set to 'default', however it should be provided in the uddi.xml"");
 				managerName = ""default"";
@@ -52,10 +72,10 @@
 				throw new ConfigurationException(""A manager name needs to be specified in the client config file."");
 			}
 			manager.start();
-			servletContext.setAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME, manager.getName());
-			servletContext.setAttribute(JUDDI_CLIENT_MANAGER_INSTANCE, manager);
+			UDDIClientContainer.addClerkManager(manager);
+			servletContext.setAttribute(JUDDI_CLIENT_MANAGER_NAME, managerName);
+			return manager;
 		}
-		return manager;
 	}
 	/**
 	 * 
@@ -64,26 +84,21 @@
 	 * @throws ConfigurationException
 	 */
 	public static UDDINode getUDDIHomeNode(ServletContext servletContext) throws ConfigurationException {
-		UDDINode homeNode = (UDDINode) servletContext.getAttribute(JUDDI_CLIENT_HOMENODE_INSTANCE);
-		if (homeNode==null) {
-			UDDIClerkManager manager = getUDDIClerkManager(servletContext);
-			homeNode = manager.getClientConfig().getHomeNode();
-			servletContext.setAttribute(JUDDI_CLIENT_HOMENODE_INSTANCE, homeNode);
-		}
-		return homeNode;
+		UDDIClerkManager manager = getUDDIClerkManager(servletContext);
+		return manager.getClientConfig().getHomeNode();	
 	}
 	
 	public static Transport getTransport(ServletContext servletContext) 
 		   throws ConfigurationException, ClassNotFoundException, IllegalArgumentException, 
 		    SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException 
 	{
-		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE);
+		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT);
 		if (transport==null) {
 			UDDIClerkManager manager = getUDDIClerkManager(servletContext);
-			UDDINode node = getUDDIHomeNode(servletContext); 
+			UDDINode node = manager.getClientConfig().getHomeNode();
 			Class<?> transportClass = ClassUtil.forName(node.getProxyTransport(), Transport.class);
 			transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(manager.getName(),node.getName());
-			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE, transport);
+			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT, transport);
 		}
 		return transport;
 	}
@@ -92,12 +107,12 @@
 	   throws ConfigurationException, ClassNotFoundException, IllegalArgumentException, 
 	    SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException 
 	{
-		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName());
+		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT + ""-"" + remoteNode.getName());
 		if (transport==null) {
 			UDDIClerkManager manager = getUDDIClerkManager(servletContext);
 			Class<?> transportClass = ClassUtil.forName(remoteNode.getProxyTransport(), Transport.class);
 			transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(manager.getName(),remoteNode.getName());
-			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName(), transport);
+			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT + ""-"" + remoteNode.getName(), transport);
 		}
 		return transport;
 	}
"
juddi,9eb9095d26d0e33696e0152cf6436c65882f71dd,"JUDDI-423 making the setting for acceptable lagtime configurable.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1033007 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-09 15:09:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index df9f87f..cefdccf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -27,8 +27,9 @@
 	public final static String JUDDI_TRANSFER_EXPIRATION_DAYS    =""juddi.transfer.expiration.days"";
 	public final static String JUDDI_AUTHENTICATE_INQUIRY        =""juddi.authenticate.Inquiry"";
 	public final static String JUDDI_SUBSCRIPTION_EXPIRATION_DAYS=""juddi.subscription.expiration.days"";
-	public final static String JUDDI_NOTIFICATION_START_BUFFER   =""juddi.notification.start.buffer"";
-	public final static String JUDDI_NOTIFICATION_INTERVAL       =""juddi.notification.interval"";
+	public final static String JUDDI_NOTIFICATION_START_BUFFER       =""juddi.notification.start.buffer"";
+	public final static String JUDDI_NOTIFICATION_INTERVAL           =""juddi.notification.interval"";
+	public final static String JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME =""juddi.notification.acceptable.lagtime"";
 	public final static String JUDDI_SUBSCRIPTION_CHUNKEXPIRATION_MINUTES=""juddi.subscription.chunkexpiration.minutes"";
 	public final static String JUDDI_JNDI_REGISTRATION           =""juddi.jndi.registration"";
 	public final static String JUDDI_SUBSCRIPTION_NOTIFICATION   =""juddi.subscription.notification"";
"
juddi,9eb9095d26d0e33696e0152cf6436c65882f71dd,"JUDDI-423 making the setting for acceptable lagtime configurable.

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1033007 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-09 15:09:16,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index dc64b01..7c6052e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -62,8 +62,8 @@
 	private Timer timer = null;
 	private long startBuffer = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_START_BUFFER, 20000l); // 20s startup delay default 
 	private long interval = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_INTERVAL, 300000l); //5 min default
+	private long acceptableLagTime = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_ACCEPTABLE_LAGTIME, 500l); //500 milliseconds
 	private UDDISubscriptionImpl subscriptionImpl = new UDDISubscriptionImpl();
-	private static long ACCEPTABLE_LAG_TIME = 500l; //500 milliseconds
 	private static String SUBR_V3_NAMESPACE = ""urn:uddi-org:v3_service"";
 	private static String SUBSCRIPTION_LISTENER = ""UDDI_SubscriptionListener_Port"";
 	
@@ -115,18 +115,20 @@
 	}
 	/**
 	 * Checks to see that the event are fired on time. If they are late this may indicate that the server
-	 * is under load.
+	 * is under load. The acceptableLagTime is configurable using the ""juddi.notification.acceptable.lagtime""
+	 * property and is defaulted to 500ms. A negative value means that you do not care about the lag time
+	 * and you simply always want to go do the notification work.
 	 * 
 	 * @param scheduleExecutionTime
 	 * @return true if the server is within the acceptable latency lag.
 	 */
 	private boolean firedOnTime(long scheduleExecutionTime) {
 		long lagTime = System.currentTimeMillis() - scheduleExecutionTime;
-		if (lagTime <= ACCEPTABLE_LAG_TIME) {
+		if (lagTime <= acceptableLagTime || acceptableLagTime < 0) {
 			return true;
 		} else {
 			log.warn(""NotificationTimer is lagging "" + lagTime + "" milli seconds behind. A lag time ""
-					+ ""which exceeds an acceptable lagtime of "" + ACCEPTABLE_LAG_TIME + ""ms indicates ""
+					+ ""which exceeds an acceptable lagtime of "" + acceptableLagTime + ""ms indicates ""
 					+ ""that the registry server is under stress. We are therefore skipping this notification ""
 					+ ""cycle."");
 			return false;
"
juddi,1939e2a0d4009853deed4bc935dfb02a82e32b24,"JUDDI-420 - fixing NPE

git-svn-id: https://svn.apache.org/repos/asf/juddi/trunk@1030329 13f79535-47bb-0310-9956-ffa450edef68
",2010-11-03 04:40:10,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index d485a6a..d7a768a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -81,11 +81,13 @@
 						EntityForLang.getName(businessInfo.getName(),lang).getValue(),
 						EntityForLang.getDescription(businessInfo.getDescription(),lang).getValue());
 				List<Service> services = new ArrayList<Service>();
-				for (ServiceInfo serviceInfo : businessInfo.getServiceInfos().getServiceInfo()) {
-					Service service = new Service(
-							serviceInfo.getServiceKey(),
-							EntityForLang.getName(serviceInfo.getName(), lang).getValue());
-					services.add(service);
+				if (businessInfo.getServiceInfos()!=null) {
+					for (ServiceInfo serviceInfo : businessInfo.getServiceInfos().getServiceInfo()) {
+						Service service = new Service(
+								serviceInfo.getServiceKey(),
+								EntityForLang.getName(serviceInfo.getName(), lang).getValue());
+						services.add(service);
+					}
 				}
 				business.setServices(services);
 				businesses.add(business);
"
juddi,67f043363c18486c07eb036355d10890282bc4b8,"JUDDI-412
Make OverviewURL nullable.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@982346 13f79535-47bb-0310-9956-ffa450edef68
",2010-08-04 17:46:51,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
index 343d158..b77df8f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
@@ -97,7 +97,7 @@
 		this.tmodel = tmodel;
 	}
 
-	@Column(name = ""overview_url"", nullable = false)
+	@Column(name = ""overview_url"", nullable = true)
 	public String getOverviewUrl() {
 		return this.overviewUrl;
 	}
"
juddi,759793119095c8f13478247991811212e958dfff,"JUDDI-398
Only return serviceInfos that reflect data that contains a matching
bindingTemplate if a TModelBag or find_tmodel is present.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962411 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:17:06,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 99526ea..827f7d2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -207,9 +207,31 @@
 
 		// Sort and retrieve the final results taking paging into account
 		List<?> queryResults = FetchBusinessEntitiesQuery.select(em, findQualifiers, keysFound, body.getMaxRows(), body.getListHead(), listDesc);
+		List<?> serviceResults = null;
+		for (int i = 0; i<queryResults.size(); i++) {
+			org.apache.juddi.model.BusinessEntity be = (org.apache.juddi.model.BusinessEntity) queryResults.get(i);
+			
+			List<Object> keysIn = new ArrayList<Object>();
+			List<org.apache.juddi.model.BusinessService> services = be.getBusinessServices();
+			for (int j = 0; j<services.size(); j++) {
+				keysIn.add(services.get(j).getEntityKey());
+			}
+
+			serviceResults = FindServiceByTModelKeyQuery.select(em, findQualifiers, body.getTModelBag(), null, keysIn);
+			if (serviceResults == null) {
+				be.setBusinessServices(null);
+			} else { 
+				ListDescription ldesc = new ListDescription();
+				result.setListDescription(listDesc);
+				List<?> srvcs = FetchBusinessServicesQuery.select(em, findQualifiers, serviceResults, body.getMaxRows(), 
+						body.getListHead(), ldesc);
+				be.setBusinessServices((List<org.apache.juddi.model.BusinessService>)srvcs);
+			}
+		}
+			
 		if (queryResults != null && queryResults.size() > 0)
 			result.setBusinessInfos(new org.uddi.api_v3.BusinessInfos());
-
+		
 		// Set the currentIndex to 0 or the value of the subscriptionStartIndex
 		int currentIndex = 0;
 		if (subscriptionStartIndex != null && subscriptionStartIndex.value != null)
"
juddi,45aea421b99174eab1069e01a3a8684f34c2dcda,"JUDDI-407
Change parentKey to check the Business rather than the BindingTemplate.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962410 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:15:51,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
index 8befdf9..cb69a4a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindServiceByTModelKeyQuery.java
@@ -45,6 +45,7 @@
  * match (logical OR).""
  *  
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
+ * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
 public class FindServiceByTModelKeyQuery extends BusinessServiceQuery {
 	
@@ -74,7 +75,8 @@
 		DynamicQuery dynamicQry = new DynamicQuery(selectSQL);
 		appendConditions(dynamicQry, fq, tmodelKeys);
 		if (parentKey != null && parentKey.length() > 0)
-			dynamicQry.AND().pad().appendGroupedAnd(new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS));
+			dynamicQry.AND().pad().appendGroupedAnd(new DynamicQuery.Parameter(BusinessServiceQuery.ENTITY_ALIAS + ""."" + BusinessServiceQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS));
+			//dynamicQry.AND().pad().appendGroupedAnd(new DynamicQuery.Parameter(BindingTemplateQuery.ENTITY_ALIAS + ""."" + BindingTemplateQuery.KEY_NAME_PARENT, parentKey, DynamicQuery.PREDICATE_EQUALS));
 		
 		if (restrictions != null && restrictions.length > 0)
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
index 8da06e2..9c3e214 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBindingTemplate.java
@@ -56,7 +56,7 @@
 		deleteBinding(authInfoJoe, JOE_BINDING_KEY);
 	}
 	
-	private void saveBinding(String authInfo, String bindingXML, String bindingKey) {
+	public void saveBinding(String authInfo, String bindingXML, String bindingKey) {
 		try {
 			// First save the entity
 			SaveBinding sb = new SaveBinding();
@@ -86,7 +86,7 @@
 		
 	}
 	
-	private void deleteBinding(String authInfo, String bindingKey) {
+	public void deleteBinding(String authInfo, String bindingKey) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeleteBinding db = new DeleteBinding();
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index 31e40a9..b1737d3 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -103,9 +103,8 @@
     	deleteBusinesses(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY, numberOfCopies);
     }
 	 
-	private void saveBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
-		try {
-			
+	public void saveBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
+		try {			
 			BusinessEntity beIn = (BusinessEntity)EntityCreator.buildFromDoc(businessXML, ""org.uddi.api_v3"");
 			String businessName = beIn.getName().get(0).getValue();
 			for (int i=0; i<numberOfCopies; i++) {
@@ -124,7 +123,7 @@
 		}
 	}
 		
-	private void saveBusiness(String authInfo, String businessXML, String businessKey) {
+	public void saveBusiness(String authInfo, String businessXML, String businessKey) {
 		try {
 			SaveBusiness sb = new SaveBusiness();
 			sb.setAuthInfo(authInfo);
@@ -156,7 +155,7 @@
 
 	}
 	
-	private void updateBusiness(String authInfo, String businessXML, String businessKey) {
+	public void updateBusiness(String authInfo, String businessXML, String businessKey) {
 		try {
 			
 			// Now get the entity and check the values
@@ -197,7 +196,7 @@
 
 	}
 	
-	private void deleteBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
+	public void deleteBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
 		try {
 			for (int i=0; i<numberOfCopies; i++) {
 				// Delete the entity and make sure it is removed
@@ -216,7 +215,7 @@
 	}
 	
 	
-	private void deleteBusiness(String authInfo, String businessXML, String businessKey) {
+	public void deleteBusiness(String authInfo, String businessXML, String businessKey) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeleteBusiness db = new DeleteBusiness();
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
index e26a452..609ded9 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
@@ -105,7 +105,7 @@
 		deleteServices(authInfoSam, SAM_SERVICE_KEY, numberOfCopies);
 	}
 	
-	private void saveServices(String authInfo, String serviceXML, String serviceKey, int numberOfCopies) {
+	public void saveServices(String authInfo, String serviceXML, String serviceKey, int numberOfCopies) {
 		try {
 			org.uddi.api_v3.BusinessService bsIn = (org.uddi.api_v3.BusinessService)EntityCreator.buildFromDoc(serviceXML, ""org.uddi.api_v3"");
 			String serviceName = bsIn.getName().get(0).getValue();
@@ -130,7 +130,7 @@
 	}
 	
 	
-	private void saveService(String authInfo, String serviceXML, String serviceKey) {
+	public void saveService(String authInfo, String serviceXML, String serviceKey) {
 		try {
 			// First save the entity
 			SaveService ss = new SaveService();
@@ -161,7 +161,7 @@
 		
 	}
 	
-	private void saveService2(String authInfo, String serviceKey, String serviceXML2,  String serviceKey2) {
+	public void saveService2(String authInfo, String serviceKey, String serviceXML2,  String serviceKey2) {
 		try {
 			// First save the entity
 			SaveService ss = new SaveService();
@@ -190,7 +190,7 @@
 		
 	}
 	
-	private void deleteService(String authInfo, String serviceKey) {
+	public void deleteService(String authInfo, String serviceKey) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeleteService ds = new DeleteService();
@@ -205,7 +205,7 @@
 		}
 	}
 	
-	private void deleteServices(String authInfo, String serviceKey, int numberOfCopies) {
+	public void deleteServices(String authInfo, String serviceKey, int numberOfCopies) {
 		try {
 			for (int i=0; i<numberOfCopies; i++) {
 				// Delete the entity and make sure it is removed
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
index fdea805..88748a3 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckPublisherAssertion.java
@@ -78,7 +78,7 @@
 	}
 
 	
-	private void addPublisherAssertion(String authInfo, String pubassertXML) {
+	public void addPublisherAssertion(String authInfo, String pubassertXML) {
 		try {
 			AddPublisherAssertions ap = new AddPublisherAssertions();
 			ap.setAuthInfo(authInfo);
@@ -111,7 +111,7 @@
 
 	}
 
-	private void deletePublisherAssertion(String authInfo, String pubassertXML) {
+	public void deletePublisherAssertion(String authInfo, String pubassertXML) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeletePublisherAssertions dp = new DeletePublisherAssertions();
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
index 9d5cfc4..b352707 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
@@ -280,8 +280,7 @@
 		
 	}
 	
-	
-	private void saveSubscription(String authInfo, String subscriptionXML, String subscriptionKey) {
+	public void saveSubscription(String authInfo, String subscriptionXML, String subscriptionKey) {
 		try {
 			Subscription subIn = (Subscription)EntityCreator.buildFromDoc(subscriptionXML, ""org.uddi.sub_v3"");
 			List<Subscription> subscriptionList = new ArrayList<Subscription>();
@@ -313,7 +312,7 @@
 		
 	}
 	
-	private void deleteSubscription(String authInfo, String subscriptionKey) {
+	public void deleteSubscription(String authInfo, String subscriptionKey) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeleteSubscription ds = new DeleteSubscription();
"
juddi,84aebf7b05f30037950f33811a31a55ffee8e58d,"JUDDI-408
Change the methods from private to public so we can write tests without
editing these classes.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@962407 13f79535-47bb-0310-9956-ffa450edef68
",2010-07-09 05:11:26,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
index 28e47e7..3a345fd 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscriptionListener.java
@@ -138,7 +138,7 @@
 		deleteSubscription(authInfo, SUBSCRIPTION_KEY);
 	}
 	
-	private void saveSubscription(String authInfo, String subscriptionXML, String subscriptionKey) {
+	public void saveSubscription(String authInfo, String subscriptionXML, String subscriptionKey) {
 		try {
 			Subscription subIn = (Subscription)EntityCreator.buildFromDoc(subscriptionXML, ""org.uddi.sub_v3"");
 			List<Subscription> subscriptionList = new ArrayList<Subscription>();
@@ -169,7 +169,7 @@
 		}	
 	}
 	
-	private void deleteSubscription(String authInfo, String subscriptionKey) {
+	public void deleteSubscription(String authInfo, String subscriptionKey) {
 		try {
 			// Delete the entity and make sure it is removed
 			DeleteSubscription ds = new DeleteSubscription();
"
juddi,1655d203cf9ee335c8d6408539048999e109d440,"JUDDI-406, juddiv3.properties file references interface, fixed up exception handling.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@959389 13f79535-47bb-0310-9956-ffa450edef68
",2010-06-30 18:04:23,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
index 68b38d2..729be05 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/KeyGeneratorFactory.java
@@ -34,7 +34,7 @@
 	private static Logger log = Logger.getLogger(KeyGeneratorFactory.class);
 
 	// Key Generator default implementation
-	private static final String DEFAULT_IMPL = ""org.apache.juddi.keygen.DefaultKeyGenerator"";
+	private static final String DEFAULT_IMPL = ""org.apache.juddi.keygen.KeyGenerator"";
 
 	// the shared Key Generator instance
 	private static KeyGenerator keyGenerator = null;
@@ -76,19 +76,16 @@
 		try {
 			// Use Loader to locate & load the Key Generator implementation
 			keygenClass = org.apache.log4j.helpers.Loader.loadClass(className);
-		}
-		catch(ClassNotFoundException e) {
-			log.error(""The specified Key Generator class '"" + className + ""' was not found in classpath."");
-			log.error(e);
-		}
-	
-		try {
 			// try to instantiate the Key Generator implementation
 			keyGenerator = (KeyGenerator)keygenClass.newInstance();
-		}
-		catch(Exception e) {
-			log.error(""Exception while attempting to instantiate the implementation of Key Generator: "" + keygenClass.getName() + ""\n"" + e.getMessage());
-			log.error(e);
+		} catch(ClassNotFoundException cnfe) {
+			throw new RuntimeException(""The specified Key Generator class '"" + className + ""' was not found on classpath."",cnfe);
+		} catch(InstantiationException ie) {
+			throw new RuntimeException(""The specified Key Generator class '"" + className + ""' cannot be instantiated."",ie);
+		} catch(IllegalAccessException iae) {
+			throw new RuntimeException(""The specified Key Generator class '"" + className + ""' cannot be instantiated due to illegal access."",iae);
+		} catch(Exception e) {
+			throw new RuntimeException(""Exception while attempting to instantiate the implementation of Key Generator: "" + keygenClass.getName() + ""\n"" + e.getMessage());
 		}
 	
 		return keyGenerator;
"
juddi,394e7a5e7d22883ff2b4e654903e437fcf1f83d9,"JUDDI-396
Make sure we use the findQualifiers from the appropriate query when
doing an embedded TModel search.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@959375 13f79535-47bb-0310-9956-ffa450edef68
",2010-06-30 16:57:57,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 5fd06b8..99526ea 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -542,7 +542,7 @@
 		
 		if (findTmodel != null && tmodelBag != null) {
 			org.apache.juddi.query.util.FindQualifiers findQualifiers = new org.apache.juddi.query.util.FindQualifiers();
-			findQualifiers.mapApiFindQualifiers(fq);
+			findQualifiers.mapApiFindQualifiers(findTmodel.getFindQualifiers());
 
 			
 			List<?> tmodelKeysFound = null;
"
juddi,d10989d2135ed24ecdcb2b29061016422ddd6f5b,"JUDDI-392, adding the businessKey into the results.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941324 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-05 14:48:33,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 7630a0b..5fd06b8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -502,6 +502,7 @@
 	
 	public static RelatedBusinessesList getRelatedBusinessesList(FindRelatedBusinesses body, EntityManager em, Date modifiedAfter, Date modifiedBefore) throws DispositionReportFaultMessage {
 		RelatedBusinessesList result = new RelatedBusinessesList();
+		result.setBusinessKey(body.getBusinessKey());
 		ListDescription listDesc = new ListDescription();
 		result.setListDescription(listDesc);
 		
"
juddi,7f48ea4ae0fc9d44cd10c67c1759838d19018f09,"JUDDI-391, adding the keysOwned into the result.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941307 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-05 14:26:51,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 6b0276f..d8fd342 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.mapping;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
@@ -703,15 +704,21 @@
 		
 		org.uddi.api_v3.KeysOwned keysOwned = new org.uddi.api_v3.KeysOwned();
 		
-		Collections.sort((List<String>)businessKeys);
-		if (Collections.binarySearch((List<String>)businessKeys, modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey()) >= 0)
+		//converting resultList to simple List
+		List<String> businessKeyList = new ArrayList<String>();
+		for (Object businessKey : businessKeys) {
+			businessKeyList.add(String.valueOf(businessKey));
+		}
+		Collections.sort(businessKeyList);
+		if (Collections.binarySearch(businessKeyList, modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey()) >= 0)
 			keysOwned.setFromKey(modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey());
 		
-		if (Collections.binarySearch((List<String>)businessKeys, modelPublisherAssertion.getBusinessEntityByToKey().getEntityKey()) >= 0)
+		if (Collections.binarySearch(businessKeyList, modelPublisherAssertion.getBusinessEntityByToKey().getEntityKey()) >= 0)
 			keysOwned.setToKey(modelPublisherAssertion.getBusinessEntityByToKey().getEntityKey());
 		if (keysOwned.getFromKey() == null && keysOwned.getToKey() == null) {
 			throw new FatalErrorException(new ErrorMessage(""errors.invalidKey.KeysOwned""));
 		}
+		apiAssertionStatusItem.setKeysOwned(keysOwned);
 	}
 
 	public static void mapRelatedBusinessInfo(org.apache.juddi.model.PublisherAssertion modelPublisherAssertion,
"
juddi,5fae43c62096a0130441c97892ca20b0a60e135a,"JUDDI-376, leaving the create and lastNotified date on renewals.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941305 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-05 14:22:02,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 894a8c7..a1a4719 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -802,10 +802,16 @@
 				
 				org.apache.juddi.model.Subscription modelSubscription = new org.apache.juddi.model.Subscription();
 				
-				Object existingEntity = em.find(org.apache.juddi.model.Subscription.class, apiSubscription.getSubscriptionKey());
-				if (existingEntity != null) {
-					doRenewal((org.apache.juddi.model.Subscription)existingEntity, apiSubscription);
-					em.remove(existingEntity);
+				Object existing = em.find(org.apache.juddi.model.Subscription.class, apiSubscription.getSubscriptionKey());
+				if (existing != null) {
+					org.apache.juddi.model.Subscription existingEntity = (org.apache.juddi.model.Subscription) existing;
+					doRenewal(existingEntity, apiSubscription);
+					//carrying over the created and last notified dates if this is a renewal.
+					modelSubscription.setCreateDate(existingEntity.getCreateDate());
+					modelSubscription.setLastNotified(existingEntity.getLastNotified());
+					em.remove(existing);
+				} else {
+					modelSubscription.setCreateDate(new Date());
 				}
 	
 				doSubscriptionExpirationDate(apiSubscription);
@@ -813,8 +819,7 @@
 				MappingApiToModel.mapSubscription(apiSubscription, modelSubscription);
 				
 				modelSubscription.setAuthorizedName(publisher.getAuthorizedName());
-				modelSubscription.setCreateDate(new Date());
-	
+				
 				// Add the matching keys to the match collection
 				List<?> keys = getSubscriptionMatches(apiSubscription.getSubscriptionFilter(), em);
 				if (keys != null && keys.size() > 0) {
"
juddi,14ef2834f1347a4694ce76f16dacdf9bdc768fdc,"JUDDI-393, fixing NPE take two :)

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941120 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-05 00:18:14,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 3d966fd..dc64b01 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -217,8 +217,8 @@
 			}
 			org.apache.juddi.model.BindingTemplate bindingTemplate= em.find(org.apache.juddi.model.BindingTemplate.class, modelSubscription.getBindingKey());
 			NotifySubscriptionListener body = new NotifySubscriptionListener();
-			if (resultList.getServiceList()!=null || (resultList.getServiceList().getServiceInfos()!=null &&
-					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0)) {
+			if (resultList.getServiceList()!=null && resultList.getServiceList().getServiceInfos()!=null &&
+					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0) {
 				resultList.getServiceList().setServiceInfos(null);
 			}
 			body.setSubscriptionResultsList(resultList);
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/Registry.java b/juddi-core/src/main/java/org/apache/juddi/Registry.java
index 9f7d160..cea15aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/Registry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/Registry.java
@@ -57,7 +57,8 @@
 			}
 			if (AppConfig.getConfiguration().getBoolean(Property.JUDDI_JNDI_REGISTRATION, false)) {
 				try {
-					JNDIRegistration.getInstance().register();
+					int port = AppConfig.getConfiguration().getInteger(Property.JUDDI_RMI_PORT,0);
+					JNDIRegistration.getInstance().register(port);
 				} catch (NamingException e) {
 					log.error(""Unable to Register jUDDI services with JNDI. "" + e.getMessage(), e);
 				}
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index d6a8eb7..f4e0ada 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -31,6 +31,7 @@
 	public final static String JUDDI_SUBSCRIPTION_CHUNKEXPIRATION_MINUTES=""juddi.subscription.chunkexpiration.minutes"";
 	public final static String JUDDI_JNDI_REGISTRATION           =""juddi.jndi.registration"";
 	public final static String JUDDI_SUBSCRIPTION_NOTIFICATION   =""juddi.subscription.notification"";
+	public final static String JUDDI_RMI_PORT                    =""juddi.rmi.port"";
 	
 	public final static String DEFAULT_CRYPTOR                   =""org.apache.juddi.cryptor.DefaultCryptor"";
 	public final static String DEFAULT_USERSFILE                 =""juddi-users.properties"";
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
index 47dd06b..99fef7b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
@@ -62,37 +62,37 @@
 	 * Registers the Publish and Inquiry Services to JNDI and instantiates a
 	 * instance of each so we can remotely attach to it later.
 	 */
-	public void register() {
+	public void register(int port) {
 		try {
 			Context juddiContext = context.createSubcontext(JUDDI);
 			
-			securityService = new UDDISecurityService();
+			securityService = new UDDISecurityService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_SECURITY_SERVICE + "", "" + securityService.getClass());
-			juddiContext.rebind(UDDI_SECURITY_SERVICE, securityService);
+			juddiContext.bind(UDDI_SECURITY_SERVICE, securityService);
 			
-			publicationService = new UDDIPublicationService();
+			publicationService = new UDDIPublicationService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_PUBLICATION_SERVICE + "", "" + publicationService.getClass());
-			juddiContext.rebind(UDDI_PUBLICATION_SERVICE, publicationService);
+			juddiContext.bind(UDDI_PUBLICATION_SERVICE, publicationService);
 			
-			inquiryService = new UDDIInquiryService();
+			inquiryService = new UDDIInquiryService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_INQUIRY_SERVICE + "", "" + inquiryService.getClass());
-			juddiContext.rebind(UDDI_INQUIRY_SERVICE, inquiryService);
+			juddiContext.bind(UDDI_INQUIRY_SERVICE, inquiryService);
 			
-			subscriptionService = new UDDISubscriptionService();
+			subscriptionService = new UDDISubscriptionService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_SUBSCRIPTION_SERVICE + "", "" + subscriptionService.getClass());
-			juddiContext.rebind(UDDI_SUBSCRIPTION_SERVICE, subscriptionService);
+			juddiContext.bind(UDDI_SUBSCRIPTION_SERVICE, subscriptionService);
 			
-			subscriptionListenerService = new UDDISubscriptionListenerService();
+			subscriptionListenerService = new UDDISubscriptionListenerService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_SUBSCRIPTION_LISTENER_SERVICE + "", "" + subscriptionListenerService.getClass());
-			juddiContext.rebind(UDDI_SUBSCRIPTION_LISTENER_SERVICE, subscriptionListenerService);
+			juddiContext.bind(UDDI_SUBSCRIPTION_LISTENER_SERVICE, subscriptionListenerService);
 			
-			custodyTransferService = new UDDICustodyTransferService();
+			custodyTransferService = new UDDICustodyTransferService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + UDDI_CUSTODY_TRANSFER_SERVICE + "", "" + custodyTransferService.getClass());
-			juddiContext.rebind(UDDI_CUSTODY_TRANSFER_SERVICE, custodyTransferService);
+			juddiContext.bind(UDDI_CUSTODY_TRANSFER_SERVICE, custodyTransferService);
 			
-			publisherService = new JUDDIApiService();
+			publisherService = new JUDDIApiService(port);
 			if (log.isDebugEnabled()) log.debug(""Setting "" + JUDDI_PUBLISHER_SERVICE + "", "" + publisherService.getClass());
-			juddiContext.rebind(JUDDI_PUBLISHER_SERVICE, publisherService);
+			juddiContext.bind(JUDDI_PUBLISHER_SERVICE, publisherService);
 			
 		} catch (Exception e) {
 			log.error(e.getMessage(),e);
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/JUDDIApiService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/JUDDIApiService.java
index 6312a5c..8d3c104 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/JUDDIApiService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/JUDDIApiService.java
@@ -48,8 +48,8 @@
 	private static final long serialVersionUID = 1404805184314952141L;
 	private JUDDIApiPortType juddiAPI = new JUDDIApiImpl();
 	
-	protected JUDDIApiService() throws RemoteException {
-		super();
+	protected JUDDIApiService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public void deletePublisher(DeletePublisher body)
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
index daff7b1..cc880ca 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDICustodyTransferService.java
@@ -40,8 +40,8 @@
 	private static final long serialVersionUID = 8900970766388210839L;
 	private UDDICustodyTransferPortType custodyTransfer = new UDDICustodyTransferImpl();
 	
-	protected UDDICustodyTransferService() throws RemoteException {
-		super();
+	protected UDDICustodyTransferService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public void discardTransferToken(DiscardTransferToken body)
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
index f352770..6a4c951 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIInquiryService.java
@@ -51,8 +51,8 @@
 	private static final long serialVersionUID = -8384112899703963130L;
 	private UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
 
-	protected UDDIInquiryService() throws RemoteException {
-		super();
+	protected UDDIInquiryService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public BindingDetail findBinding(FindBinding body)
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
index a1bb028..f780905 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
@@ -55,8 +55,8 @@
 	private static final long serialVersionUID = 8342463046574333026L;
 	private UDDIPublicationPortType publication = new UDDIPublicationImpl();
 	
-	protected UDDIPublicationService() throws RemoteException {
-		super();
+	protected UDDIPublicationService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public DispositionReport addPublisherAssertions(AddPublisherAssertions body)
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
index 371c50c..128d53b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISecurityService.java
@@ -36,8 +36,8 @@
 	private static final long serialVersionUID = -7931578658303681458L;
 	private UDDISecurityPortType security = new UDDISecurityImpl();
 	
-	protected UDDISecurityService() throws RemoteException {
-		super();
+	protected UDDISecurityService(int port) throws RemoteException {
+		super(port);
 	}
 	
 	public void discardAuthToken(DiscardAuthToken body)
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
index 24d130f..953e8c3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionListenerService.java
@@ -36,8 +36,8 @@
 	private static final long serialVersionUID = -5103095115366760255L;
 	private UDDISubscriptionListenerPortType subscriptionListener = new UDDISubscriptionListenerImpl();
 	
-	protected UDDISubscriptionListenerService() throws RemoteException {
-		super();
+	protected UDDISubscriptionListenerService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public DispositionReport notifySubscriptionListener(
"
juddi,b41a37edbf40450b05181080588e026eb8c6b739,"JUDDI-386, Allow specifying the RMI port.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@941051 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-04 21:25:18,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
index 5d86542..1c0b319 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDISubscriptionService.java
@@ -41,8 +41,8 @@
 	private static final long serialVersionUID = 3534214581063707293L;
 	private UDDISubscriptionPortType subscription = new UDDISubscriptionImpl();
 	
-	protected UDDISubscriptionService() throws RemoteException {
-		super();
+	protected UDDISubscriptionService(int port) throws RemoteException {
+		super(port);
 	}
 
 	public void deleteSubscription(DeleteSubscription body)
"
juddi,5da5799bae32fb596dbc1583d2a7b896d9051510,"JUDDI-389 fixing NPE

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@940558 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-03 18:27:49,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 86380de..3d966fd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -217,8 +217,8 @@
 			}
 			org.apache.juddi.model.BindingTemplate bindingTemplate= em.find(org.apache.juddi.model.BindingTemplate.class, modelSubscription.getBindingKey());
 			NotifySubscriptionListener body = new NotifySubscriptionListener();
-			if (resultList.getServiceList().getServiceInfos()!=null &&
-					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0) {
+			if (resultList.getServiceList()!=null || (resultList.getServiceList().getServiceInfos()!=null &&
+					resultList.getServiceList().getServiceInfos().getServiceInfo().size() == 0)) {
 				resultList.getServiceList().setServiceInfos(null);
 			}
 			body.setSubscriptionResultsList(resultList);
"
juddi,46cb4ffe38cac8ae4b36080c66106e31db28366b,"JUDDI-388, fixing login issue. This issue only existed on the trunk as a result of code recently added.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@940528 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-03 17:38:17,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index a42dbdd..7e7e9f6 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -44,16 +44,6 @@
 		super.init(config);
 		try {
 			manager = WebHelper.getUDDIClerkManager(config.getServletContext());
-			if (manager==null) {
-				String clientConfigFile = config.getInitParameter(UDDI_CLIENT_CONFIG_FILE);
-				if (clientConfigFile==null) clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
-				manager = new UDDIClerkManager(clientConfigFile);
-				logger.info(""Starting Clerk Manager "" + manager.getName() + ""..."");
-				manager.start();
-			} else {
-				logger.debug(manager.getName() + "" already registered to the UDDIClientContainer."");
-			}
-			
 		} catch (Exception e) {
 			logger.error(""UDDI-client could not be started for manager "" + manager.getName() + "". ""
 					+ e.getMessage(), e);
"
juddi,46cb4ffe38cac8ae4b36080c66106e31db28366b,"JUDDI-388, fixing login issue. This issue only existed on the trunk as a result of code recently added.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@940528 13f79535-47bb-0310-9956-ffa450edef68
",2010-05-03 17:38:17,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
index 5c8abe6..0c99b5f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/WebHelper.java
@@ -7,23 +7,62 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.v3.client.ClassUtil;
 import org.apache.juddi.v3.client.transport.Transport;
+import org.apache.log4j.Logger;
 
 public class WebHelper {
 	
-	public static String JUDDI_CLIENT_MANAGER_INSTANCE  = ""juddi.client.manager.instance"";
-	public static String JUDDI_CLIENT_HOMENODE_INSTANCE = ""juddi.client.homenode.instance"";
+	public static Logger logger = Logger.getLogger(WebHelper.class);
+	public static String JUDDI_CLIENT_MANAGER_INSTANCE   = ""juddi.client.manager.instance"";
+	public static String JUDDI_CLIENT_HOMENODE_INSTANCE  = ""juddi.client.homenode.instance"";
 	public static String JUDDI_CLIENT_TRANSPORT_INSTANCE = ""juddi.client.transport.instance"";
 	
 
-	public static UDDIClerkManager getUDDIClerkManager(ServletContext servletContext) throws ConfigurationException {
+	/**
+	 * Checks the servlet context for the manager defined in the web context, this means 
+	 * @param servletContext
+	 * @return
+	 * @throws ConfigurationException
+	 */
+	public static UDDIClerkManager getUDDIClerkManager(ServletContext servletContext) throws ConfigurationException 
+	{
 		UDDIClerkManager manager = (UDDIClerkManager) servletContext.getAttribute(JUDDI_CLIENT_MANAGER_INSTANCE);
 		if (manager==null) {
-			manager = UDDIClientContainer.getUDDIClerkManager(getUDDIClerkManagerName(servletContext));
+			String managerName = String.valueOf(servletContext.getAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME));
+			if (managerName!=null) {
+				try {
+					manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					logger.info(""Manager "" + managerName + "" was already started."");
+					return manager;
+				} catch (ConfigurationException ce) {
+					logger.debug(""Manager "" + managerName + "" is not yet started."");
+				}
+			}
+			String clientConfigFile = servletContext.getInitParameter(UDDIClerkServlet.UDDI_CLIENT_CONFIG_FILE);
+			if (clientConfigFile==null) clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
+			
+			logger.info(""Reading the managerName from the clientConfig file "" + clientConfigFile);
+			manager = new UDDIClerkManager(clientConfigFile);
+			if (clientConfigFile==null && manager.getName()==null) {
+				logger.warn(""Deprecated, manager name set to 'default', however it should be provided in the uddi.xml"");
+				managerName = ""default"";
+			}
+			if (manager.getName()!=null) {
+				logger.info(""Starting Clerk Manager "" + manager.getName() + ""..."");
+			} else {
+				throw new ConfigurationException(""A manager name needs to be specified in the client config file."");
+			}
+			manager.start();
+			servletContext.setAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME, manager.getName());
 			servletContext.setAttribute(JUDDI_CLIENT_MANAGER_INSTANCE, manager);
 		}
 		return manager;
 	}
-	
+	/**
+	 * 
+	 * @param servletContext
+	 * @return
+	 * @throws ConfigurationException
+	 */
 	public static UDDINode getUDDIHomeNode(ServletContext servletContext) throws ConfigurationException {
 		UDDINode homeNode = (UDDINode) servletContext.getAttribute(JUDDI_CLIENT_HOMENODE_INSTANCE);
 		if (homeNode==null) {
@@ -52,37 +91,15 @@
 	public static Transport getTransport(ServletContext servletContext, UDDINode remoteNode) 
 	   throws ConfigurationException, ClassNotFoundException, IllegalArgumentException, 
 	    SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException 
-{
-	Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName());
-	if (transport==null) {
-		UDDIClerkManager manager = getUDDIClerkManager(servletContext);
-		Class<?> transportClass = ClassUtil.forName(remoteNode.getProxyTransport(), Transport.class);
-		transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(manager.getName(),remoteNode.getName());
-		servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName(), transport);
-	}
-	return transport;
-}
-	
-	private static String getUDDIClerkManagerName(ServletContext servletContext) throws ConfigurationException {
-		
-		if (servletContext.getAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME) != null) {
-			return String.valueOf(servletContext.getAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME));
-		} else {
-			String fileName = servletContext.getInitParameter(UDDIClerkServlet.UDDI_CLIENT_CONFIG_FILE);
-		    if (fileName!=null) {
-		    	UDDIClerkManager manager = new UDDIClerkManager(fileName);
-				manager.getName();
-		    	servletContext.setAttribute(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME, manager.getName());
-		    	return manager.getName();
-		    } else {
-		    	String managerName = String.valueOf(servletContext.getInitParameter(UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME));
-		    	if (managerName!=null) {
-		    		return managerName;
-		    	} else {
-		    		throw new ConfigurationException(""ManagerName could not be obtained. Please check your web.xml and"" +
-		    				"" make sure to either specify the "" + UDDIClerkServlet.UDDI_CLIENT_CONFIG_FILE + "" or "" + UDDIClerkServlet.UDDI_CLIENT_MANAGER_NAME);
-		    	}
-		    }
+	{
+		Transport transport = (Transport) servletContext.getAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName());
+		if (transport==null) {
+			UDDIClerkManager manager = getUDDIClerkManager(servletContext);
+			Class<?> transportClass = ClassUtil.forName(remoteNode.getProxyTransport(), Transport.class);
+			transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(manager.getName(),remoteNode.getName());
+			servletContext.setAttribute(JUDDI_CLIENT_TRANSPORT_INSTANCE + ""-"" + remoteNode.getName(), transport);
 		}
+		return transport;
 	}
+	
 }
"
juddi,4f125fac74e94c662b437b0aadc23f03cc1be2a1,"JUDDI-384:  fixing single keyed-reference group validation issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@935950 13f79535-47bb-0310-9956-ffa450edef68
",2010-04-20 15:03:56,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index f194ba1..5a3bf6a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -300,13 +300,13 @@
 		
 		// If category bag does exist, it must have at least one element
 		List<KeyedReference> elems = categories.getKeyedReference();
-		if (elems == null || elems.size() == 0)
+		List<KeyedReferenceGroup> krgs = categories.getKeyedReferenceGroup();
+		if ((elems == null || elems.size() == 0) && (krgs == null || krgs.size() == 0))
 			throw new ValueNotAllowedException(new ErrorMessage(""errors.categorybag.NoInput""));
 		
 		for (KeyedReference elem : elems) {
 			validateKeyedReference(elem);
 		}
-		List<KeyedReferenceGroup> krgs = categories.getKeyedReferenceGroup();
 		for (KeyedReferenceGroup elem : krgs) {
 			validateKeyedReferenceGroup(elem);
 		}
"
juddi,1e5df6c9dd802ee04b9740f74326ca64d755719a,"JUDDI-385
Find the message from the very base exception and pass that on.    Also protect against sending null to URLEncoder.encode to avoid NPE's.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@934957 13f79535-47bb-0310-9956-ffa450edef68
",2010-04-16 15:21:00,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index d7b2d79..f55f309 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -158,7 +158,19 @@
       document.appendChild(element.getFirstChild());
       setResponse(document);
     } catch (InvocationTargetException ite) {
-    	String message = URLEncoder.encode(ite.getTargetException().getMessage());
+    	Throwable t = ite.getTargetException();
+    	String errorMessage = """";
+    	if (t.getCause() != null) {
+    		while (t.getCause() != null) {
+    			t = t.getCause();
+    		}
+    		errorMessage = t.getMessage() != null ?
+    				t.getMessage() : """";
+    	} else {
+    		errorMessage = ite.getTargetException().getMessage() != null ? 
+    				ite.getTargetException().getMessage() : """";
+    	}
+    	String message = URLEncoder.encode(errorMessage);
     	log.error(message);
     	setException(message);
     }
"
juddi,633ba5fd0a13f258865d723f5a0bd473920c57ee,"JUDDI-381
Make the publisher install work on Windows, where there doesn't seem
to be a ""!"" separating the JAR and the juddi_install_data in the URI.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@925496 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-20 00:13:08,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index edd8ada..273c4eb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -510,10 +510,23 @@
 		        } 
 		    }
 		} else {
-			String[] paths = path.split(""!"");
+			String[] paths = {};
+			Enumeration<JarEntry> en = null;
 			try {
+
+				if (path.indexOf(""!"") > 0) {
+					paths = path.split(""!"");
+					en = new JarFile(new File(new URI(paths[0]))).entries();
+				} else {
+					// Handle Windows / jboss-5.1.0 case
+					if (path.indexOf("".jar"") > 0) {
+						paths = path.split("".jar"");
+						paths[0] = paths[0] + "".jar"";
+						en = new JarFile(new File(paths[0])).entries();
+					}
+				}
+			
 				log.debug(""Discovering the Publisher XML data files in jar: "" + paths[0]);
-				Enumeration<JarEntry> en = new JarFile(new File(new URI(paths[0]))).entries();
 				while (en.hasMoreElements()) {
 					String name = en.nextElement().getName();
 					if (name.endsWith(FILE_PUBLISHER)) {
"
juddi,b4f954c09fc69e7fd7daa979d972c234d0d4bde2,"JUDDI-375 fixing NPE

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924918 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 17:43:38,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index c144aa2..ff59bf5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -84,13 +84,15 @@
 				if (subscription.getExpiresAfter()==null || subscription.getExpiresAfter().getTime() > startTime) {
 					try {
 						GetSubscriptionResults getSubscriptionResults = buildGetSubscriptionResults(subscription, new Date(scheduledExecutionTime()));
-						getSubscriptionResults.setSubscriptionKey(subscription.getSubscriptionKey());
-						UddiEntityPublisher publisher = new UddiEntityPublisher();
-						publisher.setAuthorizedName(subscription.getAuthorizedName());
-						SubscriptionResultsList resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
-						if (resultListContainsChanges(resultList)) {
-							log.info(""We have a change and need to notify.."");
-							notify(getSubscriptionResults,resultList);
+						if (getSubscriptionResults!=null) {
+							getSubscriptionResults.setSubscriptionKey(subscription.getSubscriptionKey());
+							UddiEntityPublisher publisher = new UddiEntityPublisher();
+							publisher.setAuthorizedName(subscription.getAuthorizedName());
+							SubscriptionResultsList resultList = subscriptionImpl.getSubscriptionResults(getSubscriptionResults, publisher);
+							if (resultListContainsChanges(resultList)) {
+								log.info(""We have a change and need to notify.."");
+								notify(getSubscriptionResults,resultList);
+							}
 						}
 					} catch (Exception e) {
 						log.error(""Could not obtain subscriptionResult for subscriptionKey "" 
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index f5cbcc0..d485a6a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -20,18 +20,16 @@
 import java.util.List;
 
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
 
-import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.FindResponse;
 import org.apache.juddi.portlets.client.service.FindService;
-import org.apache.juddi.v3.client.config.UDDIClerkManager;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.BusinessInfo;
 import org.uddi.api_v3.BusinessList;
 import org.uddi.api_v3.FindBusiness;
@@ -55,6 +53,7 @@
 	public FindResponse getBusinesses(String nameStr, String[] findQualifyers) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
 		FindResponse response = new FindResponse();
 		try {
@@ -72,11 +71,8 @@
 
 			logger.debug(""FindBusiness "" + findBusiness + "" sending findBusinesses request.."");
 			List<Business> businesses = new ArrayList<Business>();
-
-			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
+			
+			Transport transport = WebHelper.getTransport(session.getServletContext());
 			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
 			BusinessList businessList = inquiryService.findBusiness(findBusiness);
 			for (BusinessInfo businessInfo : businessList.getBusinessInfos().getBusinessInfo()) {
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index 7923535..c81d5d2 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -16,26 +16,22 @@
  */
 package org.apache.juddi.portlets.server.service;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.HashMap;
 import java.util.Map;
 
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
 
-import org.apache.commons.configuration.ConfigurationException;
-import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.model.ServiceBinding;
 import org.apache.juddi.portlets.client.service.InquiryResponse;
 import org.apache.juddi.portlets.client.service.InquiryService;
-import org.apache.juddi.v3.client.config.UDDIClerkManager;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.portlets.client.service.SearchResponse;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.BindingTemplate;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
@@ -58,29 +54,19 @@
 
 	private static final long serialVersionUID = 8509627428299232161L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private Transport transport = null;
 	
 	public InquiryServiceImpl() {
 		super();
 		
 	}
-	
-	private Transport getTransport() 
-		throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, SecurityException, InvocationTargetException, NoSuchMethodException {
-		if (transport==null) {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
-		}
-		return transport;
-	}
 
 	public SearchResponse queryJUDDI(String query) {
+		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		SearchResponse response = new SearchResponse();
-
 		 try {
-			 UDDIInquiryPortType inquiryService = getTransport().getUDDIInquiryService();
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
+			 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
 			 org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService uis = 
 				 new org.apache.juddi.v3.client.transport.wrapper.UDDIInquiryService();
        		 String reply = uis.inquire(inquiryService, query);
@@ -102,8 +88,8 @@
 	
 	public InquiryResponse getTModelDetail(String authToken, String tModelKey) 
 	{
-		//HttpServletRequest request = this.getThreadLocalRequest();
-		//HttpSession session = request.getSession();
+		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		GetTModelDetail getTModelDetail = new GetTModelDetail();
 		getTModelDetail.setAuthInfo(authToken);
 		getTModelDetail.getTModelKey().add(tModelKey);
@@ -111,7 +97,8 @@
 		logger.debug(""TModelDetail "" + getTModelDetail + "" sending tmodelDetail request.."");
 		Map<String,String> tmodelDetailMap = new HashMap<String,String>();
 		try {
-        	 UDDIInquiryPortType inquiryService = getTransport().getUDDIInquiryService();
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
+        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
         	 TModelDetail tmodelDetail = inquiryService.getTModelDetail(getTModelDetail);
         	 //demo code fix up what to return for real.
         	 for (TModel tmodel : tmodelDetail.getTModel()) {
@@ -136,6 +123,7 @@
 	public InquiryResponse getBusinessDetail(String authToken, String businessKey) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
 		
 		GetBusinessDetail getBusinessDetail = new GetBusinessDetail();
@@ -144,7 +132,8 @@
 		InquiryResponse response = new InquiryResponse();
 		logger.debug(""BusinessDetail "" + getBusinessDetail + "" sending businessDetail request.."");
 		try {
-        	 UDDIInquiryPortType inquiryService = getTransport().getUDDIInquiryService();
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
+        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
         	 BusinessDetail businessDetail = inquiryService.getBusinessDetail(getBusinessDetail);
         	 for (BusinessEntity businessEntity : businessDetail.getBusinessEntity()) {
         		 Business business = new Business(
@@ -183,8 +172,8 @@
 	
 	public InquiryResponse getServiceDetail(String authToken, String serviceKey) 
 	{
-		
 		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
 	
 		GetServiceDetail getServiceDetail = new GetServiceDetail();
@@ -193,7 +182,8 @@
 		InquiryResponse response = new InquiryResponse();
 		logger.debug(""ServiceDetail "" + getServiceDetail + "" sending serviceDetail request.."");
 		try {
-        	 UDDIInquiryPortType inquiryService = getTransport().getUDDIInquiryService();
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
+        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
         	 ServiceDetail serviceDetail = inquiryService.getServiceDetail(getServiceDetail);
         	 for (BusinessService businessService : serviceDetail.getBusinessService()) {
         		 Service service = new Service(
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
index 31e4192..b292a9f 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
@@ -24,7 +24,6 @@
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.beanutils.BeanUtils;
-import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api_v3.DeletePublisher;
 import org.apache.juddi.api_v3.GetAllPublisherDetail;
 import org.apache.juddi.api_v3.GetPublisherDetail;
@@ -34,11 +33,10 @@
 import org.apache.juddi.portlets.client.service.JUDDIApiResponse;
 import org.apache.juddi.portlets.client.service.JUDDIApiService;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 
 import com.google.gwt.user.server.rpc.RemoteServiceServlet;
 /**
@@ -52,8 +50,15 @@
 	private Logger logger = Logger.getLogger(this.getClass());
 	
 	
+	public JUDDIApiServiceImpl() {
+		super();
+		// TODO Auto-generated constructor stub
+	}
+
 	public JUDDIApiResponse getPublishers(String authToken, String publisherId) 
 	{	
+		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		GetPublisherDetail getPublisherDetail = new GetPublisherDetail();
 		getPublisherDetail.setAuthInfo(authToken);
 		getPublisherDetail.getPublisherId().add(publisherId);
@@ -62,10 +67,7 @@
 		JUDDIApiResponse response = new JUDDIApiResponse();
 		List<Publisher> publishers = new ArrayList<Publisher>();
 		try {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
         	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
         	 PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
         	 //if the publisher is an admin, then return ALL publishers
@@ -99,11 +101,10 @@
 	
 	public JUDDIApiResponse savePublisher(String token, Publisher publisher) {
 		JUDDIApiResponse response = new JUDDIApiResponse();
+		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		try {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 SavePublisher savePublisher = new SavePublisher();
 	       	 savePublisher.setAuthInfo(token);
@@ -134,12 +135,11 @@
 	}
 	
 	public JUDDIApiResponse deletePublisher(String token, String publisherId) {
+		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		JUDDIApiResponse response = new JUDDIApiResponse();
 		try {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 DeletePublisher deletePublisher = new DeletePublisher();
 	         deletePublisher.setAuthInfo(token);
@@ -178,15 +178,13 @@
 		getPublisherDetail.getPublisherId().add(username);
 		
 		try {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
 	         JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	         PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
        	     org.apache.juddi.api_v3.Publisher publisher = publisherDetail.getPublisher().get(0);
        	     if (""true"".equalsIgnoreCase(publisher.getIsAdmin())) {
-       	    	logger.info(""managerName="" + manager.getClientConfig().getManagerName());
+       	    	UDDIClerkManager manager =  WebHelper.getUDDIClerkManager(session.getServletContext());
+       	    	logger.info(""managerName="" + manager.getName());
        	    	manager.restart();
        	    	response.setMessage(""Successfull manager restart."");
        	    	response.setSuccess(true);
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index 50928aa..924ed37 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -20,18 +20,16 @@
 import java.util.List;
 
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
 
-import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.PublicationResponse;
 import org.apache.juddi.portlets.client.service.PublicationService;
-import org.apache.juddi.v3.client.config.UDDIClerkManager;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.BusinessInfo;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.InfoSelection;
@@ -54,6 +52,7 @@
 	public PublicationResponse getBusinesses(String authToken, String infoSelection) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
+		HttpSession session = request.getSession();
 		String lang = request.getLocale().getLanguage();
 		
 		GetRegisteredInfo getRegistrationInfo = new GetRegisteredInfo();
@@ -64,10 +63,7 @@
 		logger.debug(""GetRegistrationInfo "" + getRegistrationInfo + "" sending get Busineses request.."");
 		List<Business> businesses = new ArrayList<Business>();
 		try {
-			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
+			 Transport transport = WebHelper.getTransport(session.getServletContext());
         	 UDDIPublicationPortType publicationService = transport.getUDDIPublishService();
         	 RegisteredInfo info = publicationService.getRegisteredInfo(getRegistrationInfo);
         	 for (BusinessInfo businessInfo : info.getBusinessInfos().getBusinessInfo()) {
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index ef86490..8b7312a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -21,21 +21,21 @@
 import java.security.Principal;
 import java.util.Map;
 
+import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.configuration.ConfigurationException;
-import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.service.SecurityResponse;
 import org.apache.juddi.portlets.client.service.SecurityService;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
-import org.apache.juddi.v3.client.config.UDDIClientContainer;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3.client.transport.TransportException;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.AuthToken;
+import org.uddi.api_v3.DiscardAuthToken;
 import org.uddi.api_v3.GetAuthToken;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISecurityPortType;
@@ -57,6 +57,7 @@
 	public SecurityResponse get(String username, String password) {
 		HttpServletRequest request = getThreadLocalRequest();
 		HttpSession session = request.getSession();
+		
 		log.debug(""User "" + username + "" sending token request.."");
 		SecurityResponse response = new SecurityResponse();
 		String token = (String) session.getAttribute(""AuthToken"");
@@ -71,32 +72,18 @@
 		} 
 		if (token==null) {
 			if (username==null) {
-				response.setSuccess(true);
+				log(""Could not obtain username, this session is invalid."");
+				response.setSuccess(false);
 				return response;
 			} else {
 				try {
-					AuthToken authToken = login(username, password, Constants.MANAGER_NAME, Constants.NODE_NAME);
+					AuthToken authToken = login(username, password, session.getServletContext());
 					response.setSuccess(true);
 					response.setResponse(authToken.getAuthInfo());
-					
 					session.setAttribute(""AuthToken"", authToken.getAuthInfo());
 					session.setAttribute(""UserName"", username);
-				
-					//upon success obtain tokens from other registries
-					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-					Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
-					for (UDDIClerk clerk : clerks.values()) {
-						if (username.equals(clerk.getPublisher())) {
-							try {
-								AuthToken clerkToken = login(clerk.getPublisher(), clerk.getPassword(), clerk.getManagerName(),clerk.getUDDINode().getName());
-								//set the clerkToken into the session
-								session.setAttribute(""token-"" + clerk.getName(), clerkToken.getAuthInfo());
-							} catch (Exception e) {
-								log.warn(""Could not obtain authToken for clerk="" + clerk.getName());
-							} 
-						}
-					}
 					
+				    setClerkAuthenticationTokensInSession(username);
 				} catch (Exception e) {
 					log.error(""Could not obtain token. "" + e.getMessage(), e);
 					response.setSuccess(false);
@@ -110,27 +97,76 @@
 				}
 			} 
 		} else {
-			response.setSuccess(true);
-			response.setResponse(token);
+			try {
+				setClerkAuthenticationTokensInSession(username);
+				response.setSuccess(true);
+				response.setResponse(token);
+			} catch (Exception e) {
+				log.error(""Could not obtain token. "" + e.getMessage(), e);
+				response.setSuccess(false);
+				response.setMessage(e.getMessage());
+				response.setErrorCode(""101"");
+			} catch (Throwable t) {
+				log.error(""Could not obtain token. "" + t.getMessage(), t);
+				response.setSuccess(false);
+				response.setMessage(t.getMessage());
+				response.setErrorCode(""101"");
+			}
 		}
 		response.setUsername(username);
 		return response;
 	}
 	
-	private AuthToken login(String username, String password, String managerName, String node) throws ConfigurationException, ClassNotFoundException,
+	private AuthToken login(String username, String password, ServletContext servletContext) throws ConfigurationException, ClassNotFoundException,
 		InstantiationException, IllegalAccessException, TransportException, DispositionReportFaultMessage, RemoteException, 
 		IllegalArgumentException, SecurityException, InvocationTargetException, NoSuchMethodException {
 		
-		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-		String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-        Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-        Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(managerName, node);  
+        Transport transport = WebHelper.getTransport(servletContext);
 		UDDISecurityPortType securityService = transport.getUDDISecurityService();
 		GetAuthToken getAuthToken = new GetAuthToken();
 		getAuthToken.setUserID(username);
 		getAuthToken.setCred(password);
 		AuthToken authToken = securityService.getAuthToken(getAuthToken);
-		log.info(""User "" + username + "" obtained token from node="" + node);
+		log.info(""User "" + username + "" obtained token from node="" + WebHelper.getUDDIHomeNode(servletContext).getName());
 		return authToken;
 	}
+	
+	public void setClerkAuthenticationTokensInSession(String username) throws ConfigurationException {
+		
+		HttpServletRequest request = getThreadLocalRequest();
+		HttpSession session = request.getSession();
+		//upon success obtain tokens from other registries
+		UDDIClerkManager manager = WebHelper.getUDDIClerkManager(session.getServletContext());
+		Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
+		for (UDDIClerk clerk : clerks.values()) {
+			//only setting token for the clerks of the current user/publisher
+			if (username.equals(clerk.getPublisher())) {
+				try {
+					if (session.getAttribute(""token-"" + clerk.getName())==null) {
+						AuthToken clerkToken = login(clerk.getPublisher(), clerk.getPassword(), session.getServletContext());
+						//set the clerkToken into the session
+						session.setAttribute(""token-"" + clerk.getName(), clerkToken.getAuthInfo());
+					}
+				} catch (Exception e) {
+					log.warn(""Could not obtain authToken for clerk="" + clerk.getName());
+				} 
+			}
+		}
+	}
+	
+	public void logout(String username) throws ConfigurationException {
+		try {
+			HttpServletRequest request = getThreadLocalRequest();
+			HttpSession session = request.getSession();
+			String token = (String) session.getAttribute(""AuthToken"");
+			Transport transport = WebHelper.getTransport(session.getServletContext());
+			UDDISecurityPortType securityService = transport.getUDDISecurityService();
+			DiscardAuthToken discardAuthToken = new DiscardAuthToken();
+			discardAuthToken.setAuthInfo(token);
+			securityService.discardAuthToken(discardAuthToken);
+			log.info(""User "" + username + "" invalided token"");
+		} catch (Exception e) {
+			log.error(e.getMessage(),e);
+		}
+	}
 }
"
juddi,3ca5fbe513f20d415e62efa28a1401ca99e0ad2f,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924564 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-18 00:07:53,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
index 0c8feea..ca7f27c 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
@@ -45,10 +45,10 @@
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.config.UDDINode;
+import org.apache.juddi.v3.client.config.WebHelper;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.Loader;
 import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.GetSubscriptionResults;
@@ -86,11 +86,12 @@
 		try {
 			boolean isMatchingClerk=false;
 			UDDIClerk toClerk = null;
-			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			UDDIClerkManager manager = WebHelper.getUDDIClerkManager(session.getServletContext());
+			UDDINode homeNode = WebHelper.getUDDIHomeNode(session.getServletContext());
 			Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
 			for (UDDIClerk clerk : clerks.values()) {
 				if (publisher.equals(clerk.getPublisher()) 
-						&& Constants.NODE_NAME.equals(clerk.getUDDINode().getName())) {
+						&& homeNode.getName().equals(clerk.getUDDINode().getName())) {
 					toClerk = clerk;
 				}
 			}
@@ -162,7 +163,8 @@
 		logger.info(""Sending saveSubscriptions request.."");
 		try {
 			//before sending this we need to ready the listener node
-			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			UDDIClerkManager manager = WebHelper.getUDDIClerkManager(session.getServletContext());
+			UDDINode homeNode = WebHelper.getUDDIHomeNode(session.getServletContext());
 			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
 			UDDIClerk toClerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getToClerkName());
 			if (toClerk==null) {
@@ -170,16 +172,14 @@
 				Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
 				for (UDDIClerk uddiClerk : clerks.values()) {
 					if (publisher.equals(uddiClerk.getPublisher()) 
-							&& Constants.NODE_NAME.equals(uddiClerk.getUDDINode().getName())) {
-						toClerk = clerk;
+							&& homeNode.getName().equals(uddiClerk.getUDDINode().getName())) {
+						toClerk = uddiClerk;
 					}
 				}
 			}
 			
-			logger.info(""Updating default UDDI server.."");
-			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> defaultTransportClass = ClassUtil.forName(defaultClazz, Transport.class); 
-			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME); 
+			logger.info(""Updating homeNode server using jUDDI specific API.."");
+			Transport defaultTransport = WebHelper.getTransport(session.getServletContext());
 			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
 			
 			//making sure our node info is there and up to date.
@@ -217,10 +217,7 @@
 			logger.debug(""Saved ClientSubscriptionInfo to the default UDDI server"");
 			
 			//the listening server is ready; now add the subscription
-			
-			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
-			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class); 
-			Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(clerk.getUDDINode().getName()); 
+			Transport transport = WebHelper.getTransport(session.getServletContext(), clerk.getUDDINode());
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
 			List<org.uddi.sub_v3.Subscription> subscriptionList = new ArrayList<org.uddi.sub_v3.Subscription>();
 			org.uddi.sub_v3.Subscription subscription = new org.uddi.sub_v3.Subscription();
@@ -287,33 +284,50 @@
 
 		logger.info(""Sending deleteSubscriptions request for subscriptionKey="" 
 				+ modelSubscription.getSubscriptionKey());
+		
+		String error = null;
 		try {
-			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
-			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
-			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(clerk.getManagerName(),clerk.getUDDINode().getName()); 
-			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
-			DeleteSubscription deleteSubscription = new DeleteSubscription();
-			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
-			deleteSubscription.setAuthInfo(authToken);
-			deleteSubscription.getSubscriptionKey().add(modelSubscription.getSubscriptionKey());
-			subscriptionService.deleteSubscription(deleteSubscription);
-			
-			//now remove it from the listener UDDI server too
-			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> defaultTransportClass = ClassUtil.forName(defaultClazz, Transport.class); 
-			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME); 
-			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
-			
-			DeleteClientSubscriptionInfo deleteClientSubscriptionInfo = new DeleteClientSubscriptionInfo();
-			deleteClientSubscriptionInfo.setAuthInfo(userAuthToken);
-			deleteClientSubscriptionInfo.getSubscriptionKey().add(modelSubscription.getSubscriptionKey());
-			//remove the clientSubscription to the listening UDDI default server.
-			juddiApiService.deleteClientSubscriptionInfo(deleteClientSubscriptionInfo);
-			logger.debug(""Deleted ClientSubscriptionInfo to the default UDDI server"");
-			
-			response.setSuccess(true);
+		
+			try {
+				UDDIClerkManager manager = WebHelper.getUDDIClerkManager(session.getServletContext());
+				UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
+				Transport transport = WebHelper.getTransport(session.getServletContext(), clerk.getUDDINode());
+				UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
+				DeleteSubscription deleteSubscription = new DeleteSubscription();
+				String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
+				deleteSubscription.setAuthInfo(authToken);
+				deleteSubscription.getSubscriptionKey().add(modelSubscription.getSubscriptionKey());
+				subscriptionService.deleteSubscription(deleteSubscription);
+				logger.info(""Deleted Subscription "" + modelSubscription.getSubscriptionKey()
+						+ "" from UDDI server "" + clerk.getUDDINode().getName());
+			} catch (Exception e) {
+				error = ""Could not delete subscription. Reason: "" + e.getMessage();
+				logger.error(error, e);
+			}
+			try {
+				//now remove it from the listener UDDI server too
+				Transport transport = WebHelper.getTransport(session.getServletContext());
+				JUDDIApiPortType juddiApiService = transport.getJUDDIApiService();
+				
+				DeleteClientSubscriptionInfo deleteClientSubscriptionInfo = new DeleteClientSubscriptionInfo();
+				deleteClientSubscriptionInfo.setAuthInfo(userAuthToken);
+				deleteClientSubscriptionInfo.getSubscriptionKey().add(modelSubscription.getSubscriptionKey());
+				//remove the clientSubscription to the listening UDDI default server.
+				juddiApiService.deleteClientSubscriptionInfo(deleteClientSubscriptionInfo);
+				logger.info(""Deleted ClientSubscriptionInfo to the default UDDI server"");
+				
+				response.setSuccess(true);
+			} catch (Exception e) {
+				if (error==null) {
+					error = ""Could not delete clientSubscriptionInfo. Reason: "" + e.getMessage();
+				} else {
+					error += "" Could not delete clientSubscriptionInfo. Reason: "" + e.getMessage();
+				}
+				logger.error(error, e);
+			}
+			if (error!=null) {
+				throw new Exception(error);
+			}
 		} catch (Exception e) {
 			logger.error(""Could not delete subscription. "" + e.getMessage(), e);
 			response.setSuccess(false);
@@ -348,16 +362,12 @@
 			coverage.setEndPoint(calendarEnd);
 			getSubscriptionResults.setCoveragePeriod(coverage);
 			
-			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
-			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
-			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
+			String authToken = (String) session.getAttribute(""token-"" + modelSubscription.getFromClerkName());
 			getSubscriptionResults.setAuthInfo(authToken);
             SyncSubscription syncSubscription = new SyncSubscription();
             syncSubscription.getGetSubscriptionResultsList().add(getSubscriptionResults);
 			
-			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	        Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
-	        Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
+	        Transport transport = WebHelper.getTransport(session.getServletContext());
        	    JUDDIApiPortType apiService = transport.getJUDDIApiService();
 			
        	    syncSubscription.setAuthInfo(userAuthToken);
"
juddi,5ac60cf07453b0c8cc70d2247a56cc0988d652bb,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924538 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 22:44:57,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
index d4ba012..6c1d058 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/BackGroundRegistration.java
@@ -16,6 +16,7 @@
  */
 package org.apache.juddi.v3.client.config;
 
+import org.apache.commons.configuration.ConfigurationException;
 import org.apache.log4j.Logger;
 
 public class BackGroundRegistration implements Runnable {
@@ -30,13 +31,19 @@
 	}
 
 	public void run() {
-		log.info(""Starting UDDI Clerks for manager "" + manager.getClientConfig().getManagerName() + ""..."");
-		if (manager.getClientConfig().isRegisterOnStartup()) {
-			manager.saveClerkAndNodeInfo();
-			manager.registerAnnotatedServices();
-			manager.xRegister();
+		try {
+			UDDIClientContainer.addClerkManager(manager);
+			if (UDDIClientContainer.getUDDIClerkManager(manager.getName())!=null && manager.getClientConfig().isRegisterOnStartup()) {
+				log.info(""Starting UDDI Clerks for manager "" + manager.getClientConfig().getManagerName() + ""..."");
+				manager.saveClerkAndNodeInfo();
+				manager.registerAnnotatedServices();
+				manager.xRegister();
+				log.info(""Clerks started succesfully for manager "" + manager.getClientConfig().getManagerName());
+			} else {
+				log.debug(manager.getName() + "" already registered to the UDDIClientContainer."");
+			}
+		} catch (ConfigurationException e) {
+			log.error(e.getMessage(),e);
 		}
-		UDDIClientContainer.addClerkManager(manager);
-		log.info(""Clerks started succesfully for manager "" + manager.getClientConfig().getManagerName());
 	}
 }
"
juddi,5ac60cf07453b0c8cc70d2247a56cc0988d652bb,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924538 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 22:44:57,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 4d220f3..1bdb3be 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -39,7 +39,7 @@
 public class ClientConfig 
 {
 	private final static String UDDI_CONFIG_FILENAME_PROPERTY = ""uddi.client.xml"";
-	public final static String UDDI_CONFIG = ""META-INF/uddi.xml"";
+	public final static String DEFAULT_UDDI_CONFIG = ""META-INF/uddi.xml"";
 	private Logger log = Logger.getLogger(ClientConfig.class);
 	private Configuration config = null;;
 	private Map<String,UDDINode> uddiNodes = null;
@@ -78,11 +78,10 @@
 			xmlConfig = new XMLConfiguration(configurationFile);
 		} else {
 			final String filename = System.getProperty(UDDI_CONFIG_FILENAME_PROPERTY);
-			if (filename != null) 
-			{
+			if (filename != null) {
 				xmlConfig = new XMLConfiguration(filename);
 			} else { 
-				xmlConfig = new XMLConfiguration(UDDI_CONFIG);	
+				xmlConfig = new XMLConfiguration(DEFAULT_UDDI_CONFIG);	
 			}
 		}
 		log.info(""Reading UDDI Client properties file "" + xmlConfig.getBasePath());
@@ -210,6 +209,18 @@
 		return uddiNodes;
 	}
 	
+	public UDDINode getHomeNode() throws ConfigurationException {
+		if (uddiNodes==null) throw new ConfigurationException(""The juddi client configuration "" +
+				""must contain at least one node element."");
+		if (uddiNodes.values().size()==1) return uddiNodes.values().iterator().next();
+		for (UDDINode uddiNode : uddiNodes.values()) {
+			if (uddiNode.isHomeJUDDI()) {
+				return uddiNode;
+			}
+		}
+		throw new ConfigurationException(""One of the node elements in the client configuration needs to a 'isHomeJUDDI=\""true\""' attribute."");
+	}
+	
 	public UDDINode getUDDINode(String nodeName) throws ConfigurationException {
 		if (! uddiNodes.containsKey(nodeName)) {
 			throw new ConfigurationException(""Node '"" + nodeName 
"
juddi,5ac60cf07453b0c8cc70d2247a56cc0988d652bb,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924538 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 22:44:57,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index 2d5ac2a..a42dbdd 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -32,6 +32,10 @@
 	private static final long serialVersionUID = -91998529871296125L;
 	private Logger logger = Logger.getLogger(UDDIClerkServlet.class);
 	UDDIClerkManager manager = null;
+	
+	public static final String UDDI_CLIENT_MANAGER_NAME = ""uddi.client.manager.name"";
+	public static final String UDDI_CLIENT_CONFIG_FILE  = ""uddi.client.config.file"";
+	
 	/**
 	 * Starting the UDDIClerkManager
 	 */
@@ -39,11 +43,17 @@
 	public void init(ServletConfig config) throws ServletException {
 		super.init(config);
 		try {
-			String clientConfigFile = config.getInitParameter(""uddi.client.config"");
-			if (clientConfigFile==null) clientConfigFile = ClientConfig.UDDI_CONFIG;
-			UDDIClerkManager manager = new UDDIClerkManager(clientConfigFile);
-			logger.info(""Starting Clerk Manager "" + manager.getName() + ""..."");
-			manager.start();
+			manager = WebHelper.getUDDIClerkManager(config.getServletContext());
+			if (manager==null) {
+				String clientConfigFile = config.getInitParameter(UDDI_CLIENT_CONFIG_FILE);
+				if (clientConfigFile==null) clientConfigFile = ClientConfig.DEFAULT_UDDI_CONFIG;
+				manager = new UDDIClerkManager(clientConfigFile);
+				logger.info(""Starting Clerk Manager "" + manager.getName() + ""..."");
+				manager.start();
+			} else {
+				logger.debug(manager.getName() + "" already registered to the UDDIClientContainer."");
+			}
+			
 		} catch (Exception e) {
 			logger.error(""UDDI-client could not be started for manager "" + manager.getName() + "". ""
 					+ e.getMessage(), e);
"
juddi,5ac60cf07453b0c8cc70d2247a56cc0988d652bb,"JUDDI-378 uddi.xml fileName and managerName used by the juddi-client should be fully configurable.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924538 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 22:44:57,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index 7a2b32a..9195a8c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -28,11 +28,19 @@
 	
 	public static UDDIClerkManager getUDDIClerkManager(String managerName) 
 		throws ConfigurationException {
-		if (managers.containsKey(managerName)) {
-			return (managers.get(managerName));
+
+		if (managerName!=null) {
+			if (managers.containsKey(managerName)) {
+				return (managers.get(managerName));
+			} else {
+				throw new ConfigurationException(""No manager by name "" + managerName + "" was found. "" +
+						"" Please check your client uddi.xml files, and make sure this manager was started"");
+			}
 		} else if (managers.size()==1 && managerName==null) {
+			log.debug(""Deprecated, please specify a manager name"");
 			return managers.values().iterator().next();
 		} else {
+			log.debug(""Deprecated, please specify a manager name"");
 			UDDIClerkManager manager = new UDDIClerkManager(null);
 			manager.start();
 			addClerkManager(manager);
@@ -62,4 +70,8 @@
 		return manager.getClientConfig().getUDDINode(""default"").getProxyTransport();
 	}
 	
+	
+	
+	
+	
 }
"
juddi,c250566869fd11d1ca8dff65f75c1cd266a8c68b,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924148 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 04:21:39,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index bb9f8be..721510c 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -190,31 +190,13 @@
 			return businessServiceList.get(0);
 		} catch (DispositionReportFaultMessage dr) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, serviceKey);
 		} catch (SOAPFaultException sfe) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, serviceKey);
 		} catch (UndeclaredThrowableException ute) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, serviceKey);
 		}
 		return null;
 	}
@@ -231,31 +213,13 @@
 			return bindingTemplateList.get(0);
 		} catch (DispositionReportFaultMessage dr) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, bindingKey);
 		} catch (SOAPFaultException sfe) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, bindingKey);
 		} catch (UndeclaredThrowableException ute) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, bindingKey);
 		}
 		return null;
 	}
@@ -279,33 +243,30 @@
 			return bd.getBusinessEntity().get(0);
 		} catch (DispositionReportFaultMessage dr) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, businessKey);
 		} catch (SOAPFaultException sfe) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
-			} else {
-	            for (Result result : report.getResult()) {
-					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
-				}
-			}
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, businessKey);
 		} catch (UndeclaredThrowableException ute) {
 			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
-			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
-				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
+			checkForErrorInDispositionReport(report, DispositionReport.E_INVALID_KEY_PASSED, businessKey);
+		}
+		return null;
+	}
+	
+	private void checkForErrorInDispositionReport(DispositionReport report, String Error, String entityKey) {
+		
+		if (report!=null &&report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+			log.info(""entityKey "" + entityKey + "" was not found in the registry"");
+		} else {
+			if (report == null) {
+				log.error(""Missing DispositionReport"");
 			} else {
-	            for (Result result : report.getResult()) {
+				for (Result result : report.getResult()) {
 					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
 				}
 			}
 		}
-		return null;
 	}
 	
 	private String getAuthToken(String endpointURL) throws TransportException, DispositionReportFaultMessage, RemoteException {
"
juddi,c250566869fd11d1ca8dff65f75c1cd266a8c68b,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@924148 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-17 04:21:39,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index b06fa3f..2a9c712 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -102,8 +102,9 @@
     		}
     	} else if (e instanceof UndeclaredThrowableException) {
     		UndeclaredThrowableException ute =(UndeclaredThrowableException) e;
-    		if (ute.getUndeclaredThrowable().getCause() instanceof DispositionReportFaultMessage) {
-    			DispositionReportFaultMessage faultMsg = (DispositionReportFaultMessage) ute.getUndeclaredThrowable().getCause();
+    		if (ute.getUndeclaredThrowable()!=null && ute.getUndeclaredThrowable().getCause()!=null
+    		    && ute.getUndeclaredThrowable().getCause().getCause() instanceof DispositionReportFaultMessage) {
+    			DispositionReportFaultMessage faultMsg = (DispositionReportFaultMessage) ute.getUndeclaredThrowable().getCause().getCause();
 	    		report = faultMsg.getFaultInfo();
     		}
     	} else {
"
juddi,b7dd7ecfb718ddc66ff8303bf2aa123aade68a75,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923978 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 20:59:14,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 9a6268d..bb9f8be 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -17,6 +17,7 @@
 package org.apache.juddi.v3.client.config;
 
 import java.io.Serializable;
+import java.lang.reflect.UndeclaredThrowableException;
 import java.rmi.RemoteException;
 import java.util.HashMap;
 import java.util.List;
@@ -205,6 +206,15 @@
 					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
 				}
 			}
+		} catch (UndeclaredThrowableException ute) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
 		}
 		return null;
 	}
@@ -237,6 +247,15 @@
 					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
 				}
 			}
+		} catch (UndeclaredThrowableException ute) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
 		}
 		return null;
 	}
@@ -276,6 +295,15 @@
 					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
 				}
 			}
+		} catch (UndeclaredThrowableException ute) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(ute);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
 		}
 		return null;
 	}
"
juddi,b7dd7ecfb718ddc66ff8303bf2aa123aade68a75,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923978 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 20:59:14,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 98a6ea0..b06fa3f 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -109,7 +109,6 @@
     	} else {
     		log.error(""Unsupported Exception: "" + e.getClass());
     	}
-    	//We might have to catch yet another type of Exception for RMI transport.
     	return report;
     }
 }
"
juddi,763eb54caece75d740ba2de11aaa8af6b33032ef,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923934 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 18:51:32,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index e3100c6..98a6ea0 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -26,7 +26,6 @@
 import javax.xml.ws.WebFault;
 import javax.xml.ws.soap.SOAPFaultException;
 
-import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
 
@@ -104,7 +103,7 @@
     	} else if (e instanceof UndeclaredThrowableException) {
     		UndeclaredThrowableException ute =(UndeclaredThrowableException) e;
     		if (ute.getUndeclaredThrowable().getCause() instanceof DispositionReportFaultMessage) {
-    			DispositionReportFaultMessage faultMsg = (InvalidKeyPassedException) ute.getUndeclaredThrowable().getCause();
+    			DispositionReportFaultMessage faultMsg = (DispositionReportFaultMessage) ute.getUndeclaredThrowable().getCause();
 	    		report = faultMsg.getFaultInfo();
     		}
     	} else {
"
juddi,fab1a6add8f124affd53d516e90db841e5451cd8,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923933 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 18:49:49,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index d3b3239..e3100c6 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -104,8 +104,8 @@
     	} else if (e instanceof UndeclaredThrowableException) {
     		UndeclaredThrowableException ute =(UndeclaredThrowableException) e;
     		if (ute.getUndeclaredThrowable().getCause() instanceof DispositionReportFaultMessage) {
-	    		InvalidKeyPassedException ike = (InvalidKeyPassedException) ute.getUndeclaredThrowable().getCause();
-	    		report = ike.getFaultInfo();
+    			DispositionReportFaultMessage faultMsg = (InvalidKeyPassedException) ute.getUndeclaredThrowable().getCause();
+	    		report = faultMsg.getFaultInfo();
     		}
     	} else {
     		log.error(""Unsupported Exception: "" + e.getClass());
"
juddi,a232d53004878a84ff277ba9c3aded7ae54083bd,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923932 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 18:48:56,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 42e0896..d3b3239 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -103,7 +103,7 @@
     		}
     	} else if (e instanceof UndeclaredThrowableException) {
     		UndeclaredThrowableException ute =(UndeclaredThrowableException) e;
-    		if (ute.getUndeclaredThrowable().getCause() instanceof InvalidKeyPassedException) {
+    		if (ute.getUndeclaredThrowable().getCause() instanceof DispositionReportFaultMessage) {
 	    		InvalidKeyPassedException ike = (InvalidKeyPassedException) ute.getUndeclaredThrowable().getCause();
 	    		report = ike.getFaultInfo();
     		}
"
juddi,2f12d418ac19efcc20903ee6a8967ee6eb9e4be0,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923930 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 18:44:40,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 4a94717..42e0896 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -18,6 +18,7 @@
 
 package org.uddi.v3_service;
 
+import java.lang.reflect.UndeclaredThrowableException;
 import java.rmi.RemoteException;
 
 import javax.xml.bind.JAXBException;
@@ -25,6 +26,7 @@
 import javax.xml.ws.WebFault;
 import javax.xml.ws.soap.SOAPFaultException;
 
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
 
@@ -79,12 +81,10 @@
     
     /** 
      * Convenience method to figure out if the Exception at hand contains a
-     * DispositionReport.
+     * DispositionReport. Disposition report will be null if none can be found.
      * 
      * @param e the Exception at hang
-     * @return DispositionReport if one can be found.
-     * @throws Exception, throws exception passed in back out if no DispositionReport is
-     * found.
+     * @return DispositionReport if one can be found, or null if it is not.
      */
     public static DispositionReport getDispositionReport(Exception e) {
     	DispositionReport report = null;
@@ -101,7 +101,16 @@
     				log.error(""Could not unmarshall detail to a DispositionReport"");
     			}
     		}
-    	} //We might have to catch yet another type of Exception for RMI transport.
+    	} else if (e instanceof UndeclaredThrowableException) {
+    		UndeclaredThrowableException ute =(UndeclaredThrowableException) e;
+    		if (ute.getUndeclaredThrowable().getCause() instanceof InvalidKeyPassedException) {
+	    		InvalidKeyPassedException ike = (InvalidKeyPassedException) ute.getUndeclaredThrowable().getCause();
+	    		report = ike.getFaultInfo();
+    		}
+    	} else {
+    		log.error(""Unsupported Exception: "" + e.getClass());
+    	}
+    	//We might have to catch yet another type of Exception for RMI transport.
     	return report;
     }
 }
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 5d3c40d..9a6268d 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -23,6 +23,8 @@
 import java.util.Map;
 import java.util.Properties;
 
+import javax.xml.ws.soap.SOAPFaultException;
+
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.api_v3.ClerkDetail;
@@ -38,10 +40,12 @@
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessService;
 import org.uddi.api_v3.DeleteBinding;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetAuthToken;
 import org.uddi.api_v3.GetBindingDetail;
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.GetServiceDetail;
+import org.uddi.api_v3.Result;
 import org.uddi.api_v3.SaveBusiness;
 import org.uddi.api_v3.SaveService;
 import org.uddi.api_v3.ServiceDetail;
@@ -173,15 +177,36 @@
 		}
 	}
 	
-	public BusinessService findService(String serviceKey, Node node) throws DispositionReportFaultMessage, RemoteException, 
+	public BusinessService findService(String serviceKey, Node node) throws RemoteException, 
 	TransportException, ConfigurationException  {
 		GetServiceDetail getServiceDetail = new GetServiceDetail();
 		getServiceDetail.getServiceKey().add(serviceKey);
 		getServiceDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
-		ServiceDetail sd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getServiceDetail);
-		List<BusinessService> businessServiceList = sd.getBusinessService();
-		if (businessServiceList.size() == 0) throw new ConfigurationException(""Could not find Service with key="" + serviceKey);
-		return businessServiceList.get(0);
+		try {
+			ServiceDetail sd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getServiceDetail(getServiceDetail);
+			List<BusinessService> businessServiceList = sd.getBusinessService();
+			if (businessServiceList.size() == 0) throw new ConfigurationException(""Could not find Service with key="" + serviceKey);
+			return businessServiceList.get(0);
+		} catch (DispositionReportFaultMessage dr) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		} catch (SOAPFaultException sfe) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""serviceKey "" + serviceKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		}
+		return null;
 	}
 	
 	public BindingTemplate findServiceBinding(String bindingKey, Node node) throws DispositionReportFaultMessage, RemoteException, 
@@ -189,20 +214,70 @@
 		GetBindingDetail getBindingDetail = new GetBindingDetail();
 		getBindingDetail.getBindingKey().add(bindingKey);
 		getBindingDetail.setAuthInfo(getAuthToken(node.getSecurityUrl()));
-		BindingDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBindingDetail(getBindingDetail);
-		List<BindingTemplate> bindingTemplateList = bd.getBindingTemplate();
-		if (bindingTemplateList.size() == 0) throw new ConfigurationException(""Could not find ServiceBinding with key="" + bindingKey);
-		return bindingTemplateList.get(0);
+		try {
+			BindingDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBindingDetail(getBindingDetail);
+			List<BindingTemplate> bindingTemplateList = bd.getBindingTemplate();
+			if (bindingTemplateList.size() == 0) throw new ConfigurationException(""Could not find ServiceBinding with key="" + bindingKey);
+			return bindingTemplateList.get(0);
+		} catch (DispositionReportFaultMessage dr) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		} catch (SOAPFaultException sfe) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""bindingKey "" + bindingKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		}
+		return null;
 	}
-	
-	public BusinessEntity findBusiness(String businessKey, Node node) throws DispositionReportFaultMessage, RemoteException, 
-	TransportException, ConfigurationException  {
+	/**
+	 * Looks up the BusinessEntiry in the registry, will return null if is not found.
+	 * 
+	 * @param businessKey - the key we are looking for
+	 * @param node - the node which is going to be queried
+	 * @return BusinessEntity is found, or null if not found.
+	 * @throws RemoteException
+	 * @throws TransportException
+	 * @throws ConfigurationException
+	 */
+	public BusinessEntity findBusiness(String businessKey, Node node) throws RemoteException, 
+			TransportException, ConfigurationException  {
 		GetBusinessDetail getBusinessDetail = new GetBusinessDetail();
 		getBusinessDetail.getBusinessKey().add(businessKey);
 		getBusinessDetail.setAuthInfo(node.getSecurityUrl());
-		BusinessDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBusinessDetail(getBusinessDetail);
-		if (bd.getBusinessEntity().size() == 0) throw new ConfigurationException(""Could not find BusinessEntity with key="" + businessKey);
-		return bd.getBusinessEntity().get(0);
+		try {
+			BusinessDetail bd = getUDDINode().getTransport().getUDDIInquiryService(node.getInquiryUrl()).getBusinessDetail(getBusinessDetail);
+			return bd.getBusinessEntity().get(0);
+		} catch (DispositionReportFaultMessage dr) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(dr);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		} catch (SOAPFaultException sfe) {
+			DispositionReport report = DispositionReportFaultMessage.getDispositionReport(sfe);
+			if (report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED)) {
+				log.info(""businessKey "" + businessKey + "" was not found in the registry"");
+			} else {
+	            for (Result result : report.getResult()) {
+					log.error(result.getErrInfo().getErrCode() + "" "" + result.getErrInfo().getValue());
+				}
+			}
+		}
+		return null;
 	}
 	
 	private String getAuthToken(String endpointURL) throws TransportException, DispositionReportFaultMessage, RemoteException {
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 89b21f8..f0a7d04 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -19,13 +19,10 @@
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.XRegistration;
-import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.ServiceInfo;
 import org.uddi.sub_v3.SubscriptionResultsList;
-import org.uddi.v3_service.DispositionReportFaultMessage;
-
 
 /**
  * Used to factor out inquiry functionality as it is used in more than one spot.
@@ -35,31 +32,28 @@
 public class XRegisterHelper {
 
 	private static Logger log = Logger.getLogger(XRegisterHelper.class);
-	
+
 	public static void handle(Clerk fromClerk, Clerk toClerk, SubscriptionResultsList list) {
-		
+
 		if (list.getServiceList()!=null) {
-			
+
 			for (ServiceInfo serviceInfo : list.getServiceList().getServiceInfos().getServiceInfo() ) {
-				
 				UDDIClerk uddiToClerk = new UDDIClerk(toClerk);
 				try {
-					try {
-						BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
-						log.debug(""Found business with key "" +  existingEntity.getBusinessKey() + "". No need to add it again"");
-					} catch (DispositionReportFaultMessage e) {
-						if (! e.getClass().equals(InvalidKeyPassedException.class)) throw e;
-				    	log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
-				    			+ "", going to add it in."");
-				    	new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
-				    }
-				    new XRegistration(serviceInfo.getServiceKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterService();
+					BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
+					if (existingEntity!=null) {
+						log.info(""Found business with key "" +  existingEntity.getBusinessKey() + "". No need to add it again"");
+					} else {
+						log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
+								+ "", going to add it in."");
+						new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
+					}
+					new XRegistration(serviceInfo.getServiceKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterService();
 				} catch (Exception e) {
-					log.error(e.getMessage(),e);				}
+					log.error(e.getMessage(),e);	
+				}
 			}
 		}
-		
 	}
-	
-	
+
 }
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/error/UDDIErrorHelper.java b/juddi-core/src/main/java/org/apache/juddi/v3/error/UDDIErrorHelper.java
index 7f93d92..d589fc7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/error/UDDIErrorHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/error/UDDIErrorHelper.java
@@ -67,43 +67,43 @@
 
 	public static final String lookupErrCode(int errno) {
 		switch (errno) {
-			case E_ACCOUNT_LIMIT_EXCEEDED     : return ""E_accountLimitExceeded"";
-			case E_ASSERTION_NOT_FOUND        : return ""E_assertionNotFound""; 
-			case E_AUTH_TOKEN_EXPIRED         : return ""E_authTokenExpired"";
-			case E_AUTH_TOKEN_REQUIRED        : return ""E_authTokenRequired"";
-			case E_BUSY                       : return ""E_busy"";
-			case E_CATEGORIZATION_NOT_ALLOWED : return ""E_categorizationNotAllowed"";
-			case E_FATAL_ERROR                : return ""E_fatalError"";
-			case E_INVALID_COMBINATION        : return ""E_invalidCombination"";
-			case E_INVALID_CATEGORY           : return ""E_invalidCategory"";
-			case E_INVALID_COMPLETION_STATUS  : return ""E_invalidCompletionStatus"";
-			case E_INVALID_KEY_PASSED         : return ""E_invalidKeyPassed"";
-			case E_KEY_UNAVAILABLE         	  : return ""E_keyUnavailable"";
-			case E_INVALID_PROJECTION         : return ""E_invalidProjection"";
-			case E_INVALID_TIME               : return ""E_invalidTime"";
-			case E_INVALID_URL_PASSED         : return ""E_invalidURLPassed"";
-			case E_INVALID_VALUE              : return ""E_invalidValue"";
-			case E_KEY_RETIRED                : return ""E_keyRetired"";
-			case E_LANGUAGE_ERROR             : return ""E_languageError"";
-			case E_MESSAGE_TOO_LARGE          : return ""E_messageTooLarge"";
-			case E_NAME_TOO_LONG              : return ""E_nameTooLong"";
-			case E_OPERATOR_MISMATCH          : return ""E_operatorMismatch"";
-			case E_PUBLISHER_CANCELLED        : return ""E_publisherCancelled"";
-			case E_REQUEST_DENIED             : return ""E_requestDenied"";
-			case E_REQUEST_TIMEOUT            : return ""E_requestTimeout"";
-			case E_RESULT_SET_TOO_LARGE       : return ""E_resultSetTooLarge"";
-			case E_SECRET_UNKNOWN             : return ""E_secretUnknown"";
-			case E_SUCCESS                    : return ""E_success"";
-			case E_TOO_MANY_OPTIONS           : return ""E_tooManyOptions"";
-			case E_TRANSFER_ABORTED           : return ""E_transferAborted"";
-			case E_UNKNOWN_USER               : return ""E_unknownUser"";
-			case E_UNRECOGNIZED_VERSION       : return ""E_unrecognizedVersion"";
-			case E_UNSUPPORTED                : return ""E_unsupported"";
-			case E_UNVALIDATABLE              : return ""E_unvalidatable"";
-			case E_USER_MISMATCH              : return ""E_userMismatch"";
-			case E_VALUE_NOT_ALLOWED          : return ""E_valueNotAllowed"";
-			case E_TOKEN_ALREADY_EXISTS       : return ""E_tokenAlreadyExists"";
-			case E_TRANSFER_NOT_ALLOWED       : return ""E_transferNotAllowed"";
+			case E_ACCOUNT_LIMIT_EXCEEDED     : return DispositionReport.E_ACCOUNT_LIMIT_EXCEEDED;
+			case E_ASSERTION_NOT_FOUND        : return DispositionReport.E_ASSERTION_NOT_FOUND; 
+			case E_AUTH_TOKEN_EXPIRED         : return DispositionReport.E_AUTH_TOKEN_EXPIRED;
+			case E_AUTH_TOKEN_REQUIRED        : return DispositionReport.E_AUTH_TOKEN_REQUIRED;
+			case E_BUSY                       : return DispositionReport.E_BUSY;
+			case E_CATEGORIZATION_NOT_ALLOWED : return DispositionReport.E_CATEGORIZATION_NOT_ALLOWED;
+			case E_FATAL_ERROR                : return DispositionReport.E_FATAL_ERROR;
+			case E_INVALID_COMBINATION        : return DispositionReport.E_INVALID_COMBINATION;
+			case E_INVALID_CATEGORY           : return DispositionReport.E_INVALID_CATEGORY;
+			case E_INVALID_COMPLETION_STATUS  : return DispositionReport.E_INVALID_COMPLETION_STATUS;
+			case E_INVALID_KEY_PASSED         : return DispositionReport.E_INVALID_KEY_PASSED;
+			case E_KEY_UNAVAILABLE         	  : return DispositionReport.E_KEY_UNAVAILABLE;
+			case E_INVALID_PROJECTION         : return DispositionReport.E_INVALID_PROJECTION;
+			case E_INVALID_TIME               : return DispositionReport.E_INVALID_TIME;
+			case E_INVALID_URL_PASSED         : return DispositionReport.E_INVALID_URL_PASSED;
+			case E_INVALID_VALUE              : return DispositionReport.E_INVALID_VALUE;
+			case E_KEY_RETIRED                : return DispositionReport.E_KEY_RETIRED;
+			case E_LANGUAGE_ERROR             : return DispositionReport.E_LANGUAGE_ERROR;
+			case E_MESSAGE_TOO_LARGE          : return DispositionReport.E_MESSAGE_TOO_LARGE;
+			case E_NAME_TOO_LONG              : return DispositionReport.E_NAME_TOO_LONG;
+			case E_OPERATOR_MISMATCH          : return DispositionReport.E_OPERATOR_MISMATCH;
+			case E_PUBLISHER_CANCELLED        : return DispositionReport.E_PUBLISHER_CANCELLED;
+			case E_REQUEST_DENIED             : return DispositionReport.E_REQUEST_DENIED;
+			case E_REQUEST_TIMEOUT            : return DispositionReport.E_REQUEST_TIMEOUT;
+			case E_RESULT_SET_TOO_LARGE       : return DispositionReport.E_RESULT_SET_TOO_LARGE;
+			case E_SECRET_UNKNOWN             : return DispositionReport.E_SECRET_UNKNOWN;
+			case E_SUCCESS                    : return DispositionReport.E_SUCCESS;
+			case E_TOO_MANY_OPTIONS           : return DispositionReport.E_TOO_MANY_OPTIONS;
+			case E_TRANSFER_ABORTED           : return DispositionReport.E_TRANSFER_ABORTED;
+			case E_UNKNOWN_USER               : return DispositionReport.E_UNKNOWN_USER;
+			case E_UNRECOGNIZED_VERSION       : return DispositionReport.E_UNRECOGNIZED_VERSION;
+			case E_UNSUPPORTED                : return DispositionReport.E_UNSUPPORTED;
+			case E_UNVALIDATABLE              : return DispositionReport.E_UNVALIDATABLE;
+			case E_USER_MISMATCH              : return DispositionReport.E_USER_MISMATCH;
+			case E_VALUE_NOT_ALLOWED          : return DispositionReport.E_VALUE_NOT_ALLOWED;
+			case E_TOKEN_ALREADY_EXISTS       : return DispositionReport.E_TOKEN_ALREADY_EXISTS;
+			case E_TRANSFER_NOT_ALLOWED       : return DispositionReport.E_TRANSFER_NOT_ALLOWED;
 			default                           : return null;
 		}
 	}  
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
index d842cb2..ffd0753 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckFindEntity.java
@@ -15,6 +15,8 @@
 package org.apache.juddi.v3.tck;
 
 import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertTrue;
+import static junit.framework.Assert.assertNotNull;
 
 import java.util.List;
 
@@ -23,6 +25,7 @@
 import org.junit.Assert;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BindingTemplate;
+import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.BusinessInfo;
 import org.uddi.api_v3.BusinessInfos;
@@ -32,6 +35,7 @@
 import org.uddi.api_v3.FindBusiness;
 import org.uddi.api_v3.FindService;
 import org.uddi.api_v3.FindTModel;
+import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.ServiceInfo;
 import org.uddi.api_v3.ServiceInfos;
 import org.uddi.api_v3.ServiceList;
@@ -39,7 +43,10 @@
 import org.uddi.api_v3.TModelInfo;
 import org.uddi.api_v3.TModelInfos;
 import org.uddi.api_v3.TModelList;
+import org.uddi.api_v3.DispositionReport;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIInquiryPortType;
+
 /**
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -87,6 +94,26 @@
 		}
 	}
 	
+	public void getNonExitingBusiness() {
+		String nonExistingKey = ""nonexistingKey"";
+		try {
+			GetBusinessDetail body = new GetBusinessDetail();
+			body.getBusinessKey().add(nonExistingKey);
+			BusinessDetail  result = inquiry.getBusinessDetail(body);
+			Assert.fail(""No business should be found"");
+			System.out.println(result.getBusinessEntity().size());
+		} catch (Exception e) {
+			try {
+				DispositionReport report = DispositionReportFaultMessage.getDispositionReport(e);
+				assertNotNull(report);
+				assertTrue(report.countainsErrorCode(DispositionReport.E_INVALID_KEY_PASSED));
+			} catch (Exception e1) {
+				Assert.fail(""We only expect DispositionReportFaultMessage, not "" + e1.getClass());
+				logger.error(e.getMessage(), e1);
+			}
+		}
+	}
+	
 	public void findAllBusiness() {
 		try {
 			FindBusiness body = (FindBusiness)EntityCreator.buildFromDoc(FIND_ALL_BUSINESSES_XML, ""org.uddi.api_v3"");
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java b/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
index c7c9974..aec5d9d 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
@@ -21,6 +21,10 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
+
+import javax.xml.bind.JAXBElement;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Unmarshaller;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
@@ -29,6 +33,9 @@
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
+import org.uddi.JAXBContextUtil;
+import org.w3c.dom.Node;
+
 
 /**
  * <p>Java class for dispositionReport complex type.
@@ -62,8 +69,67 @@
     protected List<Result> result;
     @XmlAttribute
     protected Boolean truncated;
+    
+    public final static transient String E_ACCOUNT_LIMIT_EXCEEDED     = ""E_accountLimitExceeded"";
+	public final static transient String E_ASSERTION_NOT_FOUND        = ""E_assertionNotFound""; 
+	public final static transient String E_AUTH_TOKEN_EXPIRED         = ""E_authTokenExpired"";
+	public final static transient String E_AUTH_TOKEN_REQUIRED        = ""E_authTokenRequired"";
+	public final static transient String E_BUSY                       = ""E_busy"";
+	public final static transient String E_CATEGORIZATION_NOT_ALLOWED = ""E_categorizationNotAllowed"";
+	public final static transient String E_FATAL_ERROR                = ""E_fatalError"";
+	public final static transient String E_INVALID_COMBINATION        = ""E_invalidCombination"";
+	public final static transient String E_INVALID_CATEGORY           = ""E_invalidCategory"";
+	public final static transient String E_INVALID_COMPLETION_STATUS  = ""E_invalidCompletionStatus"";
+	public final static transient String E_INVALID_KEY_PASSED         = ""E_invalidKeyPassed"";
+	public final static transient String E_KEY_UNAVAILABLE         	  = ""E_keyUnavailable"";
+	public final static transient String E_INVALID_PROJECTION         = ""E_invalidProjection"";
+	public final static transient String E_INVALID_TIME               = ""E_invalidTime"";
+	public final static transient String E_INVALID_URL_PASSED         = ""E_invalidURLPassed"";
+	public final static transient String E_INVALID_VALUE              = ""E_invalidValue"";
+	public final static transient String E_KEY_RETIRED                = ""E_keyRetired"";
+	public final static transient String E_LANGUAGE_ERROR             = ""E_languageError"";
+	public final static transient String E_MESSAGE_TOO_LARGE          = ""E_messageTooLarge"";
+	public final static transient String E_NAME_TOO_LONG              = ""E_nameTooLong"";
+	public final static transient String E_OPERATOR_MISMATCH          = ""E_operatorMismatch"";
+	public final static transient String E_PUBLISHER_CANCELLED        = ""E_publisherCancelled"";
+	public final static transient String E_REQUEST_DENIED             = ""E_requestDenied"";
+	public final static transient String E_REQUEST_TIMEOUT            = ""E_requestTimeout"";
+	public final static transient String E_RESULT_SET_TOO_LARGE       = ""E_resultSetTooLarge"";
+	public final static transient String E_SECRET_UNKNOWN             = ""E_secretUnknown"";
+	public final static transient String E_SUCCESS                    = ""E_success"";
+	public final static transient String E_TOO_MANY_OPTIONS           = ""E_tooManyOptions"";
+	public final static transient String E_TRANSFER_ABORTED           = ""E_transferAborted"";
+	public final static transient String E_UNKNOWN_USER               = ""E_unknownUser"";
+	public final static transient String E_UNRECOGNIZED_VERSION       = ""E_unrecognizedVersion"";
+	public final static transient String E_UNSUPPORTED                = ""E_unsupported"";
+	public final static transient String E_UNVALIDATABLE              = ""E_unvalidatable"";
+	public final static transient String E_USER_MISMATCH              = ""E_userMismatch"";
+	public final static transient String E_VALUE_NOT_ALLOWED          = ""E_valueNotAllowed"";
+	public final static transient String E_TOKEN_ALREADY_EXISTS       = ""E_tokenAlreadyExists"";
+	public final static transient String E_TRANSFER_NOT_ALLOWED       = ""E_transferNotAllowed"";
 
     /**
+     * 
+     */
+    public DispositionReport() {
+		super();
+	}
+    /**
+     * 
+     * @param node
+     * @throws JAXBException 
+     */
+    public DispositionReport(Node node) throws JAXBException  {
+		super();
+		JAXBContextUtil.getContext(this.getClass().getPackage().getName());
+		Unmarshaller u = JAXBContextUtil.getContext(
+				this.getClass().getPackage().getName()).createUnmarshaller();
+		JAXBElement<DispositionReport> element =  u.unmarshal(node, DispositionReport.class);
+		this.result = element.getValue().getResult();
+		this.truncated = element.getValue().truncated;
+	}
+
+	/**
      * Gets the value of the result property.
      * 
      * <p>
@@ -115,6 +181,26 @@
     public void setTruncated(Boolean value) {
         this.truncated = value;
     }
+    
+    /**
+     * Determines if one of the Results in the this DispositionReport has a Error Code
+     * that matches the errCodeKey passed in. The errCodeKey should be one
+     * of the 
+     * 
+     * @param errCodeKey
+     * @return true if the errCodeKey matches with a code in the Results.
+     */
+    public boolean countainsErrorCode(final String errCodeKey) {
+    	boolean isKeyMatch = false;
+		for (Result result : getResult()) {
+			String errCode = result.getErrInfo().getErrCode();
+			if (errCodeKey.equals(errCode)) {
+				isKeyMatch = true;
+				break;
+			}
+		}
+    	return isKeyMatch;
+    }
 
 }
 
\ No newline at end of file
"
juddi,6e9816fb83df654a2616f9b8d15d96acf4a62a12,"JUDDI-370, handling DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@923548 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-16 02:23:23,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
index 2616f5d..4a94717 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/DispositionReportFaultMessage.java
@@ -20,7 +20,12 @@
 
 import java.rmi.RemoteException;
 
+import javax.xml.bind.JAXBException;
+import javax.xml.soap.Detail;
 import javax.xml.ws.WebFault;
+import javax.xml.ws.soap.SOAPFaultException;
+
+import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
 
 
@@ -35,6 +40,7 @@
     extends RemoteException
 {
 	private static final long serialVersionUID = -3901821587689888649L;
+	private static transient Logger log = Logger.getLogger(DispositionReportFaultMessage.class);
 	/**
      * Java type that goes as soapenv:Fault detail element.
      * 
@@ -70,6 +76,33 @@
     public DispositionReport getFaultInfo() {
         return faultInfo;
     }
-
+    
+    /** 
+     * Convenience method to figure out if the Exception at hand contains a
+     * DispositionReport.
+     * 
+     * @param e the Exception at hang
+     * @return DispositionReport if one can be found.
+     * @throws Exception, throws exception passed in back out if no DispositionReport is
+     * found.
+     */
+    public static DispositionReport getDispositionReport(Exception e) {
+    	DispositionReport report = null;
+    	if (e instanceof DispositionReportFaultMessage) {
+    		DispositionReportFaultMessage faultMsg = (DispositionReportFaultMessage) e;
+    		report = faultMsg.getFaultInfo();
+    	} else if (e instanceof SOAPFaultException) {
+    		SOAPFaultException soapFault = (SOAPFaultException) e;
+    		Detail detail = soapFault.getFault().getDetail();
+    		if (detail.getFirstChild()!=null) {
+    			try {
+    				report =  new DispositionReport(detail.getFirstChild());
+    			} catch (JAXBException je) {
+    				log.error(""Could not unmarshall detail to a DispositionReport"");
+    			}
+    		}
+    	} //We might have to catch yet another type of Exception for RMI transport.
+    	return report;
+    }
 }
 
\ No newline at end of file
"
juddi,afe740629734cdca509ea9aec61f0b280f2f33c0,"JUDDI-370, catching DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922052 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 22:55:29,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 527eac9..89b21f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -47,8 +47,8 @@
 					try {
 						BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
 						log.debug(""Found business with key "" +  existingEntity.getBusinessKey() + "". No need to add it again"");
-					} catch (DispositionReportFaultMessage message) {
-						log.info(message);
+					} catch (DispositionReportFaultMessage e) {
+						if (! e.getClass().equals(InvalidKeyPassedException.class)) throw e;
 				    	log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
 				    			+ "", going to add it in."");
 				    	new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
"
juddi,6f00517f183f51e815a63fe5bafbbe99186f8c62,"JUDDI-370, catching DispositionReportFaultMessage

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922039 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 22:20:27,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 6370235..527eac9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -24,6 +24,7 @@
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.ServiceInfo;
 import org.uddi.sub_v3.SubscriptionResultsList;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 
 
 /**
@@ -46,7 +47,8 @@
 					try {
 						BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
 						log.debug(""Found business with key "" +  existingEntity.getBusinessKey() + "". No need to add it again"");
-					} catch (InvalidKeyPassedException invalidKeyException) {
+					} catch (DispositionReportFaultMessage message) {
+						log.info(message);
 				    	log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
 				    			+ "", going to add it in."");
 				    	new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
"
juddi,05147ad9cf0d40e46c77acc33ee891c5bde43421,"JUDDI-370, catching invalidKeyException

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922025 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 21:44:00,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 9738c71..6370235 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -19,6 +19,7 @@
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.XRegistration;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.ServiceInfo;
@@ -42,8 +43,10 @@
 				
 				UDDIClerk uddiToClerk = new UDDIClerk(toClerk);
 				try {
-					BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
-				    if (existingEntity==null) {
+					try {
+						BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
+						log.debug(""Found business with key "" +  existingEntity.getBusinessKey() + "". No need to add it again"");
+					} catch (InvalidKeyPassedException invalidKeyException) {
 				    	log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
 				    			+ "", going to add it in."");
 				    	new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
"
juddi,9aed46f69d697f8839b6390e06ceca1dd3f321ba,"JUDDI-370, adding test for updating a business. 

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922009 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 20:27:22,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
index c54dc1a..c14e98b 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusiness.java
@@ -15,6 +15,7 @@
 package org.apache.juddi.v3.tck;
 
 import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertNotNull;
 
 import java.util.List;
 
@@ -24,6 +25,7 @@
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.DeleteBusiness;
+import org.uddi.api_v3.Description;
 import org.uddi.api_v3.GetBusinessDetail;
 import org.uddi.api_v3.SaveBusiness;
 import org.uddi.v3_service.UDDIInquiryPortType;
@@ -75,6 +77,10 @@
 		saveBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY);
     }
 	
+	public void updateJoePublisherBusiness(String authInfoJoe) {
+		updateBusiness(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY);
+    }
+	
 	public void saveJoePublisherBusinesses(String authInfoJoe, int numberOfCopies) {
     	saveBusinesses(authInfoJoe, JOE_BUSINESS_XML, JOE_BUSINESS_KEY, numberOfCopies);
     }
@@ -140,6 +146,47 @@
 
 	}
 	
+	private void updateBusiness(String authInfo, String businessXML, String businessKey) {
+		try {
+			
+			// Now get the entity and check the values
+			GetBusinessDetail gb = new GetBusinessDetail();
+			gb.getBusinessKey().add(businessKey);
+			BusinessDetail bd = inquiry.getBusinessDetail(gb);
+			List<BusinessEntity> beOutList = bd.getBusinessEntity();
+			BusinessEntity beOut = beOutList.get(0);
+			//We are expecting 2 services
+			assertEquals(2,beOut.getBusinessServices().getBusinessService().size());
+			
+			//Now updating the business by adding another description
+			SaveBusiness sb = new SaveBusiness();
+			sb.setAuthInfo(authInfo);
+			BusinessEntity beIn = beOut;
+			Description desc2= new Description();
+			desc2.setLang(""nl"");
+			desc2.setValue(""Omschrijving"");
+			beIn.getDescription().add(desc2);
+			sb.getBusinessEntity().add(beIn);
+			publication.saveBusiness(sb);
+	
+			// Now get the entity and check the values
+			BusinessDetail bdnew = inquiry.getBusinessDetail(gb);
+			List<BusinessEntity> beOutListNew = bdnew.getBusinessEntity();
+			BusinessEntity beOutNew = beOutListNew.get(0);
+
+			assertEquals(beIn.getBusinessKey(), beOutNew.getBusinessKey());
+			// After the update we still are supposed to see two services.
+			assertNotNull(beOutNew.getBusinessServices());
+			assertEquals(2,beOutNew.getBusinessServices().getBusinessService().size());
+			
+			
+		} catch(Throwable e) {
+			logger.error(e.getMessage(),e);
+			Assert.fail(""No exception should be thrown"");
+		}
+
+	}
+	
 	private void deleteBusinesses(String authInfo, String businessXML, String businessKey, int numberOfCopies) {
 		try {
 			for (int i=0; i<numberOfCopies; i++) {
"
juddi,9aed46f69d697f8839b6390e06ceca1dd3f321ba,"JUDDI-370, adding test for updating a business. 

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922009 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 20:27:22,Kurt Stam,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
index 6536221..e26a452 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckBusinessService.java
@@ -40,6 +40,8 @@
 
 	final static String JOE_SERVICE_XML              = ""uddi_data/joepublisher/businessService.xml"";
     final static String JOE_SERVICE_KEY              = ""uddi:uddi.joepublisher.com:serviceone"";
+    final static String JOE_SERVICE_XML_2              = ""uddi_data/joepublisher/businessService2.xml"";
+    final static String JOE_SERVICE_KEY_2              = ""uddi:uddi.joepublisher.com:servicetwo"";
     final static String SAM_SERVICE_XML              = ""uddi_data/samsyndicator/businessService.xml"";
     final static String SAM_SERVICE_KEY              = ""uddi:www.samco.com:listingservice"";
    
@@ -57,6 +59,10 @@
 	public void saveJoePublisherService(String authInfoJoe) {
 		saveService(authInfoJoe, JOE_SERVICE_XML, JOE_SERVICE_KEY);
 	}
+	
+	public void saveJoePublisherService2(String authInfoJoe) {
+		saveService2(authInfoJoe, JOE_SERVICE_KEY, JOE_SERVICE_XML_2, JOE_SERVICE_KEY_2);
+	}
 
 	public void saveJoePublisherServices(String authInfoJoe, int numberOfCopies) {
 		saveServices(authInfoJoe, JOE_SERVICE_XML, JOE_SERVICE_KEY, numberOfCopies);
@@ -65,6 +71,10 @@
 	public void deleteJoePublisherService(String authInfoJoe) {
 		deleteService(authInfoJoe, JOE_SERVICE_KEY);
 	}
+	
+	public void deleteJoePublisherService2(String authInfoJoe) {
+		deleteService(authInfoJoe, JOE_SERVICE_KEY_2);
+	}
 
 	public void saveNotifierService(String authInfoJoe) {
 		saveService(authInfoJoe, NOTIFIER_SERVICE_XML, NOTIFIER_SERVICE_KEY);
@@ -151,6 +161,35 @@
 		
 	}
 	
+	private void saveService2(String authInfo, String serviceKey, String serviceXML2,  String serviceKey2) {
+		try {
+			// First save the entity
+			SaveService ss = new SaveService();
+			ss.setAuthInfo(authInfo);
+			
+			org.uddi.api_v3.BusinessService bsIn = (org.uddi.api_v3.BusinessService)EntityCreator.buildFromDoc(serviceXML2, ""org.uddi.api_v3"");
+			ss.getBusinessService().add(bsIn);
+			publication.saveService(ss);
+			
+			// Now get the entity and check the values
+			GetServiceDetail gs = new GetServiceDetail();
+			gs.getServiceKey().add(serviceKey);
+			gs.getServiceKey().add(serviceKey2);
+			ServiceDetail sd = inquiry.getServiceDetail(gs);
+			List<BusinessService> bsOutList = sd.getBusinessService();
+			int size = bsOutList.size();
+
+			assertEquals(2, size);
+			
+			
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+		
+	}
+	
 	private void deleteService(String authInfo, String serviceKey) {
 		try {
 			// Delete the entity and make sure it is removed
"
juddi,e963b31b7f964e94074b07ed4f773a162050c8bf,"JUDDI-370, only adding the business if it is not already found.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922005 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 20:20:39,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
index 55daca8..f961d45 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
@@ -57,16 +57,18 @@
 		this.entityKey = entityKey;
 	}
 	
-	
+	/**
+	 * Copies the BusinessInformation from one UDDI to another UDDI. Note that no services are being
+	 * copied over by this service. Use xRegisterService to copy over services.
+	 */
 	public void xRegisterBusiness() {
 		BusinessEntity businessEntity;
 		try {
 			businessEntity = fromClerk.findBusiness(entityKey,fromClerk.getUDDINode().getApiNode());
 			log.info(""xregister business "" + businessEntity.getName().get(0).getValue() + "" + from ""
 					+ fromClerk.getName() + "" to "" + toClerk.getName());
-			if (businessEntity.getBusinessServices()==null || businessEntity.getBusinessServices().getBusinessService().size()==0) {
-				businessEntity.setBusinessServices(null);
-			}
+			//not bringing over the services. They need to be explicitly copied using xRegisterService.
+			businessEntity.setBusinessServices(null);
 			toClerk.register(businessEntity,toClerk.getUDDINode().getApiNode());
 		} catch (Exception e) {
 			log.error(""Could not "" + toString() + "". "" + e.getMessage() + "" "" + e.getCause(),e);
"
juddi,e963b31b7f964e94074b07ed4f773a162050c8bf,"JUDDI-370, only adding the business if it is not already found.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@922005 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 20:20:39,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
index 2a793e3..9738c71 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/XRegisterHelper.java
@@ -19,6 +19,8 @@
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.XRegistration;
+import org.apache.log4j.Logger;
+import org.uddi.api_v3.BusinessEntity;
 import org.uddi.api_v3.ServiceInfo;
 import org.uddi.sub_v3.SubscriptionResultsList;
 
@@ -30,13 +32,25 @@
  */
 public class XRegisterHelper {
 
+	private static Logger log = Logger.getLogger(XRegisterHelper.class);
+	
 	public static void handle(Clerk fromClerk, Clerk toClerk, SubscriptionResultsList list) {
 		
 		if (list.getServiceList()!=null) {
+			
 			for (ServiceInfo serviceInfo : list.getServiceList().getServiceInfos().getServiceInfo() ) {
-				serviceInfo.getBusinessKey();
-				new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
-				new XRegistration(serviceInfo.getServiceKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterService();
+				
+				UDDIClerk uddiToClerk = new UDDIClerk(toClerk);
+				try {
+					BusinessEntity existingEntity = uddiToClerk.findBusiness(serviceInfo.getBusinessKey(), toClerk.getNode());
+				    if (existingEntity==null) {
+				    	log.info(""Business was not found in the destination UDDI "" + toClerk.getNode().getName() 
+				    			+ "", going to add it in."");
+				    	new XRegistration(serviceInfo.getBusinessKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterBusiness();
+				    }
+				    new XRegistration(serviceInfo.getServiceKey(), new UDDIClerk(fromClerk), new UDDIClerk(toClerk)).xRegisterService();
+				} catch (Exception e) {
+					log.error(e.getMessage(),e);				}
 			}
 		}
 		
"
juddi,5c03c3441c238737cca5f048bacc53ed390a008e,"JUDDI-370, only set to null if there are no services.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@921909 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-11 15:55:59,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
index 2ecba4b..55daca8 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/XRegistration.java
@@ -64,7 +64,9 @@
 			businessEntity = fromClerk.findBusiness(entityKey,fromClerk.getUDDINode().getApiNode());
 			log.info(""xregister business "" + businessEntity.getName().get(0).getValue() + "" + from ""
 					+ fromClerk.getName() + "" to "" + toClerk.getName());
-			businessEntity.setBusinessServices(null);
+			if (businessEntity.getBusinessServices()==null || businessEntity.getBusinessServices().getBusinessService().size()==0) {
+				businessEntity.setBusinessServices(null);
+			}
 			toClerk.register(businessEntity,toClerk.getUDDINode().getApiNode());
 		} catch (Exception e) {
 			log.error(""Could not "" + toString() + "". "" + e.getMessage() + "" "" + e.getCause(),e);
"
juddi,d06e672f5ed0d815d945fa9e7746bcef40983b57,"JUDDI-373
Fix mapping of api -> model of the brief flag.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@921610 13f79535-47bb-0310-9956-ffa450edef68
",2010-03-10 22:54:37,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index f3cb057..77adf45 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -576,7 +576,7 @@
 			modelSubscription.setExpiresAfter(new Date(gc.getTimeInMillis()));
 		}
 		
-		if (modelSubscription.isBrief() != null) {
+		if (apiSubscription.isBrief() != null) {
 			modelSubscription.setBrief(apiSubscription.isBrief());
 		} else {
 			modelSubscription.setBrief(new Boolean(false));
"
juddi,750573ac42c43f32e857e95b51d543eb9bb583f8,"JUDDI-364
Make sure we check DB and principal.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@915694 13f79535-47bb-0310-9956-ffa450edef68
",2010-02-24 06:00:59,Thomas Cunningham,"diff --git a/docs/examples/auth/src/main/java/org/apache/juddi/v3/auth/JBossAuthenticator.java b/docs/examples/auth/src/main/java/org/apache/juddi/v3/auth/JBossAuthenticator.java
index 80057df..2113718 100644
--- a/docs/examples/auth/src/main/java/org/apache/juddi/v3/auth/JBossAuthenticator.java
+++ b/docs/examples/auth/src/main/java/org/apache/juddi/v3/auth/JBossAuthenticator.java
@@ -19,8 +19,10 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import org.apache.juddi.model.AuthToken;
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.AuthTokenRequiredException;
 import org.apache.juddi.v3.error.AuthenticationException;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.UnknownUserException;
@@ -54,6 +56,7 @@
  * juddi.securityDomain=java:/jaas/other
  * 
  * @author Antoni Reus (areus@ibit.org)
+ * @author Tom Cunningham (tcunning@apache.org)
  */
 public class JBossAuthenticator implements Authenticator {
 	// private reference to the logger
@@ -75,15 +78,40 @@
 			throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidUserId"", userID));
 		}
 
-		// Create a principal for the userID
-		Principal principal = new Principal() {
-			public String getName() {
-				return userID;
+		EntityManager em = PersistenceManager.getEntityManager();
+		EntityTransaction tx = em.getTransaction();
+		try {
+			// Create a principal for the userID
+			Principal principal = new Principal() {
+				public String getName() {
+					return userID;
+				}
+			};
+	
+			if (!authManager.isValid(principal, credential)) {
+				throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidCredentials""));
+			} else {
+				tx.begin();
+				Publisher publisher = em.find(Publisher.class, userID);
+				if (publisher == null) {
+					publisher = new Publisher();
+					publisher.setAuthorizedName(userID);
+					publisher.setIsAdmin(""false"");
+					publisher.setIsEnabled(""true"");
+					publisher.setMaxBindingsPerService(199);
+					publisher.setMaxBusinesses(100);
+					publisher.setMaxServicesPerBusiness(100);
+					publisher.setMaxTmodels(100);
+					publisher.setPublisherName(""Unknown"");
+					em.persist(publisher);
+					tx.commit();
+				}
 			}
-		};
-
-		if (!authManager.isValid(principal, credential)) {
-			throw new UnknownUserException(new ErrorMessage(""errors.auth.InvalidCredentials""));
+		} finally {
+			if (tx.isActive()) {
+				tx.rollback();
+			}
+			em.close();
 		}
 		return userID;
 	}
@@ -102,18 +130,22 @@
 	public UddiEntityPublisher identify(String authInfo, String authorizedName) throws AuthenticationException {
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
+		Publisher publisher = null;
 		try {
 			tx.begin();
-			Publisher publisher = em.find(Publisher.class, authorizedName);
+			publisher = em.find(Publisher.class, authorizedName);
 			if (publisher == null)
 				throw new UnknownUserException(new ErrorMessage(""errors.auth.NoPublisher"", authorizedName));
 			
-			return publisher;
+			AuthToken at = em.find(AuthToken.class, authInfo);
+			if (at == null) 
+				throw new AuthTokenRequiredException(new ErrorMessage(""E_authTokenRequired"", authInfo));				
 		} finally {
 			if (tx.isActive()) {
 				tx.rollback();
 			}
 			em.close();
 		}
+		return publisher;
 	}
-}
+}
\ No newline at end of file
"
juddi,16bfabbfbe3c97d87c27a72e0b3d4aa3d450c88c,"JUDDI-319, fixing NPE

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@906349 13f79535-47bb-0310-9956-ffa450edef68
",2010-02-04 03:49:36,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index a552167..7923535 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -151,12 +151,14 @@
         				 businessEntity.getBusinessKey(),
         				 EntityForLang.getName(businessEntity.getName(),lang).getValue(),
         				 EntityForLang.getDescription(businessEntity.getDescription(),lang).getValue());
-        		 for (BusinessService businessService : businessEntity.getBusinessServices().getBusinessService()) {
-        			 Service service = new Service(
-        					 businessService.getServiceKey(),
-        					 EntityForLang.getName(businessService.getName(),lang).getValue(),
-        					 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
-        			 business.getServices().add(service);
+        		 if (businessEntity.getBusinessServices()!=null) {
+	        		 for (BusinessService businessService : businessEntity.getBusinessServices().getBusinessService()) {
+	        			 Service service = new Service(
+	        					 businessService.getServiceKey(),
+	        					 EntityForLang.getName(businessService.getName(),lang).getValue(),
+	        					 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
+	        			 business.getServices().add(service);
+	        		 }
         		 }
         		 //for (Contact contact : businessEntity.getContacts().getContact()) {
         			 //contact.get
"
juddi,8b46f87d49a834eed2c5cfab7fe558b6dce441f1,"JUDDI-341 dropping distinct. Looks like it does even make sense to have it here.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@906174 13f79535-47bb-0310-9956-ffa450edef68
",2010-02-03 18:57:46,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
index 8c1d987..7b90e36 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
@@ -96,7 +96,7 @@
 	
 	public int compareTo(UddiEntity o) {
 		if (o==null || o.getEntityKey()==null) return 0;
-		if (o.getEntityKey().equals(entityKey)) return 1;
+		if (o.getEntityKey().equals(getEntityKey())) return 1;
 		else return 0;
 	}
 
"
juddi,8b46f87d49a834eed2c5cfab7fe558b6dce441f1,"JUDDI-341 dropping distinct. Looks like it does even make sense to have it here.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@906174 13f79535-47bb-0310-9956-ffa450edef68
",2010-02-03 18:57:46,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/SubscriptionQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/SubscriptionQuery.java
index 4ec54cf..f7e05da 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/SubscriptionQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/SubscriptionQuery.java
@@ -29,7 +29,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""select distinct ""+ ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""select ""+ ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		selectSQL = sql.toString();
 	}
 
"
juddi,e6182cae9f8e248af947ee9f9797c591b59bf625,"JUDDI-344, adding logging when a clerk or node is registered

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903102 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 06:35:18,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index d111a8e..8c21d96 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -224,7 +224,7 @@
 			SaveClerk saveClerk = new SaveClerk();
 			saveClerk.setAuthInfo(getAuthToken(senderClerk.getUDDINode().getSecurityUrl()));
 			saveClerk.getClerk().add(getApiClerk());
-			clerkDetail = senderClerk.getUDDINode().getTransport().getJUDDIApiService(senderClerk.getUDDINode().getJuddiApiUrl()).saveClerk(saveClerk);
+			clerkDetail = getUDDINode().getTransport().getJUDDIApiService(senderClerk.getUDDINode().getJuddiApiUrl()).saveClerk(saveClerk);
 		} catch (Exception e) {
 			log.error(""Unable to save clerk "" + getName()
 					+ "" ."" + e.getMessage(),e);
"
juddi,f6380c05941e32401ebfef745af16254cd5caeeb,"JUDDI-343, adding isHomeJUDDI flag, changing default to 'false'

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903077 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 04:52:21,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index e3893fa..4d220f3 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -151,7 +151,7 @@
 				}
 				uddiNode.setProperties(properties);
 			}
-			uddiNode.setHomeJUDDI(              config.getBoolean(""manager.nodes.node("" + i +"")[@isHomeJUDDI]"",true));
+			uddiNode.setHomeJUDDI(              config.getBoolean(""manager.nodes.node("" + i +"")[@isHomeJUDDI]"",false));
 			uddiNode.setName(                   config.getString(""manager.nodes.node("" + i +"").name""));
 			uddiNode.setManagerName(            config.getString(""manager[@name]""));
 			uddiNode.setDescription(            config.getString(""manager.nodes.node("" + i +"").description""));
"
juddi,f6380c05941e32401ebfef745af16254cd5caeeb,"JUDDI-343, adding isHomeJUDDI flag, changing default to 'false'

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903077 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 04:52:21,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index a7a4031..3827846 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -80,7 +80,7 @@
 						homeClerk.saveClerk(clerk);
 					}
 				} else {
-					log.error(""The client config needs to have one homeJUDDI node."");
+					log.error(""The client config needs to have one homeJUDDI node and found "" + numberOfHomeJUDDIs);
 				}
 			} else {
 				log.info(""No home clerk found."");
"
juddi,8b18b7c8f24df8269d8e39a6a4fe73d94fbf83e1,"JUDDI-344, adding logging when a clerk or node is registered

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903074 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 04:26:35,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
index 6441db9..d111a8e 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerk.java
@@ -202,6 +202,7 @@
 	public NodeDetail saveNode(Node node)  {
 		NodeDetail nodeDetail = null;
 		try {
+			log.info(""Sending Node "" + node.getName() + "" info to jUDDI "" + getUDDINode().getName());
 			SaveNode saveNode = new SaveNode();
 			saveNode.setAuthInfo(getAuthToken(node.getSecurityUrl()));
 			saveNode.getNode().add(node);
@@ -219,6 +220,7 @@
 	public ClerkDetail saveClerk(UDDIClerk senderClerk)  {
 		ClerkDetail clerkDetail = null;
 		try {
+			log.info(""Sending Clerk "" + senderClerk.getName() + "" info to jUDDI "" + getUDDINode().getName());
 			SaveClerk saveClerk = new SaveClerk();
 			saveClerk.setAuthInfo(getAuthToken(senderClerk.getUDDINode().getSecurityUrl()));
 			saveClerk.getClerk().add(getApiClerk());
"
juddi,f008c0a93e66accef86fe91279c3bff5f272811f,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903072 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 04:00:41,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
index 91eb8b7..5ef254e 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
@@ -18,6 +18,6 @@
 
 public interface Constants {
 
-	public final static String NODE_NAME = ""default-ws"";
+	public final static String NODE_NAME = ""default"";
 	public final static String MANAGER_NAME = ""uddi-portlet-manager"";
 }
"
juddi,059ae3e18e6a27963540a6794df897836572acba,"JUDDI-344, switching to JAXWS

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903068 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:25:30,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index db49d52..2d5ac2a 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -41,10 +41,9 @@
 		try {
 			String clientConfigFile = config.getInitParameter(""uddi.client.config"");
 			if (clientConfigFile==null) clientConfigFile = ClientConfig.UDDI_CONFIG;
-			logger.info(""Starting Clerk Manager.."");
 			UDDIClerkManager manager = new UDDIClerkManager(clientConfigFile);
+			logger.info(""Starting Clerk Manager "" + manager.getName() + ""..."");
 			manager.start();
-			logger.info(""Successfully Started Clerk Manager "" + manager.getName());
 		} catch (Exception e) {
 			logger.error(""UDDI-client could not be started for manager "" + manager.getName() + "". ""
 					+ e.getMessage(), e);
"
juddi,963668748e44fad71b1e578eda18f27ae4d22caf,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903066 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:15:07,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index b9832f0..a7a4031 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -6,7 +6,6 @@
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.v3.annotations.AnnotationProcessor;
-import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.BusinessService;
 
@@ -42,37 +41,49 @@
 	 * @throws ConfigurationException  
 	 */
 	public void start() throws ConfigurationException {
-		log.info(""Starting UDDI Clerks for manager "" + clientConfig.getManagerName() + ""..."");
-		UDDIClientContainer.addClerkManager(this);
-		if (clientConfig.isRegisterOnStartup()) {
-			saveClerkAndNodeInfo();
-			registerAnnotatedServices();
-			xRegister();
-		}
-		log.info(""Clerks started succesfully for manager "" + clientConfig.getManagerName());
+		Runnable runnable = new BackGroundRegistration(this);
+		Thread thread = new Thread(runnable);
+		thread.start();
  	}
 	
 	public void restart() throws ConfigurationException {
 		stop();
 		start();
- 	}
+	}
+	
 	/**
-	 * Saves the clerk and node info from the uddi.xml to the jUDDI registry.
+	 * Saves the clerk and node info from the uddi.xml to the home jUDDI registry.
+	 * This info is needed if you want to JUDDI Server to do XRegistration/""replication"".
 	 */
 	public void saveClerkAndNodeInfo() {
 		
 		Map<String,UDDIClerk> uddiClerks = clientConfig.getUDDIClerks();
+		
 		if (uddiClerks.size() > 0) {
-			for (UDDIClerk defaultClerk : uddiClerks.values()) {
-				if (Transport.DEFAULT_NODE_NAME.equals(defaultClerk.uddiNode.getName())) {
-					for (UDDINode uddiNode : clientConfig.getUDDINodes().values()) {
-						if (uddiNode.isAllowJUDDIAPI()) defaultClerk.saveNode(uddiNode.getApiNode());
-					}
-					for (UDDIClerk uddiClerk : clientConfig.getUDDIClerks().values()) {
-						if (uddiClerk.getUDDINode().isAllowJUDDIAPI()) defaultClerk.saveClerk(uddiClerk);
-					}
-					break;
+			
+			//obtaining a clerk that can write to the home registry
+			UDDIClerk homeClerk=null;
+			for (UDDIClerk clerk : uddiClerks.values()) {
+				if (clerk.getUDDINode().isHomeJUDDI()) {
+					homeClerk = clerk;
+				}	
+			}
+			//registering nodes and clerks
+			if (homeClerk!=null) {
+				int numberOfHomeJUDDIs=0;
+				for (UDDINode uddiNode : clientConfig.getUDDINodes().values()) {
+					if (uddiNode.isHomeJUDDI()) numberOfHomeJUDDIs++;
+					homeClerk.saveNode(uddiNode.getApiNode());
 				}
+				if (numberOfHomeJUDDIs==1) {
+					for (UDDIClerk clerk : clientConfig.getUDDIClerks().values()) {
+						homeClerk.saveClerk(clerk);
+					}
+				} else {
+					log.error(""The client config needs to have one homeJUDDI node."");
+				}
+			} else {
+				log.info(""No home clerk found."");
 			}
 		}	
 	}
"
juddi,963668748e44fad71b1e578eda18f27ae4d22caf,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903066 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:15:07,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index 8986de7..1ff5edd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -557,7 +557,7 @@
 
 				log.info(""Notification received by UDDISubscriptionListenerService : "" + sw.toString());
 				
-				NotificationList nl = NotificationList.getInstance();
+				NotificationList<String> nl = NotificationList.getInstance();
 				nl.getNotifications().add(sw.toString());
 				
 				//update the registry with the notification list.
"
juddi,963668748e44fad71b1e578eda18f27ae4d22caf,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903066 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:15:07,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index 26b3d20..c6a40f5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -26,7 +26,6 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
 
-import org.apache.commons.collections.Buffer;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.subscription.NotificationList;
"
juddi,963668748e44fad71b1e578eda18f27ae4d22caf,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903066 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:15:07,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
index e5ac2f3..867c772 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
@@ -4,17 +4,17 @@
 import org.apache.commons.collections.Buffer;
 import org.apache.commons.collections.BufferUtils;
 
-public class NotificationList  {
-	private static NotificationList nl = null;
+public class NotificationList<T>  {
+	private static NotificationList<String> nl = null;
 	private static Buffer list = null;
 	
 	private NotificationList() {	
 		list = BufferUtils.synchronizedBuffer(new CircularFifoBuffer(10));
 	}
 	
-	public static NotificationList getInstance() {
+	public static NotificationList<String> getInstance() {
 		if (nl == null) {
-			nl = new NotificationList();
+			nl = new NotificationList<String>();
 		}
 		return nl;	
 	}
"
juddi,963668748e44fad71b1e578eda18f27ae4d22caf,"JUDDI-344, doing registration in the background

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903066 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:15:07,Kurt Stam,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
index 578ec80..883ab80 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
@@ -18,7 +18,6 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.Iterator;
-import java.util.Vector;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
"
juddi,e472ca0b3ece7aa256b88be045ac7fc8b76d6244,"JUDDI-343, adding isHomeJUDDI flag.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903065 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:14:23,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 0aba1f5..e3893fa 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -151,7 +151,7 @@
 				}
 				uddiNode.setProperties(properties);
 			}
-			uddiNode.setAllowJUDDIAPI(          config.getBoolean(""manager.nodes.node("" + i +"")[@allowJUDDIAPI]"",true));
+			uddiNode.setHomeJUDDI(              config.getBoolean(""manager.nodes.node("" + i +"")[@isHomeJUDDI]"",true));
 			uddiNode.setName(                   config.getString(""manager.nodes.node("" + i +"").name""));
 			uddiNode.setManagerName(            config.getString(""manager[@name]""));
 			uddiNode.setDescription(            config.getString(""manager.nodes.node("" + i +"").description""));
"
juddi,e472ca0b3ece7aa256b88be045ac7fc8b76d6244,"JUDDI-343, adding isHomeJUDDI flag.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@903065 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-26 03:14:23,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index abc66f4..81a94d4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -14,7 +14,7 @@
 	private Properties properties;
 	private Transport transport;
 	
-	private boolean allowJUDDIAPI;
+	private boolean isHomeJUDDI;
 	private String name;
 	private String managerName;
 	private String description;
@@ -205,11 +205,11 @@
 		this.factoryNamingProvider = factoryNamingProvider;
 	}
 
-	public boolean isAllowJUDDIAPI() {
-		return allowJUDDIAPI;
+	public boolean isHomeJUDDI() {
+		return isHomeJUDDI;
 	}
 
-	public void setAllowJUDDIAPI(boolean allowJUDDIAPI) {
-		this.allowJUDDIAPI = allowJUDDIAPI;
+	public void setHomeJUDDI(boolean isHomeJUDDI) {
+		this.isHomeJUDDI = isHomeJUDDI;
 	}
 }
"
juddi,4cfd832a481d558a91d52120958a48070eb241e7,"JUDDI-347
Make sure we save the managerName from the node.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902877 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-25 17:09:15,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index bda0a3f..abc66f4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -70,6 +70,7 @@
 		apiNode.setFactoryURLPkgs(factoryURLPkgs);
 		apiNode.setInquiryUrl(inquiryUrl);
 		apiNode.setJuddiApiUrl(juddiApiUrl);
+		apiNode.setManagerName(managerName);
 		apiNode.setName(name);
 		apiNode.setProxyTransport(proxyTransport);
 		apiNode.setPublishUrl(publishUrl);
"
juddi,ac6d85e7df6ddb9e278dfa2809068c285da37612,"JUDDI-328
Change NotificationList's Vector to a commons-collection synchronized
bounded buffer.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902617 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 18:33:25,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index 16ad33c5..d3807ab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -70,6 +70,7 @@
 import org.uddi.sub_v3.SubscriptionResultsList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISubscriptionPortType;
+import org.apache.commons.collections.Buffer;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -559,14 +560,7 @@
 				log.info(""Notification received by UDDISubscriptionListenerService : "" + sw.toString());
 				
 				NotificationList nl = NotificationList.getInstance();
-				if (nl.getNotifications().size() == MAX_NOTIFICATIONS) {
-					nl.getNotifications().setSize(MAX_NOTIFICATIONS - 1);
-				}
-				nl.getNotifications().add(0, sw.toString());
-//				Vector vect = nl.getNotifications();
-//				for (int i = 0; i < vect.size(); i++) {
-//					String str = (String) vect.get(i);
-//				}		
+				nl.getNotifications().add(sw.toString());
 				
 				//update the registry with the notification list.
 				XRegisterHelper.handle(fromClerk, toClerk, list);
"
juddi,ac6d85e7df6ddb9e278dfa2809068c285da37612,"JUDDI-328
Change NotificationList's Vector to a commons-collection synchronized
bounded buffer.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902617 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 18:33:25,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index 84129c9..bf2f23f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -26,6 +26,7 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
 
+import org.apache.commons.collections.Buffer;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.subscription.NotificationList;
"
juddi,ac6d85e7df6ddb9e278dfa2809068c285da37612,"JUDDI-328
Change NotificationList's Vector to a commons-collection synchronized
bounded buffer.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902617 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 18:33:25,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
index 483390c..e5ac2f3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
@@ -1,24 +1,25 @@
 package org.apache.juddi.subscription;
 
-import java.util.Vector;
+import org.apache.commons.collections.buffer.CircularFifoBuffer;
+import org.apache.commons.collections.Buffer;
+import org.apache.commons.collections.BufferUtils;
 
-public class NotificationList {
+public class NotificationList  {
 	private static NotificationList nl = null;
-	private static Vector<String> list = null;
+	private static Buffer list = null;
 	
 	private NotificationList() {	
-		list = new Vector<String>();
+		list = BufferUtils.synchronizedBuffer(new CircularFifoBuffer(10));
 	}
 	
 	public static NotificationList getInstance() {
 		if (nl == null) {
 			nl = new NotificationList();
 		}
-		return nl;
+		return nl;	
 	}
 	
-	public Vector<String> getNotifications() {
+	public Buffer getNotifications() {
 		return list;
 	}
-	
 }
"
juddi,ac6d85e7df6ddb9e278dfa2809068c285da37612,"JUDDI-328
Change NotificationList's Vector to a commons-collection synchronized
bounded buffer.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902617 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 18:33:25,Thomas Cunningham,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
index 2db25e1..578ec80 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/servlets/NotifyServlet.java
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Iterator;
 import java.util.Vector;
 
 import javax.servlet.ServletException;
@@ -24,6 +25,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.commons.collections.Buffer;
 import org.apache.juddi.subscription.NotificationList;
 
 
@@ -43,11 +45,11 @@
 		ServletException, IOException {
 		StringBuffer sb = new StringBuffer();
 
-		Vector nl = NotificationList.getInstance().getNotifications();
-		if (nl.size() != 0) {
-			for (int i = 0; i<nl.size(); i++) {
-				sb.append(nl.get(i));
-			}	
+		Buffer nl = NotificationList.getInstance().getNotifications();
+		Iterator it = nl.iterator();
+		while (it.hasNext()) {
+			String notification = (String) it.next();		
+			sb.append(notification);
 		}
 		nl.clear();
 		PrintWriter out = response.getWriter();
"
juddi,5c8f419cc2d1a7b793fb3e2aa4adcdcfd8f1236a,"JUDDI-341, adding CompareTo, so prevent JPA from doing a distinct on each column, but rather the PK.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902611 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 17:48:00,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
index 3229d5b..e5ab1cf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
@@ -36,7 +36,7 @@
  */
 @Entity
 @Table(name = ""j3_subscription"")
-public class Subscription implements java.io.Serializable {
+public class Subscription implements java.io.Serializable, Comparable<Subscription> {
 
 	private static final long serialVersionUID = -2271361594186854662L;
 	private String subscriptionKey;
@@ -155,4 +155,10 @@
 	public void setCreateDate(Date createDate) {
 		this.createDate = createDate;
 	}
+
+	public int compareTo(Subscription o) {
+		if (o==null || o.getSubscriptionKey()==null) return 0;
+		if (o.getSubscriptionKey().equals(subscriptionKey)) return 1;
+		else return 0;
+	}
 }
"
juddi,5c8f419cc2d1a7b793fb3e2aa4adcdcfd8f1236a,"JUDDI-341, adding CompareTo, so prevent JPA from doing a distinct on each column, but rather the PK.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902611 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-24 17:48:00,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
index 97e0816..8c1d987 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
@@ -32,7 +32,7 @@
 @Entity
 @Table(name = ""j3_uddi_entity"")
 @Inheritance(strategy = InheritanceType.JOINED)
-public abstract class UddiEntity {
+public abstract class UddiEntity implements Comparable<UddiEntity>{
 
 	protected String entityKey;
 	protected Date created;
@@ -93,5 +93,11 @@
 	public void setAuthorizedName(String authorizedName) {
 		this.authorizedName = authorizedName;
 	}
+	
+	public int compareTo(UddiEntity o) {
+		if (o==null || o.getEntityKey()==null) return 0;
+		if (o.getEntityKey().equals(entityKey)) return 1;
+		else return 0;
+	}
 
 }
"
juddi,0d1a030154263aa6c720d2587740fb2685c018b5,"JUDDI-338
Site now takes the pdf files from the juddi-docs target and links them.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@902136 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-22 16:00:54,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index 93f4db7..ec338cb 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -18,6 +18,7 @@
 import java.io.StringWriter;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.net.URLEncoder;
 import java.rmi.Remote;
 
 import javax.xml.parsers.DocumentBuilder;
@@ -157,12 +158,14 @@
       document.appendChild(element.getFirstChild());
       setResponse(document);
     } catch (InvocationTargetException ite) {
-    	log.error(ite.getTargetException().getMessage());
+    	String message = URLEncoder.encode(ite.getTargetException().getMessage());
+    	log.error(message);
     	setException(ite.getTargetException().getMessage());
     }
     catch(Exception ex) // Catch any other exceptions
     {
-        log.error(ex.getMessage());
+    	String message = URLEncoder.encode(ex.getMessage());
+        log.error(message);
         setException(ex.getMessage());
     }
     return response;
"
juddi,7514c526ff17e541b884f2f5929c42fb54641140,"JUDDI-339
Make sure we can takes a system property for the juddiv3.properties file name.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901561 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 06:33:31,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 83dfa02..82b903e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -73,7 +73,14 @@
 		CompositeConfiguration compositeConfig = new CompositeConfiguration();
 		compositeConfig.addConfiguration(new SystemConfiguration());
 		//Properties from file
-		PropertiesConfiguration propConfig = new PropertiesConfiguration(JUDDI_PROPERTIES);
+		PropertiesConfiguration propConfig = null;
+	        final String filename = System.getProperty(""juddi.propertiesFile"");
+		if (filename != null)
+        	{
+			propConfig = new PropertiesConfiguration(filename);
+		} else {
+			propConfig = new PropertiesConfiguration(JUDDI_PROPERTIES);
+		}
 		URL url = Loader.getResource(JUDDI_PROPERTIES); 
 		log.info(""Reading from properties file:  "" + url);
 		long refreshDelay = propConfig.getLong(Property.JUDDI_CONFIGURATION_RELOAD_DELAY, 1000l);
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index a22ec96..f5cbcc0 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -21,6 +21,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.FindResponse;
@@ -74,7 +75,7 @@
 
 			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> transportClass = Loader.loadClass(clazz);
+			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
 			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
 			BusinessList businessList = inquiryService.findBusiness(findBusiness);
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index d5dee61..a552167 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -23,6 +23,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.model.ServiceBinding;
@@ -69,7 +70,7 @@
 		if (transport==null) {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
 		}
 		return transport;
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
index 98cd0c2..31e4192 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
@@ -24,6 +24,7 @@
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.beanutils.BeanUtils;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api_v3.DeletePublisher;
 import org.apache.juddi.api_v3.GetAllPublisherDetail;
 import org.apache.juddi.api_v3.GetPublisherDetail;
@@ -63,7 +64,7 @@
 		try {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
         	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
         	 PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
@@ -101,7 +102,7 @@
 		try {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 SavePublisher savePublisher = new SavePublisher();
@@ -137,7 +138,7 @@
 		try {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 DeletePublisher deletePublisher = new DeletePublisher();
@@ -179,7 +180,7 @@
 		try {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
 	         JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	         PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index cf15418..50928aa 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -21,6 +21,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.service.PublicationResponse;
@@ -65,7 +66,7 @@
 		try {
 			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
         	 UDDIPublicationPortType publicationService = transport.getUDDIPublishService();
         	 RegisteredInfo info = publicationService.getRegisteredInfo(getRegistrationInfo);
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index ac481a0..ef86490 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -25,6 +25,7 @@
 import javax.servlet.http.HttpSession;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.portlets.client.service.SecurityResponse;
 import org.apache.juddi.portlets.client.service.SecurityService;
 import org.apache.juddi.v3.client.config.UDDIClerk;
@@ -122,7 +123,7 @@
 		
 		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 		String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-        Class<?> transportClass = Loader.loadClass(clazz);
+        Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(managerName, node);  
 		UDDISecurityPortType securityService = transport.getUDDISecurityService();
 		GetAuthToken getAuthToken = new GetAuthToken();
"
juddi,4a53e063ffe1f41dad362a6ed5233db2da5baa1d,"JUDDI-326
Change Loader references to ClassUtil.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901530 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 05:07:19,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
index f04480e..0c8feea 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
@@ -28,6 +28,7 @@
 import javax.xml.datatype.XMLGregorianCalendar;
 import javax.xml.ws.Holder;
 
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.api_v3.ClientSubscriptionInfo;
 import org.apache.juddi.api_v3.DeleteClientSubscriptionInfo;
 import org.apache.juddi.api_v3.SaveClerk;
@@ -122,7 +123,7 @@
 		try {
 			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(clerk.getManagerName());
 			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
-			Class<?> transportClass = Loader.loadClass(clazz);
+			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(clerk.getManagerName(),clerk.getUDDINode().getName());  
 			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
 
@@ -177,7 +178,7 @@
 			
 			logger.info(""Updating default UDDI server.."");
 			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> defaultTransportClass = Loader.loadClass(defaultClazz); 
+			Class<?> defaultTransportClass = ClassUtil.forName(defaultClazz, Transport.class); 
 			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME); 
 			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
 			
@@ -218,7 +219,7 @@
 			//the listening server is ready; now add the subscription
 			
 			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
-			Class<?> transportClass = Loader.loadClass(clazz); 
+			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class); 
 			Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(clerk.getUDDINode().getName()); 
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
 			List<org.uddi.sub_v3.Subscription> subscriptionList = new ArrayList<org.uddi.sub_v3.Subscription>();
@@ -290,7 +291,7 @@
 			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
 			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
 			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
-			Class<?> transportClass = Loader.loadClass(clazz);
+			Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(clerk.getManagerName(),clerk.getUDDINode().getName()); 
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
 			DeleteSubscription deleteSubscription = new DeleteSubscription();
@@ -301,7 +302,7 @@
 			
 			//now remove it from the listener UDDI server too
 			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-			Class<?> defaultTransportClass = Loader.loadClass(defaultClazz); 
+			Class<?> defaultTransportClass = ClassUtil.forName(defaultClazz, Transport.class); 
 			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME); 
 			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
 			
@@ -355,7 +356,7 @@
             syncSubscription.getGetSubscriptionResultsList().add(getSubscriptionResults);
 			
 			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	        Class<?> transportClass = Loader.loadClass(clazz);
+	        Class<?> transportClass = ClassUtil.forName(clazz, Transport.class);
 	        Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
        	    JUDDIApiPortType apiService = transport.getJUDDIApiService();
 			
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index c8466ce..2043fe8 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -16,8 +16,6 @@
  */
 package org.apache.juddi.portlets.client;
 
-import java.util.ArrayList;
-
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.model.ServiceBinding;
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
index dd81b35..91eb8b7 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/Constants.java
@@ -19,4 +19,5 @@
 public interface Constants {
 
 	public final static String NODE_NAME = ""default-ws"";
+	public final static String MANAGER_NAME = ""uddi-portlet-manager"";
 }
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index ab8900e..a22ec96 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -26,6 +26,7 @@
 import org.apache.juddi.portlets.client.service.FindResponse;
 import org.apache.juddi.portlets.client.service.FindService;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
@@ -48,8 +49,8 @@
 
 	private static final long serialVersionUID = 1939609260067702168L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	
-	
+
+
 	public FindResponse getBusinesses(String nameStr, String[] findQualifyers) 
 	{
 		HttpServletRequest request = this.getThreadLocalRequest();
@@ -62,21 +63,22 @@
 				findQualifiers.getFindQualifier().add(string);
 			}
 			findBusiness.setFindQualifiers(findQualifiers);
-			
+
 			Name name = new Name();
 			name.setValue(nameStr);
 			findBusiness.getName().add(name);
-			
-			
+
+
 			logger.debug(""FindBusiness "" + findBusiness + "" sending findBusinesses request.."");
 			List<Business> businesses = new ArrayList<Business>();
-		
-	    	 String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	         Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
-        	 UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
-        	 BusinessList businessList = inquiryService.findBusiness(findBusiness);
-        	 for (BusinessInfo businessInfo : businessList.getBusinessInfos().getBusinessInfo()) {
+
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			Class<?> transportClass = Loader.loadClass(clazz);
+			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
+			UDDIInquiryPortType inquiryService = transport.getUDDIInquiryService();
+			BusinessList businessList = inquiryService.findBusiness(findBusiness);
+			for (BusinessInfo businessInfo : businessList.getBusinessInfos().getBusinessInfo()) {
 				Business business = new Business(
 						businessInfo.getBusinessKey(),
 						EntityForLang.getName(businessInfo.getName(),lang).getValue(),
@@ -90,20 +92,20 @@
 				}
 				business.setServices(services);
 				businesses.add(business);
-			 }
-        	 response.setSuccess(true);
-        	 response.setBusinesses(businesses);
-	     } catch (Exception e) {
-	    	 logger.error(""Could not obtain token. "" + e.getMessage(), e);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(e.getMessage());
-	    	 response.setErrorCode(""102"");
-	     }  catch (Throwable t) {
-	    	 logger.error(""Could not obtain token. "" + t.getMessage(), t);
-	    	 response.setSuccess(false);
-	    	 response.setMessage(t.getMessage());
-	    	 response.setErrorCode(""102"");
-	     } 
-		 return response;
+			}
+			response.setSuccess(true);
+			response.setBusinesses(businesses);
+		} catch (Exception e) {
+			logger.error(""Could not obtain token. "" + e.getMessage(), e);
+			response.setSuccess(false);
+			response.setMessage(e.getMessage());
+			response.setErrorCode(""102"");
+		}  catch (Throwable t) {
+			logger.error(""Could not obtain token. "" + t.getMessage(), t);
+			response.setSuccess(false);
+			response.setMessage(t.getMessage());
+			response.setErrorCode(""102"");
+		} 
+		return response;
 	}
 }
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index fea3e27..d5dee61 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -29,6 +29,7 @@
 import org.apache.juddi.portlets.client.service.InquiryResponse;
 import org.apache.juddi.portlets.client.service.InquiryService;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.portlets.client.service.SearchResponse;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
@@ -66,7 +67,8 @@
 	private Transport getTransport() 
 		throws ConfigurationException, ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, SecurityException, InvocationTargetException, NoSuchMethodException {
 		if (transport==null) {
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	         Class<?> transportClass = Loader.loadClass(clazz);
 	         transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
 		}
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
index 3e7e891..98cd0c2 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
@@ -33,6 +33,7 @@
 import org.apache.juddi.portlets.client.service.JUDDIApiResponse;
 import org.apache.juddi.portlets.client.service.JUDDIApiService;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.log4j.Logger;
@@ -60,9 +61,10 @@
 		JUDDIApiResponse response = new JUDDIApiResponse();
 		List<Publisher> publishers = new ArrayList<Publisher>();
 		try {
-	    	 String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	         Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);   
+	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
         	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
         	 PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
         	 //if the publisher is an admin, then return ALL publishers
@@ -97,9 +99,10 @@
 	public JUDDIApiResponse savePublisher(String token, Publisher publisher) {
 		JUDDIApiResponse response = new JUDDIApiResponse();
 		try {
-			 String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	         Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);   
+	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 SavePublisher savePublisher = new SavePublisher();
 	       	 savePublisher.setAuthInfo(token);
@@ -132,9 +135,10 @@
 	public JUDDIApiResponse deletePublisher(String token, String publisherId) {
 		JUDDIApiResponse response = new JUDDIApiResponse();
 		try {
-			 String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	         Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
+	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
 	       	 JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	       	 DeletePublisher deletePublisher = new DeletePublisher();
 	         deletePublisher.setAuthInfo(token);
@@ -173,15 +177,16 @@
 		getPublisherDetail.getPublisherId().add(username);
 		
 		try {
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
-	        Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);   
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+	         Class<?> transportClass = Loader.loadClass(clazz);
+	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
 	         JUDDIApiPortType apiService = transport.getJUDDIApiService();
 	         PublisherDetail publisherDetail = apiService.getPublisherDetail(getPublisherDetail);
        	     org.apache.juddi.api_v3.Publisher publisher = publisherDetail.getPublisher().get(0);
        	     if (""true"".equalsIgnoreCase(publisher.getIsAdmin())) {
-       	    	logger.info(""managerName="" + UDDIClerkManager.getClientConfig().getManagerName());
-       	    	UDDIClerkManager.restart();
+       	    	logger.info(""managerName="" + manager.getClientConfig().getManagerName());
+       	    	manager.restart();
        	    	response.setMessage(""Successfull manager restart."");
        	    	response.setSuccess(true);
        	     } else {
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index 2f84958..cf15418 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -26,6 +26,7 @@
 import org.apache.juddi.portlets.client.service.PublicationResponse;
 import org.apache.juddi.portlets.client.service.PublicationService;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.i18n.EntityForLang;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.Logger;
@@ -62,9 +63,10 @@
 		logger.debug(""GetRegistrationInfo "" + getRegistrationInfo + "" sending get Busineses request.."");
 		List<Business> businesses = new ArrayList<Business>();
 		try {
-			 String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			 UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			 String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	         Class<?> transportClass = Loader.loadClass(clazz);
-	         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);  
+	         Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);  
         	 UDDIPublicationPortType publicationService = transport.getUDDIPublishService();
         	 RegisteredInfo info = publicationService.getRegisteredInfo(getRegistrationInfo);
         	 for (BusinessInfo businessInfo : info.getBusinessInfos().getBusinessInfo()) {
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index 7685ac2..ac481a0 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -29,6 +29,7 @@
 import org.apache.juddi.portlets.client.service.SecurityService;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3.client.transport.TransportException;
 import org.apache.log4j.Logger;
@@ -73,7 +74,7 @@
 				return response;
 			} else {
 				try {
-					AuthToken authToken = login(username, password,Constants.NODE_NAME);
+					AuthToken authToken = login(username, password, Constants.MANAGER_NAME, Constants.NODE_NAME);
 					response.setSuccess(true);
 					response.setResponse(authToken.getAuthInfo());
 					
@@ -81,11 +82,12 @@
 					session.setAttribute(""UserName"", username);
 				
 					//upon success obtain tokens from other registries
-					Map<String, UDDIClerk> clerks = UDDIClerkManager.getClientConfig().getUDDIClerks();
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+					Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
 					for (UDDIClerk clerk : clerks.values()) {
 						if (username.equals(clerk.getPublisher())) {
 							try {
-								AuthToken clerkToken = login(clerk.getPublisher(), clerk.getPassword(), clerk.getUDDINode().getName());
+								AuthToken clerkToken = login(clerk.getPublisher(), clerk.getPassword(), clerk.getManagerName(),clerk.getUDDINode().getName());
 								//set the clerkToken into the session
 								session.setAttribute(""token-"" + clerk.getName(), clerkToken.getAuthInfo());
 							} catch (Exception e) {
@@ -114,13 +116,14 @@
 		return response;
 	}
 	
-	private AuthToken login(String username, String password, String node) throws ConfigurationException, ClassNotFoundException,
+	private AuthToken login(String username, String password, String managerName, String node) throws ConfigurationException, ClassNotFoundException,
 		InstantiationException, IllegalAccessException, TransportException, DispositionReportFaultMessage, RemoteException, 
 		IllegalArgumentException, SecurityException, InvocationTargetException, NoSuchMethodException {
 		
-		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(node).getProxyTransport();
+		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+		String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
         Class<?> transportClass = Loader.loadClass(clazz);
-        Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(node);  
+        Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(managerName, node);  
 		UDDISecurityPortType securityService = transport.getUDDISecurityService();
 		GetAuthToken getAuthToken = new GetAuthToken();
 		getAuthToken.setUserID(username);
"
juddi,129aaae5e5af2dd3ad16be6817f5ad6a0d721566,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901517 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:35:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
index 0b6fe64..f04480e 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
@@ -42,6 +42,7 @@
 import org.apache.juddi.portlets.client.service.SubscriptionService;
 import org.apache.juddi.v3.client.config.UDDIClerk;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.config.UDDINode;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
@@ -84,7 +85,8 @@
 		try {
 			boolean isMatchingClerk=false;
 			UDDIClerk toClerk = null;
-			Map<String, UDDIClerk> clerks = UDDIClerkManager.getClientConfig().getUDDIClerks();
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
 			for (UDDIClerk clerk : clerks.values()) {
 				if (publisher.equals(clerk.getPublisher()) 
 						&& Constants.NODE_NAME.equals(clerk.getUDDINode().getName())) {
@@ -118,9 +120,10 @@
 		modelNode.setClerkName(clerk.getName());
 		modelNode.setDescription(node.getDescription());
 		try {
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(clerk.getManagerName());
+			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
 			Class<?> transportClass = Loader.loadClass(clazz);
-			Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(clerk.getUDDINode().getName());  
+			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(clerk.getManagerName(),clerk.getUDDINode().getName());  
 			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
 
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
@@ -157,12 +160,13 @@
 
 		logger.info(""Sending saveSubscriptions request.."");
 		try {
-			//before sending this we need to ready the listener node 
-			UDDIClerk clerk = UDDIClerkManager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
-			UDDIClerk toClerk = UDDIClerkManager.getClientConfig().getUDDIClerks().get(modelSubscription.getToClerkName());
+			//before sending this we need to ready the listener node
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
+			UDDIClerk toClerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getToClerkName());
 			if (toClerk==null) {
 				String publisher = (String) session.getAttribute(""UserName""); 
-				Map<String, UDDIClerk> clerks = UDDIClerkManager.getClientConfig().getUDDIClerks();
+				Map<String, UDDIClerk> clerks = manager.getClientConfig().getUDDIClerks();
 				for (UDDIClerk uddiClerk : clerks.values()) {
 					if (publisher.equals(uddiClerk.getPublisher()) 
 							&& Constants.NODE_NAME.equals(uddiClerk.getUDDINode().getName())) {
@@ -172,9 +176,9 @@
 			}
 			
 			logger.info(""Updating default UDDI server.."");
-			String defaultClazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 			Class<?> defaultTransportClass = Loader.loadClass(defaultClazz); 
-			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME); 
+			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME); 
 			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
 			
 			//making sure our node info is there and up to date.
@@ -212,7 +216,8 @@
 			logger.debug(""Saved ClientSubscriptionInfo to the default UDDI server"");
 			
 			//the listening server is ready; now add the subscription
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
+			
+			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
 			Class<?> transportClass = Loader.loadClass(clazz); 
 			Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(clerk.getUDDINode().getName()); 
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
@@ -282,10 +287,11 @@
 		logger.info(""Sending deleteSubscriptions request for subscriptionKey="" 
 				+ modelSubscription.getSubscriptionKey());
 		try {
-			UDDIClerk clerk = UDDIClerkManager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
+			String clazz = manager.getClientConfig().getUDDINode(clerk.getUDDINode().getName()).getProxyTransport();
 			Class<?> transportClass = Loader.loadClass(clazz);
-			Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(clerk.getUDDINode().getName()); 
+			Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(clerk.getManagerName(),clerk.getUDDINode().getName()); 
 			UDDISubscriptionPortType subscriptionService = transport.getUDDISubscriptionService();
 			DeleteSubscription deleteSubscription = new DeleteSubscription();
 			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
@@ -294,7 +300,7 @@
 			subscriptionService.deleteSubscription(deleteSubscription);
 			
 			//now remove it from the listener UDDI server too
-			String defaultClazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			String defaultClazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 			Class<?> defaultTransportClass = Loader.loadClass(defaultClazz); 
 			Transport defaultTransport = (Transport) defaultTransportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME); 
 			JUDDIApiPortType juddiApiService = defaultTransport.getJUDDIApiService();
@@ -341,15 +347,16 @@
 			coverage.setEndPoint(calendarEnd);
 			getSubscriptionResults.setCoveragePeriod(coverage);
 			
-			UDDIClerk clerk = UDDIClerkManager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
+			UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(Constants.MANAGER_NAME);
+			UDDIClerk clerk = manager.getClientConfig().getUDDIClerks().get(modelSubscription.getFromClerkName());
 			String authToken = (String) session.getAttribute(""token-"" + clerk.getName());
 			getSubscriptionResults.setAuthInfo(authToken);
             SyncSubscription syncSubscription = new SyncSubscription();
             syncSubscription.getGetSubscriptionResultsList().add(getSubscriptionResults);
 			
-			String clazz = UDDIClerkManager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
+			String clazz = manager.getClientConfig().getUDDINode(Constants.NODE_NAME).getProxyTransport();
 	        Class<?> transportClass = Loader.loadClass(clazz);
-	        Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(Constants.NODE_NAME);   
+	        Transport transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(Constants.MANAGER_NAME,Constants.NODE_NAME);   
        	    JUDDIApiPortType apiService = transport.getJUDDIApiService();
 			
        	    syncSubscription.setAuthInfo(userAuthToken);
"
juddi,874a60284efda114a7d112d0a2d17447ef5e02bb,"JUDDI-328
Limit notification list to last 5 entries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901516 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:33:58,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index d429010..0306010 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.api.impl;
 
+import java.util.Vector;
 import java.io.StringWriter;
 import java.rmi.RemoteException;
 import java.util.HashMap;
@@ -81,6 +82,8 @@
 public class JUDDIApiImpl extends AuthenticatedService implements JUDDIApiPortType {
 
 	private Logger log = Logger.getLogger(this.getClass());
+	private static int MAX_NOTIFICATIONS = 5;
+	
 	/**
 	 * Saves publisher(s) to the persistence layer.  This method is specific to jUDDI.
 	 */
@@ -558,7 +561,14 @@
 				log.info(""Notification received by UDDISubscriptionListenerService : "" + sw.toString());
 				
 				NotificationList nl = NotificationList.getInstance();
-				nl.getNotifications().add(sw.toString());
+				if (nl.getNotifications().size() == MAX_NOTIFICATIONS) {
+					nl.getNotifications().setSize(MAX_NOTIFICATIONS - 1);
+				}
+				nl.getNotifications().add(0, sw.toString());
+				Vector vect = nl.getNotifications();
+				for (int i = 0; i < vect.size(); i++) {
+					String str = (String) vect.get(i);
+				}		
 				
 				//update the registry with the notification list.
 				XRegisterHelper.handle(fromClerk, toClerk, list);
"
juddi,874a60284efda114a7d112d0a2d17447ef5e02bb,"JUDDI-328
Limit notification list to last 5 entries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901516 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:33:58,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
index 5333d8c..af5aaa8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/NotificationList.java
@@ -7,13 +7,13 @@
 	private static Vector<?> list = null;
 	
 	private NotificationList() {	
+		list = new Vector();
 	}
 	
 	@SuppressWarnings(""unchecked"")
 	public static NotificationList getInstance() {
 		if (nl == null) {
 			nl = new NotificationList();
-			list = new Vector();
 		}
 		return nl;
 	}
"
juddi,68e3cdffee36188a0e551bd637d13b34e0ba5ede,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901515 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 03:28:58,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
index 02c2d13..7a2b32a 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClientContainer.java
@@ -32,13 +32,12 @@
 			return (managers.get(managerName));
 		} else if (managers.size()==1 && managerName==null) {
 			return managers.values().iterator().next();
-		} else if (managers.size()==0 && managerName==null) {
+		} else {
 			UDDIClerkManager manager = new UDDIClerkManager(null);
 			manager.start();
 			addClerkManager(manager);
 			return manager;
 		}
-		throw new ConfigurationException(""Could not find UDDIClerkManager for name "" + managerName);
 	}
 	
 	public static void addClerkManager(UDDIClerkManager manager) {
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index efed447..0aba1f5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -39,7 +39,7 @@
 public class ClientConfig 
 {
 	private final static String UDDI_CONFIG_FILENAME_PROPERTY = ""uddi.client.xml"";
-	private final static String UDDI_CONFIG = ""META-INF/uddi.xml"";
+	public final static String UDDI_CONFIG = ""META-INF/uddi.xml"";
 	private Logger log = Logger.getLogger(ClientConfig.class);
 	private Configuration config = null;;
 	private Map<String,UDDINode> uddiNodes = null;
@@ -52,9 +52,9 @@
 	 * Constructor (note Singleton pattern).
 	 * @throws ConfigurationException
 	 */
-	public ClientConfig() throws ConfigurationException 
+	public ClientConfig(String configurationFile) throws ConfigurationException 
 	{
-		loadConfiguration();
+		loadConfiguration(configurationFile);
 	}
 	protected void loadManager() throws ConfigurationException {
 		uddiNodes = readNodeConfig(config);
@@ -68,19 +68,24 @@
 	 * file is updated the file will be reloaded. By default the reloadDelay is
 	 * set to 1 second to prevent excessive date stamp checking.
 	 */
-	private void loadConfiguration() throws ConfigurationException {
+	private void loadConfiguration(String configurationFile) throws ConfigurationException {
 		//Properties from system properties
 		CompositeConfiguration compositeConfig = new CompositeConfiguration();
 		compositeConfig.addConfiguration(new SystemConfiguration());
 		//Properties from XML file
-		XMLConfiguration xmlConfig = null;	
-		final String filename = System.getProperty(UDDI_CONFIG_FILENAME_PROPERTY);
-		if (filename != null) 
-		{
-			xmlConfig = new XMLConfiguration(filename);
-		} else { 
-			xmlConfig = new XMLConfiguration(UDDI_CONFIG);	
+		XMLConfiguration xmlConfig = null;
+		if (configurationFile!=null) {
+			xmlConfig = new XMLConfiguration(configurationFile);
+		} else {
+			final String filename = System.getProperty(UDDI_CONFIG_FILENAME_PROPERTY);
+			if (filename != null) 
+			{
+				xmlConfig = new XMLConfiguration(filename);
+			} else { 
+				xmlConfig = new XMLConfiguration(UDDI_CONFIG);	
+			}
 		}
+		log.info(""Reading UDDI Client properties file "" + xmlConfig.getBasePath());
 		long refreshDelay = xmlConfig.getLong(Property.UDDI_RELOAD_DELAY, 1000l);
 		log.debug(""Setting refreshDelay to "" + refreshDelay);
 		FileChangedReloadingStrategy fileChangedReloadingStrategy = new FileChangedReloadingStrategy();
@@ -146,7 +151,9 @@
 				}
 				uddiNode.setProperties(properties);
 			}
+			uddiNode.setAllowJUDDIAPI(          config.getBoolean(""manager.nodes.node("" + i +"")[@allowJUDDIAPI]"",true));
 			uddiNode.setName(                   config.getString(""manager.nodes.node("" + i +"").name""));
+			uddiNode.setManagerName(            config.getString(""manager[@name]""));
 			uddiNode.setDescription(            config.getString(""manager.nodes.node("" + i +"").description""));
 			uddiNode.setProxyTransport(         config.getString(""manager.nodes.node("" + i +"").proxyTransport""));
 			uddiNode.setInquiryUrl(             TokenResolver.replaceTokens(config.getString(""manager.nodes.node("" + i +"").inquiryUrl""),properties));
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
index b7da09a..b9832f0 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkManager.java
@@ -12,32 +12,26 @@
 
 public class UDDIClerkManager {
 	
-	private static UDDIClerkManager manager = null;
 	private static Logger log = Logger.getLogger(UDDIClerkManager.class);
     private ClientConfig clientConfig = null;
 	
 	/**
-	 * Singleton.
+	 * Manages the clerks. Initiates reading the client configuration from the uddi.xml.
 	 * @throws ConfigurationException 
 	 */
-	public UDDIClerkManager() throws ConfigurationException {
+	public UDDIClerkManager(String configurationFile) throws ConfigurationException {
 		super();
-		clientConfig = new ClientConfig();
+		clientConfig = new ClientConfig(configurationFile);
 	}
 	/**
 	 * Stops the clerks.
 	 * @throws ConfigurationException 
 	 */
-	public synchronized static void stop() throws ConfigurationException {
-		
-		if (manager!=null) {
-			log.info(""Stopping UDDI Clerks for manager "" + manager.clientConfig.getManagerName());
-			manager.releaseResources();
-			manager=null;
-			log.info(""UDDI Clerks shutdown completed for manager "" + manager.clientConfig.getManagerName());
-		} else {
-			log.warn(""UDDI Clerks where not running for manager "" + manager.clientConfig.getManagerName());
-		}
+	public void stop() throws ConfigurationException {
+		log.info(""Stopping UDDI Clerks for manager "" + clientConfig.getManagerName());
+		releaseResources();
+		UDDIClientContainer.removeClerkManager(getName());
+		log.info(""UDDI Clerks shutdown completed for manager "" + clientConfig.getManagerName());
 	}
 	
 	private void releaseResources() {
@@ -47,35 +41,20 @@
 	 * Initializes the UDDI Clerk.
 	 * @throws ConfigurationException  
 	 */
-	public synchronized static void start() throws ConfigurationException {
-		if (manager!=null) {
-			log.warn(""ClerkManager was already started. Going to reload.."");
-			manager.releaseResources();
-			manager.clientConfig.loadManager();
-		} else {
-			log.info(""Starting UDDI Clerks..."");
-			manager = new UDDIClerkManager();
+	public void start() throws ConfigurationException {
+		log.info(""Starting UDDI Clerks for manager "" + clientConfig.getManagerName() + ""..."");
+		UDDIClientContainer.addClerkManager(this);
+		if (clientConfig.isRegisterOnStartup()) {
+			saveClerkAndNodeInfo();
+			registerAnnotatedServices();
+			xRegister();
 		}
-		if (manager.clientConfig.isRegisterOnStartup()) {
-			manager.saveClerkAndNodeInfo();
-			manager.registerAnnotatedServices();
-			manager.xRegister();
-		}
-		log.info(""Clerks started succesfully for manager "" + manager.clientConfig.getManagerName());
+		log.info(""Clerks started succesfully for manager "" + clientConfig.getManagerName());
  	}
 	
-	public synchronized static void restart() throws ConfigurationException {
-		if (manager==null) {
-			log.warn(""ClerkManager nor running.."");
-		} else {
-			log.info(""Restarting UDDI Clerks..."");
-			manager.releaseResources();
-			manager.clientConfig.loadManager();
-			manager = new UDDIClerkManager();
-			manager.registerAnnotatedServices();
-			manager.xRegister();
-			log.info(""Clerks restarted succesfully for manager "" + manager.clientConfig.getManagerName());
-		}
+	public void restart() throws ConfigurationException {
+		stop();
+		start();
  	}
 	/**
 	 * Saves the clerk and node info from the uddi.xml to the jUDDI registry.
@@ -87,10 +66,10 @@
 			for (UDDIClerk defaultClerk : uddiClerks.values()) {
 				if (Transport.DEFAULT_NODE_NAME.equals(defaultClerk.uddiNode.getName())) {
 					for (UDDINode uddiNode : clientConfig.getUDDINodes().values()) {
-						defaultClerk.saveNode(uddiNode.getApiNode());
+						if (uddiNode.isAllowJUDDIAPI()) defaultClerk.saveNode(uddiNode.getApiNode());
 					}
 					for (UDDIClerk uddiClerk : clientConfig.getUDDIClerks().values()) {
-						defaultClerk.saveClerk(uddiClerk);
+						if (uddiClerk.getUDDINode().isAllowJUDDIAPI()) defaultClerk.saveClerk(uddiClerk);
 					}
 					break;
 				}
@@ -150,20 +129,13 @@
 		}
 	}
 	
-	public static ClientConfig getClientConfig() throws ConfigurationException {
-		return getManager().clientConfig;
+	public ClientConfig getClientConfig() {
+		return clientConfig;
 	}
 	
-	public static UDDIClerkManager getManager() throws ConfigurationException {
-		
-		if (manager==null) {
-			UDDIClerkManager.start();
-		}
-		return manager;
+	public String getName() {
+		return clientConfig.getManagerName();
 	}
 	
-	
-	
-	
 }
 
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
index c4ae4ce..db49d52 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDIClerkServlet.java
@@ -31,6 +31,7 @@
 	
 	private static final long serialVersionUID = -91998529871296125L;
 	private Logger logger = Logger.getLogger(UDDIClerkServlet.class);
+	UDDIClerkManager manager = null;
 	/**
 	 * Starting the UDDIClerkManager
 	 */
@@ -38,11 +39,14 @@
 	public void init(ServletConfig config) throws ServletException {
 		super.init(config);
 		try {
-			
-			logger.info(""Starting Clerk Manager"");
-			UDDIClerkManager.start();
+			String clientConfigFile = config.getInitParameter(""uddi.client.config"");
+			if (clientConfigFile==null) clientConfigFile = ClientConfig.UDDI_CONFIG;
+			logger.info(""Starting Clerk Manager.."");
+			UDDIClerkManager manager = new UDDIClerkManager(clientConfigFile);
+			manager.start();
+			logger.info(""Successfully Started Clerk Manager "" + manager.getName());
 		} catch (Exception e) {
-			logger.error(""UDDI-client could not be started.""
+			logger.error(""UDDI-client could not be started for manager "" + manager.getName() + "". ""
 					+ e.getMessage(), e);
 		} catch (Throwable t) {
 			logger.error(""UDDI-client could not be started.""
@@ -53,9 +57,9 @@
 	@Override
 	public void destroy() {
 		try {
-			UDDIClerkManager.stop();
+			manager.stop();
 		} catch (Exception e) {
-			logger.error(""UDDI-client could not be stopped.""
+			logger.error(""UDDI-Clerk Manager could not be stopped for manager "" + manager.getName() + "". ""
 					+ e.getMessage(), e);
 		} catch (Throwable t) {
 			logger.error(""UDDI-client could not be stopped.""
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
index 20e5ac6..bda0a3f 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/UDDINode.java
@@ -14,7 +14,9 @@
 	private Properties properties;
 	private Transport transport;
 	
+	private boolean allowJUDDIAPI;
 	private String name;
+	private String managerName;
 	private String description;
 	private String custodyTransferUrl;
 	private String inquiryUrl;
@@ -36,6 +38,7 @@
 	public UDDINode(Node node) {
 		super();
 		name = node.getName();
+		managerName = node.getManagerName();
 		description = node.getDescription();
 		custodyTransferUrl = node.getCustodyTransferUrl();
 		inquiryUrl = node.getInquiryUrl();
@@ -81,7 +84,7 @@
 			try {
 				String clazz = getProxyTransport();
 				Class<?> transportClass = Loader.loadClass(clazz);
-				transport = (Transport) transportClass.getConstructor(String.class).newInstance(name);
+				transport = (Transport) transportClass.getConstructor(String.class,String.class).newInstance(managerName,name);
 			} catch (Exception e) {
 				throw new TransportException(e.getMessage(),e);
 			}
@@ -97,6 +100,14 @@
 		this.name = name;
 	}
 
+	public String getManagerName() {
+		return managerName;
+	}
+
+	public void setManagerName(String managerName) {
+		this.managerName = managerName;
+	}
+
 	public String getDescription() {
 		return description;
 	}
@@ -192,4 +203,12 @@
 	public void setFactoryNamingProvider(String factoryNamingProvider) {
 		this.factoryNamingProvider = factoryNamingProvider;
 	}
+
+	public boolean isAllowJUDDIAPI() {
+		return allowJUDDIAPI;
+	}
+
+	public void setAllowJUDDIAPI(boolean allowJUDDIAPI) {
+		this.allowJUDDIAPI = allowJUDDIAPI;
+	}
 }
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/InVMTransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/InVMTransport.java
index 34e226f..26688fb 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/InVMTransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/InVMTransport.java
@@ -17,6 +17,7 @@
 package org.apache.juddi.v3.client.transport;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
 import org.uddi.v3_service.UDDIInquiryPortType;
@@ -29,6 +30,7 @@
 public class InVMTransport extends Transport {
 
 	private String nodeName = null;
+	private String managerName = null;
 	UDDIInquiryPortType inquiryService = null;
 	UDDISecurityPortType securityService = null;
 	UDDIPublicationPortType publishService = null;
@@ -47,10 +49,19 @@
 		this.nodeName = nodeName;
 	}
 	
+	public InVMTransport(String managerName, String nodeName) {
+		super();
+		this.nodeName = nodeName;
+		this.managerName = managerName;
+	}
+	
 	public UDDIInquiryPortType getUDDIInquiryService(String endpointURL) throws TransportException {
 		if (inquiryService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				inquiryService = (UDDIInquiryPortType) c.newInstance();
 			} catch (Exception e) {
@@ -63,7 +74,10 @@
 	public UDDISecurityPortType getUDDISecurityService(String endpointURL) throws TransportException {
 		if (securityService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				securityService = (UDDISecurityPortType) c.newInstance();
 			} catch (Exception e) {
@@ -76,7 +90,10 @@
 	public UDDIPublicationPortType getUDDIPublishService(String endpointURL) throws TransportException {
 		if (publishService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				publishService = (UDDIPublicationPortType) c.newInstance();
 			} catch (Exception e) {
@@ -89,7 +106,10 @@
 	public UDDISubscriptionPortType getUDDISubscriptionService(String endpointURL) throws TransportException {
 		if (subscriptionService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				subscriptionService = (UDDISubscriptionPortType) c.newInstance();
 			} catch (Exception e) {
@@ -102,7 +122,10 @@
 	public UDDISubscriptionListenerPortType getUDDISubscriptionListenerService(String endpointURL) throws TransportException {
 		if (subscriptionListenerService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				subscriptionListenerService = (UDDISubscriptionListenerPortType) c.newInstance();
 			} catch (Exception e) {
@@ -115,7 +138,10 @@
 	public UDDICustodyTransferPortType getUDDICustodyTransferService(String endpointURL) throws TransportException {
 		if (custodyTransferService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				custodyTransferService = (UDDICustodyTransferPortType) c.newInstance();
 			} catch (Exception e) {
@@ -128,7 +154,10 @@
 	public JUDDIApiPortType getJUDDIApiService(String endpointURL) throws TransportException {
 		if (publisherService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				}
 				Class<?> c = Class.forName(endpointURL);
 				publisherService = (JUDDIApiPortType) c.newInstance();
 			} catch (Exception e) {
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
index ca71b92..26340d7 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/JAXWSTransport.java
@@ -22,6 +22,7 @@
 import javax.xml.ws.Service;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
 import org.uddi.v3_service.UDDIInquiryPortType;
@@ -48,6 +49,7 @@
 	public final static String PUBLISHER_SERVICE             = ""JUDDI_Api_Port"";
 	
 	String nodeName = null;
+	String managerName = null;
 	UDDIInquiryPortType inquiryService = null;
 	UDDISecurityPortType securityService = null;
 	UDDIPublicationPortType publishService = null;
@@ -66,11 +68,20 @@
 		this.nodeName = nodeName;
 	}
 	
+	public JAXWSTransport(String managerName, String nodeName) {
+		super();
+		this.managerName = managerName;
+		this.nodeName = nodeName;
+	}
+	
 	public UDDIInquiryPortType getUDDIInquiryService(String endpointURL) throws TransportException {
 
 		if (inquiryService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				}
 				QName qName = new QName(API_V3_NAMESPACE, INQUIRY_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				inquiryService = (UDDIInquiryPortType) service.getPort(UDDIInquiryPortType.class);
@@ -85,7 +96,10 @@
 
 		if (securityService==null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				}
 				QName qName = new QName(API_V3_NAMESPACE, SECURITY_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				securityService = (UDDISecurityPortType) service.getPort(UDDISecurityPortType.class);
@@ -100,7 +114,10 @@
 
 		if (publishService==null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				}
 				QName qName = new QName(API_V3_NAMESPACE, PUBLISH_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				publishService = (UDDIPublicationPortType) service.getPort(UDDIPublicationPortType.class);
@@ -115,7 +132,10 @@
 
 		if (subscriptionService==null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				}
 				QName qName = new QName(SUB_V3_NAMESPACE, SUBSCRIPTION_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				subscriptionService = (UDDISubscriptionPortType) service.getPort(UDDISubscriptionPortType.class);
@@ -129,7 +149,10 @@
 	public UDDISubscriptionListenerPortType getUDDISubscriptionListenerService(String endpointURL) throws TransportException {
 		if (subscriptionListenerService == null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				}
 				QName qName = new QName(SUBR_V3_NAMESPACE, SUBSCRIPTION_LISTENER_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				subscriptionListenerService = (UDDISubscriptionListenerPortType) service.getPort(UDDISubscriptionListenerPortType.class);
@@ -143,7 +166,10 @@
 	public UDDICustodyTransferPortType getUDDICustodyTransferService(String endpointURL) throws TransportException {
 		if (custodyTransferService == null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				}
 				QName qName = new QName(CUSTODY_V3_NAMESPACE, CUSTODY_TRANSFER_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				custodyTransferService = (UDDICustodyTransferPortType) service.getPort(UDDICustodyTransferPortType.class);
@@ -157,7 +183,10 @@
 	public JUDDIApiPortType getJUDDIApiService(String endpointURL) throws TransportException {
 		if (publisherService == null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				if (endpointURL==null)  {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				}
 				QName qName = new QName(JUDDI_API_V3_NAMESPACE, PUBLISHER_SERVICE);
 				Service service = Service.create(new URL(endpointURL), qName);
 				publisherService = (JUDDIApiPortType) service.getPort(JUDDIApiPortType.class);
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
index 22a132f..4b28c84 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/RMITransport.java
@@ -25,6 +25,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.v3.client.config.Property;
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.log4j.Logger;
 import org.uddi.v3_service.UDDICustodyTransferPortType;
@@ -40,6 +41,7 @@
 	InitialContext context = null;
 	private Logger logger = Logger.getLogger(this.getClass());
 	private String nodeName = null;
+	private String managerName = null;
 	
 	public RMITransport() {
 		super();
@@ -52,11 +54,19 @@
 		initContext();
 	}
 	
+	public RMITransport(String managerName, String nodeName) throws NamingException, ConfigurationException {
+		super();
+		this.nodeName = nodeName;
+		this.managerName = managerName;
+		initContext();
+	}
+	
 	private void initContext() throws NamingException, ConfigurationException {
 		Properties env = new Properties();
-		String factoryInitial = UDDIClerkManager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_INITIAL);
-		String factoryURLPkgs = UDDIClerkManager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_URL_PKS);
-		String factoryNamingProvider = UDDIClerkManager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_PROVIDER_URL);
+		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+		String factoryInitial = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_INITIAL);
+		String factoryURLPkgs = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_FACTORY_URL_PKS);
+		String factoryNamingProvider = manager.getClientConfig().getConfiguration().getString(Property.UDDI_PROXY_PROVIDER_URL);
         if (factoryInitial!=null && factoryInitial!="""") env.setProperty(Property.UDDI_PROXY_FACTORY_INITIAL, factoryInitial);
         if (factoryURLPkgs!=null && factoryURLPkgs!="""") env.setProperty(Property.UDDI_PROXY_FACTORY_URL_PKS, factoryURLPkgs);
         if (factoryNamingProvider!=null && factoryNamingProvider!="""") env.setProperty(Property.UDDI_PROXY_PROVIDER_URL, factoryNamingProvider);
@@ -76,7 +86,10 @@
 	public UDDIInquiryPortType getUDDIInquiryService(String endpointURL) throws TransportException {
 		if (inquiryService==null) {
 			try {
-				if (endpointURL==null)  endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getInquiryUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -92,7 +105,10 @@
 	public UDDISecurityPortType getUDDISecurityService(String endpointURL) throws TransportException {
 		if (securityService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSecurityUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -108,7 +124,10 @@
 	public UDDIPublicationPortType getUDDIPublishService(String endpointURL) throws TransportException {
 		if (publishService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getPublishUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -124,7 +143,10 @@
 	public UDDISubscriptionPortType getUDDISubscriptionService(String endpointURL) throws TransportException {
 		if (subscriptionService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -140,7 +162,10 @@
 	public UDDISubscriptionListenerPortType getUDDISubscriptionListenerService(String endpointURL) throws TransportException {
 		if (subscriptionListenerService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getSubscriptionListenerUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -156,7 +181,10 @@
 	public UDDICustodyTransferPortType getUDDICustodyTransferService(String endpointURL) throws TransportException {
 		if (custodyTransferService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getCustodyTransferUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
@@ -172,7 +200,10 @@
 	public JUDDIApiPortType getJUDDIApiService(String endpointURL) throws TransportException {
 		if (publisherService==null) {
 			try {
-				if (endpointURL==null) endpointURL = UDDIClerkManager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				if (endpointURL==null) {
+					UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(managerName);
+					endpointURL = manager.getClientConfig().getUDDINode(nodeName).getJuddiApiUrl();
+				}
 				URI endpointURI = new URI(endpointURL);
 		    	String service    = endpointURI.getPath();
 		    	logger.debug(""Looking up service="" + service);
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index ce7069b..f74837a 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -14,6 +14,7 @@
 import org.apache.juddi.v3.client.transport.Transport;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.uddi.api_v3.FindBinding;
 import org.uddi.api_v3.FindBusiness;
 import org.uddi.api_v3.FindRelatedBusinesses;
@@ -64,8 +65,9 @@
 	    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
 	}
 	
-	public Node inquire(Element uddiReq) throws Exception{
-		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+	public Node inquire(Element uddiReq) throws Exception {
+		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
+		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
         Class<?> transportClass = Loader.loadClass(clazz);
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 		UDDIInquiryPortType inquiry = transport.getUDDIInquiryService();
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 1481119..663c2cd 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.AddPublisherAssertions;
@@ -65,7 +66,8 @@
 
 	public Node publish(Element uddiReq) throws Exception
 	{
-		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
+		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
         Class<?> transportClass = Loader.loadClass(clazz);
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 		UDDIPublicationPortType publish = transport.getUDDIPublishService();
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
index 0b02f78..8de6ee5 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 
 import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.config.UDDIClientContainer;
 import org.apache.juddi.v3.client.transport.Transport;
 import org.apache.log4j.helpers.Loader;
 import org.uddi.v3_service.UDDISecurityPortType;
@@ -41,7 +42,8 @@
 
 	public Node secure(Element uddiReq) throws Exception
 	{
-		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+		UDDIClerkManager manager = UDDIClientContainer.getUDDIClerkManager(null);
+		String clazz = manager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
         Class<?> transportClass = Loader.loadClass(clazz);
         Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
 	    UDDISecurityPortType security = transport.getUDDISecurityService();
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 38b3e8c..f3cb057 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -634,6 +634,7 @@
 			modelNode.setInquiryUrl(apiNode.getInquiryUrl());
 			modelNode.setJuddiApiUrl(apiNode.getJuddiApiUrl());
 			modelNode.setName(apiNode.getName());
+			modelNode.setManagerName(apiNode.getManagerName());
 			modelNode.setProxyTransport(apiNode.getProxyTransport());
 			modelNode.setPublishUrl(apiNode.getPublishUrl());
 			modelNode.setSecurityUrl(apiNode.getSecurityUrl());
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 5ff71d3..4c0ec0a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -815,6 +815,7 @@
 		apiNode.setInquiryUrl(modelNode.getInquiryUrl());
 		apiNode.setJuddiApiUrl(modelNode.getJuddiApiUrl());
 		apiNode.setName(modelNode.getName());
+		apiNode.setManagerName(modelNode.getManagerName());
 		apiNode.setProxyTransport(modelNode.getProxyTransport());
 		apiNode.setPublishUrl(modelNode.getPublishUrl());
 		apiNode.setSecurityUrl(modelNode.getSecurityUrl());
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Node.java b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
index b3aefa9..0ec5ce0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Node.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Node.java
@@ -33,6 +33,8 @@
 	@Id
 	@Column(name=""name"", nullable = false)
 	private String name;
+	@Column(name=""manager_name"", nullable = false, length=255)
+	private String managerName;
 	@Column(name=""proxy_transport"", nullable = false, length=255)
 	private String proxyTransport;
 	@Column(name=""security_url"", nullable = false, length=255)
@@ -78,6 +80,14 @@
 		this.name = name;
 	}
 
+	public String getManagerName() {
+		return managerName;
+	}
+
+	public void setManagerName(String managerName) {
+		this.managerName = managerName;
+	}
+
 	public String getProxyTransport() {
 		return proxyTransport;
 	}
"
juddi,dd3e3ab909606b3c74c2a2a17b22e656addfcbd0,"JUDDI-318, Need a way of passing UDDI configs into a map rather than just passing a single config into the singleton.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@901501 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-21 02:31:51,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
index aaa07c7..aec96a3 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/api_v3/Node.java
@@ -32,6 +32,7 @@
 @XmlAccessorType(XmlAccessType.FIELD)
 @XmlType(name = ""node"", propOrder = {
 	""name"",
+	""managerName"",
     ""description"",
     ""custodyTransferUrl"",
     ""inquiryUrl"",
@@ -49,7 +50,8 @@
 	
 	@XmlTransient
 	private static final long serialVersionUID = -4601378453000384721L;
-	protected String name;
+	private String name;
+	private String managerName;
 	private String description;
 	private String custodyTransferUrl;
 	private String inquiryUrl;
@@ -72,6 +74,12 @@
 		this.name = name;
 	}
 	
+	public String getManagerName() {
+		return managerName;
+	}
+	public void setManagerName(String managerName) {
+		this.managerName = managerName;
+	}
 	public String getDescription() {
 		return description;
 	}
"
juddi,4d33427f99733e143a603da5e938983413193e7e,"JUDDI-326
Add headers.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@900888 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-19 18:27:28,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java b/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
index dbac33d..5cee549 100644
--- a/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
+++ b/juddi-core/src/main/java/org/apache/juddi/ClassUtil.java
@@ -1,5 +1,25 @@
+/*
+ * Copyright 2001-2010 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 package org.apache.juddi;
 
+/**
+ * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
+ */
+
 public class ClassUtil {
     public static Class forName(String name, Class caller)
     	throws ClassNotFoundException
"
juddi,7ad133e80a4b00736e52ffed76fd99f362124bb9,"JUDDI-326
Make sure we're using classForName from ClassUtil rather than using the log4j classloading util.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@900879 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-19 18:17:21,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
index 70cef28..422c68b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
@@ -18,10 +18,12 @@
 package org.apache.juddi.v3.auth;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.juddi.ClassUtil;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
 import org.apache.log4j.Logger;
 
+
 /**
  * @author Steve Viens (sviens@apache.org)
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -71,7 +73,7 @@
 		Class<?> authClass = null;
 		try {
 			// Use Loader to locate & load the Authenticator implementation
-			authClass = org.apache.log4j.helpers.Loader.loadClass(className);
+			authClass = ClassUtil.forName(className, AuthenticatorFactory.class);
 		}
 		catch(ClassNotFoundException e) {
 			log.error(""The specified Authenticator class '"" + className + ""' was not found in classpath."");
"
juddi,2983a199b13e067992b91724269ff9fc12f35d00,"JUDDI-320 fix so the display code does not write over existing endpoints.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@898017 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-11 19:21:05,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index 58d4a80..c8466ce 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -16,6 +16,8 @@
  */
 package org.apache.juddi.portlets.client;
 
+import java.util.ArrayList;
+
 import org.apache.juddi.portlets.client.model.Business;
 import org.apache.juddi.portlets.client.model.Service;
 import org.apache.juddi.portlets.client.model.ServiceBinding;
@@ -157,7 +159,7 @@
 								+ serviceBinding.getAccessPoint() + ""'>"" 
 								+ serviceBinding.getAccessPoint() + ""</a>"").getHTML());
 						}
-						table.setHTML(row, 1, bindingtable.toString());
+						table.setHTML(row++, 1, bindingtable.toString());
 					}
 				} else {
 					Window.alert(""error: "" + response.getMessage());
"
juddi,838f942804e685742e5cf0590c1045fcea17b5b5,"JUDDI-325
Moved over ESB patch for vfszip/spaces.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@896172 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-05 18:43:15,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 90394e1..401d7b4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -487,7 +487,18 @@
 			url = Loader.getResource(JUDDI_INSTALL_DATA_DIR);
 			basePath = JUDDI_INSTALL_DATA_DIR;
 		}
-		String path=url.getPath();
+		
+		String path = null;
+		if (""vfsfile"".equals(url.getProtocol())) {
+			try {
+				path = url.toURI().getPath() ;
+			} catch (URISyntaxException e) {
+				throw new ConfigurationException(e);
+			}
+		} else {
+			path = url.getPath();
+		}
+		
 		File dir = new File(path);
 		String rootPublisherStr = config.getString(Property.JUDDI_ROOT_PUBLISHER);
 		if (dir.exists()) {
"
juddi,bebb0e6f0c7975075448a454e473d8a748b73195,"JUDDI-335
Change the test data so that it has an end date of 2100, not 2010.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@895873 13f79535-47bb-0310-9956-ffa450edef68
",2010-01-05 03:20:41,Thomas Cunningham,"diff --git a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
index 165c5a9..321e1b9 100644
--- a/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
+++ b/uddi-tck-base/src/main/java/org/apache/juddi/v3/tck/TckSubscription.java
@@ -29,6 +29,7 @@
 import org.uddi.api_v3.ServiceInfos;
 import org.uddi.api_v3.TModelDetail;
 import org.uddi.api_v3.TModelList;
+import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.GetSubscriptionResults;
 import org.uddi.sub_v3.KeyBag;
@@ -235,7 +236,7 @@
 		try {
 			GetSubscriptionResults getSubResultsIn = (GetSubscriptionResults)EntityCreator.buildFromDoc(SAM_SUBSCRIPTIONRESULTS3_XML, ""org.uddi.sub_v3"");
 			getSubResultsIn.setAuthInfo(authInfoSam);
-			
+					
 			Subscription subIn = (Subscription)EntityCreator.buildFromDoc(SAM_SUBSCRIPTION3_XML, ""org.uddi.sub_v3"");
 			
 			int expectedIterations = FINDQUALIFIER_TMODEL_TOTAL / subIn.getMaxEntities();
"
juddi,e5fcdb3c7710d7a270459a335ad6f0bffec8d955,"JUDDI-324
Make sure we check system properties for an alternate uddi.xml filename
to use for XML configuration.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@893621 13f79535-47bb-0310-9956-ffa450edef68
",2009-12-23 20:28:47,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
index 44febea..efed447 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/config/ClientConfig.java
@@ -38,6 +38,7 @@
  */
 public class ClientConfig 
 {
+	private final static String UDDI_CONFIG_FILENAME_PROPERTY = ""uddi.client.xml"";
 	private final static String UDDI_CONFIG = ""META-INF/uddi.xml"";
 	private Logger log = Logger.getLogger(ClientConfig.class);
 	private Configuration config = null;;
@@ -72,7 +73,14 @@
 		CompositeConfiguration compositeConfig = new CompositeConfiguration();
 		compositeConfig.addConfiguration(new SystemConfiguration());
 		//Properties from XML file
-		XMLConfiguration xmlConfig = new XMLConfiguration(UDDI_CONFIG);
+		XMLConfiguration xmlConfig = null;	
+		final String filename = System.getProperty(UDDI_CONFIG_FILENAME_PROPERTY);
+		if (filename != null) 
+		{
+			xmlConfig = new XMLConfiguration(filename);
+		} else { 
+			xmlConfig = new XMLConfiguration(UDDI_CONFIG);	
+		}
 		long refreshDelay = xmlConfig.getLong(Property.UDDI_RELOAD_DELAY, 1000l);
 		log.debug(""Setting refreshDelay to "" + refreshDelay);
 		FileChangedReloadingStrategy fileChangedReloadingStrategy = new FileChangedReloadingStrategy();
"
juddi,e337b9df9db60ce77f1d149b63e8d3db06a67f46,"JUDDI-307
Use uddi.xml to find which transport to use.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@888561 13f79535-47bb-0310-9956-ffa450edef68
",2009-12-08 20:29:21,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index 6cd1f3a..ce7069b 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -10,7 +10,10 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
-import org.apache.juddi.v3.client.transport.InVMTransport;
+import org.apache.log4j.helpers.Loader;
+import org.apache.juddi.v3.client.transport.Transport;
+
+import org.apache.juddi.v3.client.config.UDDIClerkManager;
 import org.uddi.api_v3.FindBinding;
 import org.uddi.api_v3.FindBusiness;
 import org.uddi.api_v3.FindRelatedBusinesses;
@@ -30,8 +33,8 @@
  * @author Tom Cunningham (tcunning@apache.org)
  */
 public class UDDIInquiryService {
-	//private UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
-	
+	private final static String DEFAULT_NODE_NAME = ""default"";
+
 	private HashMap<String, Handler> operations = null;
 
 	public UDDIInquiryService() {
@@ -60,11 +63,13 @@
 	    if ((operation == null) || (operation.trim().length() == 0))
 	    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
 	}
-
-	public Node inquire(Element uddiReq) throws Exception{		  
-		InVMTransport invmtransport = new InVMTransport();		
-	    UDDIInquiryPortType inquiry = invmtransport.getUDDIInquiryService();
-
+	
+	public Node inquire(Element uddiReq) throws Exception{
+		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+        Class<?> transportClass = Loader.loadClass(clazz);
+        Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
+		UDDIInquiryPortType inquiry = transport.getUDDIInquiryService();
+        
 	    //new RequestHandler on it's own thread
 	    RequestHandler requestHandler = new RequestHandler();
 	    requestHandler.setPortType(inquiry);
"
juddi,e337b9df9db60ce77f1d149b63e8d3db06a67f46,"JUDDI-307
Use uddi.xml to find which transport to use.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@888561 13f79535-47bb-0310-9956-ffa450edef68
",2009-12-08 20:29:21,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index b1988e4..1481119 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -2,7 +2,9 @@
 
 import java.util.HashMap;
 
-import org.apache.juddi.v3.client.transport.InVMTransport;
+import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.transport.Transport;
+import org.apache.log4j.helpers.Loader;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeleteBinding;
 import org.uddi.api_v3.DeleteBusiness;
@@ -25,10 +27,10 @@
  * @author Tom Cunningham (tcunning@apache.org)
  */
 public class UDDIPublicationService {
+	private final static String DEFAULT_NODE_NAME = ""default"";
 
 	  // collection of valid operations
 
-
 	private HashMap<String, Handler> operations = null;
 
 	
@@ -63,8 +65,10 @@
 
 	public Node publish(Element uddiReq) throws Exception
 	{
-		InVMTransport invmtransport = new InVMTransport();		
-		UDDIPublicationPortType publish = invmtransport.getUDDIPublishService();
+		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+        Class<?> transportClass = Loader.loadClass(clazz);
+        Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
+		UDDIPublicationPortType publish = transport.getUDDIPublishService();
 
 	    //new RequestHandler on it's own thread
 	    RequestHandler requestHandler = new RequestHandler();
"
juddi,e337b9df9db60ce77f1d149b63e8d3db06a67f46,"JUDDI-307
Use uddi.xml to find which transport to use.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@888561 13f79535-47bb-0310-9956-ffa450edef68
",2009-12-08 20:29:21,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
index 1123787..0b02f78 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
@@ -2,7 +2,9 @@
 
 import java.util.HashMap;
 
-import org.apache.juddi.v3.client.transport.InVMTransport;
+import org.apache.juddi.v3.client.config.UDDIClerkManager;
+import org.apache.juddi.v3.client.transport.Transport;
+import org.apache.log4j.helpers.Loader;
 import org.uddi.v3_service.UDDISecurityPortType;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -15,7 +17,8 @@
  * @author Kurt Stam (kurt.stam@redhat.com)
  */
 public class UDDISecurityService {
-
+	private final static String DEFAULT_NODE_NAME = ""default"";
+	
 	// collection of valid operations
 	private HashMap<String, Handler> operations = null;
 
@@ -38,8 +41,10 @@
 
 	public Node secure(Element uddiReq) throws Exception
 	{
-		InVMTransport invmtransport = new InVMTransport();		
-        UDDISecurityPortType security = invmtransport.getUDDISecurityService();
+		String clazz = UDDIClerkManager.getClientConfig().getUDDINode(DEFAULT_NODE_NAME).getProxyTransport();
+        Class<?> transportClass = Loader.loadClass(clazz);
+        Transport transport = (Transport) transportClass.getConstructor(String.class).newInstance(DEFAULT_NODE_NAME);
+	    UDDISecurityPortType security = transport.getUDDISecurityService();
 		
 		//new RequestHandler on it's own thread
 		RequestHandler requestHandler = new RequestHandler();
"
juddi,a9c7a738951eb6120096e249651d909e63c92c23,"JUDDI-315
Make ""other"" string a private static final 


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@883724 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-24 15:07:56,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index 8c748f3..58d4a80 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -33,7 +33,7 @@
 import com.google.gwt.user.client.ui.TableListener;
 
 public class DetailPanel  extends FlowPanel  implements TableListener{
-
+	private static final String OTHER_BINDING_TYPE = ""other"";
 	private InquiryServiceAsync inquiryService = (InquiryServiceAsync) GWT.create(InquiryService.class); 
 	private DetailPanel detailPanel = null;
 	FlexTable table = new FlexTable();;
@@ -148,7 +148,7 @@
 						
 						// For JBossESB or others using ""other"" as UrlType, don't display the accesspoint as 
 						// http URL
-						if (""other"".equals(serviceBinding.getUrlType())) {
+						if (OTHER_BINDING_TYPE.equals(serviceBinding.getUrlType())) {
 							bindingtable.setHTML(bindingRow++, 1, serviceBinding.getUrlType() + "":"" 
 									+  new HTML(serviceBinding.getAccessPoint()).getHTML());							
 						} else {
"
juddi,92a62cdc23c3278bb70dfab11c848d6926222ee3,"JUDDI-315
Don't render anchortext if access point url type is ""other"".


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@883719 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-24 14:59:33,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
index f29db2b..8c748f3 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/DetailPanel.java
@@ -145,10 +145,18 @@
 						bindingtable.setHTML(bindingRow, 0, UDDIBrowser.images.description().getHTML());
 						bindingtable.setText(bindingRow++, 1,  serviceBinding.getDescription());
 						bindingtable.setHTML(bindingRow, 0, UDDIBrowser.images.endpointlive().getHTML());
-						bindingtable.setHTML(bindingRow++, 1, serviceBinding.getUrlType() + "":"" 
+						
+						// For JBossESB or others using ""other"" as UrlType, don't display the accesspoint as 
+						// http URL
+						if (""other"".equals(serviceBinding.getUrlType())) {
+							bindingtable.setHTML(bindingRow++, 1, serviceBinding.getUrlType() + "":"" 
+									+  new HTML(serviceBinding.getAccessPoint()).getHTML());							
+						} else {
+							bindingtable.setHTML(bindingRow++, 1, serviceBinding.getUrlType() + "":"" 
 								+  new HTML(""<a href='"" 
 								+ serviceBinding.getAccessPoint() + ""'>"" 
 								+ serviceBinding.getAccessPoint() + ""</a>"").getHTML());
+						}
 						table.setHTML(row, 1, bindingtable.toString());
 					}
 				} else {
"
juddi,4164e08e64d74e42e298a9c46351d459a8d91f16,"JUDDI-313, increase length to 4000

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@883567 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-24 01:42:52,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index 2022b35..ea7c972 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -89,7 +89,7 @@
 		this.accessPointType = accessPointType;
 	}
 
-	@Column(name = ""access_point_url"", length = 2000)
+	@Column(name = ""access_point_url"", length = 4000)
 	public String getAccessPointUrl() {
 		return this.accessPointUrl;
 	}
"
juddi,54f5210906b73066a4c5ea6a43ef06d7189cf3f6,"JUDDI-312, setting object to null if we have a ServiceInfoList with 0 length. Added this into the test suite.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@883447 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-23 18:24:35,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index b1b8187..c9ca5d3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -594,6 +594,7 @@
 									   org.uddi.api_v3.ServiceInfos apiServiceInfos,
 									   org.uddi.api_v3.BusinessInfo apiBusinessInfo) 
 				   throws DispositionReportFaultMessage {
+		if (modelBusinessServiceList.size()==0) return;
 		if (apiServiceInfos == null)
 			apiServiceInfos = new org.uddi.api_v3.ServiceInfos();
 		
"
juddi,86ac0cb29b49ff06907aa186c98bee4e2d15a228,"JUDDI-311 increasing authorized column from 20 to 255.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@883390 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-23 16:15:43,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java b/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
index e85c3ff..de5a2f8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
@@ -34,7 +34,6 @@
 	private static final long serialVersionUID = 1147567747533293480L;
 	private String authToken;
 	private String authorizedName;
-	private String publisherName;
 	private Date created;
 	private Date lastUsed;
 	private int numberOfUses;
@@ -48,7 +47,6 @@
 			int numberOfUses, int tokenState) {
 		this.authToken = authToken;
 		this.authorizedName = authorizedName;
-		this.publisherName = publisherName;
 		this.created = created;
 		this.lastUsed = lastUsed;
 		this.numberOfUses = numberOfUses;
@@ -64,7 +62,7 @@
 		this.authToken = authToken;
 	}
 
-	@Column(name = ""authorized_name"", nullable = false, length = 20)
+	@Column(name = ""authorized_name"", nullable = false, length = 255)
 	public String getAuthorizedName() {
 		return this.authorizedName;
 	}
@@ -72,14 +70,6 @@
 		this.authorizedName = authorizedName;
 	}
 
-	@Column(name = ""publisher_name"")
-	public String getPublisherName() {
-		return this.publisherName;
-	}
-	public void setPublisherName(String publisherName) {
-		this.publisherName = publisherName;
-	}
-
 	@Temporal(TemporalType.TIMESTAMP)
 	@Column(name = ""created"", nullable = false, length = 29)
 	public Date getCreated() {
"
juddi,03990d8c87d0b304ffab5f47f108afd171f131e6,"JUDDI-309 increasing the size of this field

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@836191 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-14 15:37:33,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index 166269d..2022b35 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -81,7 +81,7 @@
 		this.businessService = businessService;
 	}
 
-	@Column(name = ""access_point_type"", length = 20)
+	@Column(name = ""access_point_type"", length = 255)
 	public String getAccessPointType() {
 		return this.accessPointType;
 	}
"
juddi,4d916ab31f1098fe1775882d97e79728dbfdff03,"JUDDI-308 applying patch from Bryan Pendleton, so tomcat can shutdown cleanly

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@835705 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-13 02:08:21,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 7101a6b..839a435 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -69,7 +69,7 @@
 	
 	public SubscriptionNotifier() throws ConfigurationException {
 		super();
-		timer = new Timer();
+		timer = new Timer(true);
 		timer.scheduleAtFixedRate(this, startBuffer, interval);
 	}
 
"
juddi,e62205716dd2f6a9be74ea45bfde8dfba7bc16ec,"JUDDI-306, adding entityKey into the return object

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@833908 13f79535-47bb-0310-9956-ffa450edef68
",2009-11-08 18:25:19,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index bc0aca4..b1b8187 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -730,6 +730,7 @@
 		apiOperationalInfo.setModifiedIncludingChildren(TypeConvertor.convertDateToXMLGregorianCalendar(modelUddiEntity.getModifiedIncludingChildren()));
 		apiOperationalInfo.setNodeID(modelUddiEntity.getNodeId());
 		apiOperationalInfo.setAuthorizedName(modelUddiEntity.getAuthorizedName());
+		apiOperationalInfo.setEntityKey(modelUddiEntity.getEntityKey());
 	}
 
 
"
juddi,aa8635e32cd8c260cb47d38cadb5d7fbe6e2581a,"JUDDI-298
Make sure we are passing the JUDDI exception on.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827871 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-21 02:43:41,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index 87bc8df..93f4db7 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -16,6 +16,7 @@
 package org.apache.juddi.v3.client.transport.wrapper;
 
 import java.io.StringWriter;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.rmi.Remote;
 
@@ -155,6 +156,9 @@
       // this child to the soap response body
       document.appendChild(element.getFirstChild());
       setResponse(document);
+    } catch (InvocationTargetException ite) {
+    	log.error(ite.getTargetException().getMessage());
+    	setException(ite.getTargetException().getMessage());
     }
     catch(Exception ex) // Catch any other exceptions
     {
"
juddi,aa8635e32cd8c260cb47d38cadb5d7fbe6e2581a,"JUDDI-298
Make sure we are passing the JUDDI exception on.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827871 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-21 02:43:41,Thomas Cunningham,"diff --git a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index daa8b46..b1988e4 100644
--- a/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/juddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -52,32 +52,37 @@
 	}
 
 	//Verify that the appropriate endpoint was targeted for
-		// this service request.  The validateRequest method will
-		// throw an UnsupportedOperationException if anything's amiss.
-		public void validateRequest(String operation)
-				throws UnsupportedOperationException
-		{
-		    if ((operation == null) || (operation.trim().length() == 0))
-		    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
-		  }
+	// this service request.  The validateRequest method will
+	// throw an UnsupportedOperationException if anything's amiss.
+	public void validateRequest(String operation)
+		throws UnsupportedOperationException
+	{
+	    if ((operation == null) || (operation.trim().length() == 0))
+	    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
+	}
 
-	  public Node publish(Element uddiReq) throws Exception
-	  {
-		  InVMTransport invmtransport = new InVMTransport();		
-		  UDDIPublicationPortType publish = invmtransport.getUDDIPublishService();
+	public Node publish(Element uddiReq) throws Exception
+	{
+		InVMTransport invmtransport = new InVMTransport();		
+		UDDIPublicationPortType publish = invmtransport.getUDDIPublishService();
 
-	      //new RequestHandler on it's own thread
-	      RequestHandler requestHandler = new RequestHandler();
-	      requestHandler.setPortType(publish);
-	      String operation = requestHandler.getOperation(uddiReq);
-		  Handler opHandler = operations.get(operation);
-	      requestHandler.setMethodName(opHandler.getMethodName());
-		  requestHandler.setOperationClass(opHandler.getParameter());
+	    //new RequestHandler on it's own thread
+	    RequestHandler requestHandler = new RequestHandler();
+	    requestHandler.setPortType(publish);
+	    String operation = requestHandler.getOperation(uddiReq);
+		Handler opHandler = operations.get(operation);
+	    requestHandler.setMethodName(opHandler.getMethodName());
+		requestHandler.setOperationClass(opHandler.getParameter());
 		  
-		  @SuppressWarnings(""unused"")
-	      String version   = requestHandler.getVersion(uddiReq, operation);
-	      validateRequest(operation);
+		@SuppressWarnings(""unused"")
+	    String version   = requestHandler.getVersion(uddiReq, operation);
+	    validateRequest(operation);
+	    
+	    Node temp = requestHandler.invoke(uddiReq);
+	    if (requestHandler.getException()!=null) {
+	    	throw new Exception(requestHandler.getException());
+	    }
 
-	      return requestHandler.invoke(uddiReq);
-	  }
+	    return temp;
+	}
 }
"
juddi,aa8635e32cd8c260cb47d38cadb5d7fbe6e2581a,"JUDDI-298
Make sure we are passing the JUDDI exception on.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827871 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-21 02:43:41,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 018558e..f20660d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -55,6 +55,7 @@
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.v3.error.ErrorMessage;
 import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.RegistryException;
 import org.apache.juddi.v3.error.UDDIErrorHelper;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
@@ -455,6 +456,8 @@
 	
 			tx.commit();
 			return result;
+		} catch (RegistryException e) {
+			throw e;
 		} finally {
 			if (tx.isActive()) {
 				tx.rollback();
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 2878f9c..1c4addf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -21,11 +21,11 @@
 
 import javax.persistence.EntityManager;
 
-import org.apache.juddi.error.AuthTokenRequiredException;
-import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.v3.auth.Authenticator;
 import org.apache.juddi.v3.auth.AuthenticatorFactory;
+import org.apache.juddi.v3.error.AuthTokenRequiredException;
+import org.apache.juddi.v3.error.ErrorMessage;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
index 3a974cb..7630a0b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/InquiryHelper.java
@@ -23,8 +23,6 @@
 import javax.persistence.EntityManager;
 import javax.xml.ws.Holder;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.InvalidKeyPassedException;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.query.FetchBindingTemplatesQuery;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
@@ -48,6 +46,8 @@
 import org.apache.juddi.query.FindTModelByIdentifierQuery;
 import org.apache.juddi.query.FindTModelByNameQuery;
 import org.apache.juddi.query.util.FindQualifiers;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BusinessList;
 import org.uddi.api_v3.Direction;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
index bdcc2dc..d429010 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/JUDDIApiImpl.java
@@ -48,8 +48,6 @@
 import org.apache.juddi.api_v3.SyncSubscription;
 import org.apache.juddi.api_v3.SyncSubscriptionDetail;
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.InvalidKeyPassedException;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.model.ClientSubscriptionInfo;
@@ -57,6 +55,8 @@
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.subscription.NotificationList;
 import org.apache.juddi.v3.client.transport.Transport;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.v3_service.JUDDIApiPortType;
 import org.apache.juddi.validation.ValidateClerk;
 import org.apache.juddi.validation.ValidateClientSubscriptionInfo;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
index 84f72da..c8d6950 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
@@ -35,8 +35,6 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.model.BindingTemplate;
 import org.apache.juddi.model.BusinessEntity;
 import org.apache.juddi.model.BusinessService;
@@ -44,6 +42,8 @@
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.util.DynamicQuery;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.juddi.validation.ValidateCustodyTransfer;
 import org.uddi.custody_v3.DiscardTransferToken;
 import org.uddi.custody_v3.KeyBag;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index e83565b..629538c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -24,12 +24,12 @@
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.validation.ValidateInquiry;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.ErrorMessage;
 import org.uddi.api_v3.BindingDetail;
 import org.uddi.api_v3.BusinessDetail;
 import org.uddi.api_v3.BusinessList;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 58e00c2..018558e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -51,9 +51,11 @@
 import org.uddi.v3_service.UDDIPublicationPortType;
 
 import org.apache.commons.configuration.ConfigurationException;
-import org.apache.juddi.error.UDDIErrorHelper;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.UDDIErrorHelper;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.query.FetchBusinessEntitiesQuery;
 import org.apache.juddi.query.FetchTModelsQuery;
@@ -66,8 +68,6 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index c46dbda..eb51ba2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -31,11 +31,11 @@
 import org.uddi.v3_service.UDDISecurityPortType;
 
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.error.UnknownUserException;
-import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.v3.auth.Authenticator;
 import org.apache.juddi.v3.auth.AuthenticatorFactory;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.UnknownUserException;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 678a2b4..30f0216 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -63,9 +63,6 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidValueException;
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
@@ -73,6 +70,9 @@
 import org.apache.juddi.model.SubscriptionMatch;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.FindSubscriptionByPublisherQuery;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidValueException;
 import org.apache.juddi.validation.ValidateSubscription;
 import org.apache.log4j.Logger;
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index cf29e9c..c3c122d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -27,11 +27,11 @@
 import javax.xml.bind.Marshaller;
 
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.subscription.NotificationList;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
 import org.apache.juddi.validation.ValidateSubscriptionListener;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index 03f55b0..90394e1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -46,14 +46,14 @@
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.api.impl.UDDIInquiryImpl;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.KeyUnavailableException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.KeyUnavailableException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.validation.ValidateUDDIKey;
 import org.apache.log4j.Logger;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
index 9e42850..9ca875a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/keygen/DefaultKeyGenerator.java
@@ -22,8 +22,8 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index 94f9e1b..38b3e8c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -23,9 +23,9 @@
 
 import javax.xml.bind.JAXBException;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.jaxb.JAXBMarshaller;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.Description;
 import org.uddi.sub_v3.ObjectFactory;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 1992502..bc0aca4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -22,12 +22,12 @@
 
 import javax.xml.bind.JAXBException;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.jaxb.JAXBMarshaller;
 import org.apache.juddi.model.OverviewDoc;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.subscription.TypeConvertor;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.CompletionStatus;
 import org.uddi.api_v3.OperationalInfo;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/TypeConvertor.java b/juddi-core/src/main/java/org/apache/juddi/subscription/TypeConvertor.java
index 38e8693..71a8d9f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/TypeConvertor.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/TypeConvertor.java
@@ -24,8 +24,8 @@
 import javax.xml.datatype.Duration;
 import javax.xml.datatype.XMLGregorianCalendar;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 /**
  * 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/Authenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/Authenticator.java
index 778af6f..3799d89 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/Authenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/Authenticator.java
@@ -17,9 +17,9 @@
 
 package org.apache.juddi.v3.auth;
 
-import org.apache.juddi.error.AuthenticationException;
-import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.AuthenticationException;
+import org.apache.juddi.v3.error.FatalErrorException;
 
 /**
  * Authenticator interface. Any class implementing this interface can be invoked by
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
index 0471e87..4055bf1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/CryptedXMLDocAuthenticator.java
@@ -32,11 +32,11 @@
 import org.apache.juddi.config.Property;
 import org.apache.juddi.cryptor.Cryptor;
 import org.apache.juddi.cryptor.CryptorFactory;
-import org.apache.juddi.error.AuthenticationException;
-import org.apache.juddi.error.RegistryException;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.UnknownUserException;
+import org.apache.juddi.v3.error.AuthenticationException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.RegistryException;
+import org.apache.juddi.v3.error.UnknownUserException;
 import org.apache.log4j.Logger;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
index 18e2ce8..0d522eb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/JUDDIAuthenticator.java
@@ -22,10 +22,10 @@
 
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.config.PersistenceManager;
-import org.apache.juddi.error.AuthenticationException;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.UnknownUserException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.AuthenticationException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.UnknownUserException;
 import org.apache.log4j.Logger;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
index d93450f..f9c17a4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/XMLDocAuthenticator.java
@@ -30,11 +30,11 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.AuthenticationException;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.UnknownUserException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.AuthenticationException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.UnknownUserException;
 import org.apache.log4j.Logger;
 import org.apache.log4j.helpers.Loader;
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClerk.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClerk.java
index 64ce40c..49956a8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClerk.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClerk.java
@@ -23,11 +23,11 @@
 
 import org.apache.juddi.api_v3.Clerk;
 import org.apache.juddi.api_v3.Node;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClientSubscriptionInfo.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClientSubscriptionInfo.java
index 43e8dff..d84e41c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClientSubscriptionInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateClientSubscriptionInfo.java
@@ -27,11 +27,11 @@
 import org.apache.juddi.api_v3.GetAllClientSubscriptionInfoDetail;
 import org.apache.juddi.api_v3.GetClientSubscriptionInfoDetail;
 import org.apache.juddi.api_v3.SaveClientSubscriptionInfo;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
index 3e22855..08b6361 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateCustodyTransfer.java
@@ -26,17 +26,17 @@
 import javax.persistence.EntityManager;
 import javax.persistence.Query;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.TokenAlreadyExistsException;
-import org.apache.juddi.error.TransferNotAllowedException;
-import org.apache.juddi.error.UserMismatchException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.model.TransferTokenKey;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.util.DynamicQuery;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.TokenAlreadyExistsException;
+import org.apache.juddi.v3.error.TransferNotAllowedException;
+import org.apache.juddi.v3.error.UserMismatchException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.custody_v3.DiscardTransferToken;
 import org.uddi.custody_v3.KeyBag;
 import org.uddi.custody_v3.TransferEntities;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index 49abb9a..f194ba1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -38,13 +38,13 @@
 
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.ValueNotAllowedException;
-import org.apache.juddi.error.InvalidCombinationException;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.util.FindQualifiers;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidCombinationException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
index 552bd33..ed35231 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateNode.java
@@ -22,10 +22,10 @@
 import javax.persistence.EntityManager;
 
 import org.apache.juddi.api_v3.Node;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 5f31479..fb214da 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -30,19 +30,19 @@
 import org.apache.juddi.config.AppConfig;
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.config.Property;
-import org.apache.juddi.error.AssertionNotFoundException;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.InvalidProjectionException;
-import org.apache.juddi.error.KeyUnavailableException;
-import org.apache.juddi.error.UserMismatchException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.keygen.KeyGeneratorFactory;
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.AssertionNotFoundException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.InvalidProjectionException;
+import org.apache.juddi.v3.error.KeyUnavailableException;
+import org.apache.juddi.v3.error.UserMismatchException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.AddPublisherAssertions;
 import org.uddi.api_v3.DeleteBinding;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublisher.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublisher.java
index 493018c..0129119 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublisher.java
@@ -26,13 +26,13 @@
 import org.apache.juddi.api_v3.GetAllPublisherDetail;
 import org.apache.juddi.api_v3.GetPublisherDetail;
 import org.apache.juddi.api_v3.SavePublisher;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.UserMismatchException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.model.Publisher;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.UserMismatchException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index 98c85b5..6c69a7b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -24,16 +24,16 @@
 
 import javax.persistence.EntityManager;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.InvalidTimeException;
-import org.apache.juddi.error.KeyUnavailableException;
-import org.apache.juddi.error.UserMismatchException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.keygen.KeyGeneratorFactory;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.InvalidTimeException;
+import org.apache.juddi.v3.error.KeyUnavailableException;
+import org.apache.juddi.v3.error.UserMismatchException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.DeleteSubscription;
 import org.uddi.sub_v3.GetSubscriptionResults;
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscriptionListener.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscriptionListener.java
index 2bae4b3..208499b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscriptionListener.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscriptionListener.java
@@ -17,8 +17,8 @@
 
  package org.apache.juddi.validation;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.FatalErrorException;
 import org.uddi.subr_v3.NotifySubscriptionListener;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
index 3241a08..c0ff5f7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
@@ -21,10 +21,10 @@
 import javax.persistence.EntityManager;
 
 import org.apache.juddi.model.Subscription;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.UnsupportedException;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.UnsupportedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,d939a32cdb3a3deaf0166b7c10b5518b77b355e5,"JUDDI-298
Change the org.apache.juddi.error package name to org.apache.juddi.v3.error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@827774 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-20 20:06:34,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
index 731f85b..41e5c8c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIKey.java
@@ -20,10 +20,10 @@
 import java.util.List;
 import java.util.StringTokenizer;
 
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.InvalidKeyPassedException;
-import org.apache.juddi.error.ValueNotAllowedException;
 import org.apache.juddi.keygen.KeyGenerator;
+import org.apache.juddi.v3.error.ErrorMessage;
+import org.apache.juddi.v3.error.InvalidKeyPassedException;
+import org.apache.juddi.v3.error.ValueNotAllowedException;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,1af3dd61ab89d16b320990be9e8660840f10d031,"JUDDI-292 copy-paste error.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@824460 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-12 19:13:04,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
index 1dfafc7..46c8523 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
@@ -108,7 +108,7 @@
 		String keyPartition = key.substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
 		
 		for (String keyGenKey : keyGeneratorKeys) {
-			String keyGenPartition = keyGenKey.substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
+			String keyGenPartition = keyGenKey.substring(0, keyGenKey.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
 			if (keyGenPartition.equalsIgnoreCase(keyPartition))
 				return true;
 		}
"
juddi,5fa7eb7d3533fc00f09f2d48e04db0422d5e8ebd,"JUDDI-290 setting the instanceDetails structure to null if neither overviewDoc nor instanceParms exists

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@823362 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-09 00:05:46,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index d83d768..8deb673 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -470,7 +470,8 @@
 										  org.uddi.api_v3.InstanceDetails apiInstanceDetails,
 										  org.uddi.api_v3.TModelInstanceInfo apiTModelInstInfo) 
 				   throws DispositionReportFaultMessage {
-		if (modelTModelInstInfo == null)
+		if (modelTModelInstInfo == null || 
+				(modelTModelInstInfo.getInstanceParms() == null && modelTModelInstInfo.getOverviewDocs().size() == 0))
 			return;
 		
 		if (apiInstanceDetails == null)
@@ -488,7 +489,7 @@
 		}
 		//OverviewDoc
 		mapOverviewDocs(modelTModelInstInfo.getOverviewDocs(),apiInstanceDetails,null);
-			
+	    
 		apiTModelInstInfo.setInstanceDetails(apiInstanceDetails);
 	}
 	
"
juddi,ba68212b284b646bfacb4d8b1ce3d7c887b5ad8c,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822129 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:15:48,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
index 8e86c6d..e88505a 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/FindServiceImpl.java
@@ -46,8 +46,9 @@
  */
 public class FindServiceImpl extends RemoteServiceServlet implements FindService {
 
+	private static final long serialVersionUID = 1939609260067702168L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
+	
 	
 	public FindResponse getBusinesses(String nameStr, String[] findQualifyers) 
 	{
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/subscription-listener/src/main/java/org/apache/juddi/subscription/NotifyServlet.java b/juddi-console/subscription-listener/src/main/java/org/apache/juddi/subscription/NotifyServlet.java
index dbdf334..ee6178d 100644
--- a/juddi-console/subscription-listener/src/main/java/org/apache/juddi/subscription/NotifyServlet.java
+++ b/juddi-console/subscription-listener/src/main/java/org/apache/juddi/subscription/NotifyServlet.java
@@ -35,8 +35,8 @@
  */
 public class NotifyServlet extends HttpServlet
 {
-	private static final long serialVersionUID = 1L;
-	
+	private static final long serialVersionUID = 4862936257096400737L;
+
 	@SuppressWarnings(""unchecked"")
 	public void doGet(HttpServletRequest request,
 			HttpServletResponse response) throws
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index 9f7fa95..eee6b07 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -52,8 +52,8 @@
  */
 public class InquiryServiceImpl extends RemoteServiceServlet implements InquiryService {
 
+	private static final long serialVersionUID = 8509627428299232161L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
 	private Transport transport = null;
 	
 	public InquiryServiceImpl() {
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
index d5d323a..e09f9a3 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/JUDDIApiServiceImpl.java
@@ -42,8 +42,9 @@
  */
 public class JUDDIApiServiceImpl extends RemoteServiceServlet implements JUDDIApiService {
 
+	private static final long serialVersionUID = -4079331701560975888L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
+	
 	
 	public JUDDIApiResponse getPublishers(String authToken, String publisherId) 
 	{	
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
index 9e1ffbd..1718f4d 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/NotifyServiceImpl.java
@@ -34,8 +34,10 @@
  *
  */
 public class NotifyServiceImpl extends RemoteServiceServlet implements NotifyService {
+	
+	private static final long serialVersionUID = 6312615857204115941L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
+	
 	
 	public NotifyServiceImpl() {
 		super();
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index 4ca3bd9..7a875f8 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -46,8 +46,9 @@
  */
 public class PublicationServiceImpl extends RemoteServiceServlet implements PublicationService {
 
+	private static final long serialVersionUID = 8903795371009202903L;
 	private Logger logger = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
+	
 	
 	public PublicationResponse getBusinesses(String authToken, String infoSelection) 
 	{
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
index e442965..e1f859d 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SecurityServiceImpl.java
@@ -48,8 +48,9 @@
 public class SecurityServiceImpl extends RemoteServiceServlet implements
 		SecurityService {
 
+	private static final long serialVersionUID = -154327520485409858L;
 	private Logger log = Logger.getLogger(this.getClass());
-	private static final long serialVersionUID = 1L;
+	
 
 	public SecurityResponse get(String username, String password) {
 		HttpServletRequest request = getThreadLocalRequest();
"
juddi,6212a2966004fba2f611428fe6d41cf4bd248acd,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822128 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:42,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
index a8e9f2b..6e068a8 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/SubscriptionServiceImpl.java
@@ -52,9 +52,10 @@
  */
 public class SubscriptionServiceImpl extends RemoteServiceServlet implements SubscriptionService {
 
+	private static final long serialVersionUID = 6366224282740095468L;
 	private Logger logger = Logger.getLogger(this.getClass());
 	private final static String UP = ""Up"";
-	private static final long serialVersionUID = 1L;
+	
 	
 	public SubscriptionResponse getSubscriptions() 
 	{
"
juddi,4e35cb01232349949d8f3d8b2fbf51a301f6cce5,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822127 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:23,Kurt Stam,"diff --git a/juddiv3-war/src/main/java/org/apache/juddi/RegistryServlet.java b/juddiv3-war/src/main/java/org/apache/juddi/RegistryServlet.java
index f313441..ac1104e 100644
--- a/juddiv3-war/src/main/java/org/apache/juddi/RegistryServlet.java
+++ b/juddiv3-war/src/main/java/org/apache/juddi/RegistryServlet.java
@@ -29,7 +29,8 @@
  * @author Steve Viens (sviens@apache.org)
  */
 public class RegistryServlet extends HttpServlet {
-	private static final long serialVersionUID = 1L;
+	
+	private static final long serialVersionUID = 4653310291840334765L;
 	private static Logger logger = Logger.getLogger(RegistryServlet.class);
 
 	/**
"
juddi,4e35cb01232349949d8f3d8b2fbf51a301f6cce5,"JUDDI-288

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822127 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 05:14:23,Kurt Stam,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/TransportException.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/TransportException.java
index 3e44712..178baee 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/TransportException.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/TransportException.java
@@ -18,7 +18,9 @@
 
 public class TransportException extends Exception {
 	
-	private static final long serialVersionUID = 1L;
+	
+	private static final long serialVersionUID = 8462667570467061246L;
+
 	public TransportException() {
 		super();
 	}
"
juddi,2d39b6b30efa34574fb1450cf97e6b63cf37b796,"JUDDI-289 fixing INFO: Application has thrown exception, unwinding now: org.apache.juddi.error.InvalidKeyPassedException: The binding template being saved has a different parent service key then the one provided:  uddi:juddi.apache.org:services-helloworld, uddi:juddi.apache.org:businesses-asf

we are looking at the businessKey; not the serviceKey; fixing that now.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822123 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:57:20,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 735c707..f35963b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -593,7 +593,7 @@
 		
 		if (parent != null) {
 			if (parentKey != null && parentKey.length() > 0) {
-				if (!parentKey.equalsIgnoreCase(parent.getBusinessKey()))
+				if (!parentKey.equalsIgnoreCase(parent.getServiceKey()))
 					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.bindingtemplate.ParentMismatch"", parentKey + "", "" + parent.getBusinessKey()));
 			}
 			else
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Business.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Business.java
index 2d545a8..e9030d7 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Business.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Business.java
@@ -5,9 +5,7 @@
 import java.util.List;
 
 public class Business implements Serializable{
-	
-	private static final long serialVersionUID = 1L;
-
+	private static final long serialVersionUID = -102266226642620387L;
 	private String key;
 	private String name;
 	private String description;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Node.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Node.java
index a225fff..61b8b4f 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Node.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Node.java
@@ -5,9 +5,7 @@
 import java.util.List;
 
 public class Node implements Serializable{
-
-	private static final long serialVersionUID = 1L;
-
+	private static final long serialVersionUID = 1042775792285446357L;
 	private String name;
 	private String description;
 	private String status;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
index 95e3f6a..2f21207 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Publisher.java
@@ -28,8 +28,7 @@
  * 
  */
 public class Publisher implements Serializable{
-
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = 2384133177092719820L;
 	protected String publisherName;
     protected String emailAddress;
     protected String isAdmin;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Service.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Service.java
index a59794b..d4a67d7 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Service.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Service.java
@@ -5,9 +5,7 @@
 import java.util.Collection;
 
 public class Service implements Serializable{
-
-	private static final long serialVersionUID = 1L;
-
+	private static final long serialVersionUID = -4116192376614022055L;
 	private String key;
 	private String name;
 	private String description;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/ServiceBinding.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/ServiceBinding.java
index 2101a0c..529eddd 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/ServiceBinding.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/ServiceBinding.java
@@ -3,9 +3,8 @@
 import java.io.Serializable;
 
 public class ServiceBinding implements Serializable{
-
-	private static final long serialVersionUID = 1L;
-    private String key;
+	private static final long serialVersionUID = 2545194828715859854L;
+	private String key;
 	private String accessPoint;
 	private String description;
 	private String urlType;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Subscription.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Subscription.java
index 42dd2d0..22c46bd 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Subscription.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/model/Subscription.java
@@ -28,8 +28,7 @@
  * 
  */
 public class Subscription implements Serializable{
-
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = 4857108890203941634L;
 	protected String bindingKey;
     protected Boolean brief;
     protected String expiresAfter;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/FindResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/FindResponse.java
index 6af07a6..a55a13b 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/FindResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/FindResponse.java
@@ -25,8 +25,7 @@
  *
  */
 public class FindResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = -521849649236443710L;
 	List<Business> businesses;
 	
 	public List<Business> getBusinesses() {
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/InquiryResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/InquiryResponse.java
index 999c636..938eb46 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/InquiryResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/InquiryResponse.java
@@ -24,8 +24,7 @@
  *
  */
 public class InquiryResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = -5552581332320361677L;
 	private Service service;
 	private Business business;
 	
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/JUDDIApiResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/JUDDIApiResponse.java
index f55cf67..3318c14 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/JUDDIApiResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/JUDDIApiResponse.java
@@ -25,9 +25,7 @@
  *
  */
 public class JUDDIApiResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
-	
+	private static final long serialVersionUID = 9118551366254201642L;
 	List<Publisher> publishers;
 	
 	public List<Publisher> getPublishers() {
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/NotifyResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/NotifyResponse.java
index c1af239..02c3974 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/NotifyResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/NotifyResponse.java
@@ -22,8 +22,7 @@
  *
  */
 public class NotifyResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = 4760892414401741984L;
 	String subscriptionNotifications;
 	
 	public String getSubscriptionNotifications() {
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/PublicationResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/PublicationResponse.java
index 748b1f6..bc384ae 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/PublicationResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/PublicationResponse.java
@@ -25,8 +25,7 @@
  *
  */
 public class PublicationResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = -3151634663278707958L;
 	List<Business> businesses;
 	
 	public List<Business> getBusinesses() {
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/Response.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/Response.java
index d961f8e..9b55f35 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/Response.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/Response.java
@@ -23,8 +23,7 @@
  *
  */
 public class Response implements Serializable {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = 8428365608070621881L;
 	boolean isSuccess;
 	String errorCode;
 	String message;
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityResponse.java
index fc22c2c..f172f7d 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SecurityResponse.java
@@ -21,8 +21,7 @@
  *
  */
 public class SecurityResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
+	private static final long serialVersionUID = -893906995719630663L;
 	String response;
 	String username;
 	
"
juddi,4c8a2755c4b1bfa36ee7bfc7a25c28fefca592b2,"JUDDI-288
Change the default serialversionUIDs to generated ones.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@822117 13f79535-47bb-0310-9956-ffa450edef68
",2009-10-06 04:25:44,Thomas Cunningham,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SubscriptionResponse.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SubscriptionResponse.java
index 28fdf6c..0705afc 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SubscriptionResponse.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/service/SubscriptionResponse.java
@@ -28,9 +28,7 @@
  *
  */
 public class SubscriptionResponse extends Response {
-	
-	private static final long serialVersionUID = 1L;
-	
+	private static final long serialVersionUID = -1729549521486172296L;
 	private List<Node> nodes = new ArrayList<Node>();
 	private Subscription subscription;
 
"
juddi,9641837fd44b2aa80e051478da2b9326fce8ac54,"JUDDI-275 removing group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816791 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 21:34:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 95bbee4..199ce02 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -154,10 +154,4 @@
 
 	}
 	
-	public static void appendGroupByEntityKey(DynamicQuery qry) {
-		qry.pad();
-		qry.append(""GROUP BY "" + KEY_NAME);
-	}
-
-	
 }
"
juddi,9641837fd44b2aa80e051478da2b9326fce8ac54,"JUDDI-275 removing group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816791 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 21:34:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
index 588add0..b77071a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
@@ -63,8 +63,6 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
-		
-		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,9641837fd44b2aa80e051478da2b9326fce8ac54,"JUDDI-275 removing group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816791 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 21:34:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
index 625fe20..ece5aa4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
@@ -63,8 +63,6 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 
 		appendSortCriteria(dynamicQry, fq);
-		
-		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,9641837fd44b2aa80e051478da2b9326fce8ac54,"JUDDI-275 removing group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816791 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 21:34:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
index ab83372..eeb9bba 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
@@ -63,8 +63,6 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
-		
-		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,9641837fd44b2aa80e051478da2b9326fce8ac54,"JUDDI-275 removing group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816791 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 21:34:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
index 9bcef4b..6cb61ce 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
@@ -63,8 +63,6 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
-		
-		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,2525c581ede2d39e115223f91083c7bb4c2e73a5,"JUDDI-282
Change version number to 2.0.2


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0.0@816690 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 16:01:57,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/util/Release.java b/src/main/java/org/apache/juddi/util/Release.java
index f0cc540..34786cf 100644
--- a/src/main/java/org/apache/juddi/util/Release.java
+++ b/src/main/java/org/apache/juddi/util/Release.java
@@ -20,7 +20,7 @@
  */
 public class Release 
 {
-  private static final String REGISTRY_VERSION = ""2.0.1"";
+  private static final String REGISTRY_VERSION = ""2.0.2"";
   private static final String UDDI_VERSION = ""2.0"";
   
   // Made private to avoid instantiation
"
juddi,56aec7bea05672f62c245d1470e6670c89bde214,"JUDDI-284
Do not create a new thread for each request.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0.0@816440 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 02:31:24,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/registry/local/InquiryService.java b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
index 8bba24e..01c0cc0 100644
--- a/src/main/java/org/apache/juddi/registry/local/InquiryService.java
+++ b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
@@ -80,17 +80,13 @@
       
       //new RequestHandler on it's own thread
       RequestHandler requestHandler = new RequestHandler();
-      requestHandler.setUddiReq(uddiReq);
       String operation = requestHandler.getOperation(uddiReq);
       String version   = requestHandler.getVersion(uddiReq,operation);
       validateRequest(operation, version, uddiReq);
-      Thread thread = new Thread(requestHandler, ""WorkThread"");
-      thread.start();
-      thread.join();
       if (requestHandler.getException()!=null) {
           throw new Exception(requestHandler.getException());
       }
-	  return requestHandler.getResponse();
+	  return requestHandler.invoke(uddiReq);
   }
   
 }
"
juddi,56aec7bea05672f62c245d1470e6670c89bde214,"JUDDI-284
Do not create a new thread for each request.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0.0@816440 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 02:31:24,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/registry/local/PublishService.java b/src/main/java/org/apache/juddi/registry/local/PublishService.java
index 5795652..e12ebed 100644
--- a/src/main/java/org/apache/juddi/registry/local/PublishService.java
+++ b/src/main/java/org/apache/juddi/registry/local/PublishService.java
@@ -84,16 +84,9 @@
   {
       //new RequestHandler on it's own thread
       RequestHandler requestHandler = new RequestHandler();
-      requestHandler.setUddiReq(uddiReq);
       String operation = requestHandler.getOperation(uddiReq);
       String version   = requestHandler.getVersion(uddiReq, operation);
       validateRequest(operation, version, uddiReq);
-      Thread thread = new Thread(requestHandler, ""WorkThread"");
-      thread.start();
-      thread.join();
-      if (requestHandler.getException()!=null) {
-          throw new Exception(requestHandler.getException());
-      }
-      return requestHandler.getResponse();
+      return requestHandler.invoke(uddiReq);
   }
 }
"
juddi,56aec7bea05672f62c245d1470e6670c89bde214,"JUDDI-284
Do not create a new thread for each request.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0.0@816440 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-18 02:31:24,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/registry/local/RequestHandler.java b/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
index 2b49846..78cf180 100644
--- a/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
+++ b/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
@@ -41,7 +41,7 @@
 /**
  * @author Kurt Stam (kurt.stam@redhat.com)
  */
-public class RequestHandler implements Runnable
+public class RequestHandler
 {
   // private reference to the webapp's logger.
   private static Log log = LogFactory.getLog(RequestHandler.class);
@@ -51,7 +51,6 @@
   
   private volatile String version;
   private volatile String operation;
-  private volatile Element uddiReq;
   private volatile Node response;
   private volatile String exception;
    
@@ -101,7 +100,7 @@
       return version;
   }
   
-  public void run()
+  public Node invoke (Element uddiReq) throws Exception
   {
     try 
     { 
@@ -206,7 +205,7 @@
     	+ "", faultActor="" + faultActor + "", errno="" + errno + "", errCode="" + errCode
     	+ "", errText="" + errText;
         setException(fault);
-        
+        throw new Exception(fault);
     }
     catch(Exception ex) // Catch any other exceptions
     {
@@ -240,8 +239,9 @@
         String fault = ""faultCode="" + faultCode + "", faultString="" + faultString 
     	+ "", faultActor="" + faultActor + "", errno="" + errno + "", errCode="" + errCode
     	+ "", errText="" + errText;
-        setException(fault);
+        throw new Exception(fault);
     }
+    return response;
   }
   
   /**
@@ -287,12 +287,6 @@
 public void setResponse(Node response) {
     this.response = response;
 }
-public Element getUddiReq() {
-    return uddiReq;
-}
-public void setUddiReq(Element uddiReq) {
-    this.uddiReq = uddiReq;
-}
 public String getVersion() {
     return version;
 }
"
juddi,1999194c5166e940b9fdbc410ab9a7d9bce81014,"JUDDI-280
Remove the unmarshalling to string then to Object.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816053 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 05:05:29,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index 0194d76..87bc8df 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -125,7 +125,7 @@
       //Object uddiReqObj = JAXBMarshaller.unmarshallFromString(reqString, ""org.uddi.api_v3"");
       Object uddiReqObj = JAXBMarshaller.unmarshallFromElement(uddiReq, ""org.uddi.api_v3"");
       Method method = portType.getClass().getMethod(methodName, operationClass);
-      Object result = method.invoke(portType, uddiReqObj);
+      Object result = method.invoke(portType, (Object) uddiReqObj);
       // Lookup the appropriate response handler which will
       // be used to marshal the UDDI object into the appropriate 
       // xml format.
"
juddi,1999194c5166e940b9fdbc410ab9a7d9bce81014,"JUDDI-280
Remove the unmarshalling to string then to Object.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816053 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 05:05:29,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
index 638adfb..c49fc03 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
@@ -116,7 +116,8 @@
 	public static Object unmarshallFromElement(Element element, String thePackage) throws JAXBException {
 		JAXBContext jc = JAXBContexts.get(thePackage);
 		Unmarshaller unmarshaller = jc.createUnmarshaller();
-		return unmarshaller.unmarshal(element.getFirstChild());
+		Object obj = ((JAXBElement) unmarshaller.unmarshal(element)).getValue();
+		return obj;
 	}
 	
 }
"
juddi,ab5e4a7df25723f716b766cb3d7fb93154a22c89,"JUDDI-280
Fix Service versions.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816041 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 03:39:42,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
index 649c17d..0194d76 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/RequestHandler.java
@@ -39,7 +39,7 @@
  * @author Tom Cunningham (tcunning@apache.org)
  * @author Kurt Stam (kurt.stam@redhat.com)
  */
-public class RequestHandler implements Runnable
+public class RequestHandler
 {
   // private reference to the webapp's logger.
   private static Log log = LogFactory.getLog(RequestHandler.class);
@@ -49,12 +49,12 @@
   
   private volatile String version;
   private volatile String operation;
-  private volatile Element uddiReq;
   private volatile Node response;
   private volatile String exception;
   private volatile Remote portType; 
   private volatile String methodName;
   private volatile Class<?> operationClass;
+  private static TransformerFactory transFactory = null;
   
     /**
    * Grab the local name of the UDDI request element
@@ -91,8 +91,13 @@
    */
   public String getVersion(Element uddiReq, String operation) throws Exception
   {
-      String version = uddiReq.getAttribute(""generic"");
-      if (version == null)
+       String version = uddiReq.getAttribute(""generic"");
+      if ((version == null) || ("""".equals(version))) {
+    	  if (""urn:uddi-org:api_v3"".equals(uddiReq.getNamespaceURI())) {
+    		  version = ""3.0"";
+    	  }
+      }
+      if (!""3.0"".equals(version))
 	  		throw new UnsupportedOperationException(""version needs to be 3.0"");
       setVersion(version);
       return version;
@@ -100,36 +105,25 @@
   
   public static String getText(Element element) throws TransformerException
   {
-      TransformerFactory tf = TransformerFactory.newInstance();
-      Transformer trans = tf.newTransformer();
+	  if (transFactory == null) {
+		  transFactory = TransformerFactory.newInstance();		  
+	  }
+      Transformer trans = transFactory.newTransformer();
       StringWriter sw = new StringWriter();
       trans.transform(new DOMSource(element), new StreamResult(sw));
       return new String(sw.toString());
-  /*
-    StringBuffer textBuffer = new StringBuffer();
-
-    NodeList nodeList = element.getChildNodes();
-    for (int i=0; i<nodeList.getLength(); i++)
-    {
-      if (nodeList.item(i).getNodeType() == Element.TEXT_NODE)
-        textBuffer.append(nodeList.item(i).getNodeValue());
-    }
-
-    return textBuffer.toString().trim();
-*/
   }
 
   
-  public void run()
+  public Node invoke(Element uddiReq)
   {
     try 
     { 
       // Lookup the appropriate XML handler.  Throw an 
       // UnsupportedException if one could not be located.
-      String reqString = getText(uddiReq);
-      Object uddiReqObj = JAXBMarshaller.unmarshallFromString(reqString, ""org.uddi.api_v3"");
-      
-      
+      //String reqString = getText(uddiReq);
+      //Object uddiReqObj = JAXBMarshaller.unmarshallFromString(reqString, ""org.uddi.api_v3"");
+      Object uddiReqObj = JAXBMarshaller.unmarshallFromElement(uddiReq, ""org.uddi.api_v3"");
       Method method = portType.getClass().getMethod(methodName, operationClass);
       Object result = method.invoke(portType, uddiReqObj);
       // Lookup the appropriate response handler which will
@@ -167,6 +161,7 @@
         log.error(ex.getMessage());
         setException(ex.getMessage());
     }
+    return response;
   }
   
   /**
@@ -212,12 +207,6 @@
 public void setResponse(Node response) {
     this.response = response;
 }
-public Element getUddiReq() {
-    return uddiReq;
-}
-public void setUddiReq(Element uddiReq) {
-    this.uddiReq = uddiReq;
-}
 public Remote getPortType() {
 	return portType;
 }
"
juddi,ab5e4a7df25723f716b766cb3d7fb93154a22c89,"JUDDI-280
Fix Service versions.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816041 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 03:39:42,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
index 0551df3..dbc6ee1 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIInquiryService.java
@@ -45,17 +45,9 @@
 	//Verify that the appropriate endpoint was targeted for
 	// this service request.  The validateRequest method will
 	// throw an UnsupportedOperationException if anything's amiss.
-	public void validateRequest(String operation,String version, Element uddiReq)
+	public void validateRequest(String operation)
 			throws UnsupportedOperationException
 	{
-	    // If the value 
-	  	// specified is not ""3.0"" then throw an exception (this 
-	  	// value must be specified for all UDDI requests and 
-	  	// only version 2.0 and 3.0 UDDI requests are supported by 
-	  	// this endpoint).
-	  	if (version == null)
-	  		throw new UnsupportedOperationException(""version needs to be 3.0"");
-
 	    if ((operation == null) || (operation.trim().length() == 0))
 	    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
 	  }
@@ -66,7 +58,6 @@
 
 	      //new RequestHandler on it's own thread
 	      RequestHandler requestHandler = new RequestHandler();
-	      requestHandler.setUddiReq(uddiReq);
 	      requestHandler.setPortType(inquiry);
 	      
 	      String operation = requestHandler.getOperation(uddiReq);
@@ -75,17 +66,8 @@
 		  requestHandler.setOperationClass(opHandler.getParameter());
 
 	      String version   = requestHandler.getVersion(uddiReq,operation);
-	      validateRequest(operation, version, uddiReq);
-	      
-	      Thread thread = new Thread(requestHandler, ""WorkThread"");
-	      thread.start();
-	      thread.join();
-	      
-	      if (requestHandler.getException()!=null) {
-	          throw new Exception(requestHandler.getException());
-	      }
-
-		  return requestHandler.getResponse();
+	      validateRequest(operation);
+	      return requestHandler.invoke(uddiReq);
 	  }
 	
 }
"
juddi,ab5e4a7df25723f716b766cb3d7fb93154a22c89,"JUDDI-280
Fix Service versions.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816041 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 03:39:42,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
index 8f1f972..5637fa7 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDIPublicationService.java
@@ -54,17 +54,9 @@
 	//Verify that the appropriate endpoint was targeted for
 		// this service request.  The validateRequest method will
 		// throw an UnsupportedOperationException if anything's amiss.
-		public void validateRequest(String operation,String version, Element uddiReq)
+		public void validateRequest(String operation)
 				throws UnsupportedOperationException
 		{
-		    // If the value 
-		  	// specified is not ""3.0"" then throw an exception (this 
-		  	// value must be specified for all UDDI requests and 
-		  	// only version 3.0 UDDI requests are supported by 
-		  	// this endpoint).
-		  	if (version == null)
-		  		throw new UnsupportedOperationException(""version needs to be 3.0"");
-
 		    if ((operation == null) || (operation.trim().length() == 0))
 		    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
 		  }
@@ -76,7 +68,6 @@
 
 	      //new RequestHandler on it's own thread
 	      RequestHandler requestHandler = new RequestHandler();
-	      requestHandler.setUddiReq(uddiReq);
 	      requestHandler.setPortType(publish);
 	      String operation = requestHandler.getOperation(uddiReq);
 		  Handler opHandler = operations.get(operation);
@@ -84,16 +75,8 @@
 		  requestHandler.setOperationClass(opHandler.getParameter());
 		  
 	      String version   = requestHandler.getVersion(uddiReq, operation);
-	      validateRequest(operation, version, uddiReq);
+	      validateRequest(operation);
 
-	      Thread thread = new Thread(requestHandler, ""WorkThread"");
-	      thread.start();
-	      thread.join();
-
-	      if (requestHandler.getException()!=null) {
-	          throw new Exception(requestHandler.getException());
-	      }
-
-	      return requestHandler.getResponse();
+	      return requestHandler.invoke(uddiReq);
 	  }
 }
"
juddi,ab5e4a7df25723f716b766cb3d7fb93154a22c89,"JUDDI-280
Fix Service versions.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816041 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 03:39:42,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
index 394e727..01963b9 100644
--- a/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
+++ b/uddi-client/src/main/java/org/apache/juddi/v3/client/transport/wrapper/UDDISecurityService.java
@@ -29,17 +29,9 @@
 	//Verify that the appropriate endpoint was targeted for
 	// this service request.  The validateRequest method will
 	// throw an UnsupportedOperationException if anything's amiss.
-	public void validateRequest(String operation,String version, Element uddiReq)
+	public void validateRequest(String operation)
 			throws UnsupportedOperationException
 	{
-	    // If the value 
-	  	// specified is not ""2.0"" or ""3.0"" then throw an exception (this 
-	  	// value must be specified for all UDDI requests and 
-	  	// only version 2.0 and 3.0 UDDI requests are supported by 
-	  	// this endpoint).
-	  	if (version == null)
-	  		throw new UnsupportedOperationException(""version needs to be 3.0"");
-
 	    if ((operation == null) || (operation.trim().length() == 0))
 	    	throw new UnsupportedOperationException(""operation "" + operation + "" not supported"");
 	  }
@@ -51,7 +43,6 @@
 		
 		//new RequestHandler on it's own thread
 		RequestHandler requestHandler = new RequestHandler();
-		requestHandler.setUddiReq(uddiReq);
 		requestHandler.setPortType(security);
 		
 		String operation = requestHandler.getOperation(uddiReq);
@@ -60,16 +51,7 @@
 		requestHandler.setOperationClass(opHandler.getParameter());
 
 		String version   = requestHandler.getVersion(uddiReq, operation);
-	    validateRequest(operation, version, uddiReq);
-
-	    Thread thread = new Thread(requestHandler, ""WorkThread"");
-	    thread.start();
-	    thread.join();
-
-	    if (requestHandler.getException()!=null) {
-	    	throw new Exception(requestHandler.getException());
-	    }
-
-	    return requestHandler.getResponse();
+	    validateRequest(operation);
+	    return requestHandler.invoke(uddiReq);
 	}
 }
"
juddi,ab5e4a7df25723f716b766cb3d7fb93154a22c89,"JUDDI-280
Fix Service versions.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@816041 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-17 03:39:42,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
index b310a23..638adfb 100644
--- a/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
+++ b/uddi-ws/src/main/java/org/apache/juddi/jaxb/JAXBMarshaller.java
@@ -113,4 +113,10 @@
 		return element;
 	}
 	
+	public static Object unmarshallFromElement(Element element, String thePackage) throws JAXBException {
+		JAXBContext jc = JAXBContexts.get(thePackage);
+		Unmarshaller unmarshaller = jc.createUnmarshaller();
+		return unmarshaller.unmarshal(element.getFirstChild());
+	}
+	
 }
"
juddi,c837e6d7611b012b5f108048bcf2fdc48d890220,"JUDDI-279 changing war to juddiv3

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@815161 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-15 06:30:37,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
index ede421a..47dd06b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/JNDIRegistration.java
@@ -26,7 +26,7 @@
  */
 public class JNDIRegistration
 {
-	public static String JUDDI = ""/juddi"";
+	public static String JUDDI = ""/juddiv3"";
 	public static String UDDI_SECURITY_SERVICE    = JUDDI + ""/UDDISecurityService"";
 	public static String UDDI_PUBLICATION_SERVICE = JUDDI + ""/UDDIPublicationService"";
 	public static String UDDI_INQUIRY_SERVICE     = JUDDI + ""/UDDIInquiryService"";
"
juddi,fd694549c7f865a0ce926b789450a7fec4b3e4da,"JUDDI-277
Remove unused Exception.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814980 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-15 03:17:34,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
index ec026c6..2b2b015 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
@@ -164,57 +164,7 @@
       // this child to the soap response body
       document.appendChild(element.getFirstChild());
       setResponse(document);
-    }/*
-    catch (RegistryException rex) 
-    {
-    	log.error(rex.getMessage());
-    	
-        // All RegistryException and subclasses of RegistryException
-        // should contain values for populating a SOAP Fault as well
-        // as a UDDI DispositionReport with specific information 
-        // about the problem.
-    	// SOAP Fault values
-    	String faultCode = """";
-    	String faultString = """";
-    	String faultActor = """";
-        
-    	String errno = null;
-    	String errText = null;
-    	String errCode = null;
-    	
-        // UDDI DispositionReport values
-        DispositionReport dispRpt = rex.getFaultInfo();
-        if (dispRpt != null)
-        {
-          Result result = null;
-          ErrInfo errInfo = null;
-        
-          List<Result> results = dispRpt.getResult();
-          if ((results != null) && (!results.isEmpty()))
-            result = (Result)results.get(0);
-        
-          if (result != null)
-          {
-            errno = String.valueOf(result.getErrno());  // UDDI Result errno
-            errInfo = result.getErrInfo();
-          
-            if (errInfo != null)
-            {
-              errCode = errInfo.getErrCode();  // UDDI ErrInfo errCode
-              errText = errInfo.getValue();  // UDDI ErrInfo errMsg
-            }
-          }
-        }
-        // We should have everything we need to assemble 
-        // the SOAPFault so lets piece it together and 
-        // send it on it's way.
-        String fault = null;
-        //String fault = ""faultCode="" + faultCode + "", faultString="" + faultString 
-    	//+ "", faultActor="" + faultActor + "", errno="" + errno + "", errCode="" + errCode
-    	//+ "", errText="" + errText;
-        setException(fault);
-        
-    } */
+    }
     catch(Exception ex) // Catch any other exceptions
     {
         log.error(ex.getMessage());
"
juddi,70c696903d5d808e8f7e4f0663e1c6893e7ea1db,"JUDDI-279
Change name of WAR to juddiv3.war


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814974 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-15 02:55:55,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
index 2e07f27..70cef28 100644
--- a/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/v3/auth/AuthenticatorFactory.java
@@ -30,7 +30,7 @@
 	private static Logger log = Logger.getLogger(AuthenticatorFactory.class);
 
 	// Default authenticator implementation
-	private static final String DEFAULT_IMPL = ""org.apache.juddi.auth.JUDDIAuthenticator"";
+	private static final String DEFAULT_IMPL = ""org.apache.juddi.v3.auth.JUDDIAuthenticator"";
 
 	// the shared Authenticator instance
 	private static Authenticator auth = null;
"
juddi,6761216a890dc8cf70d3f66e03694b7a2fd80038,"JUDDI-278
Change juddi.properties to juddiv3.properties, and move the auth
package to v3.auth to distinguish between juddi v2 and v3 libraries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814748 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 17:33:46,Thomas Cunningham,"diff --git a/docs/examples/auth/JBossAuthenticator.java b/docs/examples/auth/JBossAuthenticator.java
index 763f59e..a05b83c 100644
--- a/docs/examples/auth/JBossAuthenticator.java
+++ b/docs/examples/auth/JBossAuthenticator.java
@@ -37,7 +37,7 @@
  * Usage:
  * 
  * To use this class you must add the following properties to the
- * juddi.properties file:
+ * juddiv3.properties file:
  * 
  * # The JBoss Authenticator
  * juddi.authenticator=org.apache.juddi.auth.JBossAuthenticator
@@ -90,4 +90,4 @@
 		authManager = (AuthenticationManager) ctx.lookup(securityDomain);
 		ctx.close();
 	}
-}
\ No newline at end of file
+}
"
juddi,6761216a890dc8cf70d3f66e03694b7a2fd80038,"JUDDI-278
Change juddi.properties to juddiv3.properties, and move the auth
package to v3.auth to distinguish between juddi v2 and v3 libraries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814748 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 17:33:46,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
index 22ef03b..2878f9c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/AuthenticatedService.java
@@ -21,11 +21,11 @@
 
 import javax.persistence.EntityManager;
 
-import org.apache.juddi.auth.Authenticator;
-import org.apache.juddi.auth.AuthenticatorFactory;
 import org.apache.juddi.error.AuthTokenRequiredException;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.model.UddiEntityPublisher;
+import org.apache.juddi.v3.auth.Authenticator;
+import org.apache.juddi.v3.auth.AuthenticatorFactory;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,6761216a890dc8cf70d3f66e03694b7a2fd80038,"JUDDI-278
Change juddi.properties to juddiv3.properties, and move the auth
package to v3.auth to distinguish between juddi v2 and v3 libraries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814748 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 17:33:46,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index 94bc65b..672bff7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -30,12 +30,12 @@
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISecurityPortType;
 
-import org.apache.juddi.auth.AuthenticatorFactory;
-import org.apache.juddi.auth.Authenticator;
 import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.error.UnknownUserException;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.mapping.MappingModelToApi;
+import org.apache.juddi.v3.auth.Authenticator;
+import org.apache.juddi.v3.auth.AuthenticatorFactory;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
"
juddi,6761216a890dc8cf70d3f66e03694b7a2fd80038,"JUDDI-278
Change juddi.properties to juddiv3.properties, and move the auth
package to v3.auth to distinguish between juddi v2 and v3 libraries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814748 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 17:33:46,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 3d243bb..000bb39 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -49,7 +49,7 @@
  */
 public class AppConfig 
 {
-	private final static String JUDDI_PROPERTIES = ""juddi.properties"";
+	private final static String JUDDI_PROPERTIES = ""juddiv3.properties"";
 	private Logger log = Logger.getLogger(AppConfig.class);
 	private Configuration config;
 	private static AppConfig instance=null;
@@ -64,7 +64,7 @@
 	}
 	/**
 	 * Does the actual work of reading the configuration from System
-	 * Properties and/or juddi.properties file. When the juddi.properties
+	 * Properties and/or juddiv3.properties file. When the juddiv3.properties
 	 * file is updated the file will be reloaded. By default the reloadDelay is
 	 * set to 1 second to prevent excessive date stamp checking.
 	 */
"
juddi,6761216a890dc8cf70d3f66e03694b7a2fd80038,"JUDDI-278
Change juddi.properties to juddiv3.properties, and move the auth
package to v3.auth to distinguish between juddi v2 and v3 libraries.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814748 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 17:33:46,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/config/ClientConfig.java b/uddi-client/src/main/java/org/uddi/api_v3/client/config/ClientConfig.java
index 3726565..a1cebea 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/config/ClientConfig.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/config/ClientConfig.java
@@ -47,7 +47,7 @@
 	}
 	/**
 	 * Does the actual work of reading the configuration from System
-	 * Properties and/or juddi.properties file. When the juddi.properties
+	 * Properties and/or juddiv3.properties file. When the juddiv3.properties
 	 * file is updated the file will be reloaded. By default the reloadDelay is
 	 * set to 1 second to prevent excessive date stamp checking.
 	 */
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
index b09c1b4..296e083 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
@@ -169,8 +169,7 @@
       // this child to the soap response body
       document.appendChild(element.getFirstChild());
       setResponse(document);
-      throw new FatalErrorException(new ErrorMessage(""""));
-    }
+    }/*
     catch (RegistryException rex) 
     {
     	log.error(rex.getMessage());
@@ -220,7 +219,7 @@
     	//+ "", errText="" + errText;
         setException(fault);
         
-    }
+    } */
     catch(Exception ex) // Catch any other exceptions
     {
         log.error(ex.getMessage());
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
index f7f4549..228397e 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
@@ -66,10 +66,6 @@
 
 	    if ((operation == null) || (operation.trim().length() == 0))
 	      throw new FatalErrorException(new ErrorMessage(""errors.local.operation.notidentified""));
-
-	    else if (!operations.containsKey(operation.toLowerCase()))
-	    	throw new UnsupportedException(new ErrorMessage(""errors.local.publish.notsupported""));
-
 		}
 
 	  
@@ -87,7 +83,7 @@
 	      String operation = requestHandler.getOperation(uddiReq);
 		  Handler opHandler = operations.get(operation);
 	      requestHandler.setMethodName(opHandler.getMethodName());
-		  requestHandler.setOperationClass(opHandler.getClass());
+		  requestHandler.setOperationClass(opHandler.getParameter());
 		  
 	      String version   = requestHandler.getVersion(uddiReq, operation);
 	      validateRequest(operation, version, uddiReq);
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
index 496ed72..4f9235a 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
@@ -27,7 +27,7 @@
 	public UDDISecurityService() {
 		super();
 		operations = new HashMap<String, Handler>();
-		operations.put(""get_authtoken"", new Handler(""getAuthToken"", GetAuthToken.class));
+		operations.put(""get_authToken"", new Handler(""getAuthToken"", GetAuthToken.class));
 		operations.put(""discard_authToken"", new Handler(""discardAuthToken"", DiscardAuthToken.class));
 	}
 	
@@ -39,10 +39,6 @@
 
 		if ((operation == null) || (operation.trim().length() == 0))
 			throw new FatalErrorException(new ErrorMessage(""errors.local.operation.notidentified""));
-
-		else if (!operations.containsKey(operation.toLowerCase()))
-	    	throw new UnsupportedException(new ErrorMessage(""errors.local.security.notsupported""));
-
 	}
 
 	public Node secure(Element uddiReq) throws Exception
@@ -59,7 +55,7 @@
 		String operation = requestHandler.getOperation(uddiReq);
 		Handler opHandler = operations.get(operation);
 	    requestHandler.setMethodName(opHandler.getMethodName());
-		requestHandler.setOperationClass(opHandler.getClass());
+		requestHandler.setOperationClass(opHandler.getParameter());
 
 		String version   = requestHandler.getVersion(uddiReq, operation);
 	    validateRequest(operation, version, uddiReq);
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusItem.java b/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusItem.java
index f037cd6..a6421a6 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusItem.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/AssertionStatusItem.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -58,6 +59,7 @@
     ""keyedReference"",
     ""keysOwned""
 })
+@XmlRootElement
 public class AssertionStatusItem implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/AuthToken.java b/uddi-ws/src/main/java/org/uddi/api_v3/AuthToken.java
index 9190ed3..ded3cd1 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/AuthToken.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/AuthToken.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -50,6 +51,7 @@
 @XmlType(name = ""authToken"", propOrder = {
     ""authInfo""
 })
+@XmlRootElement
 public class AuthToken implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/BindingDetail.java b/uddi-ws/src/main/java/org/uddi/api_v3/BindingDetail.java
index cd283a5..171284a 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/BindingDetail.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/BindingDetail.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -54,6 +55,7 @@
     ""listDescription"",
     ""bindingTemplate""
 })
+@XmlRootElement
 public class BindingDetail implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/BusinessDetail.java b/uddi-ws/src/main/java/org/uddi/api_v3/BusinessDetail.java
index ff2b481..65b29a3 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/BusinessDetail.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/BusinessDetail.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -52,6 +53,7 @@
 @XmlType(name = ""businessDetail"", propOrder = {
     ""businessEntity""
 })
+@XmlRootElement
 public class BusinessDetail implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/BusinessList.java b/uddi-ws/src/main/java/org/uddi/api_v3/BusinessList.java
index e7054c6..a251b53 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/BusinessList.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/BusinessList.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -53,6 +54,7 @@
     ""listDescription"",
     ""businessInfos""
 })
+@XmlRootElement
 public class BusinessList implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfos.java b/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfos.java
index 432f7d8..4886d44 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfos.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/OperationalInfos.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -52,6 +53,7 @@
 @XmlType(name = ""operationalInfos"", propOrder = {
     ""operationalInfo""
 })
+@XmlRootElement
 public class OperationalInfos implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertion.java b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertion.java
index 97ccb05..faec7c6 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertion.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/PublisherAssertion.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 import org.w3._2000._09.xmldsig_.SignatureType;
@@ -58,6 +59,7 @@
     ""keyedReference"",
     ""signature""
 })
+@XmlRootElement
 public class PublisherAssertion implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/RegisteredInfo.java b/uddi-ws/src/main/java/org/uddi/api_v3/RegisteredInfo.java
index c97bac2..7a6d2cb 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/RegisteredInfo.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/RegisteredInfo.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -53,6 +54,7 @@
     ""businessInfos"",
     ""tModelInfos""
 })
+@XmlRootElement
 public class RegisteredInfo implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/RelatedBusinessesList.java b/uddi-ws/src/main/java/org/uddi/api_v3/RelatedBusinessesList.java
index f497aa1..8f90d4c 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/RelatedBusinessesList.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/RelatedBusinessesList.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -56,6 +57,7 @@
     ""businessKey"",
     ""relatedBusinessInfos""
 })
+@XmlRootElement
 public class RelatedBusinessesList implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/ServiceDetail.java b/uddi-ws/src/main/java/org/uddi/api_v3/ServiceDetail.java
index 093c650..4bbbdb3 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/ServiceDetail.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/ServiceDetail.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -52,6 +53,7 @@
 @XmlType(name = ""serviceDetail"", propOrder = {
     ""businessService""
 })
+@XmlRootElement
 public class ServiceDetail implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/ServiceList.java b/uddi-ws/src/main/java/org/uddi/api_v3/ServiceList.java
index 0c4727e..723d43a 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/ServiceList.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/ServiceList.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -53,6 +54,7 @@
     ""listDescription"",
     ""serviceInfos""
 })
+@XmlRootElement
 public class ServiceList implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/TModelDetail.java b/uddi-ws/src/main/java/org/uddi/api_v3/TModelDetail.java
index f2927ca..147cf9f 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/TModelDetail.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/TModelDetail.java
@@ -24,6 +24,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -52,6 +53,7 @@
 @XmlType(name = ""tModelDetail"", propOrder = {
     ""tModel""
 })
+@XmlRootElement
 public class TModelDetail implements Serializable{
 
 	@XmlTransient
"
juddi,1b5832104c4e9356bbf1cfd9ddedad411058e979,"JUDDI-277
Fix minor errors with Publication/Security services, add XmlRootElement 
annotation to all of the api_v3 classes that are returned as a result
from the WS.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814616 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-14 12:39:45,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/TModelList.java b/uddi-ws/src/main/java/org/uddi/api_v3/TModelList.java
index fadfceb..d6fcee5 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/TModelList.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/TModelList.java
@@ -23,6 +23,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -53,6 +54,7 @@
     ""listDescription"",
     ""tModelInfos""
 })
+@XmlRootElement
 public class TModelList implements Serializable{
 
 	@XmlTransient
"
juddi,d2fedb66cf783ac622d8018ab0789d1fb15a2b52,"JUDDI-277
Fix RequestHandler, add message properties.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814347 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-13 16:56:08,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
index 4f7e7e5..b09c1b4 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
@@ -15,12 +15,19 @@
  */
 package org.uddi.api_v3.client.local;
 
+import java.io.StringWriter;
 import java.lang.reflect.Method;
 import java.rmi.Remote;
+import java.util.List;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -28,12 +35,13 @@
 import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.error.RegistryException;
 import org.apache.juddi.error.UDDIErrorHelper;
-import org.apache.juddi.error.UnsupportedException;
 import org.apache.juddi.util.JAXBMarshaller;
+import org.uddi.api_v3.DispositionReport;
+import org.uddi.api_v3.ErrInfo;
+import org.uddi.api_v3.Result;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
 
 /**
  * @author Tom Cunningham (tcunning@apache.org)
@@ -98,8 +106,14 @@
       return version;
   }
   
-  public static String getText(Element element)
+  public static String getText(Element element) throws TransformerException
   {
+      TransformerFactory tf = TransformerFactory.newInstance();
+      Transformer trans = tf.newTransformer();
+      StringWriter sw = new StringWriter();
+      trans.transform(new DOMSource(element), new StreamResult(sw));
+      return new String(sw.toString());
+  /*
     StringBuffer textBuffer = new StringBuffer();
 
     NodeList nodeList = element.getChildNodes();
@@ -110,6 +124,7 @@
     }
 
     return textBuffer.toString().trim();
+*/
   }
 
   
@@ -124,7 +139,7 @@
       
       
       Method method = portType.getClass().getMethod(methodName, operationClass);
-      Object result = method.invoke(uddiReqObj);
+      Object result = method.invoke(portType, uddiReqObj);
       // Lookup the appropriate response handler which will
       // be used to marshal the UDDI object into the appropriate 
       // xml format.
@@ -165,24 +180,24 @@
         // as a UDDI DispositionReport with specific information 
         // about the problem.
     	// SOAP Fault values
-        //String faultCode = rex.getFaultCode();
-    	//String faultString = rex.getFaultString();
-        //String faultActor = rex.getFaultActor();
+    	String faultCode = """";
+    	String faultString = """";
+    	String faultActor = """";
         
+    	String errno = null;
+    	String errText = null;
+    	String errCode = null;
+    	
         // UDDI DispositionReport values
-        //String errno = null;
-        //String errCode = null;
-        //String errText = null;
-        /*
-        DispositionReport dispRpt = rex.getDispositionReport();
+        DispositionReport dispRpt = rex.getFaultInfo();
         if (dispRpt != null)
         {
           Result result = null;
           ErrInfo errInfo = null;
         
-          Vector results = dispRpt.getResultVector();
+          List<Result> results = dispRpt.getResult();
           if ((results != null) && (!results.isEmpty()))
-            result = (Result)results.elementAt(0);
+            result = (Result)results.get(0);
         
           if (result != null)
           {
@@ -192,11 +207,10 @@
             if (errInfo != null)
             {
               errCode = errInfo.getErrCode();  // UDDI ErrInfo errCode
-              errText = errInfo.getErrMsg();  // UDDI ErrInfo errMsg
+              errText = errInfo.getValue();  // UDDI ErrInfo errMsg
             }
           }
         }
-          */
         // We should have everything we need to assemble 
         // the SOAPFault so lets piece it together and 
         // send it on it's way.
"
juddi,d2fedb66cf783ac622d8018ab0789d1fb15a2b52,"JUDDI-277
Fix RequestHandler, add message properties.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814347 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-13 16:56:08,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
index 8b80c8f..b2abd59 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
@@ -38,12 +38,12 @@
 		operations.put(""find_business"", new Handler(""findBusiness"", FindBusiness.class));
 		operations.put(""find_service"", new Handler(""findService"", FindService.class));
 		operations.put(""find_binding"", new Handler(""findBinding"", FindBinding.class));
-		operations.put(""find_tmodel"", new Handler (""findTModel"", FindTModel.class));
-		operations.put(""find_relatedbusinesses"", new Handler(""findRelatedBusinesses"", FindRelatedBusinesses.class));
-		operations.put(""get_businessdetail"", new Handler(""getBusinessDetail"", GetBusinessDetail.class));
-		operations.put(""get_servicedetail"", new Handler(""getServiceDetail"", GetServiceDetail.class));
-		operations.put(""get_bindingdetail"", new Handler(""getBindingDetail"", GetBindingDetail.class));
-		operations.put(""get_tmodeldetail"", new Handler(""getTModelDetail"", GetTModelDetail.class));
+		operations.put(""find_tModel"", new Handler (""findTModel"", FindTModel.class));
+		operations.put(""find_relatedBusinesses"", new Handler(""findRelatedBusinesses"", FindRelatedBusinesses.class));
+		operations.put(""get_businessDetail"", new Handler(""getBusinessDetail"", GetBusinessDetail.class));
+		operations.put(""get_serviceDetail"", new Handler(""getServiceDetail"", GetServiceDetail.class));
+		operations.put(""get_bindingDetail"", new Handler(""getBindingDetail"", GetBindingDetail.class));
+		operations.put(""get_tModelDetail"", new Handler(""getTModelDetail"", GetTModelDetail.class));
 		operations.put(""get_operationalInfo"", new Handler(""getOperationalInfo"", GetOperationalInfo.class));
 	}
 
@@ -64,9 +64,6 @@
 
 	    if ((operation == null) || (operation.trim().length() == 0))
 	    	throw new FatalErrorException(new ErrorMessage(""errors.local.operation.notidentified""));
-
-	    else if (!operations.containsKey(operation.toLowerCase()))
-	    	throw new UnsupportedException(new ErrorMessage(""errors.local.inquiry.notsupported""));
 		}
 
 	  public Node inquire(Element uddiReq) throws Exception{
@@ -83,7 +80,7 @@
 	      String operation = requestHandler.getOperation(uddiReq);
 		  Handler opHandler = operations.get(operation);
 	      requestHandler.setMethodName(opHandler.getMethodName());
-		  requestHandler.setOperationClass(opHandler.getClass());
+		  requestHandler.setOperationClass(opHandler.getParameter());
 
 	      String version   = requestHandler.getVersion(uddiReq,operation);
 	      validateRequest(operation, version, uddiReq);
"
juddi,6835d73b1aafa536ad1a865028bef79fd87d7446,"JUDDI-277
Add marshalling.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814197 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 16:57:53,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java b/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
index 6973120..671a7c3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
+++ b/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
@@ -31,6 +31,7 @@
 import javax.xml.bind.Unmarshaller;
 
 import org.apache.log4j.Logger;
+import org.w3c.dom.Element;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
@@ -103,5 +104,13 @@
 		
 		return rawObject;
 	}
+
+	public static Element marshallToElement(Object object, String thePackage, Element element) throws JAXBException {
+		String rawObject = null;
+		JAXBContext jc = JAXBContexts.get(thePackage);
+		Marshaller marshaller = jc.createMarshaller();
+		marshaller.marshal(object, element);	
+		return element;
+	}
 	
 }
"
juddi,6835d73b1aafa536ad1a865028bef79fd87d7446,"JUDDI-277
Add marshalling.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814197 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 16:57:53,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
index a231262..4f7e7e5 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
@@ -17,7 +17,6 @@
 
 import java.lang.reflect.Method;
 import java.rmi.Remote;
-import java.util.Vector;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -140,24 +139,21 @@
       // Create a new 'temp' XML element to use as a container 
       // in which to marshal the UDDI response data into.
      
-      /*
       DocumentBuilder docBuilder = getDocumentBuilder();
       Document document = docBuilder.newDocument();
       Element element = document.createElement(""temp"");
-      */
       // Lookup the appropriate response handler and marshal 
       // the juddi object into the appropriate xml format (we 
       // only support UDDI v2.0 at this time).  Attach the
       // results to the body of the SOAP response.
-        
-      //responseHandler.marshal(uddiResObj,element);
+      JAXBMarshaller.marshallToElement(result, ""org.uddi.api_v3"", element);
       
       // Grab a reference to the 'temp' element's
       // only child here (this has the effect of
       // discarding the temp element) and append 
       // this child to the soap response body
-      //document.appendChild(element.getFirstChild());
-      //setResponse(document);
+      document.appendChild(element.getFirstChild());
+      setResponse(document);
       throw new FatalErrorException(new ErrorMessage(""""));
     }
     catch (RegistryException rex) 
"
juddi,1c3ee2fa839ee3eda714d75439b42ac097e05d56,"JUDDI-277
Add a Handler class and reflection for invoking the operation.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814165 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 14:23:13,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
index ab076b4..a231262 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/RequestHandler.java
@@ -15,6 +15,7 @@
  */
 package org.uddi.api_v3.client.local;
 
+import java.lang.reflect.Method;
 import java.rmi.Remote;
 import java.util.Vector;
 
@@ -53,6 +54,8 @@
   private volatile Node response;
   private volatile String exception;
   private volatile Remote portType; 
+  private volatile String methodName;
+  private volatile Class operationClass;
   
     /**
    * Grab the local name of the UDDI request element
@@ -121,7 +124,8 @@
       Object uddiReqObj = JAXBMarshaller.unmarshallFromString(reqString, ""org.uddi.api_v3"");
       
       
-      
+      Method method = portType.getClass().getMethod(methodName, operationClass);
+      Object result = method.invoke(uddiReqObj);
       // Lookup the appropriate response handler which will
       // be used to marshal the UDDI object into the appropriate 
       // xml format.
@@ -298,6 +302,18 @@
 public void setPortType(Remote portType) {
 	this.portType = portType;
 }
+public String getMethodName() {
+	return methodName;
+}
+public void setMethodName(String methodName) {
+	this.methodName = methodName;
+}
+public Class getOperationClass() {
+	return operationClass;
+}
+public void setOperationClass (Class operationClass) {
+	this.operationClass = operationClass;
+}
 public String getVersion() {
     return version;
 }
"
juddi,1c3ee2fa839ee3eda714d75439b42ac097e05d56,"JUDDI-277
Add a Handler class and reflection for invoking the operation.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814165 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 14:23:13,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
index c3c2dd2..8b80c8f 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIInquiryService.java
@@ -8,6 +8,16 @@
 import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.error.RegistryException;
 import org.apache.juddi.error.UnsupportedException;
+import org.uddi.api_v3.FindBinding;
+import org.uddi.api_v3.FindBusiness;
+import org.uddi.api_v3.FindRelatedBusinesses;
+import org.uddi.api_v3.FindService;
+import org.uddi.api_v3.FindTModel;
+import org.uddi.api_v3.GetBindingDetail;
+import org.uddi.api_v3.GetBusinessDetail;
+import org.uddi.api_v3.GetOperationalInfo;
+import org.uddi.api_v3.GetServiceDetail;
+import org.uddi.api_v3.GetTModelDetail;
 import org.uddi.api_v3.client.transport.InVMTransport;
 import org.uddi.v3_service.UDDIInquiryPortType;
 import org.w3c.dom.Element;
@@ -20,21 +30,21 @@
 	private static final long serialVersionUID = 1L;
 	private UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
 	
-	private HashMap<String, String> operations = null;
+	private HashMap<String, Handler> operations = null;
 
 	public UDDIInquiryService() {
 		super();
-		operations = new HashMap<String, String>();
-		operations.put(""find_business"", ""findBusiness"");
-		operations.put(""find_service"", ""findService"");
-		operations.put(""find_binding"", ""findBinding"");
-		operations.put(""find_tmodel"", ""findTModel"");
-		operations.put(""find_relatedbusinesses"", ""findRelatedBusinesses"");
-		operations.put(""get_businessdetail"", ""getBusinessDetail"");
-		operations.put(""get_servicedetail"", ""getServiceDetail"");
-		operations.put(""get_bindingdetail"", ""getBindingDetail"");
-		operations.put(""get_tmodeldetail"", ""getTModelDetail"");
-		operations.put(""get_operationalInfo"", ""getOperationalInfo"");
+		operations = new HashMap<String, Handler>();
+		operations.put(""find_business"", new Handler(""findBusiness"", FindBusiness.class));
+		operations.put(""find_service"", new Handler(""findService"", FindService.class));
+		operations.put(""find_binding"", new Handler(""findBinding"", FindBinding.class));
+		operations.put(""find_tmodel"", new Handler (""findTModel"", FindTModel.class));
+		operations.put(""find_relatedbusinesses"", new Handler(""findRelatedBusinesses"", FindRelatedBusinesses.class));
+		operations.put(""get_businessdetail"", new Handler(""getBusinessDetail"", GetBusinessDetail.class));
+		operations.put(""get_servicedetail"", new Handler(""getServiceDetail"", GetServiceDetail.class));
+		operations.put(""get_bindingdetail"", new Handler(""getBindingDetail"", GetBindingDetail.class));
+		operations.put(""get_tmodeldetail"", new Handler(""getTModelDetail"", GetTModelDetail.class));
+		operations.put(""get_operationalInfo"", new Handler(""getOperationalInfo"", GetOperationalInfo.class));
 	}
 
 
@@ -71,6 +81,10 @@
 	      requestHandler.setPortType(inquiry);
 	      
 	      String operation = requestHandler.getOperation(uddiReq);
+		  Handler opHandler = operations.get(operation);
+	      requestHandler.setMethodName(opHandler.getMethodName());
+		  requestHandler.setOperationClass(opHandler.getClass());
+
 	      String version   = requestHandler.getVersion(uddiReq,operation);
 	      validateRequest(operation, version, uddiReq);
 	      Thread thread = new Thread(requestHandler, ""WorkThread"");
"
juddi,1c3ee2fa839ee3eda714d75439b42ac097e05d56,"JUDDI-277
Add a Handler class and reflection for invoking the operation.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814165 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 14:23:13,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
index 82b8369..f7f4549 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDIPublicationService.java
@@ -7,6 +7,22 @@
 import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.error.RegistryException;
 import org.apache.juddi.error.UnsupportedException;
+import org.uddi.api_v3.AddPublisherAssertions;
+import org.uddi.api_v3.DeleteBinding;
+import org.uddi.api_v3.DeleteBusiness;
+import org.uddi.api_v3.DeletePublisherAssertions;
+import org.uddi.api_v3.DeleteService;
+import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.GetAssertionStatusReport;
+import org.uddi.api_v3.GetPublisherAssertions;
+import org.uddi.api_v3.GetRegisteredInfo;
+import org.uddi.api_v3.SaveBinding;
+import org.uddi.api_v3.SaveBusiness;
+import org.uddi.api_v3.SaveService;
+import org.uddi.api_v3.SaveTModel;
+import org.uddi.api_v3.SetPublisherAssertions;
+import org.uddi.api_v3.client.transport.InVMTransport;
+import org.uddi.v3_service.UDDIPublicationPortType;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
@@ -18,26 +34,26 @@
 	  // collection of valid operations
 
 
-	private HashMap<String, String> operations = null;
+	private HashMap<String, Handler> operations = null;
 
 	
 	  public UDDIPublicationService() {
 		super();
-		operations = new HashMap<String, String>();
-		operations.put(""get_registeredInfo"", ""getRegisteredInfo"");
-	  	operations.put(""save_business"", ""saveBusiness"");
-	  	operations.put(""save_service"", ""saveService"");
-	  	operations.put(""save_binding"", ""saveBinding"");
-	  	operations.put(""save_tmodel"", ""saveTModel"");
-	  	operations.put(""delete_business"", ""deleteBusiness"");
-	  	operations.put(""delete_service"", ""deleteService"");
-	  	operations.put(""delete_binding"", ""deleteBinding"");
-	  	operations.put(""delete_tmodel"", ""deleteTModel"");
-	  	operations.put(""add_publisherassertions"", ""addPublisherAssertions"");
-	  	operations.put(""set_publisherassertions"", ""setPublisherAssertions"");
-	  	operations.put(""get_publisherassertions"", ""getPublisherAssertions"");
-	  	operations.put(""delete_publisherassertions"", ""deletePublisherAssertions"");
-	  	operations.put(""get_assertionstatusreport"", ""getAssertionStatusReport"");
+		operations = new HashMap<String, Handler>();
+		operations.put(""get_registeredInfo"", new Handler(""getRegisteredInfo"", GetRegisteredInfo.class));
+	  	operations.put(""save_business"", new Handler(""saveBusiness"", SaveBusiness.class));
+	  	operations.put(""save_service"", new Handler(""saveService"", SaveService.class));
+	  	operations.put(""save_binding"", new Handler(""saveBinding"", SaveBinding.class));
+	  	operations.put(""save_tmodel"", new Handler(""saveTModel"", SaveTModel.class));
+	  	operations.put(""delete_business"", new Handler(""deleteBusiness"", DeleteBusiness.class));
+	  	operations.put(""delete_service"", new Handler(""deleteService"", DeleteService.class));
+	  	operations.put(""delete_binding"", new Handler(""deleteBinding"", DeleteBinding.class));
+	  	operations.put(""delete_tmodel"", new Handler(""deleteTModel"", DeleteTModel.class));
+	  	operations.put(""add_publisherassertions"", new Handler(""addPublisherAssertions"", AddPublisherAssertions.class));
+	  	operations.put(""set_publisherassertions"", new Handler(""setPublisherAssertions"", SetPublisherAssertions.class));
+	  	operations.put(""get_publisherassertions"", new Handler(""getPublisherAssertions"", GetPublisherAssertions.class));
+	  	operations.put(""delete_publisherassertions"", new Handler(""deletePublisherAssertions"", DeletePublisherAssertions.class));
+	  	operations.put(""get_assertionstatusreport"", new Handler(""getAssertionStatusReport"", GetAssertionStatusReport.class));
 	}
 
 	  public void validateRequest(String operation,String version,Element uddiReq)
@@ -61,11 +77,18 @@
 	  public Node publish(Element uddiReq) throws Exception
 	  {
 		  Registry.start();
-		  
+		  InVMTransport invmtransport = new InVMTransport();		
+		  UDDIPublicationPortType publish = invmtransport.getUDDIPublishService();
+
 	      //new RequestHandler on it's own thread
 	      RequestHandler requestHandler = new RequestHandler();
 	      requestHandler.setUddiReq(uddiReq);
+	      requestHandler.setPortType(publish);
 	      String operation = requestHandler.getOperation(uddiReq);
+		  Handler opHandler = operations.get(operation);
+	      requestHandler.setMethodName(opHandler.getMethodName());
+		  requestHandler.setOperationClass(opHandler.getClass());
+		  
 	      String version   = requestHandler.getVersion(uddiReq, operation);
 	      validateRequest(operation, version, uddiReq);
 
"
juddi,1c3ee2fa839ee3eda714d75439b42ac097e05d56,"JUDDI-277
Add a Handler class and reflection for invoking the operation.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@814165 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-12 14:23:13,Thomas Cunningham,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
index 876d603..496ed72 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/local/UDDISecurityService.java
@@ -12,6 +12,9 @@
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
+import org.uddi.api_v3.GetAuthToken;
+import org.uddi.api_v3.DiscardAuthToken;
+
 /**
  * @author Tom Cunningham (tcunning@apache.org)
  * @author Kurt Stam (kurt.stam@redhat.com)
@@ -19,15 +22,15 @@
 public class UDDISecurityService {
 
 	// collection of valid operations
-	private HashMap<String, String> operations = null;
+	private HashMap<String, Handler> operations = null;
 
 	public UDDISecurityService() {
 		super();
-		operations = new HashMap<String, String>();
-		operations.put(""get_authtoken"", ""getAuthToken"");
-		operations.put(""discard_authToken"", ""discardAuthToken"");
+		operations = new HashMap<String, Handler>();
+		operations.put(""get_authtoken"", new Handler(""getAuthToken"", GetAuthToken.class));
+		operations.put(""discard_authToken"", new Handler(""discardAuthToken"", DiscardAuthToken.class));
 	}
-
+	
 	public void validateRequest(String operation,String version,Element uddiReq)
 		throws RegistryException
 	{
@@ -54,6 +57,10 @@
 		requestHandler.setPortType(security);
 		
 		String operation = requestHandler.getOperation(uddiReq);
+		Handler opHandler = operations.get(operation);
+	    requestHandler.setMethodName(opHandler.getMethodName());
+		requestHandler.setOperationClass(opHandler.getClass());
+
 		String version   = requestHandler.getVersion(uddiReq, operation);
 	    validateRequest(operation, version, uddiReq);
 
"
juddi,ac1cd5656cef7fcd6355622bf835e91cd52bfc64,"JUDDI-276 cleaning up import warnings

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813180 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-10 00:12:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 1d98eb5..add2ef5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -41,7 +41,6 @@
 import org.uddi.api_v3.InfoSelection;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
-import org.uddi.api_v3.Result;
 import org.uddi.api_v3.SaveBinding;
 import org.uddi.api_v3.SaveBusiness;
 import org.uddi.api_v3.SaveService;
"
juddi,ac1cd5656cef7fcd6355622bf835e91cd52bfc64,"JUDDI-276 cleaning up import warnings

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813180 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-10 00:12:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 5fa37aa..b3baf85 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -20,7 +20,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.xml.bind.JAXBElement;
 import javax.xml.bind.JAXBException;
 
 import org.apache.juddi.error.ErrorMessage;
@@ -31,7 +30,6 @@
 import org.apache.juddi.util.JAXBMarshaller;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.CompletionStatus;
-import org.uddi.api_v3.ObjectFactory;
 import org.uddi.api_v3.OperationalInfo;
 import org.uddi.sub_v3.SubscriptionFilter;
 import org.uddi.v3_service.DispositionReportFaultMessage;
"
juddi,ac1cd5656cef7fcd6355622bf835e91cd52bfc64,"JUDDI-276 cleaning up import warnings

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813180 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-10 00:12:57,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
index 77234f8..3b66d74 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
@@ -63,7 +63,7 @@
 	@XmlTransient
 	private static final long serialVersionUID = 1L;
 
-    @XmlElement
+    @XmlElement(required=false)
     protected String instanceParms;
     @XmlElement(required=false)
     protected List<Description> description;
"
juddi,ac1cd5656cef7fcd6355622bf835e91cd52bfc64,"JUDDI-276 cleaning up import warnings

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813180 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-10 00:12:57,Kurt Stam,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java b/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
index e235ffe..7b73091 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
@@ -19,8 +19,6 @@
 package org.uddi.api_v3;
 
 import java.io.Serializable;
-import java.util.List;
-import javax.xml.bind.JAXBElement;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlElement;
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index ea68c96..1d98eb5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -36,10 +36,12 @@
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.InfoSelection;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
+import org.uddi.api_v3.Result;
 import org.uddi.api_v3.SaveBinding;
 import org.uddi.api_v3.SaveBusiness;
 import org.uddi.api_v3.SaveService;
@@ -50,6 +52,7 @@
 import org.uddi.v3_service.UDDIPublicationPortType;
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.juddi.error.UDDIErrorHelper;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.mapping.MappingModelToApi;
 import org.apache.juddi.validation.ValidatePublish;
@@ -78,7 +81,7 @@
 public class UDDIPublicationImpl extends AuthenticatedService implements UDDIPublicationPortType {
 
 	
-	public void addPublisherAssertions(AddPublisherAssertions body)
+	public DispositionReport addPublisherAssertions(AddPublisherAssertions body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -145,9 +148,10 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public void deleteBinding(DeleteBinding body)
+	public DispositionReport deleteBinding(DeleteBinding body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -175,9 +179,10 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public void deleteBusiness(DeleteBusiness body)
+	public DispositionReport deleteBusiness(DeleteBusiness body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -202,9 +207,10 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public void deletePublisherAssertions(DeletePublisherAssertions body)
+	public DispositionReport deletePublisherAssertions(DeletePublisherAssertions body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -230,9 +236,10 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
-	public void deleteService(DeleteService body)
+	public DispositionReport deleteService(DeleteService body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -260,10 +267,11 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
 
-	public void deleteTModel(DeleteTModel body)
+	public DispositionReport deleteTModel(DeleteTModel body)
 			throws DispositionReportFaultMessage {
 
 		EntityManager em = PersistenceManager.getEntityManager();
@@ -290,6 +298,7 @@
 			}
 			em.close();
 		}
+		return UDDIErrorHelper.buildDispositionReport(UDDIErrorHelper.E_SUCCESS);
 	}
 
 
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 0810102..5fa37aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -20,6 +20,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import javax.xml.bind.JAXBElement;
 import javax.xml.bind.JAXBException;
 
 import org.apache.juddi.error.ErrorMessage;
@@ -30,6 +31,7 @@
 import org.apache.juddi.util.JAXBMarshaller;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.CompletionStatus;
+import org.uddi.api_v3.ObjectFactory;
 import org.uddi.api_v3.OperationalInfo;
 import org.uddi.sub_v3.SubscriptionFilter;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -688,11 +690,13 @@
 		
 		Collections.sort((List<String>)businessKeys);
 		if (Collections.binarySearch((List<String>)businessKeys, modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey()) >= 0)
-			keysOwned.getFromKey().add(modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey());
+			keysOwned.setFromKey(modelPublisherAssertion.getBusinessEntityByFromKey().getEntityKey());
 		
 		if (Collections.binarySearch((List<String>)businessKeys, modelPublisherAssertion.getBusinessEntityByToKey().getEntityKey()) >= 0)
 			keysOwned.setToKey(modelPublisherAssertion.getBusinessEntityByToKey().getEntityKey());
-		
+		if (keysOwned.getFromKey() == null && keysOwned.getToKey() == null) {
+			throw new FatalErrorException(new ErrorMessage(""errors.invalidKey.KeysOwned""));
+		}
 	}
 
 	public static void mapRelatedBusinessInfo(org.apache.juddi.model.PublisherAssertion modelPublisherAssertion,
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
index e64c6ee..951dd4f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/rmi/UDDIPublicationService.java
@@ -33,6 +33,7 @@
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
@@ -58,34 +59,34 @@
 		super();
 	}
 
-	public void addPublisherAssertions(AddPublisherAssertions body)
+	public DispositionReport addPublisherAssertions(AddPublisherAssertions body)
 			throws RemoteException {
-		publication.addPublisherAssertions(body);
+		return publication.addPublisherAssertions(body);
 	}
 
-	public void deleteBinding(DeleteBinding body)
+	public DispositionReport deleteBinding(DeleteBinding body)
 			throws RemoteException {
-		publication.deleteBinding(body);
+		return publication.deleteBinding(body);
 	}
 
-	public void deleteBusiness(DeleteBusiness body)
+	public DispositionReport deleteBusiness(DeleteBusiness body)
 			throws RemoteException {
-		publication.deleteBusiness(body);
+		return publication.deleteBusiness(body);
 	}
 
-	public void deletePublisherAssertions(DeletePublisherAssertions body)
+	public DispositionReport deletePublisherAssertions(DeletePublisherAssertions body)
 			throws RemoteException {
-		publication.deletePublisherAssertions(body);
+		return publication.deletePublisherAssertions(body);
 	}
 
-	public void deleteService(DeleteService body)
+	public DispositionReport deleteService(DeleteService body)
 			throws RemoteException {
-		publication.deleteService(body);
+		return publication.deleteService(body);
 	}
 
-	public void deleteTModel(DeleteTModel body)
+	public DispositionReport deleteTModel(DeleteTModel body)
 			throws RemoteException {
-		publication.deleteTModel(body);
+		return publication.deleteTModel(body);
 	}
 
 	public List<AssertionStatusItem> getAssertionStatusReport(String authInfo,
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
index d9c6779..77234f8 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/InstanceDetails.java
@@ -65,9 +65,9 @@
 
     @XmlElement
     protected String instanceParms;
-    @XmlElement
+    @XmlElement(required=false)
     protected List<Description> description;
-    @XmlElement
+    @XmlElement(required=false)
     protected List<OverviewDoc> overviewDoc;
     
     public void setInstanceParms(String instanceParms) {
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java b/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
index 2f057bb..e235ffe 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/KeysOwned.java
@@ -59,47 +59,12 @@
 	@XmlTransient
 	private static final long serialVersionUID = 1L;
 
+    @XmlElement(required=false)
+    protected String fromKey;
 
-    @XmlElement
-    protected List<String> fromKey;
-
-    @XmlElement
+    @XmlElement(required=false)
     protected String toKey;
-    
-    
-    /**
-     * Gets the rest of the content model. 
-     * 
-     * <p>
-     * You are getting this ""catch-all"" property because of the following reason: 
-     * The field name ""ToKey"" is used by two different parts of a schema. See: 
-     * line 354 of file:/C:/Development/Projects/jUDDI_v3/uddi-ws/src/main/resources/uddi_v3.xsd
-     * line 352 of file:/C:/Development/Projects/jUDDI_v3/uddi-ws/src/main/resources/uddi_v3.xsd
-     * <p>
-     * To get rid of this property, apply a property customization to one 
-     * of both of the following declarations to change their names: 
-     * Gets the value of the content property.
-     * 
-     * <p>
-     * This accessor method returns a reference to the live list,
-     * not a snapshot. Therefore any modification you make to the
-     * returned list will be present inside the JAXB object.
-     * This is why there is not a <CODE>set</CODE> method for the content property.
-     * 
-     * <p>
-     * For example, to add a new item, do as follows:
-     * <pre>
-     *    getContent().add(newItem);
-     * </pre>
-     * 
-     * 
-     * <p>
-     * Objects of the following type(s) are allowed in the list
-     * {@link JAXBElement }{@code <}{@link String }{@code >}
-     * {@link JAXBElement }{@code <}{@link String }{@code >}
-     * 
-     * 
-     */
+        
     public String getToKey() {
     	return toKey;
     }
@@ -108,9 +73,12 @@
     	this.toKey = toKey;
     }
     
-    public List<String> getFromKey() {
+    public String getFromKey() {
     	return fromKey;
     }
-    
+
+    public void setFromKey(String fromKey) {
+    	this.fromKey = fromKey;
+    }    
 }
 
\ No newline at end of file
"
juddi,d73a0f734f2ff22428ba297702add7cc294abf8a,"JUDDI-276
Fix KeysOwned issues.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@813115 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-09 20:56:22,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
index 6a0cc8f..248d8ec 100644
--- a/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
+++ b/uddi-ws/src/main/java/org/uddi/v3_service/UDDIPublicationPortType.java
@@ -40,6 +40,7 @@
 import org.uddi.api_v3.DeletePublisherAssertions;
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
+import org.uddi.api_v3.DispositionReport;
 import org.uddi.api_v3.GetRegisteredInfo;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
@@ -81,8 +82,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""add_publisherAssertions"", action = ""add_publisherAssertions"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void addPublisherAssertions(
+    public DispositionReport addPublisherAssertions(
         @WebParam(name = ""add_publisherAssertions"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         AddPublisherAssertions body)
         throws DispositionReportFaultMessage, RemoteException
@@ -94,8 +96,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_binding"", action = ""delete_binding"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void deleteBinding(
+    public DispositionReport deleteBinding(
         @WebParam(name = ""delete_binding"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteBinding body)
         throws DispositionReportFaultMessage, RemoteException
@@ -107,8 +110,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_business"", action = ""delete_business"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void deleteBusiness(
+    public DispositionReport deleteBusiness(
         @WebParam(name = ""delete_business"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteBusiness body)
         throws DispositionReportFaultMessage, RemoteException
@@ -120,8 +124,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_publisherAssertions"", action = ""delete_publisherAssertions"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void deletePublisherAssertions(
+    public DispositionReport deletePublisherAssertions(
         @WebParam(name = ""delete_publisherAssertions"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeletePublisherAssertions body)
         throws DispositionReportFaultMessage, RemoteException
@@ -133,8 +138,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_service"", action = ""delete_service"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void deleteService(
+    public DispositionReport deleteService(
         @WebParam(name = ""delete_service"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteService body)
         throws DispositionReportFaultMessage, RemoteException
@@ -146,8 +152,9 @@
      * @throws DispositionReportFaultMessage, RemoteException
      */
     @WebMethod(operationName = ""delete_tModel"", action = ""delete_tModel"")
+    @WebResult(name = ""dispositionReport"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
     @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
-    public void deleteTModel(
+    public DispositionReport deleteTModel(
         @WebParam(name = ""delete_tModel"", targetNamespace = ""urn:uddi-org:api_v3"", partName = ""body"")
         DeleteTModel body)
         throws DispositionReportFaultMessage, RemoteException
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
index d4b8ffe..44564d8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/BusinessEntityQuery.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.query;
 
+
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index 190a829..95bbee4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -153,6 +153,11 @@
 		
 
 	}
+	
+	public static void appendGroupByEntityKey(DynamicQuery qry) {
+		qry.pad();
+		qry.append(""GROUP BY "" + KEY_NAME);
+	}
 
 	
 }
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
index 4f6a651..588add0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBindingTemplatesQuery.java
@@ -46,7 +46,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""select distinct "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""select "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		selectSQL = sql.toString();
 	}
 	
@@ -63,6 +63,8 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
+		
+		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
index 818aae9..625fe20 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessEntitiesQuery.java
@@ -46,7 +46,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""select distinct "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""select "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		selectSQL = sql.toString();
 	}
 	
@@ -63,6 +63,8 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 
 		appendSortCriteria(dynamicQry, fq);
+		
+		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
index 1e824fa..ab83372 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchBusinessServicesQuery.java
@@ -46,7 +46,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""select distinct "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""select "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		selectSQL = sql.toString();
 	}
 	
@@ -63,6 +63,8 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
+		
+		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
index 6e58bc6..9bcef4b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FetchTModelsQuery.java
@@ -46,7 +46,7 @@
 
 	static {
 		StringBuffer sql = new StringBuffer(200);
-		sql.append(""select distinct "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
+		sql.append(""select "" + ENTITY_ALIAS + "" from "" + ENTITY_NAME + "" "" + ENTITY_ALIAS + "" "");
 		selectSQL = sql.toString();
 	}
 	
@@ -63,6 +63,8 @@
 			dynamicQry.AND().pad().appendGroupedAnd(restrictions);
 		
 		appendSortCriteria(dynamicQry, fq);
+		
+		appendGroupByEntityKey(dynamicQry);
 
 		log.debug(dynamicQry);
 		
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index 4d6d62f..9368f50 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -24,7 +24,6 @@
 import java.util.Set;
 
 import javax.persistence.EntityManager;
-import javax.xml.bind.JAXBElement;
 
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index fa8a181..d58e8a8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -21,7 +21,6 @@
 import java.util.List;
 import java.util.Collections;
 import javax.persistence.EntityManager;
-import javax.xml.bind.JAXBElement;
 
 import org.apache.juddi.config.Constants;
 import org.apache.juddi.query.util.DynamicQuery;
"
juddi,d687ec53058205e9e67aa340cbc3ad8e80edbec7,"JUDDI-275 switching select distinct to group by

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@811535 13f79535-47bb-0310-9956-ffa450edef68
",2009-09-04 20:15:53,Kurt Stam,"diff --git a/uddi-tck/src/main/java/org/uddi/api_v3/tck/TckFindEntity.java b/uddi-tck/src/main/java/org/uddi/api_v3/tck/TckFindEntity.java
index bc8e1f8..228db23 100644
--- a/uddi-tck/src/main/java/org/uddi/api_v3/tck/TckFindEntity.java
+++ b/uddi-tck/src/main/java/org/uddi/api_v3/tck/TckFindEntity.java
@@ -46,6 +46,7 @@
 public class TckFindEntity 
 {
 	final static String FIND_BUSINESS_XML             = ""uddi_data/find/findBusiness1.xml"";
+	final static String FIND_ALL_BUSINESSES_XML       = ""uddi_data/find/findAllBusinesses.xml"";
 	final static String FIND_SERVICE_XML              = ""uddi_data/find/findService1.xml"";
 	final static String FIND_BINDING_XML              = ""uddi_data/find/findBinding1.xml"";
 	final static String FIND_TMODEL_XML               = ""uddi_data/find/findTModel1.xml"";
@@ -85,6 +86,28 @@
 		}
 	}
 	
+	public void findAllBusiness() {
+		try {
+			FindBusiness body = (FindBusiness)EntityCreator.buildFromDoc(FIND_ALL_BUSINESSES_XML, ""org.uddi.api_v3"");
+			BusinessList result = inquiry.findBusiness(body);
+			if (result == null)
+				Assert.fail(""Null result from find business operation"");
+			BusinessInfos bInfos = result.getBusinessInfos();
+			if (bInfos == null)
+				Assert.fail(""No result from find business operation"");
+			List<BusinessInfo> biList = bInfos.getBusinessInfo();
+			if (biList == null || biList.size() == 0)
+				Assert.fail(""No result from find business operation"");
+			//expecting more than 2 businesses
+			Assert.assertTrue(biList.size()>1);
+			
+		}
+		catch(Exception e) {
+			logger.error(e.getMessage(), e);
+			Assert.fail(""No exception should be thrown."");
+		}
+	}
+	
 	public void findService() {
 		try {
 			FindService body = (FindService)EntityCreator.buildFromDoc(FIND_SERVICE_XML, ""org.uddi.api_v3"");
"
juddi,3e03ee60edbfd2c8e5277ae1aee236c5fc9fe636,"JUDDI-255
Add @XmlRootElement.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@808581 13f79535-47bb-0310-9956-ffa450edef68
",2009-08-27 19:44:28,Thomas Cunningham,"diff --git a/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java b/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
index 785dbd3..28927f9 100644
--- a/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
+++ b/uddi-ws/src/main/java/org/uddi/api_v3/DispositionReport.java
@@ -25,6 +25,7 @@
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
@@ -53,7 +54,8 @@
 @XmlType(name = ""dispositionReport"", propOrder = {
     ""result""
 })
-public class DispositionReport implements Serializable{
+@XmlRootElement
+public class DispositionReport implements Serializable {
 
 	@XmlTransient
 	private static final long serialVersionUID = 1L;
"
juddi,06212d75b5cd6230f1e7223ceb284b750e59f4ce,"JUDDI-271, fixing SQL scripts. Preparing for 2.0.1 release.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0.0@801677 13f79535-47bb-0310-9956-ffa450edef68
",2009-08-06 15:35:35,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/util/Release.java b/src/main/java/org/apache/juddi/util/Release.java
index 1d98838..f0cc540 100644
--- a/src/main/java/org/apache/juddi/util/Release.java
+++ b/src/main/java/org/apache/juddi/util/Release.java
@@ -20,7 +20,7 @@
  */
 public class Release 
 {
-  private static final String REGISTRY_VERSION = ""2.0rc5"";
+  private static final String REGISTRY_VERSION = ""2.0.1"";
   private static final String UDDI_VERSION = ""2.0"";
   
   // Made private to avoid instantiation
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Address.java b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
index 129950d..312ba2d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Address.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
@@ -35,7 +35,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_address"")
+@Table(name = ""j3_address"")
 public class Address implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java b/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
index 9050d2e..96c684d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_address_line"")
+@Table(name = ""j3_address_line"")
 public class AddressLine implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java b/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
index b072024..d239641 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AuthToken.java
@@ -28,7 +28,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_auth_token"")
+@Table(name = ""j3_auth_token"")
 public class AuthToken implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
index 2e5df11..c185a12 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_binding_category_bag"")
+@Table(name = ""j3_binding_category_bag"")
 public class BindingCategoryBag extends CategoryBag {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
index 3425b9d..60853e3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_binding_descr"")
+@Table(name = ""j3_binding_descr"")
 public class BindingDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index 8a386d0..db2efff 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -35,7 +35,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_binding_template"")
+@Table(name = ""j3_binding_template"")
 public class BindingTemplate extends UddiEntity implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
index 033765e..8abefed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_category_bag"")
+@Table(name = ""j3_business_category_bag"")
 public class BusinessCategoryBag extends CategoryBag {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
index 678e63f..301dd03 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_descr"")
+@Table(name = ""j3_business_descr"")
 public class BusinessDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index cc537d7..fd4c314 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -32,7 +32,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_entity"")
+@Table(name = ""j3_business_entity"")
 public class BusinessEntity extends UddiEntity implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
index 4ed473f..badc605 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_identifier"")
+@Table(name = ""j3_business_identifier"")
 public class BusinessIdentifier implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
index 43ac464..43442c4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_name"")
+@Table(name = ""j3_business_name"")
 public class BusinessName implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
index 7451585..ce57f9f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
@@ -34,7 +34,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_business_service"")
+@Table(name = ""j3_business_service"")
 public class BusinessService extends UddiEntity implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
index 23ffb50..b8a8e63 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
@@ -34,7 +34,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_category_bag"")
+@Table(name = ""j3_category_bag"")
 @Inheritance(strategy = InheritanceType.JOINED)
 
 public class CategoryBag implements java.io.Serializable {
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
index b1ce4e2..8ac0925 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
@@ -36,7 +36,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_contact"")
+@Table(name = ""j3_contact"")
 public class Contact implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
index ee3861e..c937c6f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_contact_descr"")
+@Table(name = ""j3_contact_descr"")
 public class ContactDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
index 924d5e0..d1fbacb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_discovery_url"")
+@Table(name = ""j3_discovery_url"")
 public class DiscoveryUrl implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Email.java b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
index 80e4c8f..bab45ef 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Email.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_email"")
+@Table(name = ""j3_email"")
 public class Email implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
index 6d20052..cf59db4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_instance_details_descr"")
+@Table(name = ""j3_instance_details_descr"")
 public class InstanceDetailsDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
index f8fe56d..ea779c9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_instance_details_doc_descr"")
+@Table(name = ""j3_instance_details_doc_descr"")
 public class InstanceDetailsDocDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
index dcc291a..bd6d384 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
@@ -29,7 +29,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_keyed_reference"")
+@Table(name = ""j3_keyed_reference"")
 public class KeyedReference implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
index 65a2e99..a335bed 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
@@ -35,7 +35,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_keyed_reference_group"")
+@Table(name = ""j3_keyed_reference_group"")
 public class KeyedReferenceGroup implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
index 40224a4..a11399e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDoc.java
@@ -36,7 +36,7 @@
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
 @Entity
-@Table(name = ""juddiv3_overview_doc"")
+@Table(name = ""j3_overview_doc"")
 public class OverviewDoc implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDocDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDocDescr.java
index 7a9dfc8..8d53716 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/OverviewDocDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/OverviewDocDescr.java
@@ -31,7 +31,7 @@
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
 @Entity
-@Table(name = ""juddiv3_overview_doc_descr"")
+@Table(name = ""j3_overview_doc_descr"")
 public class OverviewDocDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PersonName.java b/juddi-core/src/main/java/org/apache/juddi/model/PersonName.java
index 6920b21..cd324c2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PersonName.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PersonName.java
@@ -29,7 +29,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_person_name"")
+@Table(name = ""j3_person_name"")
 public class PersonName implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Phone.java b/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
index 8bf7929..4264d56 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_phone"")
+@Table(name = ""j3_phone"")
 public class Phone implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
index 5b72b74..74f56d5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_publisher"")
+@Table(name = ""j3_publisher"")
 //@PrimaryKeyJoinColumn(name = ""authorized_name"")
 public class Publisher extends UddiEntityPublisher implements java.io.Serializable {
 
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
index 9993a75..9bb5cd4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
@@ -29,7 +29,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_publisher_assertion"")
+@Table(name = ""j3_publisher_assertion"")
 public class PublisherAssertion implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
index d52512d..35f7b6c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_service_category_bag"")
+@Table(name = ""j3_service_category_bag"")
 public class ServiceCategoryBag extends CategoryBag {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
index e8c3e47..46157da 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_service_descr"")
+@Table(name = ""j3_service_descr"")
 public class ServiceDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
index 765e9e0..e166eea 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_service_name"")
+@Table(name = ""j3_service_name"")
 public class ServiceName implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceProjection.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceProjection.java
index d3cb525..505b597 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceProjection.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceProjection.java
@@ -26,7 +26,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_service_projection"")
+@Table(name = ""j3_service_projection"")
 public class ServiceProjection implements java.io.Serializable {
 
 		
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
index d482283..2af9bd5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
@@ -35,7 +35,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_subscription"")
+@Table(name = ""j3_subscription"")
 public class Subscription implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionChunkToken.java b/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionChunkToken.java
index 6f6aaa4..e0b2088 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionChunkToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionChunkToken.java
@@ -29,7 +29,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_subscription_chunk_token"")
+@Table(name = ""j3_subscription_chunk_token"")
 public class SubscriptionChunkToken implements java.io.Serializable  {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionMatch.java b/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionMatch.java
index d7fb138..ec4a7f1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionMatch.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SubscriptionMatch.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_subscription_match"")
+@Table(name = ""j3_subscription_match"")
 public class SubscriptionMatch implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
index eb076af..08b9ea4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
@@ -34,7 +34,7 @@
  * @author <a href=""mailto:tcunning@apache.org"">Tom Cunningham</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel"")
+@Table(name = ""j3_tmodel"")
 public class Tmodel extends UddiEntity implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
index 06bf631..93598d9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
@@ -25,7 +25,7 @@
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel_category_bag"")
+@Table(name = ""j3_tmodel_category_bag"")
 public class TmodelCategoryBag extends CategoryBag {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
index c8bf5ec..b4d9ac0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel_descr"")
+@Table(name = ""j3_tmodel_descr"")
 public class TmodelDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
index ecb5031..5580e50 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel_identifier"")
+@Table(name = ""j3_tmodel_identifier"")
 public class TmodelIdentifier implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 74adcc3..7091600 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -36,7 +36,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel_instance_info"")
+@Table(name = ""j3_tmodel_instance_info"")
 public class TmodelInstanceInfo implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
index 25aa7fb..eae781d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_tmodel_instance_info_descr"")
+@Table(name = ""j3_tmodel_instance_info_descr"")
 public class TmodelInstanceInfoDescr implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
index a7e937b..23c0ab8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
@@ -34,7 +34,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_transfer_token"")
+@Table(name = ""j3_transfer_token"")
 public class TransferToken implements java.io.Serializable{
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TransferTokenKey.java b/juddi-core/src/main/java/org/apache/juddi/model/TransferTokenKey.java
index cf4b02e..e063d54 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TransferTokenKey.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TransferTokenKey.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  */
 @Entity
-@Table(name = ""juddiv3_transfer_token_keys"")
+@Table(name = ""j3_transfer_token_keys"")
 public class TransferTokenKey implements java.io.Serializable {
 
 	private static final long serialVersionUID = 1L;
"
juddi,e8b6a6a798136990803cdd3f88198031fdb6e2b7,"JUDDI-268, changing the prefix from juddiv3_ to j3_ to make the table names shorter (<30 characters).

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@798255 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-27 18:58:57,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
index 5630274..97e0816 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
@@ -30,7 +30,7 @@
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  */
 @Entity
-@Table(name = ""juddiv3_uddi_entity"")
+@Table(name = ""j3_uddi_entity"")
 @Inheritance(strategy = InheritanceType.JOINED)
 public abstract class UddiEntity {
 
"
juddi,ff3c9cca60d828287d2b25dc5e7836d1be336c9c,"JUDDI-245
Create a start buffer so that the subscription listener is kicked off after
X number of ms after registered.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@795899 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-20 16:23:38,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Property.java b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
index e1075bc..20e2c9a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Property.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Property.java
@@ -25,6 +25,7 @@
 	public final static String JUDDI_TRANSFER_EXPIRATION_DAYS    =""juddi.transfer.expiration.days"";
 	public final static String JUDDI_AUTHENTICATE_INQUIRY        =""juddi.authenticate.Inquiry"";
 	public final static String JUDDI_SUBSCRIPTION_EXPIRATION_DAYS=""juddi.subscription.expiration.days"";
+	public final static String JUDDI_NOTIFICATION_START_BUFFER   =""juddi.notification.start.buffer"";
 	public final static String JUDDI_NOTIFICATION_INTERVAL       =""juddi.notification.interval"";
 	public final static String JUDDI_SUBSCRIPTION_CHUNKEXPIRATION_MINUTES=""juddi.subscription.chunkexpiration.minutes"";
 	public final static String JUDDI_JNDI_REGISTRATION           =""juddi.jndi.registration"";
"
juddi,ff3c9cca60d828287d2b25dc5e7836d1be336c9c,"JUDDI-245
Create a start buffer so that the subscription listener is kicked off after
X number of ms after registered.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@795899 13f79535-47bb-0310-9956-ffa450edef68
",2009-07-20 16:23:38,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 8134db9..9d309a8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -59,6 +59,7 @@
 
 	private Logger log = Logger.getLogger(this.getClass());
 	private Timer timer = new Timer();
+	private long startBuffer = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_START_BUFFER, 20000l); // 20s startup delay default 
 	private long interval = AppConfig.getConfiguration().getLong(Property.JUDDI_NOTIFICATION_INTERVAL, 300000l); //5 min default
 	private UDDISubscriptionImpl subscriptionImpl = new UDDISubscriptionImpl();
 	private static long ACCEPTABLE_LAG_TIME = 20l; //20 milliseconds
@@ -67,7 +68,7 @@
 	
 	public SubscriptionNotifier() throws ConfigurationException {
 		super();
-		timer.scheduleAtFixedRate(this, new Date(), interval);
+		timer.scheduleAtFixedRate(this, startBuffer, interval);
 	}
 
 	public void run() 
"
juddi,6fe8b25ccb515f3c41dfd9c92f49295319e95f3d,"JUDDI-250: infoSelection, a required argument, is now accounted for in getRegisteredInfo call

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@789998 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-30 23:16:46,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index 5d00026..609c5ee 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -38,6 +38,7 @@
 import org.uddi.api_v3.DeleteService;
 import org.uddi.api_v3.DeleteTModel;
 import org.uddi.api_v3.GetRegisteredInfo;
+import org.uddi.api_v3.InfoSelection;
 import org.uddi.api_v3.PublisherAssertion;
 import org.uddi.api_v3.RegisteredInfo;
 import org.uddi.api_v3.SaveBinding;
@@ -59,6 +60,7 @@
 import org.apache.juddi.query.FindTModelByPublisherQuery;
 import org.apache.juddi.query.FindPublisherAssertionByBusinessQuery;
 import org.apache.juddi.query.DeletePublisherAssertionByBusinessQuery;
+import org.apache.juddi.query.TModelQuery;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.api.datatype.PublisherDetail;
 import org.apache.juddi.api.datatype.SavePublisher;
@@ -68,6 +70,7 @@
 import org.apache.juddi.config.Property;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
+import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.query.util.FindQualifiers;
 
 /**
@@ -362,12 +365,21 @@
 	
 			UddiEntityPublisher publisher = this.getEntityPublisher(em, body.getAuthInfo());
 			
+			new ValidatePublish(publisher).validateRegisteredInfo(body);
+
 			List<?> businessKeysFound = null;
 			businessKeysFound = FindBusinessByPublisherQuery.select(em, null, publisher, businessKeysFound);
 	
+			
 			List<?> tmodelKeysFound = null;
-			tmodelKeysFound = FindTModelByPublisherQuery.select(em, null, publisher, tmodelKeysFound);
-	
+
+			if (body.getInfoSelection().equals(InfoSelection.HIDDEN))
+				tmodelKeysFound = FindTModelByPublisherQuery.select(em, null, publisher, tmodelKeysFound, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS + "".deleted"", new Boolean(true), DynamicQuery.PREDICATE_EQUALS));
+			else if (body.getInfoSelection().equals(InfoSelection.VISIBLE))
+				tmodelKeysFound = FindTModelByPublisherQuery.select(em, null, publisher, tmodelKeysFound, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS + "".deleted"", new Boolean(false), DynamicQuery.PREDICATE_EQUALS));
+			else
+				tmodelKeysFound = FindTModelByPublisherQuery.select(em, null, publisher, tmodelKeysFound);
+				
 			RegisteredInfo result = new RegisteredInfo();
 			
 			// Sort and retrieve the final results
"
juddi,6fe8b25ccb515f3c41dfd9c92f49295319e95f3d,"JUDDI-250: infoSelection, a required argument, is now accounted for in getRegisteredInfo call

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@789998 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-30 23:16:46,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
index 4556681..7c001fa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByPublisherQuery.java
@@ -40,8 +40,8 @@
 		findQuery = new FindEntityByPublisherQuery(TModelQuery.ENTITY_NAME, TModelQuery.ENTITY_ALIAS, TModelQuery.KEY_NAME);
 	}
 	
-	public static List<?> select(EntityManager em, FindQualifiers fq, UddiEntityPublisher publisher, List<?> keysIn) {
-		return findQuery.select(em, fq, publisher, keysIn, new DynamicQuery.Parameter(TModelQuery.ENTITY_ALIAS + "".deleted"", new Boolean(false), DynamicQuery.PREDICATE_EQUALS));
+	public static List<?> select(EntityManager em, FindQualifiers fq, UddiEntityPublisher publisher, List<?> keysIn, DynamicQuery.Parameter... restrictions) {
+		return findQuery.select(em, fq, publisher, keysIn, restrictions);
 	}
 	
 }
"
juddi,6fe8b25ccb515f3c41dfd9c92f49295319e95f3d,"JUDDI-250: infoSelection, a required argument, is now accounted for in getRegisteredInfo call

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@789998 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-30 23:16:46,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java b/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
index f143ed8..6973120 100644
--- a/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
+++ b/juddi-core/src/main/java/org/apache/juddi/util/JAXBMarshaller.java
@@ -47,7 +47,7 @@
 			JAXBContexts.put(PACKAGE_UDDIAPI, JAXBContext.newInstance(PACKAGE_UDDIAPI));
 			JAXBContexts.put(PACKAGE_SUBSCRIPTION, JAXBContext.newInstance(PACKAGE_SUBSCRIPTION));
 		} catch (JAXBException e) {
-			logger.error(""Initial entityManagerFactory creation failed:"" + e, e);
+			logger.error(""Initialization of JAXBMarshaller failed:"" + e, e);
 			throw new ExceptionInInitializerError(e);
 		}
 	}
"
juddi,6fe8b25ccb515f3c41dfd9c92f49295319e95f3d,"JUDDI-250: infoSelection, a required argument, is now accounted for in getRegisteredInfo call

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@789998 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-30 23:16:46,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
index 6901d38..a470369 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidatePublish.java
@@ -944,6 +944,17 @@
 			throw new ValueNotAllowedException(new ErrorMessage(""errors.overviewdoc.NoDescOrUrl""));
 	}
 
+	public void validateRegisteredInfo(org.uddi.api_v3.GetRegisteredInfo body) throws DispositionReportFaultMessage {
+		// No null input
+		if (body == null)
+			throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+		
+		// infoSelection is required
+		if (body.getInfoSelection() == null)
+			throw new ValueNotAllowedException(new ErrorMessage(""errors.getregisteredinfo.NoInfoSelection""));
+			
+	}
+	
 	/*-------------------------------------------------------------------
 	 Publisher functions are specific to jUDDI.
 	 --------------------------------------------------------------------*/
"
juddi,7032fbf243a520cdca99739c1c6688f636bf5aff,"JUDDI-253 Methods in EntityForLang have the same signature

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@787892 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-24 02:53:38,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscriptionNotification.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscriptionNotification.java
index cb2598b..caee036 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscriptionNotification.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/client/UDDISubscriptionNotification.java
@@ -16,17 +16,14 @@
  */
 package org.apache.juddi.portlets.client;
 
-import java.util.Vector;
-
 import org.apache.juddi.portlets.client.service.NotifyResponse;
 import org.apache.juddi.portlets.client.service.NotifyService;
 import org.apache.juddi.portlets.client.service.NotifyServiceAsync;
 
-import com.google.gwt.user.client.Window;
-
 import com.google.gwt.core.client.EntryPoint;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.user.client.Timer;
+import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.rpc.AsyncCallback;
 import com.google.gwt.user.client.ui.RootPanel;
 
@@ -41,8 +38,6 @@
 	private NotifyPanel notifyPanel = null;
 	private String token = null;
 	
-	private static int counter = 0;
-	
 	private NotifyServiceAsync notifyService = (NotifyServiceAsync) GWT.create(NotifyService.class);
 	
 	protected NotifyPanel getNotifyPanel() {
"
juddi,7032fbf243a520cdca99739c1c6688f636bf5aff,"JUDDI-253 Methods in EntityForLang have the same signature

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@787892 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-24 02:53:38,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/UDDIBrowserPortlet.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/UDDIBrowserPortlet.java
index 3235222..0ec483e 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/UDDIBrowserPortlet.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/UDDIBrowserPortlet.java
@@ -14,7 +14,6 @@
 	protected void doView(RenderRequest renderRequest, RenderResponse renderResponse) 
 		throws PortletException, PortletSecurityException, IOException
 	{
-		
 	  renderResponse.setContentType(""text/html"");
 	  PrintWriter writer = renderResponse.getWriter();
 	  writer.println(""<script type='text/javascript' language='javascript' src='"" 
"
juddi,7032fbf243a520cdca99739c1c6688f636bf5aff,"JUDDI-253 Methods in EntityForLang have the same signature

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@787892 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-24 02:53:38,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
index a46d5c8..9e27ea9 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/InquiryServiceImpl.java
@@ -122,13 +122,13 @@
         	 for (BusinessEntity businessEntity : businessDetail.getBusinessEntity()) {
         		 Business business = new Business(
         				 businessEntity.getBusinessKey(),
-        				 EntityForLang.get(businessEntity.getName(),lang).getValue(),
-        				 EntityForLang.get(businessEntity.getDescription(),lang).getValue());
+        				 EntityForLang.getName(businessEntity.getName(),lang).getValue(),
+        				 EntityForLang.getDescription(businessEntity.getDescription(),lang).getValue());
         		 for (BusinessService businessService : businessEntity.getBusinessServices().getBusinessService()) {
         			 Service service = new Service(
         					 businessService.getServiceKey(),
-        					 EntityForLang.get(businessService.getName(),lang).getValue(),
-        					 EntityForLang.get(businessService.getDescription(),lang).getValue());
+        					 EntityForLang.getName(businessService.getName(),lang).getValue(),
+        					 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
         			 business.getServices().add(service);
         		 }
         		 //for (Contact contact : businessEntity.getContacts().getContact()) {
@@ -154,9 +154,10 @@
 	
 	public InquiryResponse getServiceDetail(String authToken, String serviceKey) 
 	{
+		
 		HttpServletRequest request = this.getThreadLocalRequest();
 		String lang = request.getLocale().getLanguage();
-		
+	
 		GetServiceDetail getServiceDetail = new GetServiceDetail();
 		getServiceDetail.setAuthInfo(authToken);
 		getServiceDetail.getServiceKey().add(serviceKey);
@@ -168,13 +169,13 @@
         	 for (BusinessService businessService : serviceDetail.getBusinessService()) {
         		 Service service = new Service(
         				 businessService.getServiceKey(),
-        				 EntityForLang.get(businessService.getName(),lang).getValue(),
-        				 EntityForLang.get(businessService.getDescription(),lang).getValue());
+        				 EntityForLang.getName(businessService.getName(),lang).getValue(),
+        				 EntityForLang.getDescription(businessService.getDescription(),lang).getValue());
         		 for (BindingTemplate bindingTemplate : businessService.getBindingTemplates().getBindingTemplate()) {
         			 ServiceBinding serviceBinding = new ServiceBinding(
         					 bindingTemplate.getBindingKey(),
         					 bindingTemplate.getAccessPoint().getValue(),
-        					 EntityForLang.get(bindingTemplate.getDescription(),lang).getValue(),
+        					 EntityForLang.getDescription(bindingTemplate.getDescription(),lang).getValue(),
         					 bindingTemplate.getAccessPoint().getUseType());
         			 service.getServiceBindings().add(serviceBinding);
         		 }
"
juddi,7032fbf243a520cdca99739c1c6688f636bf5aff,"JUDDI-253 Methods in EntityForLang have the same signature

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@787892 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-24 02:53:38,Kurt Stam,"diff --git a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
index e78dfc1..00e2cc1 100644
--- a/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
+++ b/juddi-console/uddi-portlets/src/main/java/org/apache/juddi/portlets/server/service/PublicationServiceImpl.java
@@ -70,13 +70,13 @@
         	 for (BusinessInfo businessInfo : info.getBusinessInfos().getBusinessInfo()) {
 				Business business = new Business(
 						businessInfo.getBusinessKey(),
-						EntityForLang.get(businessInfo.getName(),lang).getValue(),
-						EntityForLang.get(businessInfo.getDescription(),lang).getValue());
+						EntityForLang.getName(businessInfo.getName(),lang).getValue(),
+						EntityForLang.getDescription(businessInfo.getDescription(),lang).getValue());
 				List<Service> services = new ArrayList<Service>();
 				for (ServiceInfo serviceInfo : businessInfo.getServiceInfos().getServiceInfo()) {
 					Service service = new Service(
 							serviceInfo.getServiceKey(),
-							EntityForLang.get(serviceInfo.getName(), lang).getValue());
+							EntityForLang.getName(serviceInfo.getName(), lang).getValue());
 					services.add(service);
 				}
 				business.setServices(services);
"
juddi,30335d1959597181a2c1f71c4dbae72850f34fb6,"JUDDI-253

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@787886 13f79535-47bb-0310-9956-ffa450edef68
",2009-06-24 02:03:51,Kurt Stam,"diff --git a/uddi-client/src/main/java/org/uddi/api_v3/client/i18n/EntityForLang.java b/uddi-client/src/main/java/org/uddi/api_v3/client/i18n/EntityForLang.java
index fedff2a..699d788 100644
--- a/uddi-client/src/main/java/org/uddi/api_v3/client/i18n/EntityForLang.java
+++ b/uddi-client/src/main/java/org/uddi/api_v3/client/i18n/EntityForLang.java
@@ -27,7 +27,7 @@
  */
 public class EntityForLang {
 	
-	public static Name get(List<Name> entityList, String lang) {
+	public static Name getName(List<Name> entityList, String lang) {
 		
 		if (lang==null) return entityList.get(0);
 		for (Name entity : entityList) {
@@ -38,7 +38,7 @@
 		return entityList.get(0);
 	}
 	
-	public static Address get(List<Address> entityList, String lang) {
+	public static Address getAddress(List<Address> entityList, String lang) {
 		
 		if (lang==null) return entityList.get(0);
 		for (Address entity : entityList) {
@@ -49,7 +49,7 @@
 		return entityList.get(0);
 	}
 	
-	public static Description get(List<Description> entityList, String lang) {
+	public static Description getDescription(List<Description> entityList, String lang) {
 		
 		if (lang==null) return entityList.get(0);
 		for (Description entity : entityList) {
"
juddi,dd1dbb44ab9a786bcd0d264c416c7d17c6556b08,"JUDDI-235: wildcards are no longer added automatically when ""approximateMatch"" is set

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@778935 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-27 00:31:17,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
index 31d6b8f..e9a7d76 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryGroupQuery.java
@@ -221,8 +221,9 @@
 				String keyName = keyedRef.getKeyName();
 
 				if (fq.isApproximateMatch()) {
-					keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
-					keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
+					// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
+					//keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
+					//keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
 				}
 
 				tblCount++;
"
juddi,dd1dbb44ab9a786bcd0d264c416c7d17c6556b08,"JUDDI-235: wildcards are no longer added automatically when ""approximateMatch"" is set

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@778935 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-27 00:31:17,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
index 94b07c1..bcdaa5f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByCategoryQuery.java
@@ -166,8 +166,9 @@
 			String keyName = keyedRef.getKeyName();
 			
 			if (fq.isApproximateMatch()) {
-				keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
-				keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
+				// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
+				//keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
+				//keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
 			}
 
 			// Either opening up (and AND'ing) a new ""group"" of like keys or simply appending an ""or"".  If this is not ""orLikeKeys"", then just need to increment
"
juddi,dd1dbb44ab9a786bcd0d264c416c7d17c6556b08,"JUDDI-235: wildcards are no longer added automatically when ""approximateMatch"" is set

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@778935 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-27 00:31:17,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
index 7ba026e..75c1d31 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByIdentifierQuery.java
@@ -152,8 +152,9 @@
 			String keyName = keyedRef.getKeyName();
 			
 			if (fq.isApproximateMatch()) {
-				keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
-				keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
+				// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
+				//keyValue = keyValue.endsWith(DynamicQuery.WILDCARD)?keyValue:keyValue + DynamicQuery.WILDCARD;
+				//keyName = keyName.endsWith(DynamicQuery.WILDCARD)?keyName:keyName + DynamicQuery.WILDCARD;
 			}
 
 			// Either opening up (and AND'ing) a new ""group"" of like keys or simply appending an ""or"".  If this is not ""orLikeKeys"", then just need to increment
"
juddi,dd1dbb44ab9a786bcd0d264c416c7d17c6556b08,"JUDDI-235: wildcards are no longer added automatically when ""approximateMatch"" is set

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@778935 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-27 00:31:17,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
index b32b62c..4da066b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindEntityByNamesQuery.java
@@ -125,13 +125,15 @@
 				nameTerm = ""upper("" + entityAliasChild + "".name)"";
 				nameValue = n.getValue().toUpperCase();
 			}
-			if (fq.isApproximateMatch())
-				nameValue = nameValue.endsWith(DynamicQuery.WILDCARD)?nameValue:nameValue + DynamicQuery.WILDCARD;
+			// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
+			//if (fq.isApproximateMatch())
+			//	nameValue = nameValue.endsWith(DynamicQuery.WILDCARD)?nameValue:nameValue + DynamicQuery.WILDCARD;
 			
 			if (n.getLang() == null || n.getLang().length() == 0 ) {
 				qry.appendGroupedAnd(new DynamicQuery.Parameter(nameTerm, nameValue, namePredicate));
 			}
 			else {
+				// Per spec, the language argument is always wildcarded and case insensitive
 				String langValue = n.getLang().endsWith(DynamicQuery.WILDCARD)?n.getLang().toUpperCase():n.getLang().toUpperCase() + DynamicQuery.WILDCARD;
 				qry.appendGroupedAnd(new DynamicQuery.Parameter(nameTerm, nameValue, namePredicate), 
 									 new DynamicQuery.Parameter(""upper("" + entityAliasChild + "".langCode)"", langValue, DynamicQuery.PREDICATE_LIKE));
"
juddi,dd1dbb44ab9a786bcd0d264c416c7d17c6556b08,"JUDDI-235: wildcards are no longer added automatically when ""approximateMatch"" is set

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@778935 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-27 00:31:17,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
index 64a2881..0fcbe16 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/FindTModelByNameQuery.java
@@ -81,8 +81,9 @@
 			nameTerm = ""upper("" + ENTITY_ALIAS + "".name)"";
 			nameValue = name.getValue().toUpperCase();
 		}
-		if (fq.isApproximateMatch())
-			nameValue = nameValue.endsWith(DynamicQuery.WILDCARD)?nameValue:nameValue + DynamicQuery.WILDCARD;
+		// JUDDI-235: wildcards are provided by user (only commenting in case a new interpretation arises)
+		//if (fq.isApproximateMatch())
+		//	nameValue = nameValue.endsWith(DynamicQuery.WILDCARD)?nameValue:nameValue + DynamicQuery.WILDCARD;
 		
 		if (name.getLang() == null || name.getLang().length() == 0 ) {
 			qry.appendGroupedAnd(new DynamicQuery.Parameter(nameTerm, nameValue, namePredicate));
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
index 406f0dd..84f72da 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
@@ -33,6 +33,7 @@
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
@@ -42,7 +43,6 @@
 import org.apache.juddi.model.TransferTokenKey;
 import org.apache.juddi.model.UddiEntity;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.validation.ValidateCustodyTransfer;
 import org.uddi.custody_v3.DiscardTransferToken;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 6de9854..3ec1415 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -24,9 +24,9 @@
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.mapping.MappingModelToApi;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.validation.ValidateInquiry;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.error.InvalidKeyPassedException;
 import org.apache.juddi.error.ErrorMessage;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
index f0455b8..5d00026 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIPublicationImpl.java
@@ -59,12 +59,12 @@
 import org.apache.juddi.query.FindTModelByPublisherQuery;
 import org.apache.juddi.query.FindPublisherAssertionByBusinessQuery;
 import org.apache.juddi.query.DeletePublisherAssertionByBusinessQuery;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.api.datatype.PublisherDetail;
 import org.apache.juddi.api.datatype.SavePublisher;
 import org.apache.juddi.api.datatype.DeletePublisher;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
index 4dbccac..94bc65b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISecurityImpl.java
@@ -32,10 +32,10 @@
 
 import org.apache.juddi.auth.AuthenticatorFactory;
 import org.apache.juddi.auth.Authenticator;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.error.UnknownUserException;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.mapping.MappingModelToApi;
-import org.apache.juddi.query.PersistenceManager;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 89bb52a..ee9b455 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -61,6 +61,7 @@
 import org.uddi.v3_service.UDDISubscriptionPortType;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
@@ -71,7 +72,6 @@
 import org.apache.juddi.model.SubscriptionMatch;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.FindSubscriptionByPublisherQuery;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.util.JAXBMarshaller;
 import org.apache.juddi.validation.ValidateSubscription;
 import org.apache.log4j.Logger;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index 39c66b6..ad15684 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -27,10 +27,10 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
 
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.validation.ValidateSubscriptionListener;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.DispositionReport;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/auth/JUDDIAuthenticator.java b/juddi-core/src/main/java/org/apache/juddi/auth/JUDDIAuthenticator.java
index 606011b..d980907 100644
--- a/juddi-core/src/main/java/org/apache/juddi/auth/JUDDIAuthenticator.java
+++ b/juddi-core/src/main/java/org/apache/juddi/auth/JUDDIAuthenticator.java
@@ -21,11 +21,11 @@
 import javax.persistence.EntityTransaction;
 
 import org.apache.juddi.model.Publisher;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.error.AuthenticationException;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.UnknownUserException;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.PersistenceManager;
 
 /**
  * This is the default implementation of jUDDI's Authenticator interface, which
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
index 502557c..5c41b2b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/AppConfig.java
@@ -34,7 +34,6 @@
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.FindBusinessByCategoryQuery;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.query.util.FindQualifiers;
 import org.apache.log4j.Logger;
 import org.uddi.api_v3.CategoryBag;
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index bca2255..e212d64 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -17,8 +17,6 @@
 
 package org.apache.juddi.config;
 
-import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
@@ -34,7 +32,6 @@
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
 
-import org.apache.commons.configuration.ConfigurationException;
 import org.apache.juddi.api.impl.UDDIInquiryImpl;
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.FatalErrorException;
@@ -44,7 +41,6 @@
 import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.mapping.MappingApiToModel;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.juddi.validation.ValidatePublish;
 import org.apache.juddi.validation.ValidateUDDIKey;
 import org.apache.log4j.Logger;
@@ -67,22 +63,10 @@
 	
 	public static final String FILE_PERSISTENCE = ""persistence.xml"";
 	public static final String JUDDI_INSTALL_DATA_DIR = ""juddi_install_data/"";
+	public static final String JUDDI_CUSTOM_INSTALL_DATA_DIR = ""juddi_custom_install_data/"";
 	public static Logger log = Logger.getLogger(Install.class);
 
-	public static void install() throws JAXBException, DispositionReportFaultMessage, IOException {
-		install(JUDDI_INSTALL_DATA_DIR, null, false);
-	}
-	
-	public static void install(String srcDir, String userPartition, boolean reloadConfig) throws JAXBException, DispositionReportFaultMessage, IOException {
-		if (srcDir != null) {
-			if (srcDir.endsWith(""/"") || srcDir.endsWith(""\\"")) {
-				// Do nothing
-			}
-			else 
-				srcDir = srcDir + java.io.File.separator;
-		}
-		else
-			srcDir = """";
+	protected static void install() throws JAXBException, DispositionReportFaultMessage, IOException {
 				
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
@@ -93,27 +77,27 @@
 			tx.begin();
 	
 			if (alreadyInstalled(em))
-				throw new FatalErrorException(new ErrorMessage(""errors.install.AlreadyInstalled""));
+				new FatalErrorException(new ErrorMessage(""errors.install.AlreadyInstalled""));
 			
-			TModel rootTModelKeyGen = (TModel)buildEntityFromDoc(JUDDI_INSTALL_DATA_DIR + FILE_ROOT_TMODELKEYGEN, ""org.uddi.api_v3"");
-			org.uddi.api_v3.BusinessEntity rootBusinessEntity = (org.uddi.api_v3.BusinessEntity)buildEntityFromDoc(srcDir + FILE_ROOT_BUSINESSENTITY, ""org.uddi.api_v3"");
+			TModel rootTModelKeyGen = (TModel)buildInstallEntity(FILE_ROOT_TMODELKEYGEN, ""org.uddi.api_v3"");
+			org.uddi.api_v3.BusinessEntity rootBusinessEntity = (org.uddi.api_v3.BusinessEntity)buildInstallEntity(FILE_ROOT_BUSINESSENTITY, ""org.uddi.api_v3"");
 			
-			String rootPartition = getRootPartition(rootTModelKeyGen, userPartition);
+			String rootPartition = getRootPartition(rootTModelKeyGen);
 			String nodeId = getNodeId(rootBusinessEntity.getBusinessKey(), rootPartition);
 			
-			rootPublisher = installPublisher(em, JUDDI_INSTALL_DATA_DIR + FILE_ROOT_PUBLISHER);
-			uddiPublisher = installPublisher(em, JUDDI_INSTALL_DATA_DIR + FILE_UDDI_PUBLISHER);
-			// TODO:  These do not belong here
+			rootPublisher = installPublisher(em, FILE_ROOT_PUBLISHER);
+			uddiPublisher = installPublisher(em, FILE_UDDI_PUBLISHER);
+			// TODO:  These do not belong here?
 			// Inserting 2 test publishers
-			installPublisher(em, JUDDI_INSTALL_DATA_DIR + FILE_JOE_PUBLISHER);
-			installPublisher(em, JUDDI_INSTALL_DATA_DIR + FILE_SSYNDICATOR);
+			installPublisher(em, FILE_JOE_PUBLISHER);
+			installPublisher(em, FILE_SSYNDICATOR);
 
 			installRootPublisherKeyGen(em, rootTModelKeyGen, rootPartition, rootPublisher, nodeId);
 
 			rootBusinessEntity.setBusinessKey(nodeId);
 			installRootBusinessEntity(em, rootBusinessEntity, rootPublisher, rootPartition);
 
-			installUDDITModels(em, JUDDI_INSTALL_DATA_DIR + FILE_UDDI_TMODELS, uddiPublisher, nodeId);
+			installSaveTModel(em, FILE_UDDI_TMODELS, uddiPublisher, nodeId);
 			
 			tx.commit();
 		}
@@ -137,15 +121,9 @@
 			}
 			em.close();
 		}
-
-		// Now that all necessary persistent entities are loaded, the configuration must be reloaded to be sure all properties are set.
-		if (reloadConfig) {
-			try { AppConfig.reloadConfig(); } catch (ConfigurationException ce) { log.error(ce.getMessage(), ce); }
-		}
-		
 	}
 
-	public static void uninstall() {
+	protected static void uninstall() {
 		// Close the open emf, open a new one with Persistence.create...(String, Map) and overwrite the property that handles the table 
 		// generation. The persistence.xml file will have to be read in to determine which property
 		// to overwrite.  The property will be specific to the provider.  
@@ -156,7 +134,7 @@
 		
 	}
 	
-	public static boolean alreadyInstalled() {
+	protected static boolean alreadyInstalled() {
 		EntityManager em = PersistenceManager.getEntityManager();
 		EntityTransaction tx = em.getTransaction();
 		try {
@@ -174,7 +152,7 @@
 		}
 	}
 
-	public static boolean alreadyInstalled(EntityManager em) {
+	protected static boolean alreadyInstalled(EntityManager em) {
 		
 		org.apache.juddi.model.Publisher publisher = em.find(org.apache.juddi.model.Publisher.class, Constants.ROOT_PUBLISHER);
 		if (publisher != null)
@@ -187,36 +165,36 @@
 		return false;
 	}
 	
-	public static String getRootPartition(TModel rootTModelKeyGen, String userPartition) throws JAXBException, IOException, DispositionReportFaultMessage {
+	protected static String getRootPartition(TModel rootTModelKeyGen) throws JAXBException, IOException, DispositionReportFaultMessage {
 		String result = rootTModelKeyGen.getTModelKey().substring(0, rootTModelKeyGen.getTModelKey().lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
 		
-		if (userPartition != null && userPartition.length() > 0) {
-			// A root partition was provided by the user.  Must validate it.  The first component should be a domain key and the any following
-			// tokens should be a valid KSS.
-			userPartition = userPartition.trim();
-			if (userPartition.endsWith(KeyGenerator.PARTITION_SEPARATOR) || userPartition.startsWith(KeyGenerator.PARTITION_SEPARATOR))
-				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", userPartition));
-			
-			StringTokenizer tokenizer = new StringTokenizer(userPartition.toLowerCase(), KeyGenerator.PARTITION_SEPARATOR);
-			for(int count = 0; tokenizer.hasMoreTokens(); count++) {
-				String nextToken = tokenizer.nextToken();
+		if (result == null || result.length() == 0)
+			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", result));
+		
+		// Must validate the root partition.  The first component should be a domain key and the any following
+		// tokens should be a valid KSS.
+		result = result.trim();
+		if (result.endsWith(KeyGenerator.PARTITION_SEPARATOR) || result.startsWith(KeyGenerator.PARTITION_SEPARATOR))
+			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", result));
+		
+		StringTokenizer tokenizer = new StringTokenizer(result.toLowerCase(), KeyGenerator.PARTITION_SEPARATOR);
+		for(int count = 0; tokenizer.hasMoreTokens(); count++) {
+			String nextToken = tokenizer.nextToken();
 
-				if (count == 0) {
-					if(!ValidateUDDIKey.isValidDomainKey(nextToken))
-						throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", userPartition));
-				}
-				else {
-					if (!ValidateUDDIKey.isValidKSS(nextToken))
-						throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", userPartition));
-				}
+			if (count == 0) {
+				if(!ValidateUDDIKey.isValidDomainKey(nextToken))
+					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", result));
 			}
-			// If the user-supplied root partition checks out, we can use that.
-			result = KeyGenerator.UDDI_SCHEME + KeyGenerator.PARTITION_SEPARATOR + userPartition;
+			else {
+				if (!ValidateUDDIKey.isValidKSS(nextToken))
+					throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.MalformedKey"", result));
+			}
 		}
+
 		return result;
 	}
 	
-	public static String getNodeId(String userNodeId, String rootPartition) throws DispositionReportFaultMessage {
+	protected static String getNodeId(String userNodeId, String rootPartition) throws DispositionReportFaultMessage {
 
 		String result = userNodeId;
 		if (result == null || result.length() == 0) {
@@ -231,21 +209,6 @@
 		return result;
 	}
 	
-	public static org.uddi.api_v3.BusinessEntity getNodeBusinessEntity(String businessKey) throws DispositionReportFaultMessage {
-		UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
-		
-		org.uddi.api_v3.GetBusinessDetail gbd = new org.uddi.api_v3.GetBusinessDetail();
-		gbd.getBusinessKey().add(businessKey);
-		
-		org.uddi.api_v3.BusinessDetail bd = inquiry.getBusinessDetail(gbd);
-		if (bd != null) {
-			List<org.uddi.api_v3.BusinessEntity> beList = bd.getBusinessEntity();
-			if (beList != null && beList.size() > 0)
-				return beList.get(0);
-		}
-
-		return new org.uddi.api_v3.BusinessEntity();
-	}
 	
 	
 	private static String installRootBusinessEntity(EntityManager em, org.uddi.api_v3.BusinessEntity rootBusinessEntity, UddiEntityPublisher rootPublisher, String rootPartition) 
@@ -417,21 +380,6 @@
 	
 	
 	
-	public static void installUDDITModels(EntityManager em, String resource, UddiEntityPublisher publisher, String nodeId) 
-		throws JAXBException, DispositionReportFaultMessage, IOException {
-		SaveTModel apiSaveTModel = (SaveTModel)buildEntityFromDoc(resource, ""org.uddi.api_v3"");
-		installTModels(em, apiSaveTModel.getTModel(), publisher, nodeId);
-		
-	}
-	
-	public static UddiEntityPublisher installPublisher(EntityManager em, String resource) 
-		throws JAXBException, DispositionReportFaultMessage, IOException {
-		org.apache.juddi.api.datatype.Publisher apiPub = (org.apache.juddi.api.datatype.Publisher)buildEntityFromDoc(resource, ""org.apache.juddi.api.datatype"");
-		org.apache.juddi.model.Publisher modelPub = new org.apache.juddi.model.Publisher();
-		MappingApiToModel.mapPublisher(apiPub, modelPub);
-		em.persist(modelPub);
-		return modelPub;
-	}
 	
 	private static void installTModels(EntityManager em, List<org.uddi.api_v3.TModel> apiTModelList, UddiEntityPublisher publisher, String nodeId) throws DispositionReportFaultMessage {
 		if (apiTModelList != null) {
@@ -486,21 +434,87 @@
 		
 	}
 	
-	private static Object buildEntityFromDoc(String resource, String thePackage) throws JAXBException, IOException {
+	private static Object buildInstallEntity(String fileName, String packageName) throws JAXBException, IOException {
 		InputStream resourceStream = null;
 		
-		URL url = Thread.currentThread().getContextClassLoader().getResource(resource);
+		// First try the custom install directory
+		URL url = Thread.currentThread().getContextClassLoader().getResource(JUDDI_CUSTOM_INSTALL_DATA_DIR + fileName);
 		if (url != null)
 			resourceStream = url.openStream();
 		
+		// If the custom install directory doesn't exist, then use the standard install directory where the resource is guaranteed to exist.
 		if (resourceStream == null) {
-			resourceStream = new FileInputStream(new File(resource));
+			url = Thread.currentThread().getContextClassLoader().getResource(JUDDI_INSTALL_DATA_DIR + fileName);
+			resourceStream = url.openStream();
 		}
 		
-		JAXBContext jc = JAXBContext.newInstance(thePackage);
+		JAXBContext jc = JAXBContext.newInstance(packageName);
 		Unmarshaller unmarshaller = jc.createUnmarshaller();
 		Object obj = ((JAXBElement<?>)unmarshaller.unmarshal(resourceStream)).getValue();
 		return obj;
 	}
 
+	/**
+	 * Public convenience method that allows one to retrieve the node business entity (perhaps to display during an install process, or even to
+	 * initiate the install process).
+	 * 
+	 * @param businessKey
+	 * @return
+	 * @throws DispositionReportFaultMessage
+	 */
+	public static org.uddi.api_v3.BusinessEntity getNodeBusinessEntity(String businessKey) throws DispositionReportFaultMessage {
+		UDDIInquiryImpl inquiry = new UDDIInquiryImpl();
+		
+		org.uddi.api_v3.GetBusinessDetail gbd = new org.uddi.api_v3.GetBusinessDetail();
+		gbd.getBusinessKey().add(businessKey);
+		
+		org.uddi.api_v3.BusinessDetail bd = inquiry.getBusinessDetail(gbd);
+		if (bd != null) {
+			List<org.uddi.api_v3.BusinessEntity> beList = bd.getBusinessEntity();
+			if (beList != null && beList.size() > 0)
+				return beList.get(0);
+		}
+
+		return new org.uddi.api_v3.BusinessEntity();
+	}
+	
+	/**
+	 * Public convenience method that allows one to install additional TModels via a SaveTModel structure.
+	 * 
+	 * @param em - the entity manager to a juddi model
+	 * @param fileName - name of SaveTModel xml file
+	 * @param publisher - the publisher structure that owns the tModels
+	 * @param nodeId - the node id of the custodial node
+	 * @throws JAXBException
+	 * @throws DispositionReportFaultMessage
+	 * @throws IOException
+	 */
+	public static void installSaveTModel(EntityManager em, String fileName, UddiEntityPublisher publisher, String nodeId) 
+		throws JAXBException, DispositionReportFaultMessage, IOException {
+
+		SaveTModel apiSaveTModel = (SaveTModel)buildInstallEntity(fileName, ""org.uddi.api_v3"");
+		installTModels(em, apiSaveTModel.getTModel(), publisher, nodeId);
+	}
+
+	/**
+	 * Public convenience method that allows one to install additional Publishers via a Publisher structure.
+	 * 
+	 * @param em - the entity manager to the juddi model
+	 * @param fileName - name of Publisher xml file
+	 * @return
+	 * @throws JAXBException
+	 * @throws DispositionReportFaultMessage
+	 * @throws IOException
+	 */
+	public static UddiEntityPublisher installPublisher(EntityManager em, String fileName) 
+		throws JAXBException, DispositionReportFaultMessage, IOException {
+
+		org.apache.juddi.api.datatype.Publisher apiPub = (org.apache.juddi.api.datatype.Publisher)buildInstallEntity(fileName, ""org.apache.juddi.api.datatype"");
+		org.apache.juddi.model.Publisher modelPub = new org.apache.juddi.model.Publisher();
+		MappingApiToModel.mapPublisher(apiPub, modelPub);
+		em.persist(modelPub);
+		return modelPub;
+	}
+	
+	
 }
"
juddi,664b1d7490c37be47d258d0e6f6f0dd1041c4205,"JUDDI-232: install process now checks ""juddi_custom_install_data"" on classpath for installation files before checking the jar directory.  PersistenceManager moved to config directory.  Install process cannot be externally triggered and can only be called from within the ""config"" package.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@776476 13f79535-47bb-0310-9956-ffa450edef68
",2009-05-19 21:34:07,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
index 4554ce2..b868a9b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/subscription/SubscriptionNotifier.java
@@ -38,10 +38,10 @@
 import org.apache.juddi.api.AccessPointType;
 import org.apache.juddi.api.impl.UDDISubscriptionImpl;
 import org.apache.juddi.config.AppConfig;
+import org.apache.juddi.config.PersistenceManager;
 import org.apache.juddi.config.Property;
 import org.apache.juddi.model.Subscription;
 import org.apache.juddi.model.UddiEntityPublisher;
-import org.apache.juddi.query.PersistenceManager;
 import org.apache.log4j.Logger;
 import org.uddi.sub_v3.CoveragePeriod;
 import org.uddi.sub_v3.GetSubscriptionResults;
"
juddi,4d657c2160970cf0403a667ece66f9eead02dda1,"JUDDI-222
Remove extraneous "")"".


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766930 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-21 00:37:57,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java b/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
index f84caa9..94332fc 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
@@ -55,10 +55,10 @@
     sql.append(""PUBLISHER_NAME,"");
     sql.append(""EMAIL_ADDRESS,"");
     sql.append(""IS_ADMIN, "");
-    sql.append(""IS_ENABLED), "");
-    sql.append(""MAX_BUSINESSES), "");
-    sql.append(""MAX_SERVICES_PER_BUSINESS), "");
-    sql.append(""MAX_BINDINGS_PER_SERVICE), "");
+    sql.append(""IS_ENABLED, "");
+    sql.append(""MAX_BUSINESSES, "");
+    sql.append(""MAX_SERVICES_PER_BUSINESS, "");
+    sql.append(""MAX_BINDINGS_PER_SERVICE, "");
     sql.append(""MAX_TMODELS) "");
     sql.append(""VALUES (?,?,?,?,?,?,?,?,?)"");
     insertSQL = sql.toString();
"
juddi,9a347f7436c57732745c001516286998c544c631,"JUDDI-222
Remove extra "")""'s from insert statement.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0rc6@766929 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-21 00:30:51,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java b/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
index f84caa9..94332fc 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/PublisherTable.java
@@ -55,10 +55,10 @@
     sql.append(""PUBLISHER_NAME,"");
     sql.append(""EMAIL_ADDRESS,"");
     sql.append(""IS_ADMIN, "");
-    sql.append(""IS_ENABLED), "");
-    sql.append(""MAX_BUSINESSES), "");
-    sql.append(""MAX_SERVICES_PER_BUSINESS), "");
-    sql.append(""MAX_BINDINGS_PER_SERVICE), "");
+    sql.append(""IS_ENABLED, "");
+    sql.append(""MAX_BUSINESSES, "");
+    sql.append(""MAX_SERVICES_PER_BUSINESS, "");
+    sql.append(""MAX_BINDINGS_PER_SERVICE, "");
     sql.append(""MAX_TMODELS) "");
     sql.append(""VALUES (?,?,?,?,?,?,?,?,?)"");
     insertSQL = sql.toString();
"
juddi,988e4a076160c9738c24910d8282c85d41214cda,"JUDDI-220
Syntax error - add ""+"" for string concatenation.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766031 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-17 14:32:52,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java b/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
index a58e4c6..18fa04b 100755
--- a/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
+++ b/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
@@ -71,7 +71,7 @@
         if ((serviceKey == null) || (serviceKey.length() == 0) ||
             (!dataStore.isValidServiceKey(serviceKey)))
           throw new InvalidKeyPassedException(""get_serviceDetail: ""
-              ""serviceKey"");
+              + ""serviceKey"");
       }
 
       Vector serviceVector = new Vector();
"
juddi,0ec3e0064e28fa8836072e71382572b330669f2b,"JUDDI-220
Remove the logging of the key on error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766028 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-17 14:28:12,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/function/GetBindingDetailFunction.java b/src/main/java/org/apache/juddi/function/GetBindingDetailFunction.java
index e8ce366..7a59ab9 100755
--- a/src/main/java/org/apache/juddi/function/GetBindingDetailFunction.java
+++ b/src/main/java/org/apache/juddi/function/GetBindingDetailFunction.java
@@ -72,7 +72,7 @@
         if ((bindingKey == null) || (bindingKey.length() == 0) ||
             (!dataStore.isValidBindingKey(bindingKey)))
           throw new InvalidKeyPassedException(""get_bindingDetail: ""+
-              ""bindingKey=""+bindingKey);
+              ""bindingKey"");
       }
 
       Vector bindingVector = new Vector();
@@ -143,4 +143,4 @@
       reg.dispose();
     }
   }
-}
\ No newline at end of file
+}
"
juddi,0ec3e0064e28fa8836072e71382572b330669f2b,"JUDDI-220
Remove the logging of the key on error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766028 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-17 14:28:12,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/function/GetBusinessDetailFunction.java b/src/main/java/org/apache/juddi/function/GetBusinessDetailFunction.java
index 6f834e7..3c3951f 100755
--- a/src/main/java/org/apache/juddi/function/GetBusinessDetailFunction.java
+++ b/src/main/java/org/apache/juddi/function/GetBusinessDetailFunction.java
@@ -70,7 +70,7 @@
         if ((businessKey == null) || (businessKey.length() == 0) ||
             (!dataStore.isValidBusinessKey(businessKey)))
           throw new InvalidKeyPassedException(""get_businessDetail: ""+
-            ""businessKey=""+businessKey);
+            ""businessKey"");
       }
 
       Vector businessVector = new Vector();
"
juddi,0ec3e0064e28fa8836072e71382572b330669f2b,"JUDDI-220
Remove the logging of the key on error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766028 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-17 14:28:12,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java b/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
index 22ae9e7..a58e4c6 100755
--- a/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
+++ b/src/main/java/org/apache/juddi/function/GetServiceDetailFunction.java
@@ -70,8 +70,8 @@
         // If the a BusinessService doesn't exist hrow an InvalidKeyPassedException.
         if ((serviceKey == null) || (serviceKey.length() == 0) ||
             (!dataStore.isValidServiceKey(serviceKey)))
-          throw new InvalidKeyPassedException(""get_serviceDetail: ""+
-              ""serviceKey=""+serviceKey);
+          throw new InvalidKeyPassedException(""get_serviceDetail: ""
+              ""serviceKey"");
       }
 
       Vector serviceVector = new Vector();
"
juddi,0ec3e0064e28fa8836072e71382572b330669f2b,"JUDDI-220
Remove the logging of the key on error.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@766028 13f79535-47bb-0310-9956-ffa450edef68
",2009-04-17 14:28:12,Thomas Cunningham,"diff --git a/src/main/java/org/apache/juddi/function/GetTModelDetailFunction.java b/src/main/java/org/apache/juddi/function/GetTModelDetailFunction.java
index 40d5c73..1b4b337 100755
--- a/src/main/java/org/apache/juddi/function/GetTModelDetailFunction.java
+++ b/src/main/java/org/apache/juddi/function/GetTModelDetailFunction.java
@@ -70,7 +70,7 @@
         if ((tModelKey == null) || (tModelKey.length() == 0) ||
             (!dataStore.isValidTModelKey(tModelKey)))
           throw new InvalidKeyPassedException(""get_tModelDetail: ""+
-              ""tModelKey=""+tModelKey);
+              ""tModelKey"");
       }
 
       Vector tModelVector = new Vector();
@@ -141,4 +141,4 @@
       reg.dispose();
     }
   }
-}
\ No newline at end of file
+}
"
juddi,91d31b30608ab64ce7d683bcc00b946366a87240,"JUDDI-214: fixed

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@756700 13f79535-47bb-0310-9956-ffa450edef68
",2009-03-20 18:20:13,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index affe311..6c03b90 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -482,8 +482,37 @@
 
 	public OperationalInfos getOperationalInfo(GetOperationalInfo body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-		return null;
+
+		new ValidateInquiry(null).validateGetOperationalInfo(body);
+		
+		// TODO JUDDI-178: Perform necessary authentication logic
+		@SuppressWarnings(""unused"")
+		String authInfo = body.getAuthInfo();
+
+		EntityManager em = PersistenceManager.getEntityManager();
+		EntityTransaction tx = em.getTransaction();
+		tx.begin();
+
+		OperationalInfos result = new OperationalInfos();
+		
+		List<String> entityKeyList = body.getEntityKey();
+		for (String entityKey : entityKeyList) {
+			
+			org.apache.juddi.model.UddiEntity modelUddiEntity = em.find(org.apache.juddi.model.UddiEntity.class, entityKey);
+			if (modelUddiEntity == null)
+				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.EntityNotFound"", entityKey));
+			
+			org.uddi.api_v3.OperationalInfo apiOperationalInfo = new org.uddi.api_v3.OperationalInfo();
+			
+			MappingModelToApi.mapOperationalInfo(modelUddiEntity, apiOperationalInfo);
+			
+			result.getOperationalInfo().add(apiOperationalInfo);
+		}
+
+		tx.commit();
+		em.close();
+		
+		return result;
 	}
 
 	public ServiceDetail getServiceDetail(GetServiceDetail body)
"
juddi,91d31b30608ab64ce7d683bcc00b946366a87240,"JUDDI-214: fixed

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@756700 13f79535-47bb-0310-9956-ffa450edef68
",2009-03-20 18:20:13,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index dc1eac9..95a229b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -18,15 +18,25 @@
 package org.apache.juddi.mapping;
 
 import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 import javax.xml.bind.JAXBElement;
+import javax.xml.datatype.DatatypeConfigurationException;
+import javax.xml.datatype.DatatypeFactory;
+import javax.xml.datatype.XMLGregorianCalendar;
 
+import org.apache.juddi.error.ErrorMessage;
+import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.model.OverviewDoc;
+import org.apache.juddi.model.UddiEntity;
 import org.uddi.api_v3.CompletionStatus;
 import org.uddi.api_v3.ObjectFactory;
+import org.uddi.api_v3.OperationalInfo;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
+import com.ibm.icu.util.Calendar;
+
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
  * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
@@ -704,4 +714,40 @@
 		apiRelatedBusinessInfo.getSharedRelationships().add(sharedRelationships);
 	}
 
+	public static void mapOperationalInfo(UddiEntity modelUddiEntity,
+										  OperationalInfo apiOperationalInfo)
+				   throws DispositionReportFaultMessage {
+		
+		apiOperationalInfo.setCreated(convertDateToXMLGregorianCalendar(modelUddiEntity.getCreated()));
+		apiOperationalInfo.setModified(convertDateToXMLGregorianCalendar(modelUddiEntity.getModified()));
+		apiOperationalInfo.setModifiedIncludingChildren(convertDateToXMLGregorianCalendar(modelUddiEntity.getModifiedIncludingChildren()));
+		apiOperationalInfo.setNodeID(modelUddiEntity.getNodeId());
+		apiOperationalInfo.setAuthorizedName(modelUddiEntity.getAuthorizedName());
+	}
+
+	public static XMLGregorianCalendar convertDateToXMLGregorianCalendar(Date date) throws DispositionReportFaultMessage {
+		XMLGregorianCalendar result = null;
+		try { 
+			Calendar calendar = Calendar.getInstance();
+			calendar.setTime(date);
+			
+			DatatypeFactory df = DatatypeFactory.newInstance();
+			result = df.newXMLGregorianCalendar(calendar.get(Calendar.YEAR), 
+												calendar.get(Calendar.MONTH), 
+												calendar.get(Calendar.DAY_OF_MONTH), 
+												calendar.get(Calendar.HOUR), 
+												calendar.get(Calendar.MINUTE), 
+												calendar.get(Calendar.SECOND), 
+												calendar.get(Calendar.MILLISECOND), 
+												0);
+		}
+		catch(DatatypeConfigurationException ce) { 
+			throw new FatalErrorException(new ErrorMessage(""errors.Unspecified""));
+		}
+		
+		return result;
+		
+	}
+
+	
 }
"
juddi,91d31b30608ab64ce7d683bcc00b946366a87240,"JUDDI-214: fixed

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@756700 13f79535-47bb-0310-9956-ffa450edef68
",2009-03-20 18:20:13,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
index 5ae3e82..45ae82a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateInquiry.java
@@ -25,6 +25,7 @@
 
 import org.apache.juddi.api.datatype.GetPublisherDetail;
 import org.uddi.api_v3.GetBusinessDetail;
+import org.uddi.api_v3.GetOperationalInfo;
 import org.uddi.api_v3.GetServiceDetail;
 import org.uddi.api_v3.GetBindingDetail;
 import org.uddi.api_v3.GetTModelDetail;
@@ -150,6 +151,26 @@
 				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.DuplicateKey"", entityKey));
 		}
 	}
+
+	public void validateGetOperationalInfo(GetOperationalInfo body) throws DispositionReportFaultMessage {
+
+		// No null input
+		if (body == null)
+			throw new FatalErrorException(new ErrorMessage(""errors.NullInput""));
+		
+		// No null or empty list
+		List<String> entityKeyList = body.getEntityKey();
+		if (entityKeyList == null || entityKeyList.size() == 0)
+			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.NoKeys""));
+
+		HashSet<String> dupCheck = new HashSet<String>();
+		for (String entityKey : entityKeyList) {
+			boolean inserted = dupCheck.add(entityKey);
+			if (!inserted)
+				throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.DuplicateKey"", entityKey));
+		}
+	}
+	
 	
 	public void validateFindBusiness(FindBusiness body) throws DispositionReportFaultMessage  {
 		// No null input
"
juddi,91d31b30608ab64ce7d683bcc00b946366a87240,"JUDDI-214: fixed

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@756700 13f79535-47bb-0310-9956-ffa450edef68
",2009-03-20 18:20:13,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
index ae8fdaf..c749763 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateUDDIApi.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.validation;
 
+
 import org.apache.juddi.error.ErrorMessage;
 import org.apache.juddi.error.UnsupportedException;
 import org.apache.juddi.model.UddiEntityPublisher;
@@ -44,4 +45,5 @@
 	public static void unsupportedAPICall() throws DispositionReportFaultMessage {
 		throw new UnsupportedException(new ErrorMessage(""errors.Unsupported""));
 	}
+	
 }
"
juddi,98db99f33d9969afae283174e905686ee7a01076,"JUDDI-193: fixing path bug

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@755780 13f79535-47bb-0310-9956-ffa450edef68
",2009-03-18 23:24:36,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/config/Install.java b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
index de5572a..0e49cae 100644
--- a/juddi-core/src/main/java/org/apache/juddi/config/Install.java
+++ b/juddi-core/src/main/java/org/apache/juddi/config/Install.java
@@ -75,11 +75,11 @@
 	
 	public static void install(String srcDir, String userPartition, boolean reloadConfig) throws JAXBException, DispositionReportFaultMessage, IOException {
 		if (srcDir != null) {
-			if (srcDir.endsWith(""\\"") || srcDir.endsWith(""/"")) {
+			if (srcDir.endsWith(java.io.File.separator)) {
 				// Do nothing
 			}
 			else 
-				srcDir = srcDir + ""\\"";
+				srcDir = srcDir + java.io.File.separator;
 		}
 		else
 			srcDir = """";
"
juddi,6a0c61f2673ce206a8cfb4af7d722acd7d09f106,"JUDDI-195, org.apache.openjpa.kernel.DelegatingResultList does not implement the method subList 

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@746513 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-21 13:59:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
index ca9400e..73bb17a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/EntityQuery.java
@@ -97,7 +97,11 @@
 			if (listDesc != null)
 				listDesc.setIncludeCount(endIndex - startIndex);
 
-			return result.subList(startIndex, endIndex);
+			List<Object> subList = new ArrayList<Object>(endIndex);
+			for (int i=startIndex; i< endIndex; i++) {
+				subList.add(result.get(i));
+			}
+			return subList;
 		}
 	}
 	
@@ -129,7 +133,10 @@
 			while(inParamsLeft > 0) {
 				int endIndex = startIndex + Math.min(inParamsLeft, maxInClause);
 				
-				List<?> subKeysIn = keysIn.subList(startIndex, endIndex);
+				List<Object> subKeysIn = new ArrayList<Object>(endIndex);
+				for (int i=startIndex; i< endIndex; i++) {
+					subKeysIn.add(keysIn.get(i));
+				}
 				dynamicQry.appendInListWithAnd(inListTerm, subKeysIn);
 				log.debug(dynamicQry);
 	
"
juddi,4fef862a284e9ede5f605eb45bfce0aa380b3e8b,"JUDDI-195, Add a number(#) the questionmarks '?#' 

(http://openjpa.apache.org/builds/1.2.0/apache-openjpa-1.2.0/docs/manual/manual.html#jpa_overview_query_basic)

for example 

select t.entityKey from Tmodel t where (t.authorizedName = ? and UPPER(t.entityKey) like ?)
should be
select t.entityKey from Tmodel t where (t.authorizedName = ?1 and UPPER(t.entityKey) like ?2) 

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@746512 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-21 13:55:22,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
index 5fdc1ea..dc8e0ab 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
@@ -17,6 +17,7 @@
 
 package org.apache.juddi.query.util;
 
+import java.util.StringTokenizer;
 import java.util.Vector;
 import java.util.List;
 import javax.persistence.Query;
@@ -180,7 +181,14 @@
 	}
 	
 	public Query buildJPAQuery(EntityManager em) {
-		Query qry = em.createQuery(sql.toString());
+		StringTokenizer tokenizer = new StringTokenizer(sql.toString(),""?"");
+		StringBuffer sqlBuffer = new StringBuffer();
+		int numberOfTokens = tokenizer.countTokens();
+		for (int i=1; i<numberOfTokens; i++) {
+			sqlBuffer.append(tokenizer.nextToken() + ""?"" + i);
+		}
+		if (tokenizer.hasMoreTokens()) sqlBuffer.append(tokenizer.nextToken());
+		Query qry = em.createQuery(sqlBuffer.toString());
 		
 		for (int i = 0; i < values.size(); i++)
 			qry.setParameter(i + 1, values.elementAt(i));
"
juddi,6a7c621abb0682598e4583c02c5828739a0c0c7d,"JUDDI-195, not equals cannot be '!=' but needs to be '<>' 

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@746509 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-21 13:46:55,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java b/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
index acd82dd..5fdc1ea 100644
--- a/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
+++ b/juddi-core/src/main/java/org/apache/juddi/query/util/DynamicQuery.java
@@ -34,7 +34,7 @@
 	public static String OPERATOR_OR = ""or"";
 	public static String OPERATOR_AND = ""and"";
 	public static String PREDICATE_EQUALS = ""="";
-	public static String PREDICATE_NOTEQUALS = ""!="";
+	public static String PREDICATE_NOTEQUALS = ""<>"";
 	public static String PREDICATE_LIKE = ""like"";
 	public static String PREDICATE_IN = ""in"";
 	public static String SORT_ASC = ""asc"";
"
juddi,91a38759a97509e09a28884c6f6ea6ecea46e208,"JUDDI-195, Fixing OpenJPA warnings about:

1. Needing a no-arg constructor (UddiEntityPublisher)
2. Use the getter assessors

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@746508 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-21 13:39:58,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
index 7ae1547..5b72b74 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
@@ -93,8 +93,8 @@
 	@Transient
 	public boolean isAdmin() {
 		boolean ret = false;
-		if (this.isAdmin != null) {
-			if (this.isAdmin.equalsIgnoreCase(""true""))
+		if (getIsAdmin() != null) {
+			if (getIsAdmin().equalsIgnoreCase(""true""))
 				ret = true;
 		}
 		return ret;
@@ -111,8 +111,8 @@
 	@Transient
 	public boolean isEnabled() {
 		boolean ret = false;
-		if (this.isEnabled != null) {
-			if (this.isEnabled.equalsIgnoreCase(""true""))
+		if (getIsEnabled() != null) {
+			if (getIsEnabled().equalsIgnoreCase(""true""))
 				ret = true;
 		}
 		return ret;
"
juddi,91a38759a97509e09a28884c6f6ea6ecea46e208,"JUDDI-195, Fixing OpenJPA warnings about:

1. Needing a no-arg constructor (UddiEntityPublisher)
2. Use the getter assessors

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@746508 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-21 13:39:58,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
index 4c409a2..7719524 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
@@ -43,6 +43,9 @@
 	protected String authorizedName;
 	private List<String> keyGeneratorKeys = null;
 
+	public UddiEntityPublisher() {
+	}
+	
 	public UddiEntityPublisher(String authorizedName) {
 		this.authorizedName = authorizedName;
 	}
@@ -70,13 +73,14 @@
 		getKeysQuery.append(""select t.entityKey from Tmodel t"").pad().WHERE().pad();
 
 		DynamicQuery.Parameter pubParam = new DynamicQuery.Parameter(""t.authorizedName"", 
-				 this.authorizedName, 
+				 getAuthorizedName(), 
 				 DynamicQuery.PREDICATE_EQUALS);
 
 		DynamicQuery.Parameter keyParam = new DynamicQuery.Parameter(""UPPER(t.entityKey)"", 
 				 (DynamicQuery.WILDCARD + KeyGenerator.KEYGENERATOR_SUFFIX).toUpperCase(), 
 				 DynamicQuery.PREDICATE_LIKE);
 		
+		
 		getKeysQuery.appendGroupedAnd(pubParam, keyParam);
 		Query qry = getKeysQuery.buildJPAQuery(em);
 		
@@ -86,7 +90,7 @@
 	public boolean isOwner(UddiEntity entity){
 		boolean ret = false;
 		if (entity != null) {
-			if (entity.getAuthorizedName().equals(this.authorizedName))
+			if (entity.getAuthorizedName().equals(getAuthorizedName()))
 				ret = true;
 		}
 		return ret;
@@ -137,7 +141,7 @@
 			Vector<DynamicQuery.Parameter> params = new Vector<DynamicQuery.Parameter>(0);
 
 			DynamicQuery.Parameter pubParam = new DynamicQuery.Parameter(""t.authorizedName"", 
-					 this.authorizedName, 
+					 getAuthorizedName(), 
 					 DynamicQuery.PREDICATE_EQUALS);
 			
 			int requiredCount = 0;
@@ -176,7 +180,7 @@
 			// If only two tokens, then a domain key generator is being checked.  A domain key generator can only be registered if no other publishers
 			// own it.  For example, if trying to register the uddi:domain:abc:123 key then uddi:domain cannot be owned by another publisher.
 			DynamicQuery.Parameter notPubParam = new DynamicQuery.Parameter(""t.authorizedName"", 
-					 this.authorizedName, 
+					 getAuthorizedName(), 
 					 DynamicQuery.PREDICATE_NOTEQUALS);
 
 			DynamicQuery.Parameter keyParam = new DynamicQuery.Parameter(""UPPER(t.entityKey)"", 
"
juddi,de687ba18aa5f4c7597577052c0db4a7735786c2,"JUDDI-173 fix

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@740199 13f79535-47bb-0310-9956-ffa450edef68
",2009-02-03 03:20:52,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 5fa158d..b18f356 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -481,10 +481,8 @@
 			apiOverviewDocContent.add(new ObjectFactory().createOverviewURL(apiOverviewURL));
 			//Set the entity on the apiOverviewDoc
 			if (apiInstanceDetails!=null) {
-				apiOverviewDocContent.add( new ObjectFactory().createInstanceDetails(apiInstanceDetails));
 				apiInstanceDetails.getContent().add(new ObjectFactory().createOverviewDoc(apiOverviewDoc));
 			} else {
-				apiOverviewDocContent.add( new ObjectFactory().createTModel(apiTModel));
 				apiTModel.getOverviewDoc().add(apiOverviewDoc);
 			}
 		}
@@ -526,6 +524,9 @@
 											org.uddi.api_v3.IdentifierBag apiIdentifierBag,
 											org.uddi.api_v3.TModel apiTModel) 
 				   throws DispositionReportFaultMessage {
+		if (modelIdentifierList == null || modelIdentifierList.size() ==0)
+			return;
+		
 		if (apiIdentifierBag == null)
 			apiIdentifierBag = new org.uddi.api_v3.IdentifierBag();
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
index 38447e8..ae88397 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIInquiryImpl.java
@@ -19,7 +19,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 import javax.jws.WebService;
 import javax.persistence.EntityTransaction;
 import javax.persistence.EntityManager;
@@ -267,7 +266,7 @@
 		if (focalBusiness == null)
 			throw new InvalidKeyPassedException(new ErrorMessage(""errors.invalidkey.BusinessNotFound"", focalKey));
 
-		Set<org.apache.juddi.model.PublisherAssertion> pubAssertList = null;
+		List<org.apache.juddi.model.PublisherAssertion> pubAssertList = null;
 		if (direction == Direction.FROM_KEY)
 			pubAssertList = focalBusiness.getPublisherAssertionsForFromKey();
 		else
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index 0c177b6..3c667fb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -31,11 +31,7 @@
 import org.uddi.sub_v3.SubscriptionResultsList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISubscriptionPortType;
-import org.apache.juddi.error.ErrorMessage;
-import org.apache.juddi.error.FatalErrorException;
-import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.PersistenceManager;
-import org.apache.juddi.validation.ValidateSubscription;
 
 
 @WebService(serviceName=""UDDISubscriptionService"", 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index d499539..9ce728b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -17,9 +17,8 @@
 
 package org.apache.juddi.mapping;
 
-import java.util.List;
-import java.util.Set;
 import java.util.Date;
+import java.util.List;
 
 import javax.xml.bind.JAXBElement;
 
@@ -195,7 +194,7 @@
 	}
 
 	public static void mapAddressLines(List<org.uddi.api_v3.AddressLine> apiAddressLineList, 
-									   Set<org.apache.juddi.model.AddressLine> modelAddressLineList,
+									   List<org.apache.juddi.model.AddressLine> modelAddressLineList,
 									   org.apache.juddi.model.Address modelAddress,
 									   String businessKey,
 									   Long contactId) 
@@ -209,7 +208,7 @@
 
 	
 	public static void mapBusinessIdentifiers(org.uddi.api_v3.IdentifierBag apiIdentifierBag, 
-											  Set<org.apache.juddi.model.BusinessIdentifier> modelIdentifierList,
+											  List<org.apache.juddi.model.BusinessIdentifier> modelIdentifierList,
 											  org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelIdentifierList.clear();
@@ -223,7 +222,7 @@
 	}
 	
 	public static void mapBusinessServices(org.uddi.api_v3.BusinessServices apiBusinessServices,
-										   Set<org.apache.juddi.model.BusinessService> modelBusinessServiceList,
+										   List<org.apache.juddi.model.BusinessService> modelBusinessServiceList,
 										   org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelBusinessServiceList.clear();
@@ -261,7 +260,7 @@
 	}
 
 	public static void mapServiceNames(List<org.uddi.api_v3.Name> apiNameList, 
-									   Set<org.apache.juddi.model.ServiceName> modelNameList,
+									   List<org.apache.juddi.model.ServiceName> modelNameList,
 									   org.apache.juddi.model.BusinessService modelBusinessService) 
 				   throws DispositionReportFaultMessage {
 		modelNameList.clear();
@@ -272,7 +271,7 @@
 	}
 	
 	public static void mapServiceDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-											  Set<org.apache.juddi.model.ServiceDescr> modelDescList,
+											  List<org.apache.juddi.model.ServiceDescr> modelDescList,
 											  org.apache.juddi.model.BusinessService modelBusinessService) 
 				   throws DispositionReportFaultMessage {
 		modelDescList.clear();
@@ -283,7 +282,7 @@
 	}
 
 	public static void mapBindingTemplates(org.uddi.api_v3.BindingTemplates apiBindingTemplates, 
-										   Set<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList,
+										   List<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList,
 										   org.apache.juddi.model.BusinessService modelBusinessService) 
 				   throws DispositionReportFaultMessage {
 		modelBindingTemplateList.clear();
@@ -321,7 +320,7 @@
 	}
 	
 	public static void mapBindingDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-											  Set<org.apache.juddi.model.BindingDescr> modelDescList,
+											  List<org.apache.juddi.model.BindingDescr> modelDescList,
 											  org.apache.juddi.model.BindingTemplate modelBindingTemplate) 
 				   throws DispositionReportFaultMessage {
 		modelDescList.clear();
@@ -346,13 +345,13 @@
 						apiKeyedReference.getTModelKey(), apiKeyedReference.getKeyName(), apiKeyedReference.getKeyValue()));
 				}
 				if (elem.getValue() instanceof org.uddi.api_v3.KeyedReferenceGroup) {
-					Set<org.apache.juddi.model.KeyedReferenceGroup> modelKeyedReferenceGroups=modelCategoryBag.getKeyedReferenceGroups();
+					List<org.apache.juddi.model.KeyedReferenceGroup> modelKeyedReferenceGroups=modelCategoryBag.getKeyedReferenceGroups();
 					//modelKeyedReferenceGroups.clear();
 					org.uddi.api_v3.KeyedReferenceGroup apiKeyedReferenceGroup = (org.uddi.api_v3.KeyedReferenceGroup) elem.getValue();
 					org.apache.juddi.model.KeyedReferenceGroup modelKeyedReferenceGroup = new org.apache.juddi.model.KeyedReferenceGroup(modelCategoryBag,apiKeyedReferenceGroup.getTModelKey());
 					modelKeyedReferenceGroups.add(modelKeyedReferenceGroup);
 					if (apiKeyedReferenceGroup.getKeyedReference() != null) {
-						Set<org.apache.juddi.model.KeyedReference> modelKeyedReferences = modelKeyedReferenceGroup.getKeyedReferences();
+						List<org.apache.juddi.model.KeyedReference> modelKeyedReferences = modelKeyedReferenceGroup.getKeyedReferences();
 						for (org.uddi.api_v3.KeyedReference apiKeyedReference : apiKeyedReferenceGroup.getKeyedReference()) {
 							modelKeyedReferences.add(new org.apache.juddi.model.KeyedReference(modelKeyedReferenceGroup, 
 								apiKeyedReference.getTModelKey(), apiKeyedReference.getKeyName(), apiKeyedReference.getKeyValue()));
@@ -364,7 +363,7 @@
 	}
 
 	public static void mapTModelInstanceDetails(org.uddi.api_v3.TModelInstanceDetails apiTModelInstDetails, 
-												Set<org.apache.juddi.model.TmodelInstanceInfo> modelTModelInstInfoList,
+												List<org.apache.juddi.model.TmodelInstanceInfo> modelTModelInstInfoList,
 												org.apache.juddi.model.BindingTemplate modelBindingTemplate) 
 				   throws DispositionReportFaultMessage {
 		modelTModelInstInfoList.clear();
@@ -383,7 +382,7 @@
 	}
 
 	public static void mapTModelInstanceInfoDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-														 Set<org.apache.juddi.model.TmodelInstanceInfoDescr> modelDescList,
+														 List<org.apache.juddi.model.TmodelInstanceInfoDescr> modelDescList,
 														 org.apache.juddi.model.TmodelInstanceInfo modelTModelInstInfo,
 														 String bindingKey) 
 				   throws DispositionReportFaultMessage {
@@ -452,7 +451,7 @@
 	}
 	
 	public static void mapTModelIdentifiers(org.uddi.api_v3.IdentifierBag apiIdentifierBag, 
-											Set<org.apache.juddi.model.TmodelIdentifier> modelIdentifierList,
+											List<org.apache.juddi.model.TmodelIdentifier> modelIdentifierList,
 											org.apache.juddi.model.Tmodel modelTModel) 
 				   throws DispositionReportFaultMessage {
 		modelIdentifierList.clear();
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 6717dbc..5bbb50c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -19,17 +19,16 @@
 
 import java.util.Collections;
 import java.util.List;
-import java.util.Set;
 
 import javax.xml.bind.JAXBElement;
 
 import org.uddi.api_v3.CompletionStatus;
 import org.uddi.api_v3.ObjectFactory;
-
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
+ * @author <a href=""mailto:kstam@apache.org"">Kurt T Stam</a>
  */
 public class MappingModelToApi {
 	
@@ -206,7 +205,7 @@
 		}
 	}
 
-	public static void mapAddressLines(Set<org.apache.juddi.model.AddressLine> modelAddressLineList, 
+	public static void mapAddressLines(List<org.apache.juddi.model.AddressLine> modelAddressLineList, 
 									   List<org.uddi.api_v3.AddressLine> apiAddressLineList) 
 				   throws DispositionReportFaultMessage {
 		apiAddressLineList.clear();
@@ -220,7 +219,7 @@
 		}
 	}
 
-	public static void mapBusinessIdentifiers(Set<org.apache.juddi.model.BusinessIdentifier> modelIdentifierList, 
+	public static void mapBusinessIdentifiers(List<org.apache.juddi.model.BusinessIdentifier> modelIdentifierList, 
 											  org.uddi.api_v3.IdentifierBag apiIdentifierBag,
 											  org.uddi.api_v3.BusinessEntity apiBusinessEntity) 
 				   throws DispositionReportFaultMessage {
@@ -240,7 +239,7 @@
 		apiBusinessEntity.setIdentifierBag(apiIdentifierBag);
 	}
 
-	public static void mapBusinessServices(Set<org.apache.juddi.model.BusinessService> modelBusinessServiceList, 
+	public static void mapBusinessServices(List<org.apache.juddi.model.BusinessService> modelBusinessServiceList, 
 										   org.uddi.api_v3.BusinessServices apiBusinessServices,
 										   org.uddi.api_v3.BusinessEntity apiBusinessEntity) 
 				   throws DispositionReportFaultMessage {
@@ -273,7 +272,7 @@
 
 	}
 
-	public static void mapServiceNames(Set<org.apache.juddi.model.ServiceName> modelNameList, 
+	public static void mapServiceNames(List<org.apache.juddi.model.ServiceName> modelNameList, 
 									   List<org.uddi.api_v3.Name> apiNameList) 
 				   throws DispositionReportFaultMessage {
 		apiNameList.clear();
@@ -286,7 +285,7 @@
 		}
 	}
 
-	public static void mapServiceDescriptions(Set<org.apache.juddi.model.ServiceDescr> modelDescList, 
+	public static void mapServiceDescriptions(List<org.apache.juddi.model.ServiceDescr> modelDescList, 
 											  List<org.uddi.api_v3.Description> apiDescList) 
 				   throws DispositionReportFaultMessage {
 		apiDescList.clear();
@@ -299,7 +298,7 @@
 		}
 	}
 
-	public static void mapBindingTemplates(Set<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList, 
+	public static void mapBindingTemplates(List<org.apache.juddi.model.BindingTemplate> modelBindingTemplateList, 
 										   org.uddi.api_v3.BindingTemplates apiBindingTemplates,
 										   org.uddi.api_v3.BusinessService apiBusinessService) 
 				   throws DispositionReportFaultMessage {
@@ -338,7 +337,7 @@
 
 	}
 
-	public static void mapBindingDescriptions(Set<org.apache.juddi.model.BindingDescr> modelDescList, 
+	public static void mapBindingDescriptions(List<org.apache.juddi.model.BindingDescr> modelDescList, 
 											  List<org.uddi.api_v3.Description> apiDescList) 
 				   throws DispositionReportFaultMessage {
 		apiDescList.clear();
@@ -382,7 +381,7 @@
 		return apiCategoryBag;
 	}
 
-	public static void mapTModelInstanceDetails(Set<org.apache.juddi.model.TmodelInstanceInfo> modelTModelInstInfoList, 
+	public static void mapTModelInstanceDetails(List<org.apache.juddi.model.TmodelInstanceInfo> modelTModelInstInfoList, 
 												org.uddi.api_v3.TModelInstanceDetails apiTModelInstDetails,
 												org.uddi.api_v3.BindingTemplate apiBindingTemplate) 
 				   throws DispositionReportFaultMessage {
@@ -403,7 +402,7 @@
 		apiBindingTemplate.setTModelInstanceDetails(apiTModelInstDetails);
 	}
 	
-	public static void mapTModelInstanceInfoDescriptions(Set<org.apache.juddi.model.TmodelInstanceInfoDescr> modelDescList, 
+	public static void mapTModelInstanceInfoDescriptions(List<org.apache.juddi.model.TmodelInstanceInfoDescr> modelDescList, 
 														 List<org.uddi.api_v3.Description> apiDescList) 
 				   throws DispositionReportFaultMessage {
 		apiDescList.clear();
@@ -428,7 +427,7 @@
 
 		apiInstanceDetailsContent.add(new ObjectFactory().createInstanceParms(modelTModelInstInfo.getInstanceParms()));
 		
-		Set<org.apache.juddi.model.InstanceDetailsDescr> modelInstDetailsDescrList = modelTModelInstInfo.getInstanceDetailsDescrs();
+		List<org.apache.juddi.model.InstanceDetailsDescr> modelInstDetailsDescrList = modelTModelInstInfo.getInstanceDetailsDescrs();
 		for (org.apache.juddi.model.InstanceDetailsDescr modelInstDetailDescr : modelInstDetailsDescrList) {
 			org.uddi.api_v3.Description apiDesc = new org.uddi.api_v3.Description();
 			apiDesc.setLang(modelInstDetailDescr.getLangCode());
@@ -475,7 +474,7 @@
 		}
 	}
 
-	public static void mapTModelIdentifiers(Set<org.apache.juddi.model.TmodelIdentifier> modelIdentifierList, 
+	public static void mapTModelIdentifiers(List<org.apache.juddi.model.TmodelIdentifier> modelIdentifierList, 
 											org.uddi.api_v3.IdentifierBag apiIdentifierBag,
 											org.uddi.api_v3.TModel apiTModel) 
 				   throws DispositionReportFaultMessage {
@@ -508,7 +507,7 @@
 		
 	}
 
-	public static void mapServiceInfos(Set<org.apache.juddi.model.BusinessService> modelBusinessServiceList, 
+	public static void mapServiceInfos(List<org.apache.juddi.model.BusinessService> modelBusinessServiceList, 
 									   org.uddi.api_v3.ServiceInfos apiServiceInfos,
 									   org.uddi.api_v3.BusinessInfo apiBusinessInfo) 
 				   throws DispositionReportFaultMessage {
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Address.java b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
index 37731cd..a723bee 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Address.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -27,6 +27,7 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -43,7 +44,7 @@
 	private String useType;
 	private String sortCode;
 	private String tmodelKey;
-	private Set<AddressLine> addressLines = new HashSet<AddressLine>(0);
+	private List<AddressLine> addressLines = new ArrayList<AddressLine>(0);
 
 	public Address() {
 	}
@@ -52,7 +53,7 @@
 		this.contact = contact;
 	}
 	public Address(Long id, Contact contact, String useType,
-			String sortCode, String tmodelKey, Set<AddressLine> addressLines) {
+			String sortCode, String tmodelKey, List<AddressLine> addressLines) {
 		this.contact = contact;
 		this.useType = useType;
 		this.sortCode = sortCode;
@@ -103,10 +104,11 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""address"")
-	public Set<AddressLine> getAddressLines() {
+	@OrderBy
+	public List<AddressLine> getAddressLines() {
 		return this.addressLines;
 	}
-	public void setAddressLines(Set<AddressLine> addressLines) {
+	public void setAddressLines(List<AddressLine> addressLines) {
 		this.addressLines = addressLines;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
index fbc4f04..39cf2f5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryBag.java
@@ -30,6 +30,10 @@
 	private static final long serialVersionUID = 1L;
 	private BindingTemplate bindingTemplate;
 
+	public BindingCategoryBag() {
+		super();
+	}
+	
 	public BindingCategoryBag(BindingTemplate bindingTemplate) {
 		super();
 		this.bindingTemplate = bindingTemplate;
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index aaf38cc..70e46c0 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -27,6 +27,7 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -43,8 +44,8 @@
 	private String accessPointUrl;
 	private String hostingRedirector;
 	private BindingCategoryBag categoryBag;
-	private Set<TmodelInstanceInfo> tmodelInstanceInfos = new HashSet<TmodelInstanceInfo>(0);
-	private Set<BindingDescr> bindingDescrs = new HashSet<BindingDescr>(0);
+	private List<TmodelInstanceInfo> tmodelInstanceInfos = new ArrayList<TmodelInstanceInfo>(0);
+	private List<BindingDescr> bindingDescrs = new ArrayList<BindingDescr>(0);
 
 	public BindingTemplate() {
 	}
@@ -57,8 +58,8 @@
 	public BindingTemplate(String entityKey, BusinessService businessService, String accessPointType,
 			String accessPointUrl, String hostingRedirector, Date lastUpdate,
 			BindingCategoryBag categoryBag,
-			Set<TmodelInstanceInfo> tmodelInstanceInfos,
-			Set<BindingDescr> bindingDescrs) {
+			List<TmodelInstanceInfo> tmodelInstanceInfos,
+			List<BindingDescr> bindingDescrs) {
 		this.entityKey = entityKey;
 		this.businessService = businessService;
 		this.accessPointType = accessPointType;
@@ -112,19 +113,21 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""bindingTemplate"")
-	public Set<TmodelInstanceInfo> getTmodelInstanceInfos() {
+	@OrderBy
+	public List<TmodelInstanceInfo> getTmodelInstanceInfos() {
 		return this.tmodelInstanceInfos;
 	}
 	public void setTmodelInstanceInfos(
-			Set<TmodelInstanceInfo> tmodelInstanceInfos) {
+			List<TmodelInstanceInfo> tmodelInstanceInfos) {
 		this.tmodelInstanceInfos = tmodelInstanceInfos;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""bindingTemplate"")
-	public Set<BindingDescr> getBindingDescrs() {
+	@OrderBy
+	public List<BindingDescr> getBindingDescrs() {
 		return this.bindingDescrs;
 	}
-	public void setBindingDescrs(Set<BindingDescr> bindingDescrs) {
+	public void setBindingDescrs(List<BindingDescr> bindingDescrs) {
 		this.bindingDescrs = bindingDescrs;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index 1eed195..30de4a8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -17,9 +17,7 @@
 
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
@@ -28,8 +26,8 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
-import javax.persistence.Table;
 import javax.persistence.OrderBy;
+import javax.persistence.Table;
 
 /**
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
@@ -42,13 +40,13 @@
 	private static final long serialVersionUID = 1L;
 	private UddiEntityPublisher publisher;
 	private List<Contact> contacts = new ArrayList<Contact>(0);
-	private Set<BusinessIdentifier> businessIdentifiers = new HashSet<BusinessIdentifier>(0);
-	private Set<PublisherAssertion> publisherAssertionsForFromKey = new HashSet<PublisherAssertion>(0);
+	private List<BusinessIdentifier> businessIdentifiers = new ArrayList<BusinessIdentifier>(0);
+	private List<PublisherAssertion> publisherAssertionsForFromKey = new ArrayList<PublisherAssertion>(0);
 	private List<DiscoveryUrl> discoveryUrls = new ArrayList<DiscoveryUrl>(0);
 	private List<BusinessName> businessNames = new ArrayList<BusinessName>(0);
-	private Set<PublisherAssertion> publisherAssertionsForToKey = new HashSet<PublisherAssertion>(0);
+	private List<PublisherAssertion> publisherAssertionsForToKey = new ArrayList<PublisherAssertion>(0);
 	private BusinessCategoryBag categoryBag;
-	private Set<BusinessService> businessServices = new HashSet<BusinessService>(0);
+	private List<BusinessService> businessServices = new ArrayList<BusinessService>(0);
 	private List<BusinessDescr> businessDescrs = new ArrayList<BusinessDescr>(0);
 
 	public BusinessEntity() {
@@ -61,12 +59,12 @@
 	public BusinessEntity(String entityKey, String authorizedName, 
 			UddiEntityPublisher publisher, String operator,
 			Date lastUpdate, List<Contact> contacts,
-			Set<BusinessIdentifier> businessIdentifiers,
-			Set<PublisherAssertion> publisherAssertionsForFromKey,
+			List<BusinessIdentifier> businessIdentifiers,
+			List<PublisherAssertion> publisherAssertionsForFromKey,
 			List<DiscoveryUrl> discoveryUrls, List<BusinessName> businessNames,
-			Set<PublisherAssertion> publisherAssertionsForToKey,
+			List<PublisherAssertion> publisherAssertionsForToKey,
 			BusinessCategoryBag categoryBag,
-			Set<BusinessService> businessServices,
+			List<BusinessService> businessServices,
 			List<BusinessDescr> businessDescrs) {
 		this.entityKey = entityKey;
 		this.publisher = publisher;
@@ -102,20 +100,21 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
 	@OrderBy
-	public Set<BusinessIdentifier> getBusinessIdentifiers() {
+	public List<BusinessIdentifier> getBusinessIdentifiers() {
 		return this.businessIdentifiers;
 	}
 	public void setBusinessIdentifiers(
-			Set<BusinessIdentifier> businessIdentifiers) {
+			List<BusinessIdentifier> businessIdentifiers) {
 		this.businessIdentifiers = businessIdentifiers;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntityByFromKey"")
-	public Set<PublisherAssertion> getPublisherAssertionsForFromKey() {
+	@OrderBy
+	public List<PublisherAssertion> getPublisherAssertionsForFromKey() {
 		return this.publisherAssertionsForFromKey;
 	}
 	public void setPublisherAssertionsForFromKey(
-			Set<PublisherAssertion> publisherAssertionsForFromKey) {
+			List<PublisherAssertion> publisherAssertionsForFromKey) {
 		this.publisherAssertionsForFromKey = publisherAssertionsForFromKey;
 	}
 
@@ -138,11 +137,12 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntityByToKey"")
-	public Set<PublisherAssertion> getPublisherAssertionsForToKey() {
+	@OrderBy
+	public List<PublisherAssertion> getPublisherAssertionsForToKey() {
 		return this.publisherAssertionsForToKey;
 	}
 	public void setPublisherAssertionsForToKey(
-			Set<PublisherAssertion> publisherAssertionsForToKey) {
+			List<PublisherAssertion> publisherAssertionsForToKey) {
 		this.publisherAssertionsForToKey = publisherAssertionsForToKey;
 	}
 
@@ -155,10 +155,11 @@
 	}
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
-	public Set<BusinessService> getBusinessServices() {
+	@OrderBy
+	public List<BusinessService> getBusinessServices() {
 		return this.businessServices;
 	}
-	public void setBusinessServices(Set<BusinessService> businessServices) {
+	public void setBusinessServices(List<BusinessService> businessServices) {
 		this.businessServices = businessServices;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
index 1fede47..61c5cee 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
@@ -26,6 +26,7 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.OneToOne;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -38,9 +39,9 @@
 
 	private static final long serialVersionUID = 1L;
 	private BusinessEntity businessEntity;
-	private Set<ServiceName> serviceNames = new HashSet<ServiceName>(0);
-	private Set<ServiceDescr> serviceDescrs = new HashSet<ServiceDescr>(0);
-	private Set<BindingTemplate> bindingTemplates = new HashSet<BindingTemplate>(0);
+	private List<ServiceName> serviceNames = new ArrayList<ServiceName>(0);
+	private List<ServiceDescr> serviceDescrs = new ArrayList<ServiceDescr>(0);
+	private List<BindingTemplate> bindingTemplates = new ArrayList<BindingTemplate>(0);
 	private ServiceCategoryBag categoryBag;
 
 	public BusinessService() {
@@ -52,8 +53,8 @@
 		this.lastUpdate = lastUpdate;
 	}
 	public BusinessService(String entityKey, BusinessEntity businessEntity, Date lastUpdate,
-			Set<ServiceName> serviceNames, Set<ServiceDescr> serviceDescrs,
-			Set<BindingTemplate> bindingTemplates,
+			List<ServiceName> serviceNames, List<ServiceDescr> serviceDescrs,
+			List<BindingTemplate> bindingTemplates,
 			ServiceCategoryBag categoryBag) {
 		this.entityKey = entityKey;
 		this.businessEntity = businessEntity;
@@ -74,26 +75,29 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessService"")
-	public Set<ServiceName> getServiceNames() {
+	@OrderBy
+	public List<ServiceName> getServiceNames() {
 		return this.serviceNames;
 	}
-	public void setServiceNames(Set<ServiceName> serviceNames) {
+	public void setServiceNames(List<ServiceName> serviceNames) {
 		this.serviceNames = serviceNames;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessService"")
-	public Set<ServiceDescr> getServiceDescrs() {
+	@OrderBy
+	public List<ServiceDescr> getServiceDescrs() {
 		return this.serviceDescrs;
 	}
-	public void setServiceDescrs(Set<ServiceDescr> serviceDescrs) {
+	public void setServiceDescrs(List<ServiceDescr> serviceDescrs) {
 		this.serviceDescrs = serviceDescrs;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessService"")
-	public Set<BindingTemplate> getBindingTemplates() {
+	@OrderBy
+	public List<BindingTemplate> getBindingTemplates() {
 		return this.bindingTemplates;
 	}
-	public void setBindingTemplates(Set<BindingTemplate> bindingTemplates) {
+	public void setBindingTemplates(List<BindingTemplate> bindingTemplates) {
 		this.bindingTemplates = bindingTemplates;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
index b34357f..2c88f69 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
@@ -16,9 +16,7 @@
  */
 
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
@@ -44,7 +42,7 @@
 	private static final long serialVersionUID = 1L;
 	private Long id;
 	private List<KeyedReference> keyedReferences = new ArrayList<KeyedReference>(0);
-	private Set<KeyedReferenceGroup> keyedReferenceGroups = new HashSet<KeyedReferenceGroup>(0);
+	private List<KeyedReferenceGroup> keyedReferenceGroups = new ArrayList<KeyedReferenceGroup>(0);
 	
 	public CategoryBag() {
 	}
@@ -69,11 +67,12 @@
 	}
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""categoryBag"")
-	public Set<KeyedReferenceGroup> getKeyedReferenceGroups() {
+	@OrderBy
+	public List<KeyedReferenceGroup> getKeyedReferenceGroups() {
 		return keyedReferenceGroups;
 	}
 	public void setKeyedReferenceGroups(
-			Set<KeyedReferenceGroup> keyedReferenceGroups) {
+			List<KeyedReferenceGroup> keyedReferenceGroups) {
 		this.keyedReferenceGroups = keyedReferenceGroups;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
index f001429..64f8af8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
@@ -16,9 +16,7 @@
  */
 
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -30,8 +28,8 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
-import javax.persistence.Table;
 import javax.persistence.OrderBy;
+import javax.persistence.Table;
 
 /**
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
index be3bd2c..b3b50b1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReferenceGroup.java
@@ -15,8 +15,8 @@
  * limitations under the License.
  */
 
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -28,6 +28,7 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -41,7 +42,7 @@
 	private Long id;
 	private CategoryBag categoryBag;
 	private String tmodelKey;
-	private Set<KeyedReference> keyedReferences = new HashSet<KeyedReference>(0);
+	private List<KeyedReference> keyedReferences = new ArrayList<KeyedReference>(0);
 	
 
 	public KeyedReferenceGroup() {
@@ -79,10 +80,11 @@
 	}
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""keyedReferenceGroup"")
-	public Set<KeyedReference> getKeyedReferences() {
+	@OrderBy
+	public List<KeyedReference> getKeyedReferences() {
 		return keyedReferences;
 	}
-	public void setKeyedReferences(Set<KeyedReference> keyedReferences) {
+	public void setKeyedReferences(List<KeyedReference> keyedReferences) {
 		this.keyedReferences = keyedReferences;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
index b1d22a6..2a2c4ac 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Publisher.java
@@ -16,11 +16,12 @@
  */
 
 import java.util.Set;
+
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.PrimaryKeyJoinColumn;
 import javax.persistence.Table;
 import javax.persistence.Transient;
-import javax.persistence.PrimaryKeyJoinColumn;
 
 /**
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
index c64e50d..e301d13 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryBag.java
@@ -30,6 +30,10 @@
 	private static final long serialVersionUID = 1L;
 	private BusinessService businessService;
 	
+	public ServiceCategoryBag() {
+		super();
+	}
+	
 	public ServiceCategoryBag(BusinessService businessService) {
 		super();
 		this.businessService = businessService;
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
index a03a07b..6f6e81c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
@@ -17,9 +17,7 @@
 
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -46,10 +44,10 @@
 	private String name;
 	private String langCode;
 	private boolean deleted;
-	private Set<TmodelOverview> overviewDocs = new HashSet<TmodelOverview>(0);
+	private List<TmodelOverview> overviewDocs = new ArrayList<TmodelOverview>(0);
 	private List<TmodelDescr> tmodelDescrs = new ArrayList<TmodelDescr>(0);
-	private Set<TmodelDocDescr> tmodelDocDescrs = new HashSet<TmodelDocDescr>(0);
-	private Set<TmodelIdentifier> tmodelIdentifiers = new HashSet<TmodelIdentifier>(0);
+	private List<TmodelDocDescr> tmodelDocDescrs = new ArrayList<TmodelDocDescr>(0);
+	private List<TmodelIdentifier> tmodelIdentifiers = new ArrayList<TmodelIdentifier>(0);
 	private TmodelCategoryBag categoryBag;
 
 	public Tmodel() {
@@ -62,9 +60,9 @@
 	}
 	public Tmodel(String entityKey, String authorizedName, UddiEntityPublisher publisher, String operator,
 			String name, String langCode, boolean deleted, Date lastUpdate,
-			Set<TmodelOverview> overviewDocs,
-			List<TmodelDescr> tmodelDescrs, Set<TmodelDocDescr> tmodelDocDescrs,
-			Set<TmodelIdentifier> tmodelIdentifiers,
+			List<TmodelOverview> overviewDocs,
+			List<TmodelDescr> tmodelDescrs, List<TmodelDocDescr> tmodelDocDescrs,
+			List<TmodelIdentifier> tmodelIdentifiers,
 			TmodelCategoryBag categoryBag) {
 		this.entityKey = entityKey;
 		this.publisher = publisher;
@@ -114,11 +112,11 @@
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodel"")
 	@OrderBy
-	public Set<TmodelOverview> getOverviewDocs() {
+	public List<TmodelOverview> getOverviewDocs() {
 		return this.overviewDocs;
 	}
 	
-	public void setOverviewDocs(Set<TmodelOverview> overviewDocs) {
+	public void setOverviewDocs(List<TmodelOverview> overviewDocs) {
 		this.overviewDocs = overviewDocs;
 	}
 
@@ -132,18 +130,20 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodel"")
-	public Set<TmodelDocDescr> getTmodelDocDescrs() {
+	@OrderBy
+	public List<TmodelDocDescr> getTmodelDocDescrs() {
 		return this.tmodelDocDescrs;
 	}
-	public void setTmodelDocDescrs(Set<TmodelDocDescr> tmodelDocDescrs) {
+	public void setTmodelDocDescrs(List<TmodelDocDescr> tmodelDocDescrs) {
 		this.tmodelDocDescrs = tmodelDocDescrs;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodel"")
-	public Set<TmodelIdentifier> getTmodelIdentifiers() {
+	@OrderBy
+	public List<TmodelIdentifier> getTmodelIdentifiers() {
 		return this.tmodelIdentifiers;
 	}
-	public void setTmodelIdentifiers(Set<TmodelIdentifier> tmodelIdentifiers) {
+	public void setTmodelIdentifiers(List<TmodelIdentifier> tmodelIdentifiers) {
 		this.tmodelIdentifiers = tmodelIdentifiers;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 28460f1..e04687e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -15,8 +15,8 @@
  * limitations under the License.
  */
 
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -28,6 +28,7 @@
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -43,9 +44,9 @@
 	private BindingTemplate bindingTemplate;
 	private String tmodelKey;
 	private String instanceParms;
-	private Set<InstanceDetailsDocDescr> instanceDetailsDocDescrs = new HashSet<InstanceDetailsDocDescr>(0);
-	private Set<InstanceDetailsDescr> instanceDetailsDescrs = new HashSet<InstanceDetailsDescr>(0);
-	private Set<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs = new HashSet<TmodelInstanceInfoDescr>(0);
+	private List<InstanceDetailsDocDescr> instanceDetailsDocDescrs = new ArrayList<InstanceDetailsDocDescr>(0);
+	private List<InstanceDetailsDescr> instanceDetailsDescrs = new ArrayList<InstanceDetailsDescr>(0);
+	private List<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs = new ArrayList<TmodelInstanceInfoDescr>(0);
 
 	public TmodelInstanceInfo() {
 	}
@@ -56,9 +57,9 @@
 	}
 	public TmodelInstanceInfo(BindingTemplate bindingTemplate, String tmodelKey,
 			String instanceParms,
-			Set<InstanceDetailsDocDescr> instanceDetailsDocDescrs,
-			Set<InstanceDetailsDescr> instanceDetailsDescrs,
-			Set<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs) {
+			List<InstanceDetailsDocDescr> instanceDetailsDocDescrs,
+			List<InstanceDetailsDescr> instanceDetailsDescrs,
+			List<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs) {
 		this.bindingTemplate = bindingTemplate;
 		this.tmodelKey = tmodelKey;
 		this.instanceParms = instanceParms;
@@ -102,29 +103,32 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodelInstanceInfo"")
-	public Set<InstanceDetailsDocDescr> getInstanceDetailsDocDescrs() {
+	@OrderBy
+	public List<InstanceDetailsDocDescr> getInstanceDetailsDocDescrs() {
 		return this.instanceDetailsDocDescrs;
 	}
 	public void setInstanceDetailsDocDescrs(
-			Set<InstanceDetailsDocDescr> instanceDetailsDocDescrs) {
+			List<InstanceDetailsDocDescr> instanceDetailsDocDescrs) {
 		this.instanceDetailsDocDescrs = instanceDetailsDocDescrs;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodelInstanceInfo"")
-	public Set<InstanceDetailsDescr> getInstanceDetailsDescrs() {
+	@OrderBy
+	public List<InstanceDetailsDescr> getInstanceDetailsDescrs() {
 		return this.instanceDetailsDescrs;
 	}
 	public void setInstanceDetailsDescrs(
-			Set<InstanceDetailsDescr> instanceDetailsDescrs) {
+			List<InstanceDetailsDescr> instanceDetailsDescrs) {
 		this.instanceDetailsDescrs = instanceDetailsDescrs;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodelInstanceInfo"")
-	public Set<TmodelInstanceInfoDescr> getTmodelInstanceInfoDescrs() {
+	@OrderBy
+	public List<TmodelInstanceInfoDescr> getTmodelInstanceInfoDescrs() {
 		return this.tmodelInstanceInfoDescrs;
 	}
 	public void setTmodelInstanceInfoDescrs(
-			Set<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs) {
+			List<TmodelInstanceInfoDescr> tmodelInstanceInfoDescrs) {
 		this.tmodelInstanceInfoDescrs = tmodelInstanceInfoDescrs;
 	}
 
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
index edbb464..d9cd811 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
@@ -15,8 +15,8 @@
  * limitations under the License.
  */
 
-import java.util.HashSet;
-import java.util.Set;
+import java.util.ArrayList;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -43,7 +43,7 @@
 	private Long id;
 	private Tmodel tmodel;
 	private String overviewUrl;
-	private Set<TmodelDocDescr> docDescrs = new HashSet<TmodelDocDescr>(0);
+	private List<TmodelDocDescr> docDescrs = new ArrayList<TmodelDocDescr>(0);
 
 	public TmodelOverview() {
 	}
@@ -53,7 +53,7 @@
 	}
 	
 	public TmodelOverview(Tmodel tmodel,
-			String overviewUrl, Set<TmodelDocDescr> docDescrs) {
+			String overviewUrl, List<TmodelDocDescr> docDescrs) {
 		this.tmodel = tmodel;
 		this.overviewUrl = overviewUrl;
 		this.docDescrs = docDescrs;
@@ -90,11 +90,11 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodeloverview"")
 	@OrderBy
-	public Set<TmodelDocDescr> getDocDescriptions() {
+	public List<TmodelDocDescr> getDocDescriptions() {
 		return this.docDescrs;
 	}
 	
-	public void setDocDescriptions(Set<TmodelDocDescr> docDescrs) {
+	public void setDocDescriptions(List<TmodelDocDescr> docDescrs) {
 		this.docDescrs = docDescrs;
 	}	
 }
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
index 58f5315..3c7621b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TransferToken.java
@@ -17,9 +17,9 @@
 
 package org.apache.juddi.model;
 
+import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
@@ -40,13 +40,13 @@
 	private static final long serialVersionUID = 1L;
 	private String transferToken;
 	private Date expirationDate;
-	protected Set<TransferTokenKey> transferKeys = new HashSet<TransferTokenKey>(0);
+	protected List<TransferTokenKey> transferKeys = new ArrayList<TransferTokenKey>(0);
 	
 	public TransferToken() {
 	}
 
 	public TransferToken(String transferToken, Date expirationDate,
-			Set<TransferTokenKey> transferKeys) {
+			List<TransferTokenKey> transferKeys) {
 		this.transferToken = transferToken;
 		this.expirationDate = expirationDate;
 		this.transferKeys = transferKeys;
@@ -71,10 +71,10 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""transferToken"")
 	@OrderBy
-	public Set<TransferTokenKey> getTransferKeys() {
+	public List<TransferTokenKey> getTransferKeys() {
 		return transferKeys;
 	}
-	public void setTransferKeys(Set<TransferTokenKey> transferKeys) {
+	public void setTransferKeys(List<TransferTokenKey> transferKeys) {
 		this.transferKeys = transferKeys;
 	}
 	
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
index d07bf89..5e72c79 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntity.java
@@ -19,9 +19,9 @@
 
 import javax.persistence.Column;
 import javax.persistence.Id;
+import javax.persistence.MappedSuperclass;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
-import javax.persistence.MappedSuperclass;
 
 /**
  * @author <a href=""mailto:jfaath@apache.org"">Jeff Faath</a>
"
juddi,73c4ec32412818d76172d712029242beeb51c374,"JUDDI-142, Restructuring the unittests - fixing orderby issue

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726707 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 14:50:26,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
index b217206..6196775 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
@@ -18,28 +18,28 @@
 package org.apache.juddi.model;
 
 import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 import java.util.StringTokenizer;
 import java.util.Vector;
-import java.util.Iterator;
-import java.util.List;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.EntityManager;
 import javax.persistence.FetchType;
 import javax.persistence.Id;
 import javax.persistence.Inheritance;
 import javax.persistence.InheritanceType;
 import javax.persistence.OneToMany;
 import javax.persistence.OrderBy;
-import javax.persistence.EntityManager;
 import javax.persistence.Query;
 import javax.persistence.Table;
 
+import org.apache.juddi.keygen.KeyGenerator;
 import org.apache.juddi.query.util.DynamicQuery;
 import org.apache.juddi.validation.ValidateUDDIKey;
-import org.apache.juddi.keygen.KeyGenerator;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 
 /**
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
index e8bf09b..d499539 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingApiToModel.java
@@ -69,7 +69,7 @@
 	
 
 	public static void mapBusinessNames(List<org.uddi.api_v3.Name> apiNameList, 
-										Set<org.apache.juddi.model.BusinessName> modelNameList,
+										List<org.apache.juddi.model.BusinessName> modelNameList,
 										org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelNameList.clear();
@@ -80,7 +80,7 @@
 	}
 
 	public static void mapBusinessDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-			  								   Set<org.apache.juddi.model.BusinessDescr> modelDescList,
+			  								   List<org.apache.juddi.model.BusinessDescr> modelDescList,
 			  								   org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelDescList.clear();
@@ -91,7 +91,7 @@
 	}
 
 	public static void mapDiscoveryUrls(org.uddi.api_v3.DiscoveryURLs apiDiscUrls, 
-										Set<org.apache.juddi.model.DiscoveryUrl> modelDiscUrlList,
+										List<org.apache.juddi.model.DiscoveryUrl> modelDiscUrlList,
 										org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelDiscUrlList.clear();
@@ -105,7 +105,7 @@
 	}
 
 	public static void mapContacts(org.uddi.api_v3.Contacts apiContacts, 
-								   Set<org.apache.juddi.model.Contact> modelContactList,
+								   List<org.apache.juddi.model.Contact> modelContactList,
 								   org.apache.juddi.model.BusinessEntity modelBusinessEntity) 
 				   throws DispositionReportFaultMessage {
 		modelContactList.clear();
@@ -128,7 +128,7 @@
 	}
 
 	public static void mapContactDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-											  Set<org.apache.juddi.model.ContactDescr> modelDescList,
+											  List<org.apache.juddi.model.ContactDescr> modelDescList,
 											  org.apache.juddi.model.Contact modelContact,
 											  String businessKey) 
 				   throws DispositionReportFaultMessage {
@@ -140,7 +140,7 @@
 	}
 	
 	public static void mapPersonNames(List<org.uddi.api_v3.PersonName> apiPersonNameList, 
-			  						  Set<org.apache.juddi.model.PersonName> modelPersonNameList,
+			  						  List<org.apache.juddi.model.PersonName> modelPersonNameList,
 			  						  org.apache.juddi.model.Contact modelContact,
 			  						  String businessKey) 
 				throws DispositionReportFaultMessage {
@@ -152,7 +152,7 @@
 	}
 	
 	public static void mapContactEmails(List<org.uddi.api_v3.Email> apiEmailList, 
-										Set<org.apache.juddi.model.Email> modelEmailList,
+										List<org.apache.juddi.model.Email> modelEmailList,
 										org.apache.juddi.model.Contact modelContact,
 										String businessKey) 
 				   throws DispositionReportFaultMessage {
@@ -164,7 +164,7 @@
 	}
 	
 	public static void mapContactPhones(List<org.uddi.api_v3.Phone> apiPhoneList, 
-										Set<org.apache.juddi.model.Phone> modelPhoneList,
+										List<org.apache.juddi.model.Phone> modelPhoneList,
 										org.apache.juddi.model.Contact modelContact,
 										String businessKey) 
 				   throws DispositionReportFaultMessage {
@@ -176,7 +176,7 @@
 	}
 	
 	public static void mapContactAddresses(List<org.uddi.api_v3.Address> apiAddressList, 
-										   Set<org.apache.juddi.model.Address> modelAddressList,
+										   List<org.apache.juddi.model.Address> modelAddressList,
 										   org.apache.juddi.model.Contact modelContact,
 										   String businessKey) 
 				   throws DispositionReportFaultMessage {
@@ -339,15 +339,15 @@
 			for (JAXBElement<?> elem : apiCategoryList) {
 				
 				if (elem.getValue() instanceof org.uddi.api_v3.KeyedReference) {
-					Set<org.apache.juddi.model.KeyedReference> modelKeyedReferences=modelCategoryBag.getKeyedReferences();
-					modelKeyedReferences.clear();
+					List<org.apache.juddi.model.KeyedReference> modelKeyedReferences=modelCategoryBag.getKeyedReferences();
+					//modelKeyedReferences.clear();
 					org.uddi.api_v3.KeyedReference apiKeyedReference = (org.uddi.api_v3.KeyedReference)elem.getValue();
 					modelKeyedReferences.add(new org.apache.juddi.model.KeyedReference(modelCategoryBag, 
 						apiKeyedReference.getTModelKey(), apiKeyedReference.getKeyName(), apiKeyedReference.getKeyValue()));
 				}
 				if (elem.getValue() instanceof org.uddi.api_v3.KeyedReferenceGroup) {
 					Set<org.apache.juddi.model.KeyedReferenceGroup> modelKeyedReferenceGroups=modelCategoryBag.getKeyedReferenceGroups();
-					modelKeyedReferenceGroups.clear();
+					//modelKeyedReferenceGroups.clear();
 					org.uddi.api_v3.KeyedReferenceGroup apiKeyedReferenceGroup = (org.uddi.api_v3.KeyedReferenceGroup) elem.getValue();
 					org.apache.juddi.model.KeyedReferenceGroup modelKeyedReferenceGroup = new org.apache.juddi.model.KeyedReferenceGroup(modelCategoryBag,apiKeyedReferenceGroup.getTModelKey());
 					modelKeyedReferenceGroups.add(modelKeyedReferenceGroup);
@@ -441,7 +441,7 @@
 	}
 
 	public static void mapTModelDescriptions(List<org.uddi.api_v3.Description> apiDescList, 
-											 Set<org.apache.juddi.model.TmodelDescr> modelDescList,
+											 List<org.apache.juddi.model.TmodelDescr> modelDescList,
 											 org.apache.juddi.model.Tmodel modelTModel) 
 				   throws DispositionReportFaultMessage {
 		modelDescList.clear();
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
index 16b097e..6717dbc 100644
--- a/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
+++ b/juddi-core/src/main/java/org/apache/juddi/mapping/MappingModelToApi.java
@@ -66,7 +66,7 @@
 	
 	}
 
-	public static void mapBusinessNames(Set<org.apache.juddi.model.BusinessName> modelNameList, 
+	public static void mapBusinessNames(List<org.apache.juddi.model.BusinessName> modelNameList, 
 										List<org.uddi.api_v3.Name> apiNameList) 
 				   throws DispositionReportFaultMessage {
 		apiNameList.clear();
@@ -79,7 +79,7 @@
 		}
 	}
 
-	public static void mapBusinessDescriptions(Set<org.apache.juddi.model.BusinessDescr> modelDescList, 
+	public static void mapBusinessDescriptions(List<org.apache.juddi.model.BusinessDescr> modelDescList, 
 											   List<org.uddi.api_v3.Description> apiDescList) 
 				   throws DispositionReportFaultMessage {
 		apiDescList.clear();
@@ -92,7 +92,7 @@
 		}
 	}
 
-	public static void mapDiscoveryUrls(Set<org.apache.juddi.model.DiscoveryUrl> modelDiscUrlList, 
+	public static void mapDiscoveryUrls(List<org.apache.juddi.model.DiscoveryUrl> modelDiscUrlList, 
 										org.uddi.api_v3.DiscoveryURLs apiDiscUrls,
 										org.uddi.api_v3.BusinessEntity apiBusinessEntity) 
 				   throws DispositionReportFaultMessage {
@@ -111,7 +111,7 @@
 		apiBusinessEntity.setDiscoveryURLs(apiDiscUrls);
 	}
 	
-	public static void mapContacts(Set<org.apache.juddi.model.Contact> modelContactList, 
+	public static void mapContacts(List<org.apache.juddi.model.Contact> modelContactList, 
 								   org.uddi.api_v3.Contacts apiContacts,
 								   org.uddi.api_v3.BusinessEntity apiBusinessEntity) 
 				   throws DispositionReportFaultMessage {
@@ -136,7 +136,7 @@
 		apiBusinessEntity.setContacts(apiContacts);
 	}
 
-	public static void mapContactDescriptions(Set<org.apache.juddi.model.ContactDescr> modelDescList, 
+	public static void mapContactDescriptions(List<org.apache.juddi.model.ContactDescr> modelDescList, 
 											  List<org.uddi.api_v3.Description> apiDescList) 
 	throws DispositionReportFaultMessage {
 		apiDescList.clear();
@@ -149,7 +149,7 @@
 		}
 	}
 	
-	public static void mapPersonNames(Set<org.apache.juddi.model.PersonName> modelPersonNameList, 
+	public static void mapPersonNames(List<org.apache.juddi.model.PersonName> modelPersonNameList, 
 			  List<org.uddi.api_v3.PersonName> apiPersonNameList) 
 	throws DispositionReportFaultMessage {
 		apiPersonNameList.clear();
@@ -162,7 +162,7 @@
 		}
 	}
 
-	public static void mapContactEmails(Set<org.apache.juddi.model.Email> modelEmailList, 
+	public static void mapContactEmails(List<org.apache.juddi.model.Email> modelEmailList, 
 										List<org.uddi.api_v3.Email> apiEmailList) 
 				   throws DispositionReportFaultMessage {
 		apiEmailList.clear();
@@ -175,7 +175,7 @@
 		}
 	}
 	
-	public static void mapContactPhones(Set<org.apache.juddi.model.Phone> modelPhoneList, 
+	public static void mapContactPhones(List<org.apache.juddi.model.Phone> modelPhoneList, 
 										List<org.uddi.api_v3.Phone> apiPhoneList) 
 				   throws DispositionReportFaultMessage {
 		apiPhoneList.clear();
@@ -188,7 +188,7 @@
 		}
 	}
 
-	public static void mapContactAddresses(Set<org.apache.juddi.model.Address> modelAddressList, 
+	public static void mapContactAddresses(List<org.apache.juddi.model.Address> modelAddressList, 
 										   List<org.uddi.api_v3.Address> apiAddressList) 
 				   throws DispositionReportFaultMessage {
 		apiAddressList.clear();
@@ -451,7 +451,7 @@
 		org.uddi.api_v3.Name apiName = new org.uddi.api_v3.Name();
 		apiName.setValue(modelTModel.getName());
 		apiTModel.setName(apiName);
-		apiTModel.setDeleted(modelTModel.isDeleted());
+		apiTModel.setDeleted(modelTModel.getDeleted());
 		
 		mapTModelDescriptions(modelTModel.getTmodelDescrs(), apiTModel.getDescription());
 
@@ -462,7 +462,7 @@
 
 	}
 
-	public static void mapTModelDescriptions(Set<org.apache.juddi.model.TmodelDescr> modelDescList, 
+	public static void mapTModelDescriptions(List<org.apache.juddi.model.TmodelDescr> modelDescList, 
 											 List<org.uddi.api_v3.Description> apiDescList) 
 			    throws DispositionReportFaultMessage {
 		apiDescList.clear();
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
index ebb6814..5165d22 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryBag.java
@@ -30,6 +30,10 @@
 	private static final long serialVersionUID = 1L;
 	private BusinessEntity businessEntity;
 	
+	public BusinessCategoryBag() {
+		super();
+	}
+	
 	public BusinessCategoryBag(BusinessEntity businessEntity) {
 		super();
 		this.businessEntity = businessEntity;
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index e98d5fc..1eed195 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -15,8 +15,10 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import javax.persistence.CascadeType;
@@ -39,15 +41,15 @@
 
 	private static final long serialVersionUID = 1L;
 	private UddiEntityPublisher publisher;
-	private Set<Contact> contacts = new HashSet<Contact>(0);
+	private List<Contact> contacts = new ArrayList<Contact>(0);
 	private Set<BusinessIdentifier> businessIdentifiers = new HashSet<BusinessIdentifier>(0);
 	private Set<PublisherAssertion> publisherAssertionsForFromKey = new HashSet<PublisherAssertion>(0);
-	private Set<DiscoveryUrl> discoveryUrls = new HashSet<DiscoveryUrl>(0);
-	private Set<BusinessName> businessNames = new HashSet<BusinessName>(0);
+	private List<DiscoveryUrl> discoveryUrls = new ArrayList<DiscoveryUrl>(0);
+	private List<BusinessName> businessNames = new ArrayList<BusinessName>(0);
 	private Set<PublisherAssertion> publisherAssertionsForToKey = new HashSet<PublisherAssertion>(0);
 	private BusinessCategoryBag categoryBag;
 	private Set<BusinessService> businessServices = new HashSet<BusinessService>(0);
-	private Set<BusinessDescr> businessDescrs = new HashSet<BusinessDescr>(0);
+	private List<BusinessDescr> businessDescrs = new ArrayList<BusinessDescr>(0);
 
 	public BusinessEntity() {
 	}
@@ -58,14 +60,14 @@
 	}
 	public BusinessEntity(String entityKey, String authorizedName, 
 			UddiEntityPublisher publisher, String operator,
-			Date lastUpdate, Set<Contact> contacts,
+			Date lastUpdate, List<Contact> contacts,
 			Set<BusinessIdentifier> businessIdentifiers,
 			Set<PublisherAssertion> publisherAssertionsForFromKey,
-			Set<DiscoveryUrl> discoveryUrls, Set<BusinessName> businessNames,
+			List<DiscoveryUrl> discoveryUrls, List<BusinessName> businessNames,
 			Set<PublisherAssertion> publisherAssertionsForToKey,
 			BusinessCategoryBag categoryBag,
 			Set<BusinessService> businessServices,
-			Set<BusinessDescr> businessDescrs) {
+			List<BusinessDescr> businessDescrs) {
 		this.entityKey = entityKey;
 		this.publisher = publisher;
 		this.lastUpdate = lastUpdate;
@@ -91,10 +93,10 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
 	@OrderBy
-	public Set<Contact> getContacts() {
+	public List<Contact> getContacts() {
 		return this.contacts;
 	}
-	public void setContacts(Set<Contact> contacts) {
+	public void setContacts(List<Contact> contacts) {
 		this.contacts = contacts;
 	}
 
@@ -119,19 +121,19 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
 	@OrderBy
-	public Set<DiscoveryUrl> getDiscoveryUrls() {
+	public List<DiscoveryUrl> getDiscoveryUrls() {
 		return this.discoveryUrls;
 	}
-	public void setDiscoveryUrls(Set<DiscoveryUrl> discoveryUrls) {
+	public void setDiscoveryUrls(List<DiscoveryUrl> discoveryUrls) {
 		this.discoveryUrls = discoveryUrls;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
 	@OrderBy
-	public Set<BusinessName> getBusinessNames() {
+	public List<BusinessName> getBusinessNames() {
 		return this.businessNames;
 	}
-	public void setBusinessNames(Set<BusinessName> businessNames) {
+	public void setBusinessNames(List<BusinessName> businessNames) {
 		this.businessNames = businessNames;
 	}
 
@@ -162,10 +164,10 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
 	@OrderBy
-	public Set<BusinessDescr> getBusinessDescrs() {
+	public List<BusinessDescr> getBusinessDescrs() {
 		return this.businessDescrs;
 	}
-	public void setBusinessDescrs(Set<BusinessDescr> businessDescrs) {
+	public void setBusinessDescrs(List<BusinessDescr> businessDescrs) {
 		this.businessDescrs = businessDescrs;
 	}
 
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
index 3a0994d..b34357f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
@@ -15,7 +15,9 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import javax.persistence.CascadeType;
@@ -27,6 +29,7 @@
 import javax.persistence.Inheritance;
 import javax.persistence.InheritanceType;
 import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
 import javax.persistence.Table;
 
 /**
@@ -40,7 +43,7 @@
 	
 	private static final long serialVersionUID = 1L;
 	private Long id;
-	private Set<KeyedReference> keyedReferences = new HashSet<KeyedReference>(0);
+	private List<KeyedReference> keyedReferences = new ArrayList<KeyedReference>(0);
 	private Set<KeyedReferenceGroup> keyedReferenceGroups = new HashSet<KeyedReferenceGroup>(0);
 	
 	public CategoryBag() {
@@ -57,10 +60,11 @@
 	}
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""categoryBag"")
-	public Set<KeyedReference> getKeyedReferences() {
+	@OrderBy
+	public List<KeyedReference> getKeyedReferences() {
 		return keyedReferences;
 	}
-	public void setKeyedReferences(Set<KeyedReference> keyedReferences) {
+	public void setKeyedReferences(List<KeyedReference> keyedReferences) {
 		this.keyedReferences = keyedReferences;
 	}
 	
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
index 512d6c5..f001429 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
@@ -15,7 +15,9 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import javax.persistence.CascadeType;
@@ -43,11 +45,11 @@
 	private Long id;
 	private BusinessEntity businessEntity;
 	private String useType;
-	private Set<PersonName> personNames = new HashSet<PersonName>(0);
-	private Set<ContactDescr> contactDescrs = new HashSet<ContactDescr>(0);
-	private Set<Email> emails = new HashSet<Email>(0);
-	private Set<Phone> phones = new HashSet<Phone>(0);
-	private Set<Address> addresses = new HashSet<Address>(0);
+	private List<PersonName> personNames = new ArrayList<PersonName>(0);
+	private List<ContactDescr> contactDescrs = new ArrayList<ContactDescr>(0);
+	private List<Email> emails = new ArrayList<Email>(0);
+	private List<Phone> phones = new ArrayList<Phone>(0);
+	private List<Address> addresses = new ArrayList<Address>(0);
 
 	public Contact() {
 	}
@@ -56,8 +58,8 @@
 		this.businessEntity = businessEntity;
 	}
 	public Contact(BusinessEntity businessEntity, String useType,
-			Set<PersonName> personNames, Set<ContactDescr> contactDescrs,
-			Set<Email> emails, Set<Phone> phones, Set<Address> addresses) {
+			List<PersonName> personNames, List<ContactDescr> contactDescrs,
+			List<Email> emails, List<Phone> phones, List<Address> addresses) {
 		this.businessEntity = businessEntity;
 		this.useType = useType;
 		this.personNames = personNames;
@@ -95,46 +97,46 @@
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
 	@OrderBy
-	public Set<PersonName> getPersonNames() {
+	public List<PersonName> getPersonNames() {
 		return this.personNames;
 	}
-	public void setPersonNames(Set<PersonName> personNames) {
+	public void setPersonNames(List<PersonName> personNames) {
 		this.personNames = personNames;
 	}
 	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
 	@OrderBy
-	public Set<ContactDescr> getContactDescrs() {
+	public List<ContactDescr> getContactDescrs() {
 		return this.contactDescrs;
 	}
-	public void setContactDescrs(Set<ContactDescr> contactDescrs) {
+	public void setContactDescrs(List<ContactDescr> contactDescrs) {
 		this.contactDescrs = contactDescrs;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
 	@OrderBy
-	public Set<Email> getEmails() {
+	public List<Email> getEmails() {
 		return this.emails;
 	}
-	public void setEmails(Set<Email> emails) {
+	public void setEmails(List<Email> emails) {
 		this.emails = emails;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
 	@OrderBy
-	public Set<Phone> getPhones() {
+	public List<Phone> getPhones() {
 		return this.phones;
 	}
-	public void setPhones(Set<Phone> phones) {
+	public void setPhones(List<Phone> phones) {
 		this.phones = phones;
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
 	@OrderBy
-	public Set<Address> getAddresses() {
+	public List<Address> getAddresses() {
 		return this.addresses;
 	}
-	public void setAddresses(Set<Address> addresses) {
+	public void setAddresses(List<Address> addresses) {
 		this.addresses = addresses;
 	}
 
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
index e89c16a..37624cd 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/KeyedReference.java
@@ -50,7 +50,7 @@
 	
 	public KeyedReference(KeyedReferenceGroup keyedReferenceGroup, String tmodelKeyRef,
 			String keyName, String keyValue) {
-		//this.keyedReferenceGroup = keyedReferenceGroup;
+		this.keyedReferenceGroup = keyedReferenceGroup;
 		this.tmodelKeyRef = tmodelKeyRef;
 		this.keyName = keyName;
 		this.keyValue = keyValue;
@@ -58,7 +58,7 @@
 	
 	public KeyedReference(CategoryBag categoryBag, String tmodelKeyRef,
 			String keyName, String keyValue) {
-		//this.categoryBag = categoryBag;
+		this.categoryBag = categoryBag;
 		this.tmodelKeyRef = tmodelKeyRef;
 		this.keyName = keyName;
 		this.keyValue = keyValue;
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
index 5c11dba..a03a07b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
@@ -15,8 +15,10 @@
  * limitations under the License.
  */
 
+import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import javax.persistence.CascadeType;
@@ -45,7 +47,7 @@
 	private String langCode;
 	private boolean deleted;
 	private Set<TmodelOverview> overviewDocs = new HashSet<TmodelOverview>(0);
-	private Set<TmodelDescr> tmodelDescrs = new HashSet<TmodelDescr>(0);
+	private List<TmodelDescr> tmodelDescrs = new ArrayList<TmodelDescr>(0);
 	private Set<TmodelDocDescr> tmodelDocDescrs = new HashSet<TmodelDocDescr>(0);
 	private Set<TmodelIdentifier> tmodelIdentifiers = new HashSet<TmodelIdentifier>(0);
 	private TmodelCategoryBag categoryBag;
@@ -61,7 +63,7 @@
 	public Tmodel(String entityKey, String authorizedName, UddiEntityPublisher publisher, String operator,
 			String name, String langCode, boolean deleted, Date lastUpdate,
 			Set<TmodelOverview> overviewDocs,
-			Set<TmodelDescr> tmodelDescrs, Set<TmodelDocDescr> tmodelDocDescrs,
+			List<TmodelDescr> tmodelDescrs, Set<TmodelDocDescr> tmodelDocDescrs,
 			Set<TmodelIdentifier> tmodelIdentifiers,
 			TmodelCategoryBag categoryBag) {
 		this.entityKey = entityKey;
@@ -103,7 +105,7 @@
 	}
 
 	@Column(name = ""deleted"")
-	public boolean isDeleted() {
+	public boolean getDeleted() {
 		return deleted;
 	}
 	public void setDeleted(boolean deleted) {
@@ -121,10 +123,11 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""tmodel"")
-	public Set<TmodelDescr> getTmodelDescrs() {
+	@OrderBy
+	public List<TmodelDescr> getTmodelDescrs() {
 		return this.tmodelDescrs;
 	}
-	public void setTmodelDescrs(Set<TmodelDescr> tmodelDescrs) {
+	public void setTmodelDescrs(List<TmodelDescr> tmodelDescrs) {
 		this.tmodelDescrs = tmodelDescrs;
 	}
 
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
index ea46f05..9b72445 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryBag.java
@@ -30,6 +30,8 @@
 	private static final long serialVersionUID = 1L;
 	private Tmodel tmodel;
 	
+	public TmodelCategoryBag() {}
+	
 	public TmodelCategoryBag(Tmodel tmodel) {
 		super();
 		this.tmodel = tmodel;
"
juddi,edc7f9b384dd672f2c3ffc7bf14b9807861d8616,"JUDDI-142, Restructuring the unittests and fixing the ordering issue.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@726619 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-15 05:50:42,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
index 3dce4fd..b217206 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/UddiEntityPublisher.java
@@ -82,8 +82,10 @@
 		Iterator<KeyGeneratorKey> keyGenItr = keyGeneratorKeys.iterator();
 		while(keyGenItr.hasNext()) {
 			KeyGeneratorKey keyGen = keyGenItr.next();
-			if (keyGen.getKeygenTModelKey().equalsIgnoreCase(keygenTModelKey))
+			if (keyGen.getKeygenTModelKey().equalsIgnoreCase(keygenTModelKey)) {
+				keyGenItr.remove();
 				keyGeneratorKeys.remove(keyGen);
+			}
 		}
 	}
 	
@@ -100,10 +102,10 @@
 		if (key == null)
 			return false;
 
-		String keyPartition = key.substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR) - 1);
+		String keyPartition = key.substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
 		
 		for (KeyGeneratorKey keyGenKey : keyGeneratorKeys) {
-			String keyGenPartition = keyGenKey.getKeygenTModelKey().substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR) - 1);
+			String keyGenPartition = keyGenKey.getKeygenTModelKey().substring(0, key.lastIndexOf(KeyGenerator.PARTITION_SEPARATOR));
 			if (keyGenPartition.equalsIgnoreCase(keyPartition))
 				return true;
 		}
"
juddi,c298945c2d7423090766a709e4b2f05085e1324f,"JUDDI-128 fixing connection leak

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@723580 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-05 04:23:05,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/RegistryEngine.java b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
index fc2a073..a957683 100755
--- a/src/main/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
@@ -245,8 +245,9 @@
       String tablePrefix = Config.getStringProperty(
               RegistryEngine.PROPNAME_TABLE_PREFIX,RegistryEngine.DEFAULT_TABLE_PREFIX);
       
+      Connection conn=null;
       try {
-          Connection conn = ConnectionManager.acquireConnection();
+          conn = ConnectionManager.acquireConnection();
           boolean create = false;
 
           Statement st = conn.createStatement();
@@ -270,6 +271,12 @@
           }
       } catch (Exception e) {
           log.error(""Could not create jUDDI database "" + e.getMessage(), e);
+      } finally {
+    	  if (conn!=null) {
+    		  try {
+    			  if (!conn.isClosed()) conn.close();
+    		  } catch (SQLException e) {}
+    	  }
       }
   }
   
"
juddi,ac2d64c5e6113e9e55b91f154a42d50b3e47d83a,"JUDDI-128 fixing connection leak

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/juddi-2.0rc6@723579 13f79535-47bb-0310-9956-ffa450edef68
",2008-12-05 04:22:24,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/RegistryEngine.java b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
index fc2a073..a957683 100755
--- a/src/main/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
@@ -245,8 +245,9 @@
       String tablePrefix = Config.getStringProperty(
               RegistryEngine.PROPNAME_TABLE_PREFIX,RegistryEngine.DEFAULT_TABLE_PREFIX);
       
+      Connection conn=null;
       try {
-          Connection conn = ConnectionManager.acquireConnection();
+          conn = ConnectionManager.acquireConnection();
           boolean create = false;
 
           Statement st = conn.createStatement();
@@ -270,6 +271,12 @@
           }
       } catch (Exception e) {
           log.error(""Could not create jUDDI database "" + e.getMessage(), e);
+      } finally {
+    	  if (conn!=null) {
+    		  try {
+    			  if (!conn.isClosed()) conn.close();
+    		  } catch (SQLException e) {}
+    	  }
       }
   }
   
"
juddi,a29a60021aa1678ebea1100c4aa70ef35de36b24,"JUDDI-162
Don't fail on subscription API - we already have tests there.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721733 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:57:32,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
index a6c3df7..cdd003d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionImpl.java
@@ -31,8 +31,11 @@
 import org.uddi.sub_v3.SubscriptionResultsList;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDISubscriptionPortType;
+import org.apache.juddi.error.ErrorMessage;
+import org.apache.juddi.error.FatalErrorException;
 import org.apache.juddi.model.UddiEntityPublisher;
 import org.apache.juddi.query.PersistenceManager;
+import org.apache.juddi.validation.ValidateSubscription;
 
 
 @WebService(serviceName=""UDDISubscriptionService"", 
@@ -59,7 +62,7 @@
 
 	public SubscriptionResultsList getSubscriptionResults(
 			GetSubscriptionResults body) throws DispositionReportFaultMessage {
-        String authInfo = body.getAuthInfo();
+		String authInfo = body.getAuthInfo();
 		
 		EntityManager em = PersistenceManager.getEntityManager();
         EntityTransaction tx = em.getTransaction();
@@ -73,7 +76,7 @@
 
 	public List<Subscription> getSubscriptions(String authInfo)
 			throws DispositionReportFaultMessage {
-        EntityManager em = PersistenceManager.getEntityManager();
+		EntityManager em = PersistenceManager.getEntityManager();
         EntityTransaction tx = em.getTransaction();
         tx.begin();
         
@@ -91,7 +94,6 @@
 	public void saveSubscription(String authInfo,
 			Holder<List<Subscription>> subscription)
 			throws DispositionReportFaultMessage {
-		
         EntityManager em = PersistenceManager.getEntityManager();
         EntityTransaction tx = em.getTransaction();
         tx.begin();
@@ -104,14 +106,12 @@
 	public void saveSubscription(String authInfo,
 			SaveSubscription subscription)
 			throws DispositionReportFaultMessage {
-		
+
         EntityManager em = PersistenceManager.getEntityManager();
         EntityTransaction tx = em.getTransaction();
         tx.begin();
                 
         tx.commit();
         em.close();
-
 	}
-
 }
"
juddi,a29a60021aa1678ebea1100c4aa70ef35de36b24,"JUDDI-162
Don't fail on subscription API - we already have tests there.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721733 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:57:32,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
index 04105b1..4d86171 100644
--- a/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/validation/ValidateSubscription.java
@@ -1,5 +1,11 @@
 package org.apache.juddi.validation;
 
-public class ValidateSubscription {
+import org.apache.juddi.error.ErrorMessage;
+import org.apache.juddi.error.FatalErrorException;
+import org.uddi.v3_service.DispositionReportFaultMessage;
 
+public class ValidateSubscription {
+	public static void unsupportedAPICall() throws DispositionReportFaultMessage {
+		throw new FatalErrorException(new ErrorMessage(""This API is not supported in this release of jUDDI""));
+	}
 }
"
juddi,9c33139e0868a17c59d64d1dd2d053e20de87eba,"JUDDI-162
Block off the unimplemented API's (Replication, SubscriptionListener, CustodyTransfer, ValueSetValidation, ValueSetCaching).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721725 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:40:29,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
index b4376b4..ca88792 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDICustodyTransferImpl.java
@@ -21,6 +21,7 @@
 import javax.xml.datatype.XMLGregorianCalendar;
 import javax.xml.ws.Holder;
 
+import org.apache.juddi.validation.ValidateCustodyTransfer;
 import org.uddi.custody_v3.DiscardTransferToken;
 import org.uddi.custody_v3.KeyBag;
 import org.uddi.custody_v3.TransferEntities;
@@ -33,21 +34,17 @@
 
 	public void discardTransferToken(DiscardTransferToken body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateCustodyTransfer.unsupportedAPICall();
 	}
 
 	public void getTransferToken(String authInfo, KeyBag keyBag,
 			Holder<String> nodeID, Holder<XMLGregorianCalendar> expirationTime,
 			Holder<byte[]> opaqueToken) throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateCustodyTransfer.unsupportedAPICall();	
 	}
 
 	public void transferEntities(TransferEntities body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateCustodyTransfer.unsupportedAPICall();
 	}
-
 }
"
juddi,9c33139e0868a17c59d64d1dd2d053e20de87eba,"JUDDI-162
Block off the unimplemented API's (Replication, SubscriptionListener, CustodyTransfer, ValueSetValidation, ValueSetCaching).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721725 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:40:29,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
index 5436e14..f702486 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIReplicationImpl.java
@@ -22,6 +22,7 @@
 
 import javax.jws.WebService;
 
+import org.apache.juddi.validation.ValidateReplication;
 import org.uddi.repl_v3.ChangeRecord;
 import org.uddi.repl_v3.ChangeRecordIDType;
 import org.uddi.repl_v3.DoPing;
@@ -37,7 +38,7 @@
 
 
 	public String doPing(DoPing body) throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
+		ValidateReplication.unsupportedAPICall();
 		return null;
 	}
 
@@ -47,29 +48,26 @@
 			BigInteger responseLimitCount,
 			HighWaterMarkVectorType responseLimitVector)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
+		ValidateReplication.unsupportedAPICall();
 		return null;
 	}
 
 
 	public List<ChangeRecordIDType> getHighWaterMarks()
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
+		ValidateReplication.unsupportedAPICall();
 		return null;
 	}
 
 
 	public void notifyChangeRecordsAvailable(NotifyChangeRecordsAvailable body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateReplication.unsupportedAPICall();
 	}
 
 
 	public void transferCustody(TransferCustody body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateReplication.unsupportedAPICall();
 	}
-
 }
"
juddi,9c33139e0868a17c59d64d1dd2d053e20de87eba,"JUDDI-162
Block off the unimplemented API's (Replication, SubscriptionListener, CustodyTransfer, ValueSetValidation, ValueSetCaching).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721725 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:40:29,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
index 7f8ec88..628e6a8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDISubscriptionListenerImpl.java
@@ -19,6 +19,7 @@
 
 import javax.jws.WebService;
 
+import org.apache.juddi.validation.ValidateSubscriptionListener;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.subr_v3.NotifySubscriptionListener;
 import org.uddi.v3_service.DispositionReportFaultMessage;
@@ -29,12 +30,10 @@
 public class UDDISubscriptionListenerImpl implements
 		UDDISubscriptionListenerPortType {
 
-
 	public DispositionReport notifySubscriptionListener(
 			NotifySubscriptionListener body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
+		ValidateSubscriptionListener.unsupportedAPICall();
 		return null;
 	}
-
 }
"
juddi,9c33139e0868a17c59d64d1dd2d053e20de87eba,"JUDDI-162
Block off the unimplemented API's (Replication, SubscriptionListener, CustodyTransfer, ValueSetValidation, ValueSetCaching).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721725 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:40:29,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
index 56d6e69..85b6819 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetCachingImpl.java
@@ -22,6 +22,7 @@
 import javax.jws.WebService;
 import javax.xml.ws.Holder;
 
+import org.apache.juddi.validation.ValidateValueSetCaching;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIValueSetCachingPortType;
 import org.uddi.vscache_v3.ValidValue;
@@ -29,13 +30,9 @@
 @WebService(serviceName=""UDDIValueSetCachingService"", 
 			endpointInterface=""org.uddi.v3_service.UDDIValueSetCachingPortType"")
 public class UDDIValueSetCachingImpl implements UDDIValueSetCachingPortType {
-
-
 	public void getAllValidValues(String authInfo, String modelKey,
 			Holder<String> chunkToken, Holder<List<ValidValue>> validValue)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
-
+		ValidateValueSetCaching.unsupportedAPICall();
 	}
-
 }
"
juddi,9c33139e0868a17c59d64d1dd2d053e20de87eba,"JUDDI-162
Block off the unimplemented API's (Replication, SubscriptionListener, CustodyTransfer, ValueSetValidation, ValueSetCaching).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@721725 13f79535-47bb-0310-9956-ffa450edef68
",2008-11-29 21:40:29,Thomas Cunningham,"diff --git a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
index 217091e..14257e4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/api/impl/UDDIValueSetValidationImpl.java
@@ -19,6 +19,7 @@
 
 import javax.jws.WebService;
 
+import org.apache.juddi.validation.ValidateValueSetValidation;
 import org.uddi.api_v3.DispositionReport;
 import org.uddi.v3_service.DispositionReportFaultMessage;
 import org.uddi.v3_service.UDDIValueSetValidationPortType;
@@ -28,12 +29,9 @@
 			endpointInterface=""org.uddi.v3_service.UDDIValueSetValidationPortType"")
 public class UDDIValueSetValidationImpl implements
 		UDDIValueSetValidationPortType {
-
-
 	public DispositionReport validateValues(ValidateValues body)
 			throws DispositionReportFaultMessage {
-		// TODO Auto-generated method stub
+		ValidateValueSetValidation.unsupportedAPICall();
 		return null;
 	}
-
 }
"
juddi,9c226f88157e69197521975e7e9d17fccc6482db,"JUDDI-142:  Added OrderBy to collections of these two classes to test the solution for 142.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@699034 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-25 17:58:14,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index dc627d7..e64ab69 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -26,6 +26,7 @@
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
 import javax.persistence.Table;
+import javax.persistence.OrderBy;
 
 /**
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
@@ -119,6 +120,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<Contact> getContacts() {
 		return this.contacts;
 	}
@@ -127,6 +129,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<BusinessIdentifier> getBusinessIdentifiers() {
 		return this.businessIdentifiers;
 	}
@@ -145,6 +148,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<DiscoveryUrl> getDiscoveryUrls() {
 		return this.discoveryUrls;
 	}
@@ -153,6 +157,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<BusinessName> getBusinessNames() {
 		return this.businessNames;
 	}
@@ -170,6 +175,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<BusinessCategory> getBusinessCategories() {
 		return this.businessCategories;
 	}
@@ -186,6 +192,7 @@
 	}
 
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""businessEntity"")
+	@OrderBy
 	public Set<BusinessDescr> getBusinessDescrs() {
 		return this.businessDescrs;
 	}
"
juddi,9c226f88157e69197521975e7e9d17fccc6482db,"JUDDI-142:  Added OrderBy to collections of these two classes to test the solution for 142.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@699034 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-25 17:58:14,Jeffrey Faath,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
index 7f749a9..ba6aa3e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
@@ -29,6 +29,7 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.Table;
+import javax.persistence.OrderBy;
 
 /**
  * @author <a href=""mailto:kurt@apache.org"">Kurt T Stam</a>
@@ -77,17 +78,15 @@
 	public ContactId getId() {
 		return this.id;
 	}
-
 	public void setId(ContactId id) {
 		this.id = id;
 	}
+
 	@ManyToOne(fetch = FetchType.LAZY)
 	@JoinColumn(name = ""business_key"", nullable = false, insertable = false, updatable = false)
-
 	public BusinessEntity getBusinessEntity() {
 		return this.businessEntity;
 	}
-
 	public void setBusinessEntity(BusinessEntity businessEntity) {
 		this.businessEntity = businessEntity;
 	}
@@ -96,49 +95,50 @@
 	public String getUseType() {
 		return this.useType;
 	}
-
 	public void setUseType(String useType) {
 		this.useType = useType;
 	}
 
 	@Column(name = ""person_name"", nullable = false)
-
 	public String getPersonName() {
 		return this.personName;
 	}
-
 	public void setPersonName(String personName) {
 		this.personName = personName;
 	}
+	
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
+	@OrderBy
 	public Set<ContactDescr> getContactDescrs() {
 		return this.contactDescrs;
 	}
-
 	public void setContactDescrs(Set<ContactDescr> contactDescrs) {
 		this.contactDescrs = contactDescrs;
 	}
+
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
+	@OrderBy
 	public Set<Email> getEmails() {
 		return this.emails;
 	}
-
 	public void setEmails(Set<Email> emails) {
 		this.emails = emails;
 	}
+
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
+	@OrderBy
 	public Set<Phone> getPhones() {
 		return this.phones;
 	}
-
 	public void setPhones(Set<Phone> phones) {
 		this.phones = phones;
 	}
+
 	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = ""contact"")
+	@OrderBy
 	public Set<Address> getAddresses() {
 		return this.addresses;
 	}
-
 	public void setAddresses(Set<Address> addresses) {
 		this.addresses = addresses;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Address.java b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
index 4c407cb..8837f6a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Address.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Address.java
@@ -64,7 +64,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false)),
 			@AttributeOverride(name = ""addressId"", column = @Column(name = ""address_id"", nullable = false))})
 
@@ -106,7 +106,7 @@
 		this.sortCode = sortCode;
 	}
 
-	@Column(name = ""tmodel_key"", length = 41)
+	@Column(name = ""tmodel_key"", length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AddressId.java b/juddi-core/src/main/java/org/apache/juddi/model/AddressId.java
index f04db29..83b8672 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AddressId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AddressId.java
@@ -39,7 +39,7 @@
 		this.addressId = addressId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java b/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
index ecfc1b5..966a3aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AddressLine.java
@@ -59,7 +59,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false)),
 			@AttributeOverride(name = ""addressId"", column = @Column(name = ""address_id"", nullable = false)),
 			@AttributeOverride(name = ""addressLineId"", column = @Column(name = ""address_line_id"", nullable = false))})
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/AddressLineId.java b/juddi-core/src/main/java/org/apache/juddi/model/AddressLineId.java
index 6bacc53..94386d5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/AddressLineId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/AddressLineId.java
@@ -41,7 +41,7 @@
 		this.addressLineId = addressLineId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategory.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategory.java
index abc84e9..385f0c6 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategory.java
@@ -60,7 +60,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""categoryId"", column = @Column(name = ""category_id"", nullable = false))})
 
 	public BindingCategoryId getId() {
@@ -81,7 +81,7 @@
 		this.bindingTemplate = bindingTemplate;
 	}
 
-	@Column(name = ""tmodel_key_ref"", length = 41)
+	@Column(name = ""tmodel_key_ref"", length = 255)
 	public String getTmodelKeyRef() {
 		return this.tmodelKeyRef;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryId.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryId.java
index 13a4077..721d0b2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingCategoryId.java
@@ -36,7 +36,7 @@
 		this.categoryId = categoryId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
index 9b5bc1c..b9aa906 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescr.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""bindingDescrId"", column = @Column(name = ""binding_descr_id"", nullable = false))})
 
 	public BindingDescrId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescrId.java
index 1c0c15c..613588d 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingDescrId.java
@@ -36,7 +36,7 @@
 		this.bindingDescrId = bindingDescrId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
index 028fb21..c83b632 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BindingTemplate.java
@@ -71,7 +71,7 @@
 	}
 
 	@Id
-	@Column(name = ""binding_key"", unique = true, nullable = false, length = 41)
+	@Column(name = ""binding_key"", unique = true, nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategory.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategory.java
index e04c78f..de4e043 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategory.java
@@ -60,7 +60,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""categoryId"", column = @Column(name = ""category_id"", nullable = false))})
 
 	public BusinessCategoryId getId() {
@@ -81,7 +81,7 @@
 		this.businessEntity = businessEntity;
 	}
 
-	@Column(name = ""tmodel_key_ref"", length = 41)
+	@Column(name = ""tmodel_key_ref"", length = 255)
 	public String getTmodelKeyRef() {
 		return this.tmodelKeyRef;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryId.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryId.java
index b227fd4..2ce6032 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessCategoryId.java
@@ -36,7 +36,7 @@
 		this.categoryId = categoryId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
index d7308df..7d3c081 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescr.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""businessDescrId"", column = @Column(name = ""business_descr_id"", nullable = false))})
 
 	public BusinessDescrId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescrId.java
index 993d4e8..7637ac1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessDescrId.java
@@ -36,7 +36,7 @@
 		this.businessDescrId = businessDescrId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
index 5e5d9af..5a85eeb 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifier.java
@@ -60,7 +60,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""identifierId"", column = @Column(name = ""identifier_id"", nullable = false))})
 
 	public BusinessIdentifierId getId() {
@@ -81,7 +81,7 @@
 		this.businessEntity = businessEntity;
 	}
 
-	@Column(name = ""tmodel_key_ref"", length = 41)
+	@Column(name = ""tmodel_key_ref"", length = 255)
 	public String getTmodelKeyRef() {
 		return this.tmodelKeyRef;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifierId.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifierId.java
index 34e15e7..de0894f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifierId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessIdentifierId.java
@@ -36,7 +36,7 @@
 		this.identifierId = identifierId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
index 0d32567..4e57301 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessName.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""businessNameId"", column = @Column(name = ""business_name_id"", nullable = false))})
 
 	public BusinessNameId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessNameId.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessNameId.java
index f508178..946a654 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessNameId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessNameId.java
@@ -36,7 +36,7 @@
 		this.businessNameId = businessNameId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
index 54e975a..a2d1202 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessService.java
@@ -66,7 +66,7 @@
 	}
 
 	@Id
-	@Column(name = ""service_key"", unique = true, nullable = false, length = 41)
+	@Column(name = ""service_key"", unique = true, nullable = false, length = 255)
 	public String getServiceKey() {
 		return this.serviceKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
index ab7af07..28ad7f9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBag.java
@@ -41,8 +41,8 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""categoryBagKey"", column = @Column(name = ""category_bag_key"", nullable = false, length = 41)),
-			@AttributeOverride(name = ""tmodelKeyRef"", column = @Column(name = ""tmodel_key_ref"", length = 41))})
+			@AttributeOverride(name = ""categoryBagKey"", column = @Column(name = ""category_bag_key"", nullable = false, length = 255)),
+			@AttributeOverride(name = ""tmodelKeyRef"", column = @Column(name = ""tmodel_key_ref"", length = 255))})
 
 	public CategoryBagId getId() {
 		return this.id;
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagGroup.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagGroup.java
index 1214cff..8b5bfa8 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagGroup.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagGroup.java
@@ -53,7 +53,7 @@
 		this.bagGroupId = bagGroupId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
@@ -62,7 +62,7 @@
 		this.bindingKey = bindingKey;
 	}
 
-	@Column(name = ""category_bag_key"", nullable = false, length = 41)
+	@Column(name = ""category_bag_key"", nullable = false, length = 255)
 	public String getCategoryBagKey() {
 		return this.categoryBagKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagId.java b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagId.java
index ea23197..461f1ac 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/CategoryBagId.java
@@ -39,7 +39,7 @@
 		this.tmodelKeyRef = tmodelKeyRef;
 	}
 
-	@Column(name = ""category_bag_key"", nullable = false, length = 41)
+	@Column(name = ""category_bag_key"", nullable = false, length = 255)
 	public String getCategoryBagKey() {
 		return this.categoryBagKey;
 	}
@@ -48,7 +48,7 @@
 		this.categoryBagKey = categoryBagKey;
 	}
 
-	@Column(name = ""tmodel_key_ref"", length = 41)
+	@Column(name = ""tmodel_key_ref"", length = 255)
 	public String getTmodelKeyRef() {
 		return this.tmodelKeyRef;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
index 66e3230..7f749a9 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Contact.java
@@ -71,7 +71,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false))})
 
 	public ContactId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
index a44ea49..17ae845 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescr.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false)),
 			@AttributeOverride(name = ""contactDescrId"", column = @Column(name = ""contact_descr_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescrId.java
index a346cca..d1869e2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ContactDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ContactDescrId.java
@@ -38,7 +38,7 @@
 		this.contactDescrId = contactDescrId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ContactId.java b/juddi-core/src/main/java/org/apache/juddi/model/ContactId.java
index a8d6407..ce400e2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ContactId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ContactId.java
@@ -36,7 +36,7 @@
 		this.contactId = contactId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
index 35c97b9..8e76927 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrl.java
@@ -51,7 +51,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""discoveryUrlId"", column = @Column(name = ""discovery_url_id"", nullable = false))})
 
 	public DiscoveryUrlId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrlId.java b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrlId.java
index bf7da3a..b5f47a1 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrlId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/DiscoveryUrlId.java
@@ -36,7 +36,7 @@
 		this.discoveryUrlId = discoveryUrlId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Email.java b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
index 4bbb77b..7a9f55b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Email.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Email.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false)),
 			@AttributeOverride(name = ""emailId"", column = @Column(name = ""email_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/EmailId.java b/juddi-core/src/main/java/org/apache/juddi/model/EmailId.java
index 42eecfa..64564f2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/EmailId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/EmailId.java
@@ -38,7 +38,7 @@
 		this.emailId = emailId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
index d4a6ebe..a66b985 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescr.java
@@ -58,7 +58,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelInstanceInfoId"", column = @Column(name = ""tmodel_instance_info_id"", nullable = false)),
 			@AttributeOverride(name = ""instanceDetailsDescrId"", column = @Column(name = ""instance_details_descr_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescrId.java
index 1b4acfe..68dabd5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDescrId.java
@@ -39,7 +39,7 @@
 		this.instanceDetailsDescrId = instanceDetailsDescrId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
index 1baf918..19e1d45 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescr.java
@@ -58,7 +58,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelInstanceInfoId"", column = @Column(name = ""tmodel_instance_info_id"", nullable = false)),
 			@AttributeOverride(name = ""instanceDetailsDocDescrId"", column = @Column(name = ""instance_details_doc_descr_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescrId.java
index c6f4803..354b58c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/InstanceDetailsDocDescrId.java
@@ -39,7 +39,7 @@
 		this.instanceDetailsDocDescrId = instanceDetailsDocDescrId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Phone.java b/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
index c699635..cf041a2 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Phone.java
@@ -56,7 +56,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""businessKey"", column = @Column(name = ""business_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""contactId"", column = @Column(name = ""contact_id"", nullable = false)),
 			@AttributeOverride(name = ""phoneId"", column = @Column(name = ""phone_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PhoneId.java b/juddi-core/src/main/java/org/apache/juddi/model/PhoneId.java
index 8611be3..ed83dc5 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PhoneId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PhoneId.java
@@ -38,7 +38,7 @@
 		this.phoneId = phoneId;
 	}
 
-	@Column(name = ""business_key"", nullable = false, length = 41)
+	@Column(name = ""business_key"", nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
index 9694dcc..1c0d916 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertion.java
@@ -61,8 +61,8 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""fromKey"", column = @Column(name = ""from_key"", nullable = false, length = 41)),
-			@AttributeOverride(name = ""toKey"", column = @Column(name = ""to_key"", nullable = false, length = 41))})
+			@AttributeOverride(name = ""fromKey"", column = @Column(name = ""from_key"", nullable = false, length = 255)),
+			@AttributeOverride(name = ""toKey"", column = @Column(name = ""to_key"", nullable = false, length = 255))})
 
 	public PublisherAssertionId getId() {
 		return this.id;
@@ -93,7 +93,7 @@
 		this.businessEntityByFromKey = businessEntityByFromKey;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertionId.java b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertionId.java
index 8636474..ca6529e 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertionId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/PublisherAssertionId.java
@@ -36,7 +36,7 @@
 		this.toKey = toKey;
 	}
 
-	@Column(name = ""from_key"", nullable = false, length = 41)
+	@Column(name = ""from_key"", nullable = false, length = 255)
 	public String getFromKey() {
 		return this.fromKey;
 	}
@@ -45,7 +45,7 @@
 		this.fromKey = fromKey;
 	}
 
-	@Column(name = ""to_key"", nullable = false, length = 41)
+	@Column(name = ""to_key"", nullable = false, length = 255)
 	public String getToKey() {
 		return this.toKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategory.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategory.java
index c4e2aee..ab48cc4 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategory.java
@@ -60,7 +60,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""categoryId"", column = @Column(name = ""category_id"", nullable = false))})
 
 	public ServiceCategoryId getId() {
@@ -81,7 +81,7 @@
 		this.businessService = businessService;
 	}
 
-	@Column(name = ""tmodel_key_ref"", length = 41)
+	@Column(name = ""tmodel_key_ref"", length = 255)
 	public String getTmodelKeyRef() {
 		return this.tmodelKeyRef;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryId.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryId.java
index 19196d1..0066c84 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceCategoryId.java
@@ -36,7 +36,7 @@
 		this.categoryId = categoryId;
 	}
 
-	@Column(name = ""service_key"", nullable = false, length = 41)
+	@Column(name = ""service_key"", nullable = false, length = 255)
 	public String getServiceKey() {
 		return this.serviceKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
index 58135f3..743dc66 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescr.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""serviceDescrId"", column = @Column(name = ""service_descr_id"", nullable = false))})
 
 	public ServiceDescrId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescrId.java
index fc61a21..d68e41b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceDescrId.java
@@ -36,7 +36,7 @@
 		this.serviceDescrId = serviceDescrId;
 	}
 
-	@Column(name = ""service_key"", nullable = false, length = 41)
+	@Column(name = ""service_key"", nullable = false, length = 255)
 	public String getServiceKey() {
 		return this.serviceKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
index 7993d22..1d08902 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceName.java
@@ -57,7 +57,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""serviceKey"", column = @Column(name = ""service_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""serviceNameId"", column = @Column(name = ""service_name_id"", nullable = false))})
 
 	public ServiceNameId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/ServiceNameId.java b/juddi-core/src/main/java/org/apache/juddi/model/ServiceNameId.java
index 30b096e..b98b11f 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/ServiceNameId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/ServiceNameId.java
@@ -36,7 +36,7 @@
 		this.serviceNameId = serviceNameId;
 	}
 
-	@Column(name = ""service_key"", nullable = false, length = 41)
+	@Column(name = ""service_key"", nullable = false, length = 255)
 	public String getServiceKey() {
 		return this.serviceKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObject.java b/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObject.java
index e2993ec..272861b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObject.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObject.java
@@ -42,7 +42,7 @@
 	@EmbeddedId
 	@AttributeOverrides({
 			@AttributeOverride(name = ""subscribedObjectKey"", column = @Column(name = ""subscribed_object_key"", nullable = false)),
-			@AttributeOverride(name = ""subscriptionKey"", column = @Column(name = ""subscription_key"", nullable = false, length = 41))})
+			@AttributeOverride(name = ""subscriptionKey"", column = @Column(name = ""subscription_key"", nullable = false, length = 255))})
 
 	public SubscribedObjectId getId() {
 		return this.id;
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObjectId.java b/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObjectId.java
index 29bca99..c52ff07 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObjectId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/SubscribedObjectId.java
@@ -46,7 +46,7 @@
 		this.subscribedObjectKey = subscribedObjectKey;
 	}
 
-	@Column(name = ""subscription_key"", nullable = false, length = 41)
+	@Column(name = ""subscription_key"", nullable = false, length = 255)
 	public String getSubscriptionKey() {
 		return this.subscriptionKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
index 6337c8c..606a4aa 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Subscription.java
@@ -43,7 +43,7 @@
 	}
 
 	@Id
-	@Column(name = ""subscription_key"", unique = true, nullable = false, length = 41)
+	@Column(name = ""subscription_key"", unique = true, nullable = false, length = 255)
 	public String getSubscriptionKey() {
 		return this.subscriptionKey;
 	}
@@ -52,7 +52,7 @@
 		this.subscriptionKey = subscriptionKey;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
index 9e14faf..56d8d7b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/Tmodel.java
@@ -77,7 +77,7 @@
 	}
 
 	@Id
-	@Column(name = ""tmodel_key"", unique = true, nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", unique = true, nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategory.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategory.java
index 02cbff8..9e56920 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategory.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategory.java
@@ -58,7 +58,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""categoryId"", column = @Column(name = ""category_id"", nullable = false))})
 
 	public TmodelCategoryId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryId.java
index 5a15118..5851891 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelCategoryId.java
@@ -36,7 +36,7 @@
 		this.categoryId = categoryId;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
index 7a1b632..09c0e4a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescr.java
@@ -56,7 +56,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelDescrId"", column = @Column(name = ""tmodel_descr_id"", nullable = false))})
 
 	public TmodelDescrId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescrId.java
index a7e68de..c85dcbf 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDescrId.java
@@ -36,7 +36,7 @@
 		this.tmodelDescrId = tmodelDescrId;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescr.java
index 665127a..6410b2a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescr.java
@@ -56,7 +56,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelDocDescrId"", column = @Column(name = ""tmodel_doc_descr_id"", nullable = false))})
 
 	public TmodelDocDescrId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescrId.java
index 2941637..4cb7d53 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelDocDescrId.java
@@ -36,7 +36,7 @@
 		this.tmodelDocDescrId = tmodelDocDescrId;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
index 48ed06e..632351a 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifier.java
@@ -59,7 +59,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""tmodelKey"", column = @Column(name = ""tmodel_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""identifierId"", column = @Column(name = ""identifier_id"", nullable = false))})
 
 	public TmodelIdentifierId getId() {
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifierId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifierId.java
index 22aa761..de9269c 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifierId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelIdentifierId.java
@@ -36,7 +36,7 @@
 		this.identifierId = identifierId;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
index 6a60adf..7fcd2e3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfo.java
@@ -72,7 +72,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelInstanceInfoId"", column = @Column(name = ""tmodel_instance_info_id"", nullable = false))})
 
 	public TmodelInstanceInfoId getId() {
@@ -93,7 +93,7 @@
 		this.bindingTemplate = bindingTemplate;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
index e391ab5..5e48bca 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescr.java
@@ -58,7 +58,7 @@
 
 	@EmbeddedId
 	@AttributeOverrides({
-			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 41)),
+			@AttributeOverride(name = ""bindingKey"", column = @Column(name = ""binding_key"", nullable = false, length = 255)),
 			@AttributeOverride(name = ""tmodelInstanceInfoId"", column = @Column(name = ""tmodel_instance_info_id"", nullable = false)),
 			@AttributeOverride(name = ""tmodelInstanceInfoDescrId"", column = @Column(name = ""tmodel_instance_info_descr_id"", nullable = false))})
 
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescrId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescrId.java
index 955edb8..6caefd3 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescrId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoDescrId.java
@@ -39,7 +39,7 @@
 		this.tmodelInstanceInfoDescrId = tmodelInstanceInfoDescrId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoId.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoId.java
index c91db2b..be8954b 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoId.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelInstanceInfoId.java
@@ -36,7 +36,7 @@
 		this.tmodelInstanceInfoId = tmodelInstanceInfoId;
 	}
 
-	@Column(name = ""binding_key"", nullable = false, length = 41)
+	@Column(name = ""binding_key"", nullable = false, length = 255)
 	public String getBindingKey() {
 		return this.bindingKey;
 	}
"
juddi,06177e4e0150fb4b333914515b466b75a14578a4,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@698069 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-23 02:44:31,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java b/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
index 6aca79e..eddaa47 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/TmodelOverview.java
@@ -57,7 +57,7 @@
 		this.tmodelOverviewId = tmodelOverviewId;
 	}
 
-	@Column(name = ""tmodel_key"", nullable = false, length = 41)
+	@Column(name = ""tmodel_key"", nullable = false, length = 255)
 	public String getTmodelKey() {
 		return this.tmodelKey;
 	}
"
juddi,146ed5504c998e7d674afd8289f2b57c9407591a,"JUDDI-141 Changing max length to 255

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/branches/v3_trunk@697648 13f79535-47bb-0310-9956-ffa450edef68
",2008-09-22 00:54:02,Kurt Stam,"diff --git a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
index d3ee05a..dc627d7 100644
--- a/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
+++ b/juddi-core/src/main/java/org/apache/juddi/model/BusinessEntity.java
@@ -85,7 +85,7 @@
 	}
 
 	@Id
-	@Column(name = ""business_key"", unique = true, nullable = false, length = 41)
+	@Column(name = ""business_key"", unique = true, nullable = false, length = 255)
 	public String getBusinessKey() {
 		return this.businessKey;
 	}
"
juddi,4ac78d62587c70c53980c4519398caa78fa19fe0,"JUDDI-115 applying patch for oracle to fix sql script execution.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@587206 13f79535-47bb-0310-9956-ffa450edef68
",2007-10-22 19:14:47,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java b/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
index 2b798ff..406b5bd 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
@@ -92,7 +92,9 @@
     finally
     {
       try {
-        resultSet.close();
+    	  if (resultSet != null) {
+    		  resultSet.close();
+    	  }
       }
       catch (Exception e)
       {
"
juddi,4ac78d62587c70c53980c4519398caa78fa19fe0,"JUDDI-115 applying patch for oracle to fix sql script execution.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@587206 13f79535-47bb-0310-9956-ffa450edef68
",2007-10-22 19:14:47,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/RegistryEngine.java b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
index ac9a19f..fc2a073 100755
--- a/src/main/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
@@ -282,6 +282,7 @@
             is = loader.getResourceAsStreamFromClass(resource);
         }
         String sql = getString(is);
+        sql = sql.replaceAll(""(?m)^--([^\n]+)?$"", """"); // Remove all commented lines
         sql = sql.replaceAll(""\\$\\{prefix}"", tablePrefix);
         is.close();
         String[] statements = sql.split("";"");
@@ -363,4 +364,4 @@
     // tear down the registry
     registry.dispose();
   }
-}
\ No newline at end of file
+}
"
juddi,e7c8f3d3344c0381b482bb27e69ccc2ee371b6bb,"JUDDI-113, refactoring so that we can run the registry in a thread of it's own.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@581233 13f79535-47bb-0310-9956-ffa450edef68
",2007-10-02 13:39:03,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/local/InquiryService.java b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
index b68f9b9..8bba24e 100644
--- a/src/main/java/org/apache/juddi/registry/local/InquiryService.java
+++ b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
@@ -30,11 +30,11 @@
 public class InquiryService
 {
 //	 collection of valid operations
-	  private TreeSet<String> operations = null;
+	  private TreeSet operations = null;
 	  
   public InquiryService() {
 		super();
-		operations = new TreeSet<String>();
+		operations = new TreeSet();
 	  	operations.add(""find_business"");
 	  	operations.add(""find_service"");
 	  	operations.add(""find_binding"");
"
juddi,e7c8f3d3344c0381b482bb27e69ccc2ee371b6bb,"JUDDI-113, refactoring so that we can run the registry in a thread of it's own.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@581233 13f79535-47bb-0310-9956-ffa450edef68
",2007-10-02 13:39:03,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/local/PublishService.java b/src/main/java/org/apache/juddi/registry/local/PublishService.java
index 435ee3b..5795652 100644
--- a/src/main/java/org/apache/juddi/registry/local/PublishService.java
+++ b/src/main/java/org/apache/juddi/registry/local/PublishService.java
@@ -30,11 +30,11 @@
 public class PublishService
 {
   // collection of valid operations
-  private TreeSet<String> operations = null;
+  private TreeSet operations = null;
 
   public PublishService() {
 	super();
-	operations = new TreeSet<String>();
+	operations = new TreeSet();
   	operations.add(""get_authtoken"");
   	operations.add(""get_registeredinfo"");
   	operations.add(""discard_authtoken"");
"
juddi,e7c8f3d3344c0381b482bb27e69ccc2ee371b6bb,"JUDDI-113, refactoring so that we can run the registry in a thread of it's own.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@581233 13f79535-47bb-0310-9956-ffa450edef68
",2007-10-02 13:39:03,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/local/RequestHandler.java b/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
index 0c27886..aab051b 100644
--- a/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
+++ b/src/main/java/org/apache/juddi/registry/local/RequestHandler.java
@@ -50,11 +50,11 @@
   // XML Document Builder
   private static DocumentBuilder docBuilder = null;
   
-  private String version;
-  private String operation;
-  private Element uddiReq;
-  private Node response;
-  private String exception;
+  private volatile String version;
+  private volatile String operation;
+  private volatile Element uddiReq;
+  private volatile Node response;
+  private volatile String exception;
    
     /**
    * Grab the local name of the UDDI request element
"
juddi,45ad85ca5738a6f317d91cb119e7259642bf3e6f,"JUDDI-113, refactoring so that we can run the registry in a thread of it's own.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@580488 13f79535-47bb-0310-9956-ffa450edef68
",2007-09-28 21:14:09,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/local/InquiryService.java b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
index a319303..b68f9b9 100644
--- a/src/main/java/org/apache/juddi/registry/local/InquiryService.java
+++ b/src/main/java/org/apache/juddi/registry/local/InquiryService.java
@@ -27,14 +27,14 @@
 /**
  * @author Kurt Stam (kurt.stam@redhat.com)
  */
-public class InquiryService extends AbstractService
+public class InquiryService
 {
 //	 collection of valid operations
-	  private TreeSet operations = null;
+	  private TreeSet<String> operations = null;
 	  
   public InquiryService() {
 		super();
-		operations = new TreeSet();
+		operations = new TreeSet<String>();
 	  	operations.add(""find_business"");
 	  	operations.add(""find_service"");
 	  	operations.add(""find_binding"");
@@ -47,6 +47,9 @@
 	  	operations.add(""get_tmodeldetail"");
 	}
 
+  //Verify that the appropriate endpoint was targeted for
+  // this service request.  The validateRequest method will
+  // throw an UnsupportedException if anything's amiss.
   public void validateRequest(String operation,String version,Element uddiReq)
 		throws RegistryException
 	{
@@ -74,7 +77,20 @@
 	}
   
   public Node inquire(Element uddiReq) throws Exception{
-	  return handleRequest(uddiReq);
+      
+      //new RequestHandler on it's own thread
+      RequestHandler requestHandler = new RequestHandler();
+      requestHandler.setUddiReq(uddiReq);
+      String operation = requestHandler.getOperation(uddiReq);
+      String version   = requestHandler.getVersion(uddiReq,operation);
+      validateRequest(operation, version, uddiReq);
+      Thread thread = new Thread(requestHandler, ""WorkThread"");
+      thread.start();
+      thread.join();
+      if (requestHandler.getException()!=null) {
+          throw new Exception(requestHandler.getException());
+      }
+	  return requestHandler.getResponse();
   }
   
 }
"
juddi,45ad85ca5738a6f317d91cb119e7259642bf3e6f,"JUDDI-113, refactoring so that we can run the registry in a thread of it's own.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@580488 13f79535-47bb-0310-9956-ffa450edef68
",2007-09-28 21:14:09,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/local/PublishService.java b/src/main/java/org/apache/juddi/registry/local/PublishService.java
index 07beb64..435ee3b 100644
--- a/src/main/java/org/apache/juddi/registry/local/PublishService.java
+++ b/src/main/java/org/apache/juddi/registry/local/PublishService.java
@@ -27,14 +27,14 @@
 /**
  * @author Kurt Stam (kurt.stam@jboss.com)
  */
-public class PublishService extends AbstractService
+public class PublishService
 {
   // collection of valid operations
-  private TreeSet operations = null;
+  private TreeSet<String> operations = null;
 
   public PublishService() {
 	super();
-	operations = new TreeSet();
+	operations = new TreeSet<String>();
   	operations.add(""get_authtoken"");
   	operations.add(""get_registeredinfo"");
   	operations.add(""discard_authtoken"");
@@ -80,7 +80,20 @@
     			""supported by the UDDI version 2 Publish API."");
 	}
   
-  public Node publish(Element uddiReq) throws Exception{
-	  return handleRequest(uddiReq);
+  public Node publish(Element uddiReq) throws Exception
+  {
+      //new RequestHandler on it's own thread
+      RequestHandler requestHandler = new RequestHandler();
+      requestHandler.setUddiReq(uddiReq);
+      String operation = requestHandler.getOperation(uddiReq);
+      String version   = requestHandler.getVersion(uddiReq, operation);
+      validateRequest(operation, version, uddiReq);
+      Thread thread = new Thread(requestHandler, ""WorkThread"");
+      thread.start();
+      thread.join();
+      if (requestHandler.getException()!=null) {
+          throw new Exception(requestHandler.getException());
+      }
+      return requestHandler.getResponse();
   }
 }
"
juddi,3439ef0c00b34e08011ff6af753b3908d7045e42,"JUDDI-98 applying patch by jzwang to fix sorting by dates (ASC vs DESC)

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555472 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:49:41,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java b/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
index 7bc3ce6..9614934 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
@@ -240,9 +240,9 @@
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
       if (qualifiers.sortByDateDesc)
-        sql.append(""B.LAST_UPDATE ASC,N.NAME ASC"");
-      else
         sql.append(""B.LAST_UPDATE DESC,N.NAME ASC"");
+      else
+        sql.append(""B.LAST_UPDATE ASC,N.NAME ASC"");
     }
   }
 }
"
juddi,3439ef0c00b34e08011ff6af753b3908d7045e42,"JUDDI-98 applying patch by jzwang to fix sorting by dates (ASC vs DESC)

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555472 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:49:41,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java b/src/main/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
index 0a6c417..ccda72f 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
@@ -249,9 +249,9 @@
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
       if (qualifiers.sortByDateDesc)
-        sql.append(""S.LAST_UPDATE ASC,N.NAME ASC"");
-      else
         sql.append(""S.LAST_UPDATE DESC,N.NAME ASC"");
+      else
+        sql.append(""S.LAST_UPDATE ASC,N.NAME ASC"");
     }
   }
 }
"
juddi,3439ef0c00b34e08011ff6af753b3908d7045e42,"JUDDI-98 applying patch by jzwang to fix sorting by dates (ASC vs DESC)

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555472 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:49:41,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java b/src/main/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
index 7fa265f..fd16920 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
@@ -200,9 +200,9 @@
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
       if (qualifiers.sortByDateDesc)
-        sql.append(""M.LAST_UPDATE ASC,M.NAME ASC"");
-      else
         sql.append(""M.LAST_UPDATE DESC,M.NAME ASC"");
+      else
+        sql.append(""M.LAST_UPDATE ASC,M.NAME ASC"");
     }
   }
 }
"
juddi,db0e45b2b0edbbf5c3856bd3cd5e9ac1bf7db6df,"JUDDI-76 fixing spelling of the acquireConnection method.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555465 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:36:50,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index 9ede173..71bb5c8 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -82,7 +82,7 @@
   public JDBCDataStore()
   {
     try {
-      this.connection = ConnectionManager.aquireConnection();
+      this.connection = ConnectionManager.acquireConnection();
     }
     catch(SQLException sqlex) {
       log.error(""Exception occured while attempting to "" +
"
juddi,db0e45b2b0edbbf5c3856bd3cd5e9ac1bf7db6df,"JUDDI-76 fixing spelling of the acquireConnection method.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555465 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:36:50,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/registry/RegistryEngine.java b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
index d2464fc..fdd04f0 100755
--- a/src/main/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/main/java/org/apache/juddi/registry/RegistryEngine.java
@@ -242,7 +242,7 @@
       String sqlFiles = Config.getStringProperty(
               RegistryEngine.PROPNAME_SQL_FILES,RegistryEngine.DEFAULT_SQL_FILES);
       try {
-          Connection conn = ConnectionManager.aquireConnection();
+          Connection conn = ConnectionManager.acquireConnection();
           boolean create = false;
 
           Statement st = conn.createStatement();
"
juddi,db0e45b2b0edbbf5c3856bd3cd5e9ac1bf7db6df,"JUDDI-76 fixing spelling of the acquireConnection method.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555465 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-12 02:36:50,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/util/jdbc/ConnectionManager.java b/src/main/java/org/apache/juddi/util/jdbc/ConnectionManager.java
index 62fd040..7695bb9 100755
--- a/src/main/java/org/apache/juddi/util/jdbc/ConnectionManager.java
+++ b/src/main/java/org/apache/juddi/util/jdbc/ConnectionManager.java
@@ -43,7 +43,7 @@
   /**
    *
    */
-  public static Connection aquireConnection()
+  public static Connection acquireConnection()
     throws SQLException
   {
 	  
"
juddi,0fb0e6b8bace72806115e2d867b6c75e37361c08,"JUDDI-107, Applying patch by Jarek Gawor to fix the Language code of the name attribute of a TModel

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555142 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-11 02:30:10,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index 865a615..9ede173 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -1404,7 +1404,7 @@
         TModel tModel = TModelTable.select(tModelKey,connection);
         info = new TModelInfo();
         info.setTModelKey(tModelKey);
-        info.setNameValue(tModel.getName());
+        info.setName(tModel.getName());
       }
       catch(java.sql.SQLException sqlex)
       {
"
juddi,0fb0e6b8bace72806115e2d867b6c75e37361c08,"JUDDI-107, Applying patch by Jarek Gawor to fix the Language code of the name attribute of a TModel

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555142 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-11 02:30:10,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datastore/jdbc/TModelTable.java b/src/main/java/org/apache/juddi/datastore/jdbc/TModelTable.java
index 18d03b2..81747e9 100755
--- a/src/main/java/org/apache/juddi/datastore/jdbc/TModelTable.java
+++ b/src/main/java/org/apache/juddi/datastore/jdbc/TModelTable.java
@@ -23,6 +23,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.juddi.datatype.Name;
 import org.apache.juddi.datatype.OverviewDoc;
 import org.apache.juddi.datatype.tmodel.TModel;
 
@@ -54,9 +55,10 @@
     sql.append(""PUBLISHER_ID,"");
     sql.append(""OPERATOR,"");
     sql.append(""NAME,"");
+    sql.append(""LANG_CODE,"");
     sql.append(""OVERVIEW_URL,"");
     sql.append(""LAST_UPDATE) "");
-    sql.append(""VALUES (?,?,?,?,?,?,?)"");
+    sql.append(""VALUES (?,?,?,?,?,?,?,?)"");
     insertSQL = sql.toString();
 
     // build deleteSQL
@@ -78,6 +80,7 @@
     sql.append(""AUTHORIZED_NAME,"");
     sql.append(""OPERATOR,"");
     sql.append(""NAME,"");
+    sql.append(""LANG_CODE,"");
     sql.append(""OVERVIEW_URL,"");
     sql.append(""DELETED "");
     sql.append(""FROM TMODEL "");
@@ -130,16 +133,18 @@
       statement.setString(2,tModel.getAuthorizedName());
       statement.setString(3,publisherID);
       statement.setString(4,tModel.getOperator());
-      statement.setString(5,tModel.getName());
-      statement.setString(6,overviewURL);
-      statement.setTimestamp(7,timeStamp);
+      statement.setString(5,tModel.getName().getValue());
+      statement.setString(6,tModel.getName().getLanguageCode());
+      statement.setString(7,overviewURL);
+      statement.setTimestamp(8,timeStamp);
 
       log.debug(insertSQL +
         ""\n\t TMODEL_KEY="" + tModel.getTModelKey().toString() +
         ""\n\t AUTHORIZED_NAME="" + tModel.getAuthorizedName() +
         ""\n\t PUBLISHER_ID="" + publisherID +
         ""\n\t OPERATOR="" + tModel.getOperator() +
-        ""\n\t NAME="" + tModel.getName() +
+        ""\n\t NAME="" + tModel.getName().getValue() +
+        ""\n\t LANG_CODE="" + tModel.getName().getLanguageCode() +
         ""\n\t OVERVIEW_URL="" + overviewURL +
         ""\n\t LAST_UPDATE="" + timeStamp.getTime() + ""\n"");
 
@@ -250,10 +255,15 @@
         tModel.setTModelKey(tModelKey);
         tModel.setAuthorizedName(resultSet.getString(1));//(""AUTHORIZED_NAME""));
         tModel.setOperator(resultSet.getString(2));//(""OPERATOR""));
-        tModel.setName(resultSet.getString(3));//(""NAME""));
+
+        Name name = new Name();
+        name.setValue(resultSet.getString(3));//(""NAME""));
+        name.setLanguageCode(resultSet.getString(4));//(""LANG_CODE""));
+
+        tModel.setName(name);
 
         OverviewDoc overviewDoc = new OverviewDoc();
-        overviewDoc.setOverviewURL(resultSet.getString(4));//(""OVERVIEW_URL""));
+        overviewDoc.setOverviewURL(resultSet.getString(5));//(""OVERVIEW_URL""));
         tModel.setOverviewDoc(overviewDoc);
       }
 
"
juddi,0fb0e6b8bace72806115e2d867b6c75e37361c08,"JUDDI-107, Applying patch by Jarek Gawor to fix the Language code of the name attribute of a TModel

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555142 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-11 02:30:10,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datatype/response/TModelInfo.java b/src/main/java/org/apache/juddi/datatype/response/TModelInfo.java
index ae8cdde..33d1ccf 100755
--- a/src/main/java/org/apache/juddi/datatype/response/TModelInfo.java
+++ b/src/main/java/org/apache/juddi/datatype/response/TModelInfo.java
@@ -26,7 +26,7 @@
 public class TModelInfo implements RegistryObject
 {
   String tModelKey;
-  String nameValue;
+  Name name;
 
   /**
    * default constructor
@@ -41,7 +41,7 @@
   public TModelInfo(String key,String name)
   {
     this.tModelKey = key;
-    this.nameValue = name;
+    setNameValue(name);
   }
 
   /**
@@ -57,7 +57,11 @@
    */
   public void setNameValue(String nameValue)
   {
-    this.nameValue = nameValue;
+      if (nameValue == null) {
+          this.name = null;
+      } else {
+          this.name = new Name(nameValue);
+      }
   }
 
   /**
@@ -67,10 +71,7 @@
     */
   public void setName(Name name)
   {
-    if (name != null)
-      this.nameValue = name.getValue();
-    else
-      this.nameValue = null;
+      this.name = name;
   }
 
   /**
@@ -86,7 +87,11 @@
    */
   public String getNameValue()
   {
-    return nameValue;
+      if (this.name == null) {
+          return null;
+      } else {
+          return this.name.getValue();
+      }
   }
 
   /**
@@ -94,9 +99,6 @@
    */
   public Name getName()
   {
-    if (this.nameValue != null)
-      return new Name(nameValue);
-    else
-      return null;
+      return this.name;
   }
-}
\ No newline at end of file
+}
"
juddi,0fb0e6b8bace72806115e2d867b6c75e37361c08,"JUDDI-107, Applying patch by Jarek Gawor to fix the Language code of the name attribute of a TModel

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555142 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-11 02:30:10,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/datatype/tmodel/TModel.java b/src/main/java/org/apache/juddi/datatype/tmodel/TModel.java
index 58c3596..cb05642 100755
--- a/src/main/java/org/apache/juddi/datatype/tmodel/TModel.java
+++ b/src/main/java/org/apache/juddi/datatype/tmodel/TModel.java
@@ -179,7 +179,7 @@
   String tModelKey;
   String authorizedName;
   String operator;
-  String nameValue;
+  Name name;
   Vector descVector;
   OverviewDoc overviewDoc;
   IdentifierBag identifierBag;
@@ -201,7 +201,7 @@
    */
   public TModel(String name)
   {
-    this.nameValue = name;
+    setName(name);
   }
 
   /**
@@ -212,7 +212,7 @@
    */
   public TModel(String name,String key)
   {
-    this.nameValue = name;
+    setName(name);
     this.tModelKey = key;
   }
 
@@ -263,9 +263,13 @@
    *
    * @param name The new name of this tModel.
    */
-  public void setName(String name)
+  public void setName(String nameValue)
   {
-    this.nameValue = name;
+      if (nameValue == null) {
+          this.name = null;
+      } else {
+          this.name = new Name(nameValue);
+      }
   }
 
   /**
@@ -273,9 +277,9 @@
    *
    * @return The name of this tModel.
    */
-  public String getName()
+  public Name getName()
   {
-    return this.nameValue;
+      return this.name;
   }
 
   /**
@@ -285,10 +289,7 @@
     */
   public void setName(Name name)
   {
-    if (name != null)
-      this.nameValue = name.getValue();
-    else
-      this.nameValue = null;
+      this.name = name;
   }
 
   /**
@@ -436,4 +437,4 @@
   {
     this.categoryBag = bag;
   }
-}
\ No newline at end of file
+}
"
juddi,0fb0e6b8bace72806115e2d867b6c75e37361c08,"JUDDI-107, Applying patch by Jarek Gawor to fix the Language code of the name attribute of a TModel

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555142 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-11 02:30:10,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/handler/TModelHandler.java b/src/main/java/org/apache/juddi/handler/TModelHandler.java
index d4b5c17..2ec73fb 100755
--- a/src/main/java/org/apache/juddi/handler/TModelHandler.java
+++ b/src/main/java/org/apache/juddi/handler/TModelHandler.java
@@ -124,11 +124,11 @@
     if (authName != null)
       element.setAttribute(""authorizedName"",authName);
 
-    String name = tModel.getName();
+    Name name = tModel.getName();
     if (name != null)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      handler.marshal(new Name(name),element);
+      handler.marshal(name,element);
     }
 
     Vector descrVector = tModel.getDescriptionVector();
@@ -218,4 +218,4 @@
     parent.removeChild(child);
     XMLUtils.writeXML(child,System.out);
   }
-}
\ No newline at end of file
+}
"
juddi,9d7abdea070d6845974bfa930709a738607df893,"JUDDI-106, applying patch by Jarek Gawor to set the namespace correctly.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555030 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-10 18:36:35,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/handler/DescriptionHandler.java b/src/main/java/org/apache/juddi/handler/DescriptionHandler.java
index bc93be5..6a992a5 100755
--- a/src/main/java/org/apache/juddi/handler/DescriptionHandler.java
+++ b/src/main/java/org/apache/juddi/handler/DescriptionHandler.java
@@ -62,7 +62,7 @@
 
     String langCode = descr.getLanguageCode();
     if ((langCode != null) && (langCode.trim().length() > 0))
-      element.setAttribute(""xml:lang"",langCode);
+      element.setAttributeNS(""http://www.w3.org/XML/1998/namespace"",""xml:lang"",langCode);
 
     String descrValue = descr.getValue();
     if (descrValue != null)
@@ -81,4 +81,4 @@
     throws Exception
   {
   }
-}
\ No newline at end of file
+}
"
juddi,9d7abdea070d6845974bfa930709a738607df893,"JUDDI-106, applying patch by Jarek Gawor to set the namespace correctly.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@555030 13f79535-47bb-0310-9956-ffa450edef68
",2007-07-10 18:36:35,Kurt Stam,"diff --git a/src/main/java/org/apache/juddi/handler/NameHandler.java b/src/main/java/org/apache/juddi/handler/NameHandler.java
index e0e1778..e820227 100755
--- a/src/main/java/org/apache/juddi/handler/NameHandler.java
+++ b/src/main/java/org/apache/juddi/handler/NameHandler.java
@@ -63,7 +63,7 @@
 
     String langCode = name.getLanguageCode();
     if ((langCode != null) && (langCode.trim().length() > 0))
-      element.setAttribute(""xml:lang"",langCode);
+      element.setAttributeNS(""http://www.w3.org/XML/1998/namespace"",""xml:lang"",langCode);
 
     String nameValue = name.getValue();
     if (nameValue != null)
@@ -82,4 +82,4 @@
     throws Exception
   {
   }
-}
\ No newline at end of file
+}
"
juddi,a05652092a4742a40028d6a1783c5f4fa031d4f4,"JUDDI-103, putting init in a static block.

git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@549641 13f79535-47bb-0310-9956-ffa450edef68
",2007-06-21 23:01:32,Kurt Stam,"diff --git a/src/java/org/apache/juddi/registry/local/Registry.java b/src/java/org/apache/juddi/registry/local/Registry.java
index c7a9efb..aa7b4cf 100644
--- a/src/java/org/apache/juddi/registry/local/Registry.java
+++ b/src/java/org/apache/juddi/registry/local/Registry.java
@@ -42,8 +42,13 @@
   private static Log log = LogFactory.getLog(Registry.class);
 
   // registry singleton instance
-  private static RegistryEngine registry = null;
+  private static RegistryEngine registry;
 
+  static
+  {
+      init() ;
+  }
+  
 /**
    * Create the shared instance of jUDDI's Registry class
    * and call it's ""init()"" method to initialize all core 
@@ -210,9 +215,6 @@
    */
   public static RegistryEngine getRegistry()
   {
-      if (registry==null) {
-          init();
-      }
       return registry;
   }
 
"
juddi,abfc9cffb264cab42fbbc7cbfa24e0078210a4bc,"Commiting fix for http://issues.apache.org/jira/browse/JUDDI-70


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263106 13f79535-47bb-0310-9956-ffa450edef68
",2005-05-27 02:06:36,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBindingByTModelKeyQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBindingByTModelKeyQuery.java
index c37294a..2d8b95a 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBindingByTModelKeyQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBindingByTModelKeyQuery.java
@@ -135,6 +135,85 @@
   }
 
   /**
+   * Select ...
+   *
+   * @param connection JDBC connection
+   * @throws java.sql.SQLException
+   */
+  public static Vector select(String serviceKey,String tModelKey,Vector keysIn,FindQualifiers qualifiers,Connection connection)
+    throws java.sql.SQLException
+  {
+    // if there is a keysIn vector but it doesn't contain
+    // any keys then the previous query has exhausted
+    // all possibilities of a match so skip this call.
+    if ((keysIn != null) && (keysIn.size() == 0))
+      return keysIn;
+
+    Vector keysOut = new Vector();
+    PreparedStatement statement = null;
+    ResultSet resultSet = null;
+
+    // construct the SQL statement
+    DynamicQuery sql = new DynamicQuery(selectSQL);
+    appendWhere(sql,serviceKey,tModelKey,qualifiers);
+    appendIn(sql,keysIn);
+    appendOrderBy(sql,qualifiers);
+
+    try
+    {
+      log.debug(sql.toString());
+
+      statement = sql.buildPreparedStatement(connection);
+      resultSet = statement.executeQuery();
+
+      while (resultSet.next())
+        keysOut.addElement(resultSet.getString(1));//(""SERVICE_KEY""));
+
+      return keysOut;
+    }
+    finally
+    {
+      try {
+        resultSet.close();
+      }
+      catch (Exception e)
+      {
+        log.warn(""An Exception was encountered while attempting to close "" +
+          ""the Find BindingTemplate ResultSet: ""+e.getMessage(),e);
+      }
+
+      try {
+        statement.close();
+      }
+      catch (Exception e)
+      {
+        log.warn(""An Exception was encountered while attempting to close "" +
+          ""the Find BindingTemplate Statement: ""+e.getMessage(),e);
+      }
+    }
+  }
+
+  /**
+   *
+   */
+  private static void appendWhere(DynamicQuery sql,String serviceKey,String tModelKey,FindQualifiers qualifiers)
+  {
+    sql.append(""WHERE I.BINDING_KEY = T.BINDING_KEY "");
+
+    if ((serviceKey != null) && (serviceKey.trim().length() > 0))
+    {
+      sql.append(""AND T.SERVICE_KEY = ? "");
+      sql.addValue(serviceKey);
+    }
+    
+    if ((tModelKey != null) && (tModelKey.trim().length() > 0))
+    {
+      sql.append(""AND I.TMODEL_KEY = ? "");
+      sql.addValue(tModelKey);
+    }
+  }
+
+  /**
    * Utility method used to construct SQL ""IN"" statements such as
    * the following SQL example:
    *
"
juddi,abfc9cffb264cab42fbbc7cbfa24e0078210a4bc,"Commiting fix for http://issues.apache.org/jira/browse/JUDDI-70


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263106 13f79535-47bb-0310-9956-ffa450edef68
",2005-05-27 02:06:36,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index c6df097..fce7ff1 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -1633,22 +1633,35 @@
       if (serviceKey != null)
         keyVector = FindBindingByServiceKeyQuery.select(serviceKey,keyVector,findQualifiers,connection);
         
-      if ((tModelBag != null) && (tModelBag.size() > 0))
-        keyVector = FindBindingByTModelKeyQuery.select(serviceKey,tModelBag,keyVector,findQualifiers,connection);
-
       if ((findQualifiers != null) && (findQualifiers.orAllKeys))  
       {
-        // orAllKeys = Use logical ""OR"" when searching by category 
-        // bag. See UDDI v2.04 API Specification - Appendix E.
-        //
+        // orAllKeys = Use logical ""OR"" when searching by TModel bag
+        // or category bag. See UDDI v2.04 API Specification - Appendix E.
+
+        if ((tModelBag != null) && (tModelBag.size() > 0))
+          keyVector = FindBindingByTModelKeyQuery.select(serviceKey,tModelBag,keyVector,findQualifiers,connection);
+
         if ((categoryBag != null) && (categoryBag.size() > 0))
           keyVector = FindBindingByCategoryQuery.select(serviceKey,categoryBag,keyVector,findQualifiers,connection);
       }
       else 
       {
         // Default UDDI v2 behavior: Use logical ""AND"" when searching 
-        // by category bag. See UDDI v2.04 API Specification - Appendix E.
-        //
+        // by tModel bag. See UDDI v2.04 API Specification - Appendix E.
+
+        if ((tModelBag != null) && (tModelBag.size() > 0))
+        {
+          Vector tModelKeyVector = tModelBag.getTModelKeyVector();
+          if (tModelKeyVector != null)
+          {
+            for (int i=0; i<tModelKeyVector.size(); i++)
+            {
+            	String tModelKey = (String)tModelKeyVector.elementAt(i);
+              keyVector = FindBindingByTModelKeyQuery.select(serviceKey,tModelKey,keyVector,findQualifiers,connection);
+            }
+          }
+        }
+
         if ((categoryBag != null) && (categoryBag.size() > 0))
         {
           Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/AddPublisherAssertionsFunction.java b/src/java/org/apache/juddi/function/AddPublisherAssertionsFunction.java
index 2122591..74b3783 100755
--- a/src/java/org/apache/juddi/function/AddPublisherAssertionsFunction.java
+++ b/src/java/org/apache/juddi/function/AddPublisherAssertionsFunction.java
@@ -90,32 +90,38 @@
         // make sure we've got a 'fromKey'
         String fromKey = assertion.getFromKey();
         if ((fromKey == null) || (fromKey.length() == 0))
-          throw new InvalidKeyPassedException(""fromKey=""+fromKey);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""fromKey=""+fromKey);
 
         // make sure we've got a 'toKey'
         String toKey = assertion.getToKey();
         if ((toKey == null) || (toKey.length() == 0))
-          throw new InvalidKeyPassedException(""toKey=""+toKey);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""toKey=""+toKey);
 
         // make sure we've got a 'KeyedRefernce'
         KeyedReference keyedRef = assertion.getKeyedReference();
         if (keyedRef == null)
-          throw new InvalidKeyPassedException(""keyedRef=""+keyedRef);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""keyedRef=""+keyedRef);
 
         // make sure the 'KeyedRefernce' contains a 'TModelKey'
         String tModelKey = keyedRef.getTModelKey();
         if ((tModelKey == null) || (tModelKey.length() == 0))
-          throw new InvalidKeyPassedException(""tModelKey=""+keyedRef);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""tModelKey=""+keyedRef);
 
         // verify that the BusinessEntities or tModel identified by the 'fromKey'
         // really exists. If not then throw an InvalidKeyPassedException.
         if ((!dataStore.isValidBusinessKey(fromKey)) && (!dataStore.isValidTModelKey(fromKey)))
-          throw new InvalidKeyPassedException(""fromKey=""+fromKey);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""fromKey=""+fromKey);
 
         // verify that the BusinessEntitys or tModel identified by the 'fromKey'
         // really exists. If not then throw an InvalidKeyPassedException.
         if ((!dataStore.isValidBusinessKey(toKey)) && (!dataStore.isValidTModelKey(toKey)))
-          throw new InvalidKeyPassedException(""toKey=""+toKey);
+          throw new InvalidKeyPassedException(""add_publisherAssertion: ""+
+              ""toKey=""+toKey);
 
         // verify that the 'publisherID' controls at least one of the
         // BusinessEntities or TModels that are identified in this
@@ -124,7 +130,10 @@
             (!dataStore.isBusinessPublisher(toKey,publisherID))   &&
             (!dataStore.isTModelPublisher(fromKey,publisherID))   &&
             (!dataStore.isTModelPublisher(toKey,publisherID)))
-          throw new UserMismatchException(""fromKey=""+fromKey+"" toKey=""+toKey);
+          throw new UserMismatchException(""add_publisherAssertion: ""+
+              ""userID=""+publisherID+"", ""+
+              ""fromKey=""+fromKey+"", ""+
+              ""toKey=""+toKey);
       }
 
       dataStore.saveAssertions(publisherID,assertionVector);
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DeleteBindingFunction.java b/src/java/org/apache/juddi/function/DeleteBindingFunction.java
index e9b5596..f56552e 100755
--- a/src/java/org/apache/juddi/function/DeleteBindingFunction.java
+++ b/src/java/org/apache/juddi/function/DeleteBindingFunction.java
@@ -84,13 +84,16 @@
         // If not then throw an InvalidKeyPassedException.
         if ((bindingKey == null) || (bindingKey.length() == 0) ||
             (!dataStore.isValidBindingKey(bindingKey)))
-          throw new InvalidKeyPassedException(bindingKey);
+          throw new InvalidKeyPassedException(""delete_binding: ""+
+              ""bindingKey=""+bindingKey);
 
         // check to make sure that 'authorizedName' controls the
         // business entity that this binding belongs to. If not
         // then throw a UserMismatchException.
         if (!dataStore.isBindingPublisher(bindingKey,publisherID))
-          throw new UserMismatchException(bindingKey);
+          throw new UserMismatchException(""delete_binding: ""+
+              ""userID=""+publisherID+"", ""+
+              ""bindingKey=""+bindingKey);
       }
 
       // delete the BindingTemplates
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DeleteBusinessFunction.java b/src/java/org/apache/juddi/function/DeleteBusinessFunction.java
index 019ee39..52648d8 100755
--- a/src/java/org/apache/juddi/function/DeleteBusinessFunction.java
+++ b/src/java/org/apache/juddi/function/DeleteBusinessFunction.java
@@ -81,12 +81,15 @@
         // check that this business entity really exists.
         // If not then throw an InvalidKeyPassedException.
         if ((!dataStore.isValidBusinessKey(businessKey)))
-          throw new InvalidKeyPassedException(businessKey);
+          throw new InvalidKeyPassedException(""delete_business: ""+
+              ""businessKey=""+businessKey);
 
         // check to make sure that 'authorizedName' controls this
         // business entity. If not then throw a UserMismatchException.
         if (!dataStore.isBusinessPublisher(businessKey,publisherID))
-          throw new UserMismatchException(businessKey);
+          throw new UserMismatchException(""delete_business: ""+
+              ""userID=""+publisherID+"", ""+
+              ""businessKey=""+businessKey);
       }
 
       // delete the BusinessEntities
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DeleteServiceFunction.java b/src/java/org/apache/juddi/function/DeleteServiceFunction.java
index e4c6505..5fe5b48 100755
--- a/src/java/org/apache/juddi/function/DeleteServiceFunction.java
+++ b/src/java/org/apache/juddi/function/DeleteServiceFunction.java
@@ -82,13 +82,16 @@
         // If not then throw an InvalidKeyPassedException.
         if ((serviceKey == null) || (serviceKey.length() == 0) ||
             (!dataStore.isValidServiceKey(serviceKey)))
-          throw new InvalidKeyPassedException(serviceKey);
+          throw new InvalidKeyPassedException(""delete_service: ""+
+              ""serviceKey=""+serviceKey);
 
         // check to make sure that 'authorizedName' controls the
         // business entity that this server belongs to. If not
         // then throw a UserMismatchException.
         if (!dataStore.isServicePublisher(serviceKey,publisherID))
-          throw new UserMismatchException(""serviceKey=""+serviceKey);
+          throw new UserMismatchException(""delete_service: ""+
+              ""userID=""+publisherID+"", ""+
+              ""serviceKey=""+serviceKey);
       }
 
       // delete the BusinessServices
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DeleteTModelFunction.java b/src/java/org/apache/juddi/function/DeleteTModelFunction.java
index fbb0a83..8438fcd 100755
--- a/src/java/org/apache/juddi/function/DeleteTModelFunction.java
+++ b/src/java/org/apache/juddi/function/DeleteTModelFunction.java
@@ -82,12 +82,15 @@
         // then throw an InvalidKeyPassedException.
         if ((tModelKey == null) || (tModelKey.length() == 0) ||
             (!dataStore.isValidTModelKey(tModelKey)))
-          throw new InvalidKeyPassedException(tModelKey);
+          throw new InvalidKeyPassedException(""delete_tModel: ""+
+              ""tModelKey=""+tModelKey);
 
         // check to make sure that 'authorizedName' controls this
         // TModel. If not then throw a UserMismatchException.
         if (!dataStore.isTModelPublisher(tModelKey,publisherID))
-          throw new UserMismatchException(""publisher=""+publisherID+"" tModelKey=""+tModelKey);
+          throw new UserMismatchException(""delete_tModel: ""+
+              ""userID=""+publisherID+"", ""+
+              ""tModelKey=""+tModelKey);
 
         // TModel exists and we control it so let's marke it as deleted.
         dataStore.markTModelAsDeleted(tModelKey);
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DiscardAuthTokenFunction.java b/src/java/org/apache/juddi/function/DiscardAuthTokenFunction.java
index 080816a..7781d29 100755
--- a/src/java/org/apache/juddi/function/DiscardAuthTokenFunction.java
+++ b/src/java/org/apache/juddi/function/DiscardAuthTokenFunction.java
@@ -72,7 +72,8 @@
 
       String authToken = authInfo.getValue();
       if ((authInfo == null) || (authInfo.getValue() == null))
-        throw new AuthTokenRequiredException(""authInfo=""+authInfo);
+        throw new AuthTokenRequiredException(""discard_authToken: ""+
+            ""authInfo=""+authInfo);
 
       dataStore.retireAuthToken(authToken);
       dataStore.commit();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindBindingFunction.java b/src/java/org/apache/juddi/function/FindBindingFunction.java
index 97012cf..d88a934 100755
--- a/src/java/org/apache/juddi/function/FindBindingFunction.java
+++ b/src/java/org/apache/juddi/function/FindBindingFunction.java
@@ -117,7 +117,8 @@
 
       // a find_binding request MUST include a service_key attribute
       if ((serviceKey == null) || (serviceKey.length() == 0))
-        throw new InvalidKeyPassedException(""serviceKey=""+serviceKey);
+        throw new InvalidKeyPassedException(""find_binding: ""+
+            ""serviceKey=""+serviceKey);
 
       // validate the 'qualifiers' parameter as much as possible up-front before
       // calling into the data layer for relational validation.
@@ -142,7 +143,8 @@
                 (!qValue.equals(FindQualifier.SORT_BY_DATE_DESC)) &&
                 (!qValue.equals(FindQualifier.SERVICE_SUBSET)) &&
                 (!qValue.equals(FindQualifier.COMBINE_CATEGORY_BAGS)))
-              throw new UnsupportedException(""findQualifier=""+qValue);
+              throw new UnsupportedException(""find_binding: ""+
+                  ""findQualifier=""+qValue);
           }
         }
       }
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindBusinessFunction.java b/src/java/org/apache/juddi/function/FindBusinessFunction.java
index ca1e0e6..edc9f56 100755
--- a/src/java/org/apache/juddi/function/FindBusinessFunction.java
+++ b/src/java/org/apache/juddi/function/FindBusinessFunction.java
@@ -149,7 +149,9 @@
         // dependent).  This value is configurable in jUDDI.
         int maxNames = Config.getMaxNameElementsAllowed();
         if ((nameVector != null) && (nameVector.size() > maxNames))
-          throw new TooManyOptionsException(""max="" + maxNames);
+          throw new TooManyOptionsException(""find_business: ""+
+              ""names=""+nameVector.size()+"", ""+
+              ""maxNames="" + maxNames);
 
         // names can not exceed the maximum character length specified by the
         // UDDI specification (v2.0 specifies a max character length of 255). This
@@ -159,8 +161,10 @@
         {
           String name = ((Name) nameVector.elementAt(i)).getValue();
           if (name.length() > maxNameLength)
-            throw new NameTooLongException(name + 
-                ""(max="" + maxNameLength + "")"");
+            throw new NameTooLongException(""find_business: ""+
+                ""name=""+name+"", ""+
+                ""length=""+name.length()+"", ""+
+                ""maxNameLength=""+maxNameLength);
         }
       }
 
@@ -188,8 +192,8 @@
               && (!qValue.equals(FindQualifier.SERVICE_SUBSET))
               && (!qValue
                 .equals(FindQualifier.COMBINE_CATEGORY_BAGS)))
-              throw new UnsupportedException(
-                ""findQualifier="" + qValue);
+              throw new UnsupportedException(""find_business: ""+
+                ""findQualifier=""+qValue);
           }
         }
       }
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindPublisherFunction.java b/src/java/org/apache/juddi/function/FindPublisherFunction.java
index 23df04e..bd40557 100755
--- a/src/java/org/apache/juddi/function/FindPublisherFunction.java
+++ b/src/java/org/apache/juddi/function/FindPublisherFunction.java
@@ -102,7 +102,10 @@
         // value is configurable in jUDDI.
         int maxNameLength = Config.getMaxNameLengthAllowed();
         if (name.length() > maxNameLength)
-          throw new NameTooLongException(""Name: '""+name+""' (max=""+maxNameLength+"")"");
+          throw new NameTooLongException(""find_publisher: ""+
+              ""name=""+name+"", ""+
+              ""length=""+name.length()+"", ""+
+              ""maxNameLength=""+maxNameLength);
       }
 
       // validate the 'qualifiers' parameter as much as possible up-front before
@@ -128,7 +131,8 @@
                 (!qValue.equals(FindQualifier.SORT_BY_DATE_DESC)) &&
                 (!qValue.equals(FindQualifier.SERVICE_SUBSET)) &&
                 (!qValue.equals(FindQualifier.COMBINE_CATEGORY_BAGS)))
-              throw new UnsupportedException(""FindQualifier: ""+qValue);
+              throw new UnsupportedException(""find_publisher: ""+
+                  ""findQualifier=""+qValue);
           }
         }
       }
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindServiceFunction.java b/src/java/org/apache/juddi/function/FindServiceFunction.java
index 9ea5a1c..8e111eb 100755
--- a/src/java/org/apache/juddi/function/FindServiceFunction.java
+++ b/src/java/org/apache/juddi/function/FindServiceFunction.java
@@ -126,7 +126,9 @@
         // dependent).  This value is configurable in jUDDI.
         int maxNames = Config.getMaxNameElementsAllowed();
         if ((nameVector != null) && (nameVector.size() > maxNames))
-          throw new TooManyOptionsException(""max_names= ""+maxNames);
+          throw new TooManyOptionsException(""find_service: ""+
+              ""names=""+nameVector.size()+"", ""+
+              ""maxNames="" + maxNames);
 
         // names can not exceed the maximum character length specified by the
         // UDDI specification (v2.0 specifies a max character length of 255). This
@@ -136,7 +138,10 @@
         {
           String name = ((Name)nameVector.elementAt(i)).getValue();
            if (name.length() > maxNameLength)
-            throw new NameTooLongException(name+"" (max=""+maxNameLength+"")"");
+            throw new NameTooLongException(""find_service: ""+
+                ""name=""+name+"", ""+
+                ""length=""+name.length()+"", ""+
+                ""maxNameLength=""+maxNameLength);
         }
       }
 
@@ -163,7 +168,8 @@
                 (!qValue.equals(FindQualifier.SORT_BY_DATE_DESC)) &&
                 (!qValue.equals(FindQualifier.SERVICE_SUBSET)) &&
                 (!qValue.equals(FindQualifier.COMBINE_CATEGORY_BAGS)))
-              throw new UnsupportedException(""findQualifier=""+qValue);
+              throw new UnsupportedException(""find_service: ""+
+                  ""findQualifier=""+qValue);
           }
         }
       }
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindTModelFunction.java b/src/java/org/apache/juddi/function/FindTModelFunction.java
index 886c512..8d66d89 100755
--- a/src/java/org/apache/juddi/function/FindTModelFunction.java
+++ b/src/java/org/apache/juddi/function/FindTModelFunction.java
@@ -123,7 +123,10 @@
         // value is configurable in jUDDI.
         int maxNameLength = Config.getMaxNameLengthAllowed();
         if (tModelName.length() > maxNameLength)
-          throw new NameTooLongException(tModelName+"" (max_name=""+maxNameLength+"")"");
+          throw new NameTooLongException(""find_tModel: ""+
+              ""name=""+tModelName+"", ""+
+              ""length=""+tModelName.length()+"", ""+
+              ""maxNameLength=""+maxNameLength);
       }
 
       // validate the 'qualifiers' parameter as much as possible up-front before
@@ -149,7 +152,8 @@
                 (!qValue.equals(FindQualifier.SORT_BY_DATE_DESC)) &&
                 (!qValue.equals(FindQualifier.SERVICE_SUBSET)) &&
                 (!qValue.equals(FindQualifier.COMBINE_CATEGORY_BAGS)))
-              throw new UnsupportedException(""find_qualifier=""+qValue);
+              throw new UnsupportedException(""find_tModel: ""+
+                  ""findQualifier=""+qValue);
           }
         }
       }
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetAuthTokenFunction.java b/src/java/org/apache/juddi/function/GetAuthTokenFunction.java
index 65109e2..4792502 100755
--- a/src/java/org/apache/juddi/function/GetAuthTokenFunction.java
+++ b/src/java/org/apache/juddi/function/GetAuthTokenFunction.java
@@ -72,12 +72,14 @@
       // authenticate the requestor's credentials
       String publisherID = authenticator.authenticate(userID,cred);
       if (publisherID == null)
-        throw new UnknownUserException(""user ID: ""+userID);
+        throw new UnknownUserException(""get_authToken: ""+
+            ""userID=""+userID);
 
       // ensure the user has the authority to publish
       Publisher publisher = dataStore.getPublisher(publisherID);
       if (publisher == null)
-        throw new UnknownUserException(""user ID: ""+userID);
+        throw new UnknownUserException(""get_authToken: ""+
+            ""userID=""+userID);
 
       // generate a new token (optionally using publisher info)
       String token = dataStore.generateToken(publisher);
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetBindingDetailFunction.java b/src/java/org/apache/juddi/function/GetBindingDetailFunction.java
index 3dd9d45..e8ce366 100755
--- a/src/java/org/apache/juddi/function/GetBindingDetailFunction.java
+++ b/src/java/org/apache/juddi/function/GetBindingDetailFunction.java
@@ -65,13 +65,14 @@
       for (int i=0; i<keyVector.size(); i++)
       {
         // grab the next key from the vector
-        String key = (String)keyVector.elementAt(i);
+        String bindingKey = (String)keyVector.elementAt(i);
 
         // check that this binding template really exists.
         // If not then throw an InvalidKeyPassedException.
-        if ((key == null) || (key.length() == 0) ||
-            (!dataStore.isValidBindingKey(key)))
-          throw new InvalidKeyPassedException(key);
+        if ((bindingKey == null) || (bindingKey.length() == 0) ||
+            (!dataStore.isValidBindingKey(bindingKey)))
+          throw new InvalidKeyPassedException(""get_bindingDetail: ""+
+              ""bindingKey=""+bindingKey);
       }
 
       Vector bindingVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetBusinessDetailExtFunction.java b/src/java/org/apache/juddi/function/GetBusinessDetailExtFunction.java
index ce5689a..fc1bf56 100755
--- a/src/java/org/apache/juddi/function/GetBusinessDetailExtFunction.java
+++ b/src/java/org/apache/juddi/function/GetBusinessDetailExtFunction.java
@@ -72,7 +72,8 @@
         // If the a BusinessEntity doesn't exist hrow an InvalidKeyPassedException.
         if ((businessKey == null) || (businessKey.length() == 0) ||
             (!dataStore.isValidBusinessKey(businessKey)))
-          throw new InvalidKeyPassedException(businessKey);
+          throw new InvalidKeyPassedException(""get_businessDetailExt: ""+
+              ""businessKey=""+businessKey);
       }
 
       Vector businessEntityExtVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetBusinessDetailFunction.java b/src/java/org/apache/juddi/function/GetBusinessDetailFunction.java
index 39bc1f4..6f834e7 100755
--- a/src/java/org/apache/juddi/function/GetBusinessDetailFunction.java
+++ b/src/java/org/apache/juddi/function/GetBusinessDetailFunction.java
@@ -69,7 +69,8 @@
         // If the a BusinessEntity doesn't exist throw an InvalidKeyPassedException.
         if ((businessKey == null) || (businessKey.length() == 0) ||
             (!dataStore.isValidBusinessKey(businessKey)))
-          throw new InvalidKeyPassedException(businessKey);
+          throw new InvalidKeyPassedException(""get_businessDetail: ""+
+            ""businessKey=""+businessKey);
       }
 
       Vector businessVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetPublisherDetailFunction.java b/src/java/org/apache/juddi/function/GetPublisherDetailFunction.java
index 48b6c96..931d610 100755
--- a/src/java/org/apache/juddi/function/GetPublisherDetailFunction.java
+++ b/src/java/org/apache/juddi/function/GetPublisherDetailFunction.java
@@ -69,7 +69,8 @@
         // If the a Publisher doesn't exist hrow an UnknownUserException.
         if ((publisherID == null) || (publisherID.length() == 0) ||
             (dataStore.getPublisher(publisherID) == null))
-          throw new UnknownUserException(""PublisherID: ""+publisherID);
+          throw new UnknownUserException(""get_publisher: ""+
+              ""userID=""+publisherID);
       }
 
       Vector publisherVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetServiceDetailFunction.java b/src/java/org/apache/juddi/function/GetServiceDetailFunction.java
index ca4306c..22ae9e7 100755
--- a/src/java/org/apache/juddi/function/GetServiceDetailFunction.java
+++ b/src/java/org/apache/juddi/function/GetServiceDetailFunction.java
@@ -70,7 +70,8 @@
         // If the a BusinessService doesn't exist hrow an InvalidKeyPassedException.
         if ((serviceKey == null) || (serviceKey.length() == 0) ||
             (!dataStore.isValidServiceKey(serviceKey)))
-          throw new InvalidKeyPassedException(serviceKey);
+          throw new InvalidKeyPassedException(""get_serviceDetail: ""+
+              ""serviceKey=""+serviceKey);
       }
 
       Vector serviceVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/GetTModelDetailFunction.java b/src/java/org/apache/juddi/function/GetTModelDetailFunction.java
index 378bc5e..40d5c73 100755
--- a/src/java/org/apache/juddi/function/GetTModelDetailFunction.java
+++ b/src/java/org/apache/juddi/function/GetTModelDetailFunction.java
@@ -69,7 +69,8 @@
         // If the a TModel doesn't exist hrow an InvalidKeyPassedException.
         if ((tModelKey == null) || (tModelKey.length() == 0) ||
             (!dataStore.isValidTModelKey(tModelKey)))
-          throw new InvalidKeyPassedException(tModelKey);
+          throw new InvalidKeyPassedException(""get_tModelDetail: ""+
+              ""tModelKey=""+tModelKey);
       }
 
       Vector tModelVector = new Vector();
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/SaveBindingFunction.java b/src/java/org/apache/juddi/function/SaveBindingFunction.java
index 8956ccf..fd967ae 100755
--- a/src/java/org/apache/juddi/function/SaveBindingFunction.java
+++ b/src/java/org/apache/juddi/function/SaveBindingFunction.java
@@ -88,16 +88,20 @@
         // Confirm that the 'BusinessService' that this binding belongs to
         // really exists. If not then throw an InvalidKeyPassedException.
        if ((serviceKey == null) || (serviceKey.length() == 0) || (!dataStore.isValidServiceKey(serviceKey)))
-          throw new InvalidKeyPassedException(""ServiceKey: ""+serviceKey);
+          throw new InvalidKeyPassedException(""save_binding: ""+
+              ""serviceKey=""+serviceKey);
 
         // Confirm that 'publisherID' controls the BusinessService that this
         // binding template belongs to.  If not then throw a UserMismatchException.
         if (!dataStore.isServicePublisher(serviceKey,publisherID))
-          throw new UserMismatchException(""ServiceKey: ""+serviceKey);
+          throw new UserMismatchException(""save_binding: ""+
+              ""publisherID=""+publisherID+"", ""+
+              ""serviceKey=""+serviceKey);
 
         // If a BindingKey was specified then make sure it's a valid one.
         if ((bindingKey != null) && (bindingKey.length() > 0) && (!dataStore.isValidBindingKey(bindingKey)))
-          throw new InvalidKeyPassedException(""BindingKey: ""+bindingKey);
+          throw new InvalidKeyPassedException(""save_binding: ""+
+              ""bindingKey=""+bindingKey);
 
         // Normally, a valid tModelKey MUST be specified for the keyedReference 
         // to be valid. However, in the case of a keyedReference that is used in 
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/SaveBusinessFunction.java b/src/java/org/apache/juddi/function/SaveBusinessFunction.java
index 2d8f8b3..681ffd3 100755
--- a/src/java/org/apache/juddi/function/SaveBusinessFunction.java
+++ b/src/java/org/apache/juddi/function/SaveBusinessFunction.java
@@ -82,8 +82,8 @@
 
     // UploadRegistry functionality is not currently supported.
     if ((uploadRegVector != null) && (uploadRegVector.size() > 0))
-      throw new UnsupportedException(""Saving BusinessEntities via "" +
-        ""UploadRegistry is not supported."");
+      throw new UnsupportedException(""save_business: ""+
+          ""UploadRegistry is not supported."");
 
     // aquire a jUDDI datastore instance
     DataStore dataStore = DataStoreFactory.getDataStore();
@@ -108,11 +108,14 @@
 
         // If a BusinessKey was specified then make sure it's a valid one.
         if ((businessKey != null) && (businessKey.length() > 0) && (!dataStore.isValidBusinessKey(businessKey)))
-          throw new InvalidKeyPassedException(""businessKey=""+businessKey);
+          throw new InvalidKeyPassedException(""save_business: ""+
+              ""businessKey=""+businessKey);
 
         // If a BusinessKey was specified then make sure 'publisherID' controls it.
         if ((businessKey != null) && (businessKey.length() > 0) && (!dataStore.isBusinessPublisher(businessKey,publisherID)))
-          throw new UserMismatchException(""businessKey=""+businessKey);
+          throw new UserMismatchException(""save_business: ""+
+              ""userID=""+publisherID+"", ""+
+              ""businessKey=""+businessKey);
 
         // Normally, a valid tModelKey MUST be specified for the keyedReference 
         // to be valid. However, in the case of a keyedReference that is used in 
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/SaveServiceFunction.java b/src/java/org/apache/juddi/function/SaveServiceFunction.java
index 7b626b8..1c259d3 100755
--- a/src/java/org/apache/juddi/function/SaveServiceFunction.java
+++ b/src/java/org/apache/juddi/function/SaveServiceFunction.java
@@ -96,16 +96,20 @@
         // If a BusinessKey wasn't included or it is an invalid BusinessKey then
         // throw an InvalidKeyPassedException
         if ((businessKey == null) || (businessKey.length() == 0) || (!dataStore.isValidBusinessKey(businessKey)))
-          throw new InvalidKeyPassedException(""businessKey=""+businessKey);
+          throw new InvalidKeyPassedException(""save_service: ""+
+              ""businessKey=""+businessKey);
 
         // Confirm that 'publisherID' controls the BusinessEntity that this
         // BusinessService belongs to.  If not then throw a UserMismatchException.
         if (!dataStore.isBusinessPublisher(businessKey,publisherID))
-          throw new UserMismatchException(""businessKey=""+serviceKey);
+          throw new UserMismatchException(""save_service: ""+
+              ""userID=""+publisherID+"", ""+
+              ""businessKey=""+serviceKey);
 
         // If a ServiceKey was specified then make sure it's a valid one.
         if (((serviceKey != null) && (serviceKey.length() > 0)) && (!dataStore.isValidServiceKey(serviceKey)))
-          throw new InvalidKeyPassedException(""serviceKey=""+serviceKey);
+          throw new InvalidKeyPassedException(""save_service: ""+
+              ""serviceKey=""+serviceKey);
 
         // Normally, a valid tModelKey MUST be specified for the keyedReference 
         // to be valid. However, in the case of a keyedReference that is used in 
"
juddi,974b09c0284d2d7e6e7f026b06ec3f1f714c8b36,"Fix for bug# JUDDI-57 - delete_business | service | binding do not return problem keys in error text (see: http://issues.apache.org/jira/browse/JUDDI-57)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263080 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-22 02:04:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/SaveTModelFunction.java b/src/java/org/apache/juddi/function/SaveTModelFunction.java
index f888e5c..c40ce01 100755
--- a/src/java/org/apache/juddi/function/SaveTModelFunction.java
+++ b/src/java/org/apache/juddi/function/SaveTModelFunction.java
@@ -93,11 +93,14 @@
 
         // If a TModelKey was specified then make sure it's a valid one.
         if (((tModelKey != null) && (tModelKey.length() > 0)) && (!dataStore.isValidTModelKey(tModelKey)))
-          throw new InvalidKeyPassedException(""TModelKey: ""+tModelKey);
+          throw new InvalidKeyPassedException(""save_tModel: ""+
+              ""tModelKey=""+tModelKey);
 
         // If a TModelKey was specified then make sure 'publisherID' controls it.
         if (((tModelKey != null) && (tModelKey.length() > 0)) && !dataStore.isTModelPublisher(tModelKey,publisherID))
-          throw new UserMismatchException(""TModelKey: ""+tModelKey);
+          throw new UserMismatchException(""save_tModel: ""+
+              ""userID=""+publisherID+"", ""+
+              ""tModelKey=""+tModelKey);
 
         // Normally, a valid tModelKey MUST be specified for the keyedReference 
         // to be valid. However, in the case of a keyedReference that is used in 
"
juddi,b641b26e5e16ea626752f312b7dbab0297ab66a4,"Fix for bug# JUDDI-69 - Added the missing 'direction' attribute. (see: http://issues.apache.org/jira/browse/JUDDI-69)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263078 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-21 04:07:17,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datatype/SharedRelationships.java b/src/java/org/apache/juddi/datatype/SharedRelationships.java
index e54bdba..a2570f7 100755
--- a/src/java/org/apache/juddi/datatype/SharedRelationships.java
+++ b/src/java/org/apache/juddi/datatype/SharedRelationships.java
@@ -19,13 +19,12 @@
 
 /**
  * @author Anou Manavalan
+ * @author Steve Viens (sviens@apache.org)
  */
 public class SharedRelationships implements RegistryObject
 {
   Vector keyedReferenceVector;
-
-  // TODO (anou) need to add direction
-  // <xsd:attribute name=""direction"" type=""uddi:direction"" use=""required"" />
+  String direction;
 
   /**
    *
@@ -43,6 +42,22 @@
   }
 
   /**
+   * @return Returns the direction.
+   */
+  public String getDirection() 
+  {
+    return direction;
+  }
+  
+  /**
+   * @param direction The direction to set.
+   */
+  public void setDirection(String direction) 
+  {
+    this.direction = direction;
+  }
+  
+  /**
    *
    */
   public void addKeyedReference(KeyedReference ref)
"
juddi,b641b26e5e16ea626752f312b7dbab0297ab66a4,"Fix for bug# JUDDI-69 - Added the missing 'direction' attribute. (see: http://issues.apache.org/jira/browse/JUDDI-69)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263078 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-21 04:07:17,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/SharedRelationshipsHandler.java b/src/java/org/apache/juddi/handler/SharedRelationshipsHandler.java
index 21a3c2f..0d458d1 100755
--- a/src/java/org/apache/juddi/handler/SharedRelationshipsHandler.java
+++ b/src/java/org/apache/juddi/handler/SharedRelationshipsHandler.java
@@ -47,7 +47,9 @@
     AbstractHandler handler = null;
 
     // Attributes
-    // {none}
+    String direction = element.getAttribute(""direction"");
+    if ((direction != null && (direction.trim().length() > 0)))
+      obj.setDirection(direction);
 
     // Text Node Value
     // {none}
@@ -68,6 +70,10 @@
     SharedRelationships relationships = (SharedRelationships)object;
     Element element = parent.getOwnerDocument().createElementNS(null,TAG_NAME);
 
+    String direction = relationships.getDirection();
+    if ((direction != null && (direction.length() > 0)))
+      element.setAttribute(""direction"",direction);
+
     Vector keyedRefVector = relationships.getKeyedReferenceVector();
     if ((keyedRefVector!=null) && (keyedRefVector.size() > 0))
     {
@@ -96,6 +102,7 @@
     Element child = null;
 
     SharedRelationships relationships = new SharedRelationships();
+    relationships.setDirection(""toKey"");
     relationships.addKeyedReference(new KeyedReference(""sharedRefKeyName"",""sharedRefKeyValue""));
     relationships.addKeyedReference(new KeyedReference(""uuid:8ff45356-acde-4a4c-86bf-f953611d20c6"",""sharedRefKeyName2"",""sharedRefKeyValue2""));
 
"
juddi,9421002b133633b354c5178303cddca45c95f665,"Fix for bug# JUDDI-31. Auto-generated DiscoveryURL is now configurable via juddi.properties (see: http://issues.apache.org/jira/browse/JUDDI-31)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263061 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-17 03:39:58,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/SaveBusinessFunction.java b/src/java/org/apache/juddi/function/SaveBusinessFunction.java
index 5d9a64d..2d8f8b3 100755
--- a/src/java/org/apache/juddi/function/SaveBusinessFunction.java
+++ b/src/java/org/apache/juddi/function/SaveBusinessFunction.java
@@ -293,8 +293,8 @@
     {
       // get the DiscoveryURL from the juddi properties file
       StringBuffer siteURL = new StringBuffer();
-      siteURL.append(Config.getOperatorURL());
-      siteURL.append(""/uddiget.jsp?businesskey="");
+      siteURL.append(Config.getDiscoveryURL());
+      siteURL.append(""businesskey="");
       siteURL.append(business.getBusinessKey());
       
       // add to the business entity
"
juddi,9421002b133633b354c5178303cddca45c95f665,"Fix for bug# JUDDI-31. Auto-generated DiscoveryURL is now configurable via juddi.properties (see: http://issues.apache.org/jira/browse/JUDDI-31)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263061 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-17 03:39:58,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryEngine.java b/src/java/org/apache/juddi/registry/RegistryEngine.java
index 5e516f8..73ff8d3 100755
--- a/src/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/java/org/apache/juddi/registry/RegistryEngine.java
@@ -43,7 +43,7 @@
   // Registry Property Names
   //
   public static final String PROPNAME_OPERATOR_NAME = ""juddi.operatorName"";
-  public static final String PROPNAME_OPERATOR_URL = ""juddi.operatorURL"";
+  public static final String PROPNAME_DISCOVERY_URL = ""juddi.discoveryURL"";
   public static final String PROPNAME_ADMIN_EMAIL_ADDRESS = ""juddi.adminEmailAddress""; // unused
   public static final String PROPNAME_DATASOURCE_NAME = ""juddi.dataSource"";
   
@@ -66,7 +66,7 @@
   // Registry Default Property Values
   //
   public static final String DEFAULT_OPERATOR_NAME = ""Apache.org"";
-  public static final String DEFAULT_OPERATOR_URL = ""http://localhost:8080/juddi/"";
+  public static final String DEFAULT_DISCOVERY_URL = ""http://localhost:8080/juddi/uddiget.jsp?"";
   public static final String DEFAULT_ADMIN_EMAIL_ADDRESS = ""nobody@apache.org""; // unused
   public static final String DEFAULT_DATASOURCE_NAME = ""java:comp/env/jdbc/juddiDB"";
   
@@ -207,7 +207,7 @@
     props.setProperty(RegistryEngine.PROPNAME_OPERATOR_NAME,""jUDDI.org"");
     props.setProperty(RegistryEngine.PROPNAME_MAX_NAME_ELEMENTS,""5"");
     props.setProperty(RegistryEngine.PROPNAME_MAX_NAME_LENGTH,""255"");
-    props.setProperty(RegistryEngine.PROPNAME_OPERATOR_URL,""http://localhost/juddi"");
+    props.setProperty(RegistryEngine.PROPNAME_DISCOVERY_URL,""http://localhost/juddi"");
     props.setProperty(RegistryEngine.PROPNAME_ADMIN_EMAIL_ADDRESS,""admin@juddi.org"");    
     props.setProperty(RegistryEngine.PROPNAME_MAX_MESSAGE_SIZE,""2097152"");
     props.setProperty(RegistryEngine.PROPNAME_AUTH_CLASS_NAME,""org.apache.juddi.auth.DefaultAuthenticator"");
"
juddi,9421002b133633b354c5178303cddca45c95f665,"Fix for bug# JUDDI-31. Auto-generated DiscoveryURL is now configurable via juddi.properties (see: http://issues.apache.org/jira/browse/JUDDI-31)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263061 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-17 03:39:58,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryServlet.java b/src/java/org/apache/juddi/registry/RegistryServlet.java
index 2df11de..7d2ea71 100644
--- a/src/java/org/apache/juddi/registry/RegistryServlet.java
+++ b/src/java/org/apache/juddi/registry/RegistryServlet.java
@@ -125,8 +125,8 @@
         props.put(RegistryEngine.PROPNAME_OPERATOR_NAME,
                   RegistryEngine.DEFAULT_OPERATOR_NAME);
         
-        props.put(RegistryEngine.PROPNAME_OPERATOR_URL,
-                  RegistryEngine.DEFAULT_OPERATOR_URL);
+        props.put(RegistryEngine.PROPNAME_DISCOVERY_URL,
+                  RegistryEngine.DEFAULT_DISCOVERY_URL);
         
         props.put(RegistryEngine.PROPNAME_ADMIN_EMAIL_ADDRESS,
                   RegistryEngine.DEFAULT_ADMIN_EMAIL_ADDRESS);
"
juddi,9421002b133633b354c5178303cddca45c95f665,"Fix for bug# JUDDI-31. Auto-generated DiscoveryURL is now configurable via juddi.properties (see: http://issues.apache.org/jira/browse/JUDDI-31)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263061 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-17 03:39:58,Stephen Viens,"diff --git a/src/java/org/apache/juddi/util/Config.java b/src/java/org/apache/juddi/util/Config.java
index 8276dd4..2bc18b7 100755
--- a/src/java/org/apache/juddi/util/Config.java
+++ b/src/java/org/apache/juddi/util/Config.java
@@ -86,10 +86,10 @@
   /**
    *
    */
-  public static String getOperatorURL()
+  public static String getDiscoveryURL()
   {
-    return getStringProperty(RegistryEngine.PROPNAME_OPERATOR_URL,
-              RegistryEngine.DEFAULT_OPERATOR_URL);
+    return getStringProperty(RegistryEngine.PROPNAME_DISCOVERY_URL,
+              RegistryEngine.DEFAULT_DISCOVERY_URL);
   }
 
   /**
"
juddi,d8cf3956164aa9f4327d0d09acf576df1965675b,"Fix for bug#'s JUDDI-5 and JUDDI-12. The find-by-name find qualifier logic for the find_service has been implemented (see http://issues.apache.org/jira/browse/JUDDI-5 or http://issues.apache.org/jira/browse/JUDDI-12)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263059 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-17 02:16:03,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
index 8d4a897..2e17228 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
@@ -125,41 +125,59 @@
       sql.addValue(businessKey);
     }
 
-    if ((names != null) && (names.size() > 0))
+    if (names != null)
     {
-      sql.append(""AND ("");
-
       int nameSize = names.size();
-      for (int i=0; i<nameSize; i++)
+      if (nameSize > 0)
       {
-        Name name = (Name)names.elementAt(i);
-        String text = name.getValue();
-        String lang = name.getLanguageCode();
+        sql.append(""AND ("");
 
-        if ((text != null) && (text.length() > 0))
+        for (int i=0; i<nameSize; i++)
         {
-          if ((qualifiers != null) && (qualifiers.exactNameMatch))
-          {
-            sql.append(""(NAME = ?"");
-            sql.addValue(text);
-          }
-          else
-          {
-            sql.append(""(NAME LIKE ?"");
-            sql.addValue(text.endsWith(""%"") ? text : text+""%"");
-          }
+          Name name = (Name)names.elementAt(i);
+          String text = name.getValue();
+          String lang = name.getLanguageCode();
 
-          // If lang is ""en"" we'll need to match with ""en"", ""en_US"" or ""en_UK""
-          if ((lang != null) && (lang.length() > 0))
+          if ((text != null) && (text.length() > 0))
           {
-            sql.append("" AND (UPPER(LANG_CODE) LIKE ?)"");
-            sql.addValue(lang.toUpperCase()+""%"");
+            if (qualifiers == null) // default
+            {
+              sql.append(""(UPPER(NAME) LIKE ?"");
+              sql.addValue(text.endsWith(""%"") ? text.toUpperCase() : text.toUpperCase()+""%"");
+            }
+            else if ((qualifiers.caseSensitiveMatch) && (qualifiers.exactNameMatch))
+            {
+              sql.append(""(NAME = ?"");
+              sql.addValue(text);
+            }
+            else if ((!qualifiers.caseSensitiveMatch) && (qualifiers.exactNameMatch))
+            {
+              sql.append(""(UPPER(NAME) = ?"");
+              sql.addValue(text.toUpperCase());
+            }
+            else if ((qualifiers.caseSensitiveMatch) && (!qualifiers.exactNameMatch))
+            {
+              sql.append(""(NAME LIKE ?"");
+              sql.addValue(text.endsWith(""%"") ? text : text+""%"");
+            }
+            else if ((!qualifiers.caseSensitiveMatch) && (!qualifiers.exactNameMatch))
+            {
+              sql.append(""(UPPER(NAME) LIKE ?"");
+              sql.addValue(text.endsWith(""%"") ? text.toUpperCase() : text.toUpperCase()+""%"");
+            }
+
+            // If lang is ""en"" we'll need to match with ""en"", ""en_US"" or ""en_UK""
+            if ((lang != null) && (lang.length() > 0))
+            {
+              sql.append("" AND (UPPER(LANG_CODE) LIKE ?)"");
+              sql.addValue(lang.toUpperCase()+""%"");
+            }
+            
+            sql.append("")"");
+
+            if (i+1 < nameSize)
+              sql.append("" OR "");
           }
-
-          sql.append("")"");
-
-          if (i+1 < nameSize)
-            sql.append("" OR "");
         }
       }
 
"
juddi,81c8829e8d7e81b195aaee65884624418c92aa67,"Fix for bug# JUDDI-67 - find_service should return matches when only businessKey is provided (see: http://issues.apache.org/jira/browse/JUDDI-67)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263056 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-16 03:39:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindBindingFunction.java b/src/java/org/apache/juddi/function/FindBindingFunction.java
index 38fcf39..97012cf 100755
--- a/src/java/org/apache/juddi/function/FindBindingFunction.java
+++ b/src/java/org/apache/juddi/function/FindBindingFunction.java
@@ -71,13 +71,9 @@
     // first make sure we need to continue with this request. If
     // no arguments were passed in then we'll simply return
     // an empty ServiceList (aka ""a zero match result set"").
-     /**
-      * NOTE from anil:  This is not correct. If there is a request
-      * to provide BindingTemplate with only the Service Key provided.
-      * You need to provide the list.
-      */
-    /*if(((categoryBag == null) || (categoryBag.size() == 0)) &&
-      ((tModelBag == null)   || (tModelBag.size() == 0)))
+    if(((serviceKey == null) || (serviceKey.length() == 0)) &&
+       ((categoryBag == null) || (categoryBag.size() == 0)) &&
+       ((tModelBag == null)   || (tModelBag.size() == 0)))
     {
       BindingDetail detail = new BindingDetail();
       detail.setGeneric(generic);
@@ -85,7 +81,7 @@
       detail.setOperator(Config.getOperator());
       detail.setTruncated(false);
       return detail;
-    } */
+    }
 
     // Validate CategoryBag and (if neccessary) add TModelKey for: uddiorg:general_keywords
     if (categoryBag != null)
"
juddi,81c8829e8d7e81b195aaee65884624418c92aa67,"Fix for bug# JUDDI-67 - find_service should return matches when only businessKey is provided (see: http://issues.apache.org/jira/browse/JUDDI-67)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263056 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-16 03:39:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindServiceFunction.java b/src/java/org/apache/juddi/function/FindServiceFunction.java
index 484cd67..9ea5a1c 100755
--- a/src/java/org/apache/juddi/function/FindServiceFunction.java
+++ b/src/java/org/apache/juddi/function/FindServiceFunction.java
@@ -73,7 +73,8 @@
     // first make sure we need to continue with this request. If
     // no arguments were passed in then we'll simply return
     // an empty ServiceList (aka ""a zero match result set"").
-    if (((nameVector == null) || (nameVector.size() == 0))  &&
+    if(((businessKey == null) || (businessKey.length() == 0)) &&
+       ((nameVector == null) || (nameVector.size() == 0))  &&
        ((categoryBag == null) || (categoryBag.size() == 0)) &&
        ((tModelBag == null)   || (tModelBag.size() == 0)))
     {
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BindingTemplateHandler.java b/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
index a30a180..7d666e5 100755
--- a/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
+++ b/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
@@ -62,7 +62,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,AccessPointHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BusinessEntityHandler.java b/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
index 7ae18ba..3404abe 100755
--- a/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
+++ b/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
@@ -82,14 +82,18 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DescriptionHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DiscoveryURLsHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BusinessInfoHandler.java b/src/java/org/apache/juddi/handler/BusinessInfoHandler.java
index a0813b4..c91fa59 100755
--- a/src/java/org/apache/juddi/handler/BusinessInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/BusinessInfoHandler.java
@@ -18,6 +18,7 @@
 import java.util.Vector;
 
 import org.apache.juddi.datatype.Description;
+import org.apache.juddi.datatype.Name;
 import org.apache.juddi.datatype.RegistryObject;
 import org.apache.juddi.datatype.response.BusinessInfo;
 import org.apache.juddi.datatype.response.ServiceInfos;
@@ -58,14 +59,18 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((org.apache.juddi.datatype.Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DescriptionHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,ServiceInfosHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BusinessServiceHandler.java b/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
index d46838d..293a726 100755
--- a/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
+++ b/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
@@ -68,14 +68,18 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DescriptionHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,BindingTemplatesHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/ContactHandler.java b/src/java/org/apache/juddi/handler/ContactHandler.java
index f0539c6..dff7898 100755
--- a/src/java/org/apache/juddi/handler/ContactHandler.java
+++ b/src/java/org/apache/juddi/handler/ContactHandler.java
@@ -74,7 +74,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,AddressHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/DescriptionHandler.java b/src/java/org/apache/juddi/handler/DescriptionHandler.java
index 1d7875e..f1425d7 100755
--- a/src/java/org/apache/juddi/handler/DescriptionHandler.java
+++ b/src/java/org/apache/juddi/handler/DescriptionHandler.java
@@ -38,20 +38,21 @@
   }
 
   public RegistryObject unmarshal(Element element)
-  {
-    Description obj = new Description();
-
+  {   
     // Attributes
     String langCode = element.getAttribute(""xml:lang"");
-    if ((langCode != null) && (langCode.trim().length() > 0))
-      obj.setLanguageCode(langCode);
 
     // Text Node Value
-    obj.setValue(XMLUtils.getText(element));
+    String descValue = XMLUtils.getText(element);
 
     // Child Elements
     // {none}
 
+    // Only create Description instance if descValue not null and not zero-length
+    Description obj = null;
+    if ((descValue != null) && (descValue.trim().length() > 0)) 
+      obj = new Description(descValue,langCode);
+    
     return obj;
   }
 
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/FindBusinessHandler.java b/src/java/org/apache/juddi/handler/FindBusinessHandler.java
index 1ffd0c0..8af8f90 100755
--- a/src/java/org/apache/juddi/handler/FindBusinessHandler.java
+++ b/src/java/org/apache/juddi/handler/FindBusinessHandler.java
@@ -71,34 +71,35 @@
     // {none}
 
     // Child Elements
-
-  nodeList = XMLUtils.getChildElementsByTagName(element,FindQualifiersHandler.TAG_NAME);
-  if (nodeList.size() > 0)
-  {
-    handler = maker.lookup(FindQualifiersHandler.TAG_NAME);
-    obj.setFindQualifiers((FindQualifiers)handler.unmarshal((Element)nodeList.elementAt(0)));
-  }
+    nodeList = XMLUtils.getChildElementsByTagName(element,FindQualifiersHandler.TAG_NAME);
+    if (nodeList.size() > 0)
+    {
+      handler = maker.lookup(FindQualifiersHandler.TAG_NAME);
+      obj.setFindQualifiers((FindQualifiers)handler.unmarshal((Element)nodeList.elementAt(0)));
+    }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,NameHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
-  nodeList = XMLUtils.getChildElementsByTagName(element,IdentifierBagHandler.TAG_NAME);
-  if (nodeList.size() > 0)
-  {
-    handler = maker.lookup(IdentifierBagHandler.TAG_NAME);
-    obj.setIdentifierBag((IdentifierBag)handler.unmarshal((Element)nodeList.elementAt(0)));
-  }
+    nodeList = XMLUtils.getChildElementsByTagName(element,IdentifierBagHandler.TAG_NAME);
+    if (nodeList.size() > 0)
+    {
+      handler = maker.lookup(IdentifierBagHandler.TAG_NAME);
+      obj.setIdentifierBag((IdentifierBag)handler.unmarshal((Element)nodeList.elementAt(0)));
+    }
 
-  nodeList = XMLUtils.getChildElementsByTagName(element,CategoryBagHandler.TAG_NAME);
-  if (nodeList.size() > 0)
-  {
-    handler = maker.lookup(CategoryBagHandler.TAG_NAME);
-    obj.setCategoryBag((CategoryBag)handler.unmarshal((Element)nodeList.elementAt(0)));
-  }
+    nodeList = XMLUtils.getChildElementsByTagName(element,CategoryBagHandler.TAG_NAME);
+    if (nodeList.size() > 0)
+    {
+      handler = maker.lookup(CategoryBagHandler.TAG_NAME);
+      obj.setCategoryBag((CategoryBag)handler.unmarshal((Element)nodeList.elementAt(0)));
+    }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,TModelBagHandler.TAG_NAME);
     if (nodeList.size() > 0)
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/FindPublisherHandler.java b/src/java/org/apache/juddi/handler/FindPublisherHandler.java
index 1a5dddd..bbcd1bc 100755
--- a/src/java/org/apache/juddi/handler/FindPublisherHandler.java
+++ b/src/java/org/apache/juddi/handler/FindPublisherHandler.java
@@ -65,7 +65,9 @@
     if (nodeList.size() > 0)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.setName((Name)handler.unmarshal((Element)nodeList.elementAt(0)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(0));
+      if (name != null)
+        obj.setName(name);    
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,FindQualifiersHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/FindServiceHandler.java b/src/java/org/apache/juddi/handler/FindServiceHandler.java
index b3bc3db..1f305b5 100755
--- a/src/java/org/apache/juddi/handler/FindServiceHandler.java
+++ b/src/java/org/apache/juddi/handler/FindServiceHandler.java
@@ -76,7 +76,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,FindQualifiersHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/FindTModelHandler.java b/src/java/org/apache/juddi/handler/FindTModelHandler.java
index 1648739..75740ff 100755
--- a/src/java/org/apache/juddi/handler/FindTModelHandler.java
+++ b/src/java/org/apache/juddi/handler/FindTModelHandler.java
@@ -71,7 +71,9 @@
     if (nodeList.size() > 0)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.setName((Name)handler.unmarshal((Element)nodeList.elementAt(0)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(0));
+      if (name != null)
+        obj.setName(name);    
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,FindQualifiersHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/InstanceDetailsHandler.java b/src/java/org/apache/juddi/handler/InstanceDetailsHandler.java
index 289f960..b7d054d 100755
--- a/src/java/org/apache/juddi/handler/InstanceDetailsHandler.java
+++ b/src/java/org/apache/juddi/handler/InstanceDetailsHandler.java
@@ -59,7 +59,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,OverviewDocHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/NameHandler.java b/src/java/org/apache/juddi/handler/NameHandler.java
index 8bbd83f..4913bea 100755
--- a/src/java/org/apache/juddi/handler/NameHandler.java
+++ b/src/java/org/apache/juddi/handler/NameHandler.java
@@ -39,20 +39,21 @@
   }
 
   public RegistryObject unmarshal(Element element)
-  {
-    Name obj = new Name();
-
+  {   
     // Attributes
     String langCode = element.getAttribute(""xml:lang"");
-    if ((langCode != null) && (langCode.trim().length() > 0))
-      obj.setLanguageCode(langCode);
 
     // Text Node Value
-    obj.setValue(XMLUtils.getText(element));
+    String nameValue = XMLUtils.getText(element);
 
     // Child Elements
     // {none}
 
+    // Only create Name instance if nameValue not null and not zero-length
+    Name obj = null;
+    if ((nameValue != null) && (nameValue.trim().length() > 0)) 
+      obj = new Name(nameValue,langCode);
+    
     return obj;
   }
 
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/OverviewDocHandler.java b/src/java/org/apache/juddi/handler/OverviewDocHandler.java
index a8c1984..9a42fd5 100755
--- a/src/java/org/apache/juddi/handler/OverviewDocHandler.java
+++ b/src/java/org/apache/juddi/handler/OverviewDocHandler.java
@@ -58,7 +58,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,OverviewURLHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/PublisherInfoHandler.java b/src/java/org/apache/juddi/handler/PublisherInfoHandler.java
index 3e2f8fe..2ff413c 100755
--- a/src/java/org/apache/juddi/handler/PublisherInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/PublisherInfoHandler.java
@@ -57,7 +57,9 @@
     if (nodeList.size() > 0)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.setName((Name)handler.unmarshal((Element)nodeList.elementAt(0)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(0));
+      if (name != null)
+        obj.setName(name);    
     }
 
     return obj;
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/RelatedBusinessInfoHandler.java b/src/java/org/apache/juddi/handler/RelatedBusinessInfoHandler.java
index 7a9002c..edba092 100755
--- a/src/java/org/apache/juddi/handler/RelatedBusinessInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/RelatedBusinessInfoHandler.java
@@ -65,14 +65,18 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((org.apache.juddi.datatype.Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DescriptionHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,SharedRelationshipsHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/ServiceInfoHandler.java b/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
index ab8a449..b2fb265 100755
--- a/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
@@ -58,7 +58,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.addName((Name)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(i));
+      if (name != null)
+        obj.addName(name);
     }
 
     return obj;
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/SubscriptionHandler.java b/src/java/org/apache/juddi/handler/SubscriptionHandler.java
index 7bccdc9..4dbb9ba 100644
--- a/src/java/org/apache/juddi/handler/SubscriptionHandler.java
+++ b/src/java/org/apache/juddi/handler/SubscriptionHandler.java
@@ -44,6 +44,8 @@
 
   public RegistryObject unmarshal(Element element)
   {
+    // TODO (UDDI v3) Fill out SubscriptoinHandler.unmarshal()
+      
     Subscription obj = new Subscription();
     Vector nodeList = null;
     AbstractHandler handler = null;
@@ -55,11 +57,6 @@
     // [none]
 
     // Child Elements
-    nodeList = XMLUtils.getChildElementsByTagName(element,NameHandler.TAG_NAME);
-    if (nodeList.size() > 0)
-    {
-      // TODO (UDDI v3) Fill out SubscriptoinHandler.unmarshal()
-    }
 
     return obj;
   }
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/TModelHandler.java b/src/java/org/apache/juddi/handler/TModelHandler.java
index cf14ebd..06162e3 100755
--- a/src/java/org/apache/juddi/handler/TModelHandler.java
+++ b/src/java/org/apache/juddi/handler/TModelHandler.java
@@ -64,14 +64,18 @@
     if (nodeList.size() > 0)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.setName((Name)handler.unmarshal((Element)nodeList.elementAt(0)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(0));
+      if (name != null)
+        obj.setName(name);    
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,DescriptionHandler.TAG_NAME);
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,OverviewDocHandler.TAG_NAME);
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/TModelInfoHandler.java b/src/java/org/apache/juddi/handler/TModelInfoHandler.java
index 3eb758c..cd5bc5b 100755
--- a/src/java/org/apache/juddi/handler/TModelInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/TModelInfoHandler.java
@@ -56,7 +56,9 @@
     if (nodeList.size() > 0)
     {
       handler = maker.lookup(NameHandler.TAG_NAME);
-      obj.setName((Name)handler.unmarshal((Element)nodeList.elementAt(0)));
+      Name name = (Name )handler.unmarshal((Element)nodeList.elementAt(0));
+      if (name != null)
+        obj.setName(name);    
     }
 
     return obj;
"
juddi,df312a250878c8121c551776926b5ddb7ad62353,"Fix for bug# JUDDI-64 - BindingTemplate does not check empty description (see: http://issues.apache.org/jira/browse/JUDDI-64 )


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263055 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:22:41,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/TModelInstanceInfoHandler.java b/src/java/org/apache/juddi/handler/TModelInstanceInfoHandler.java
index 8bb1f0f..af36dd0 100755
--- a/src/java/org/apache/juddi/handler/TModelInstanceInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/TModelInstanceInfoHandler.java
@@ -56,7 +56,9 @@
     for (int i=0; i<nodeList.size(); i++)
     {
       handler = maker.lookup(DescriptionHandler.TAG_NAME);
-      obj.addDescription((Description)handler.unmarshal((Element)nodeList.elementAt(i)));
+      Description descr = (Description)handler.unmarshal((Element)nodeList.elementAt(i));
+      if (descr != null)
+        obj.addDescription(descr);
     }
 
     nodeList = XMLUtils.getChildElementsByTagName(element,InstanceDetailsHandler.TAG_NAME);
"
juddi,946681fd9ff2ad00b7af77a49351ed04c80f0cf1,"Fix for bug# JUDDI-66 - Ambiguous DispositionReport returned when invalid XML is sent in SOAP request (see: http://issues.apache.org/jira/browse/JUDDI-66)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263054 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:09:33,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryServlet.java b/src/java/org/apache/juddi/registry/RegistryServlet.java
index d741054..2df11de 100644
--- a/src/java/org/apache/juddi/registry/RegistryServlet.java
+++ b/src/java/org/apache/juddi/registry/RegistryServlet.java
@@ -372,13 +372,37 @@
           }
         }
       }
-      else
+      else if (ex instanceof SOAPException)
       {
-        // All other exceptions (other than RegistryException
-        // and subclasses) are either a result of a jUDDI 
-        // configuration problem or something that we *should* 
-        // be catching and converting to a RegistryException 
-        // but are not (yet!).
+        log.error(ex.getMessage());
+          
+        // Because something occured that jUDDI wasn't expecting
+        // let's set default SOAP Fault values.  Since SOAPExceptions
+        // here are most likely XML validation errors let's blame the
+        // client by placing ""Client"" in the Fault Code and pass
+        // the Exception message back to the client.
+        
+        faultCode = ""Client"";
+        faultString = ex.getMessage();
+        faultActor = null;
+        
+        // Let's set default values for the UDDI DispositionReport
+        // here.  While we didn't catch a RegistryException (or 
+        // subclass) we're going to be friendly and include a
+        // FatalError DispositionReport within the message from the 
+        // SAX parsing problem in the SOAP Fault anyway.
+        
+        errno = String.valueOf(Result.E_FATAL_ERROR);
+        errCode = Result.E_FATAL_ERROR_CODE;
+        errMsg = ex.getMessage();
+      }
+      else // anything else
+      {
+        // All other exceptions (other than SOAPException or 
+        // RegistryException and subclasses) are either a result 
+        // of a jUDDI configuration problem or something that 
+        // we *should* be catching and converting to a 
+        // RegistryException but are not (yet!).
             
         log.error(ex.getMessage(),ex);
 
"
juddi,688e16200f992802d614e2d3a6f91bd5e6a76187,"Fix for bug# JUDDI-65 - Searching for Business & Service by LANG_CODE shouldn't require exact match (see: http://issues.apache.org/jira/browse/JUDDI-65).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263053 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:07:37,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
index 5b2022f..f2c8ac9 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
@@ -157,10 +157,11 @@
               sql.addValue(text.endsWith(""%"") ? text.toUpperCase() : text.toUpperCase()+""%"");
             }
 
+            // If lang is ""en"" we'll need to match with ""en"", ""en_US"" or ""en_UK""
             if ((lang != null) && (lang.length() > 0))
             {
-              sql.append("" AND LANG_CODE = ?"");
-              sql.addValue(lang);
+              sql.append("" AND (UPPER(LANG_CODE) LIKE ?)"");
+              sql.addValue(lang.toUpperCase()+""%"");
             }
             
             sql.append("")"");
"
juddi,688e16200f992802d614e2d3a6f91bd5e6a76187,"Fix for bug# JUDDI-65 - Searching for Business & Service by LANG_CODE shouldn't require exact match (see: http://issues.apache.org/jira/browse/JUDDI-65).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263053 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-15 02:07:37,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
index e9ea915..8d4a897 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
@@ -149,10 +149,11 @@
             sql.addValue(text.endsWith(""%"") ? text : text+""%"");
           }
 
+          // If lang is ""en"" we'll need to match with ""en"", ""en_US"" or ""en_UK""
           if ((lang != null) && (lang.length() > 0))
           {
-            sql.append("" AND LANG_CODE = ?"");
-            sql.addValue(lang);
+            sql.append("" AND (UPPER(LANG_CODE) LIKE ?)"");
+            sql.addValue(lang.toUpperCase()+""%"");
           }
 
           sql.append("")"");
"
juddi,c47034933748937c276b1c06699f51b8b96edc5f,"Applied alternate fix (JUDDI-63) for missing XML declaration in response messages recommended by Guillaume Sauthier.  See http://issues.apache.org/jira/browse/JUDDI-63 for more info.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@263031 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-08 17:50:47,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryServlet.java b/src/java/org/apache/juddi/registry/RegistryServlet.java
index 0033775..dcfb4fb 100644
--- a/src/java/org/apache/juddi/registry/RegistryServlet.java
+++ b/src/java/org/apache/juddi/registry/RegistryServlet.java
@@ -17,8 +17,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
 import java.util.Properties;
 import java.util.Vector;
 
@@ -442,11 +440,8 @@
     finally 
     {
       try {  
-        OutputStream stream = res.getOutputStream();        
-        OutputStreamWriter writer = new OutputStreamWriter(stream); 
-        writer.write(""<?xml version='1.0' encoding='UTF-8'?>\n"");
-        writer.flush();        
-        soapRes.writeTo(stream); 
+        soapRes.setProperty(SOAPMessage.WRITE_XML_DECLARATION,""true"");
+        soapRes.writeTo(res.getOutputStream()); 
       }
       catch(SOAPException sex) {
         log.error(sex);
"
juddi,0477576f36245610bf01d736c8e703cf551cb1ea,"Corrected SOAPFault issue reported by Anne Thomas Manes and outlined in issue# 58 (http://issues.apache.org/jira/browse/JUDDI-58).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262996 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-01 03:49:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryServlet.java b/src/java/org/apache/juddi/registry/RegistryServlet.java
index 4bd5f24..82dc393 100644
--- a/src/java/org/apache/juddi/registry/RegistryServlet.java
+++ b/src/java/org/apache/juddi/registry/RegistryServlet.java
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
+import java.util.Vector;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
@@ -30,7 +31,7 @@
 import javax.xml.soap.Detail;
 import javax.xml.soap.MessageFactory;
 import javax.xml.soap.SOAPBody;
-import javax.xml.soap.SOAPEnvelope;
+import javax.xml.soap.SOAPElement;
 import javax.xml.soap.SOAPException;
 import javax.xml.soap.SOAPFault;
 import javax.xml.soap.SOAPMessage;
@@ -40,6 +41,8 @@
 import org.apache.juddi.IRegistry;
 import org.apache.juddi.datatype.RegistryObject;
 import org.apache.juddi.datatype.response.DispositionReport;
+import org.apache.juddi.datatype.response.ErrInfo;
+import org.apache.juddi.datatype.response.Result;
 import org.apache.juddi.error.BusyException;
 import org.apache.juddi.error.RegistryException;
 import org.apache.juddi.error.UnsupportedException;
@@ -287,77 +290,102 @@
       // only child here (this has the effect of
       // discarding the temp element) and append 
       // this child to the soap response body
-        
+      
       document.appendChild(element.getFirstChild());
       soapRes.getSOAPBody().addDocument(document);
     } 
-    catch (RegistryException ex) {             
-      log.error(ex);
+    catch(Exception ex)
+    {
+      log.error(ex.getMessage(),ex);
+
+      String faultCode = null;
+      String faultString = null;
+      String faultActor = null;      
+      String errno = null;
+      String errCode = null;
+      String errMsg = null;
       
-      try {        
-        SOAPBody body = soapRes.getSOAPBody();
-        SOAPFault soapFault = body.addFault();
-        soapFault.setFaultActor((ex.getFaultActor() == null) ? """" : ex.getFaultActor());
-        soapFault.setFaultString((ex.getFaultString() == null) ? """" : ex.getFaultString());
-        soapFault.setFaultCode((ex.getFaultCode() == null) ? """" : ex.getFaultCode());
-          
-        // Store DispositionReport in the SOAP fault node.
-        DispositionReport dispRpt = ex.getDispositionReport();
+      // If a RegistryException was thrown dig out the
+      // dispositionReport if one exists and set the SOAP
+      // Fault & DispositionReport values with what we find.
+      
+      if (ex instanceof RegistryException)
+      {
+        RegistryException rex = (RegistryException)ex;
+        
+        faultCode = rex.getFaultCode();  // SOAP Fault faultCode
+        faultString = rex.getFaultString();  // SOAP Fault faultString
+        faultActor = rex.getFaultActor();  // SOAP Fault faultActor
+        
+        DispositionReport dispRpt = rex.getDispositionReport();
         if (dispRpt != null)
-        {          
-          dispRpt.setGeneric(generic);
-          dispRpt.setOperator(Config.getOperator());
-
-          // Create a new 'temp' XML element to use as a container 
-          // in which to marshal the DispositionReport into.
-             
-          DocumentBuilder docBuilder = getDocumentBuilder();
-          Document document = docBuilder.newDocument();
-          Element dispRptElement = document.createElement(""temp"");
-
-          // Lookup the DispositionReportHandler and marshal 
-          // the juddi object into the appropriate xml format (we 
-          // only support UDDI v2.0 at this time).  Attach the
-          // results to the body of the SOAP fault.
-              
-          IHandler dispRptHandler = maker.lookup(DispositionReport.class.getName());
-          dispRptHandler.marshal(dispRpt,dispRptElement);   
-            
-          // Create the SOAPFault Detail element and insert 
-          // the DispositionReport.
-            
-          Detail soapDetail = soapFault.addDetail();
-          soapDetail.appendChild(dispRptElement.getFirstChild());
+        {
+          Result result = null;
+          ErrInfo errInfo = null;
+        
+          Vector results = dispRpt.getResultVector();
+          if ((results != null) && (!results.isEmpty()))
+            result = (Result)results.elementAt(0);
+        
+          if (result != null)
+          {
+            errno = String.valueOf(result.getErrno());  // UDDI DispositionReport errno
+            errInfo = result.getErrInfo();
+          
+            if (errInfo != null)
+            {
+              errCode = errInfo.getErrCode();  // UDDI DispositionReport errCode
+              errMsg = errInfo.getErrMsg();  // UDDI DispositionReport errMsg
+            }
+          }
         }
       }
-      catch(SOAPException sex) {
-        log.error(sex);
+      else
+      {
+        // All other exceptions (other than RegistryException
+        // and subclasses) are either a result of a jUDDI 
+        // configuration problem or something that we *should* 
+        // be catching and converting to a RegistryException 
+        // but are not (yet!).
+          
+        faultCode = ""Server"";
+        faultString = ex.getMessage();
+        faultActor = null;
+          
+        errno = String.valueOf(Result.E_FATAL_ERROR);
+        errCode = Result.E_FATAL_ERROR_CODE;
+        errMsg = ""An internal UDDI server error has "" +
+                 ""occurred. Please report this error "" +
+                 ""to the UDDI server administrator."";
       }
-    } 
-    catch (SOAPException ex) {             
-      log.error(ex);
-
+      
+      // All other exceptions (other than RegistryException
+      // and subclasses) are either a jUDDI configuration 
+      // problem or something that we *should* be catching and
+      // converting to a RegistryException but are not (yet!).
+        
       try {
-        SOAPEnvelope envelope = soapRes.getSOAPPart().getEnvelope();
-        SOAPBody body = envelope.getBody(); 
-        SOAPFault soapFault = body.addFault();
-        soapFault.setFaultString(ex.getMessage());        
-      }
-      catch(SOAPException sex) {
-        log.error(sex);
-      }
-    } 
-    catch(Exception ex) {
-      log.error(ex);
-
-      try {
-        SOAPEnvelope envelope = soapRes.getSOAPPart().getEnvelope();
-        SOAPBody body = envelope.getBody(); 
-        SOAPFault soapFault = body.addFault();
-        soapFault.setFaultString(ex.getMessage());        
-      }
-      catch(SOAPException sex) {
-        log.error(sex);
+        SOAPBody soapResBody = soapRes.getSOAPBody();     
+        SOAPFault soapFault = soapResBody.addFault();
+        soapFault.setFaultCode(faultCode);
+        soapFault.setFaultString(faultString);
+        soapFault.setFaultActor(faultActor);
+        
+        Detail faultDetail = soapFault.addDetail();
+        
+        SOAPElement dispRpt = faultDetail.addChildElement(""dispositionReport"","""",IRegistry.UDDI_V2_NAMESPACE);        
+        dispRpt.setAttribute(""generic"",IRegistry.UDDI_V2_GENERIC);
+        dispRpt.setAttribute(""operator"",Config.getOperator());
+        
+        SOAPElement result = dispRpt.addChildElement(""result"");
+        result.setAttribute(""errno"",errno);
+        
+        SOAPElement errInfo = result.addChildElement(""errInfo"");
+        errInfo.setAttribute(""errCode"",errCode);
+        errInfo.setValue(errMsg);
+      } 
+      catch (Exception e) { 
+        e.printStackTrace(); 
       }
     }
     finally {
"
juddi,0477576f36245610bf01d736c8e703cf551cb1ea,"Corrected SOAPFault issue reported by Anne Thomas Manes and outlined in issue# 58 (http://issues.apache.org/jira/browse/JUDDI-58).


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262996 13f79535-47bb-0310-9956-ffa450edef68
",2005-03-01 03:49:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/transport/axis/AxisProcessor.java b/src/java/org/apache/juddi/transport/axis/AxisProcessor.java
index 9175e4c..7e7b69e 100755
--- a/src/java/org/apache/juddi/transport/axis/AxisProcessor.java
+++ b/src/java/org/apache/juddi/transport/axis/AxisProcessor.java
@@ -15,6 +15,13 @@
  */
 package org.apache.juddi.transport.axis;
 
+import java.util.Vector;
+
+import javax.xml.soap.Detail;
+import javax.xml.soap.SOAPBody;
+import javax.xml.soap.SOAPElement;
+import javax.xml.soap.SOAPFault;
+
 import org.apache.axis.AxisFault;
 import org.apache.axis.Message;
 import org.apache.axis.MessageContext;
@@ -25,10 +32,11 @@
 import org.apache.juddi.IRegistry;
 import org.apache.juddi.datatype.RegistryObject;
 import org.apache.juddi.datatype.response.DispositionReport;
+import org.apache.juddi.datatype.response.ErrInfo;
+import org.apache.juddi.datatype.response.Result;
 import org.apache.juddi.error.BusyException;
 import org.apache.juddi.error.RegistryException;
 import org.apache.juddi.error.UnsupportedException;
-import org.apache.juddi.handler.DispositionReportHandler;
 import org.apache.juddi.handler.HandlerMaker;
 import org.apache.juddi.handler.IHandler;
 import org.apache.juddi.monitor.Monitor;
@@ -67,6 +75,11 @@
     if (monitor != null)
       monitor.inspectMessageContext(messageContext);
 
+    // the soap request and response objects.
+
+    SOAPEnvelope soapReqEnv = null;
+    SOAPEnvelope soapResEnv = null;
+
     // grab a reference to the SOAP request from
     // the Message Context
 
@@ -86,11 +99,16 @@
 
     try
     {
+      // pull the soap request and response objects from 
+      // raw request and response message objects.
+
+      soapReqEnv = soapRequest.getSOAPEnvelope();
+      soapResEnv = soapResponse.getSOAPEnvelope();
+
       // pull the uddi request xml element from
       // the body of the soapRequest
 
-      SOAPEnvelope env = soapRequest.getSOAPEnvelope();
-      SOAPBodyElement requestBody = env.getFirstBody();
+      SOAPBodyElement requestBody = soapReqEnv.getFirstBody();
       request = requestBody.getAsDOM();
 
       // make the monitor inspect the SOAP Body
@@ -194,58 +212,112 @@
       // discarding the temp element) and appending
       // this child to the soap response body.
 
-      response = (Element)element.getFirstChild();
-    }
-    catch(RegistryException rex)
-    {
-      log.error(rex.getMessage(),rex);
-
-      String fCode = rex.getFaultCode();
-      String fString = rex.getFaultString();
-      String fActor = rex.getFaultActor();
-
-      DispositionReport dispRpt = rex.getDispositionReport();
-      if (dispRpt != null)
-      {
-        dispRpt.setGeneric(generic);
-        dispRpt.setOperator(Config.getOperator());
-      }
-
-      if (monitor != null)
-        monitor.addMonitorFault(fString);
-
-      response = createFault(fCode,fString,fActor,dispRpt);
-    }
-    catch(AxisFault axf)
-    {
-      log.error(axf.getMessage(),axf);
-
-      String fCode = String.valueOf(axf.getFaultCode());
-      String fString = axf.getFaultString();
-      String fActor = axf.getFaultActor();
-
-      if (monitor != null)
-        monitor.addMonitorFault(fString);
-
-      response = createFault(fCode,fString,fActor,null);
+      response = (Element)element.getFirstChild();      
+      SOAPBodyElement soapRespBody = new SOAPBodyElement(response);
+      SOAPEnvelope soapRespEnv = soapResponse.getSOAPEnvelope();
+      soapRespEnv.addBodyElement(soapRespBody);       
     }
     catch(Exception ex)
     {
       log.error(ex.getMessage(),ex);
 
-      String fCode = null;
-      String fString = ex.getMessage();
-      String fActor = null;
-
-      if (monitor != null)
-        monitor.addMonitorFault(fString);
-
-      response = createFault(fCode,fString,fActor,null);
+      String faultCode = null;
+      String faultString = null;
+      String faultActor = null;      
+      String errno = null;
+      String errCode = null;
+      String errMsg = null;
+      
+      // If a RegistryException was thrown dig out the
+      // dispositionReport if one exists and set the SOAP
+      // Fault & DispositionReport values with what we find.
+      
+      if (ex instanceof RegistryException)
+      {
+        RegistryException rex = (RegistryException)ex;
+        
+        faultCode = rex.getFaultCode();  // SOAP Fault faultCode
+        faultString = rex.getFaultString();  // SOAP Fault faultString
+        faultActor = rex.getFaultActor();  // SOAP Fault faultActor
+        
+        if (monitor != null)
+            monitor.addMonitorFault(faultString);
+        
+        DispositionReport dispRpt = rex.getDispositionReport();
+        if (dispRpt != null)
+        {
+          Result result = null;
+          ErrInfo errInfo = null;
+        
+          Vector results = dispRpt.getResultVector();
+          if ((results != null) && (!results.isEmpty()))
+            result = (Result)results.elementAt(0);
+        
+          if (result != null)
+          {
+            errno = String.valueOf(result.getErrno());  // UDDI DispositionReport errno
+            errInfo = result.getErrInfo();
+          
+            if (errInfo != null)
+            {
+              errCode = errInfo.getErrCode();  // UDDI DispositionReport errCode
+              errMsg = errInfo.getErrMsg();  // UDDI DispositionReport errMsg
+            }
+          }
+        }
+      }
+      else
+      {
+        // All other exceptions (other than RegistryException
+        // and subclasses) are either a result of a jUDDI 
+        // configuration problem or something that we *should* 
+        // be catching and converting to a RegistryException 
+        // but are not (yet!).
+          
+        faultCode = ""Server"";
+        faultString = ex.getMessage();
+        faultActor = null;
+          
+        errno = String.valueOf(Result.E_FATAL_ERROR);
+        errCode = Result.E_FATAL_ERROR_CODE;
+        errMsg = ""An internal UDDI server error has "" +
+                 ""occurred. Please report this error "" +
+                 ""to the UDDI server administrator."";
+      }
+      
+      // All other exceptions (other than RegistryException
+      // and subclasses) are either a jUDDI configuration 
+      // problem or something that we *should* be catching and
+      // converting to a RegistryException but are not (yet!).
+        
+      try {
+        SOAPBody soapResBody = soapResEnv.getBody();
+        SOAPFault soapFault = soapResBody.addFault();
+        soapFault.setFaultCode(faultCode);
+        soapFault.setFaultString(faultString);
+        soapFault.setFaultActor(faultActor);
+        
+        Detail faultDetail = soapFault.addDetail();
+        
+        SOAPElement dispRpt = faultDetail.addChildElement(""dispositionReport"","""",IRegistry.UDDI_V2_NAMESPACE);        
+        dispRpt.setAttribute(""generic"",IRegistry.UDDI_V2_GENERIC);
+        dispRpt.setAttribute(""operator"",Config.getOperator());
+        
+        SOAPElement result = dispRpt.addChildElement(""result"");
+        result.setAttribute(""errno"",errno);
+        
+        SOAPElement errInfo = result.addChildElement(""errInfo"");
+        errInfo.setAttribute(""errCode"",errCode);
+        errInfo.setValue(errMsg);
+      } 
+      catch (Exception e) { 
+        e.printStackTrace(); 
+      }
     }
     finally
     {
       // write the monitored information to the currently
-      // configured 'Monitor' implemneted registry (the
+      // configured 'Monitor' implemented registry (the
       // default Monitor implementation writes the monitored
       // information to a database table via JDBC).
 
@@ -253,63 +325,10 @@
         monitor.log();
     }
 
-    try {
-      SOAPBodyElement soapRespBody = new SOAPBodyElement(response);
-      SOAPEnvelope soapRespEnv = soapResponse.getSOAPEnvelope();
-      soapRespEnv.addBodyElement(soapRespBody);
-    }
-    catch(AxisFault af) {
-      af.printStackTrace();
-    }
-
     // write the SOAP response XML out to the log (on debug)
     try { log.debug(soapResponse.getSOAPPartAsString()); }
     catch(AxisFault af) {
       af.printStackTrace();
     }
-
-  }
-
-  private static Element createFault(String fCode,String fString,String fActor,DispositionReport dispRpt)
-  {
-    // create a new 'Fault' XML element.
-
-    Document document = XMLUtils.createDocument();
-    Element fault = document.createElement(""Fault"");
-
-    if (fCode != null)
-    {
-      Element fCodeElement = document.createElement(""faultcode"");
-      fCodeElement.appendChild(document.createTextNode(fCode));
-      fault.appendChild(fCodeElement);
-    }
-
-    if (fString == null)
-      fString = """";
-
-    Element fStringElement = document.createElement(""faultstring"");
-    fStringElement.appendChild(document.createTextNode(fString));
-    fault.appendChild(fStringElement);
-
-    if (fActor != null)
-    {
-      Element fActorElement = document.createElement(""faultactor"");
-      fActorElement.appendChild(document.createTextNode(fActor));
-      fault.appendChild(fActorElement);
-    }
-
-    // check for a DispositionReport in the exception and if one exists,
-    // grab it, marshal it into xml and stuff it into a SOAP fault
-    // detail element.
-
-    if (dispRpt != null)
-    {
-      Element fDetailElement = document.createElement(""detail"");
-      IHandler handler = maker.lookup(DispositionReportHandler.TAG_NAME);
-      handler.marshal(dispRpt,fDetailElement);
-      fault.appendChild(fDetailElement);
-    }
-
-    return fault;
   }
 }
"
juddi,36829faebb92c1413eeefdd6aac1d8406ffb6a8b,"Fix for issue JUDDI-55. Handlers for BusinessEntity, BusinessService, BindingTemplate, TModel and OverviewDoc did not conform to the UDDI v2 XML Schema:  http://issues.apache.org/jira/browse/JUDDI-55


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262985 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-14 13:33:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BindingTemplateHandler.java b/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
index cd4ed6a..cb6ebf5 100755
--- a/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
+++ b/src/java/org/apache/juddi/handler/BindingTemplateHandler.java
@@ -142,7 +142,7 @@
 
 //  TODO (UDDI v3) This code should be uncommented when jUDDI is ready to support UDDI v3.0
 //    CategoryBag categoryBag = binding.getCategoryBag(); // UDDI v3.0
-//    if (categoryBag != null)
+//    if ((categoryBag != null) && (categoryBag.getKeyedReferenceVector() != null) && (!categoryBag.getKeyedReferenceVector().isEmpty()))
 //    {
 //      handler = maker.lookup(CategoryBagHandler.TAG_NAME);
 //      handler.marshal(categoryBag,element);
"
juddi,36829faebb92c1413eeefdd6aac1d8406ffb6a8b,"Fix for issue JUDDI-55. Handlers for BusinessEntity, BusinessService, BindingTemplate, TModel and OverviewDoc did not conform to the UDDI v2 XML Schema:  http://issues.apache.org/jira/browse/JUDDI-55


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262985 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-14 13:33:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BusinessEntityHandler.java b/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
index 11f858b..b82b7b5 100755
--- a/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
+++ b/src/java/org/apache/juddi/handler/BusinessEntityHandler.java
@@ -186,14 +186,14 @@
     }
 
     IdentifierBag identifierBag = business.getIdentifierBag();
-    if (identifierBag != null)
+    if ((identifierBag != null) && (identifierBag.getKeyedReferenceVector() != null) && (!identifierBag.getKeyedReferenceVector().isEmpty()))
     {
       handler = maker.lookup(IdentifierBagHandler.TAG_NAME);
       handler.marshal(identifierBag,element);
     }
 
     CategoryBag categoryBag = business.getCategoryBag();
-    if (categoryBag != null)
+    if ((categoryBag != null) && (categoryBag.getKeyedReferenceVector() != null) && (!categoryBag.getKeyedReferenceVector().isEmpty()))
     {
       handler = maker.lookup(CategoryBagHandler.TAG_NAME);
       handler.marshal(categoryBag,element);
"
juddi,36829faebb92c1413eeefdd6aac1d8406ffb6a8b,"Fix for issue JUDDI-55. Handlers for BusinessEntity, BusinessService, BindingTemplate, TModel and OverviewDoc did not conform to the UDDI v2 XML Schema:  http://issues.apache.org/jira/browse/JUDDI-55


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262985 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-14 13:33:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/BusinessServiceHandler.java b/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
index 3500b5b..ea138cd 100755
--- a/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
+++ b/src/java/org/apache/juddi/handler/BusinessServiceHandler.java
@@ -133,7 +133,7 @@
     }
 
     CategoryBag categoryBag = service.getCategoryBag();
-    if (categoryBag != null)
+    if ((categoryBag != null) && (categoryBag.getKeyedReferenceVector() != null) && (!categoryBag.getKeyedReferenceVector().isEmpty()))
     {
       handler = maker.lookup(CategoryBagHandler.TAG_NAME);
       handler.marshal(categoryBag,element);
"
juddi,36829faebb92c1413eeefdd6aac1d8406ffb6a8b,"Fix for issue JUDDI-55. Handlers for BusinessEntity, BusinessService, BindingTemplate, TModel and OverviewDoc did not conform to the UDDI v2 XML Schema:  http://issues.apache.org/jira/browse/JUDDI-55


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262985 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-14 13:33:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/OverviewDocHandler.java b/src/java/org/apache/juddi/handler/OverviewDocHandler.java
index 6cd9c5a..203af3b 100755
--- a/src/java/org/apache/juddi/handler/OverviewDocHandler.java
+++ b/src/java/org/apache/juddi/handler/OverviewDocHandler.java
@@ -77,13 +77,6 @@
     Element element = parent.getOwnerDocument().createElementNS(null,TAG_NAME);
     AbstractHandler handler = null;
 
-    OverviewURL overURL = overDoc.getOverviewURL();
-    if (overURL != null)
-    {
-      handler = maker.lookup(OverviewURLHandler.TAG_NAME);
-      handler.marshal(overURL,element);
-    }
-
     Vector descrVector = overDoc.getDescriptionVector();
     if ((descrVector!=null) && (descrVector.size() > 0))
     {
@@ -92,6 +85,13 @@
         handler.marshal((Description)descrVector.elementAt(i),element);
     }
 
+    OverviewURL overURL = overDoc.getOverviewURL();
+    if (overURL != null)
+    {
+      handler = maker.lookup(OverviewURLHandler.TAG_NAME);
+      handler.marshal(overURL,element);
+    }
+
     parent.appendChild(element);
   }
 
"
juddi,36829faebb92c1413eeefdd6aac1d8406ffb6a8b,"Fix for issue JUDDI-55. Handlers for BusinessEntity, BusinessService, BindingTemplate, TModel and OverviewDoc did not conform to the UDDI v2 XML Schema:  http://issues.apache.org/jira/browse/JUDDI-55


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262985 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-14 13:33:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/TModelHandler.java b/src/java/org/apache/juddi/handler/TModelHandler.java
index f58e757..28a659e 100755
--- a/src/java/org/apache/juddi/handler/TModelHandler.java
+++ b/src/java/org/apache/juddi/handler/TModelHandler.java
@@ -139,14 +139,14 @@
     }
 
     IdentifierBag identifierBag = tModel.getIdentifierBag();
-    if (identifierBag != null)
+    if ((identifierBag != null) && (identifierBag.getKeyedReferenceVector() != null) && (!identifierBag.getKeyedReferenceVector().isEmpty()))
     {
       handler = maker.lookup(IdentifierBagHandler.TAG_NAME);
       handler.marshal(identifierBag,element);
     }
 
     CategoryBag categoryBag = tModel.getCategoryBag();
-    if (categoryBag != null)
+    if ((categoryBag != null) && (categoryBag.getKeyedReferenceVector() != null) && (!categoryBag.getKeyedReferenceVector().isEmpty()))
     {
       handler = maker.lookup(CategoryBagHandler.TAG_NAME);
       handler.marshal(categoryBag,element);
"
juddi,0083f05bfd92fd4e68eb129dcd80923b52f66b60,"Applied patch from issue JUDDI-54.  When saving a Business or Service.  New ServiceKey and BindingKey values were were being generated and used when they should not have been.  These values should only be generated when saving new Services or Bindings.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262984 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-13 16:14:22,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index 5564392..4b11ec5 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -459,7 +459,13 @@
           {
             BusinessService service = (BusinessService)serviceVector.elementAt(j);
             service.setBusinessKey(businessKey);
-            service.setServiceKey(uuidgen.uuidgen());
+
+            // create a new key if serviceKey isn't specified
+            String serviceKey = service.getServiceKey();
+            if ((serviceKey == null) || (serviceKey.length() == 0)) {
+              service.setServiceKey(uuidgen.uuidgen());
+            }
+            
             saveService(service);
           }
         }
@@ -668,7 +674,13 @@
         {
           BindingTemplate binding = (BindingTemplate)bindingList.elementAt(i);
           binding.setServiceKey(serviceKey);
-          binding.setBindingKey(uuidgen.uuidgen());
+          
+          // create a new key if bindingKey isn't specified
+          String bindingKey = binding.getBindingKey();
+          if ((bindingKey == null) || (bindingKey.length() == 0)) {
+             binding.setBindingKey(uuidgen.uuidgen());
+          }
+
           saveBinding(binding);
         }
       }
"
juddi,91b0f5f80d7512579b8dd4fc4b3065cc777c21dc,"When only the ""sortByNameAsc"" find qualifier is specified, BusinessList, ServiceList and TModelList were not returned in the correctly sorted order (ascending by name).  See JIRA issue JUDDI-50 for more information (http://issues.apache.org/jira/browse/JUDDI-50)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262968 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-02 02:57:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
index ab020d7..5b2022f 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByNameQuery.java
@@ -220,14 +220,24 @@
     }
     else if (qualifiers.sortByNameAsc || qualifiers.sortByNameDesc)
     {
-      if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
-        sql.append(""N.NAME ASC,B.LAST_UPDATE DESC"");
-      else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
-        sql.append(""N.NAME ASC,B.LAST_UPDATE ASC"");
-      else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
-        sql.append(""N.NAME DESC,B.LAST_UPDATE DESC"");
+      if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc) 
+      {
+        if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
+          sql.append(""N.NAME ASC,B.LAST_UPDATE DESC"");
+        else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
+          sql.append(""N.NAME ASC,B.LAST_UPDATE ASC"");
+        else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
+          sql.append(""N.NAME DESC,B.LAST_UPDATE DESC"");
+        else
+          sql.append(""N.NAME DESC,B.LAST_UPDATE ASC"");
+      } 
       else
-        sql.append(""N.NAME DESC,B.LAST_UPDATE ASC"");
+      {
+        if (qualifiers.sortByNameAsc)
+          sql.append(""N.NAME ASC,B.LAST_UPDATE DESC"");
+        else
+          sql.append(""N.NAME DESC,B.LAST_UPDATE DESC"");
+      }
     }
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
"
juddi,91b0f5f80d7512579b8dd4fc4b3065cc777c21dc,"When only the ""sortByNameAsc"" find qualifier is specified, BusinessList, ServiceList and TModelList were not returned in the correctly sorted order (ascending by name).  See JIRA issue JUDDI-50 for more information (http://issues.apache.org/jira/browse/JUDDI-50)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262968 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-02 02:57:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
index bd29301..e9ea915 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByNameQuery.java
@@ -211,14 +211,24 @@
     }
     else if (qualifiers.sortByNameAsc || qualifiers.sortByNameDesc)
     {
-      if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
-        sql.append(""N.NAME ASC,S.LAST_UPDATE DESC"");
-      else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
-        sql.append(""N.NAME ASC,S.LAST_UPDATE ASC"");
-      else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
-        sql.append(""N.NAME DESC,S.LAST_UPDATE DESC"");
+      if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc) 
+      {
+        if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
+          sql.append(""N.NAME ASC,S.LAST_UPDATE DESC"");
+        else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
+          sql.append(""N.NAME ASC,S.LAST_UPDATE ASC"");
+        else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
+          sql.append(""N.NAME DESC,S.LAST_UPDATE DESC"");
+        else
+          sql.append(""N.NAME DESC,S.LAST_UPDATE ASC"");
+      } 
       else
-        sql.append(""N.NAME DESC,S.LAST_UPDATE ASC"");
+      {
+        if (qualifiers.sortByNameAsc)
+          sql.append(""N.NAME ASC,S.LAST_UPDATE DESC"");
+        else
+          sql.append(""N.NAME DESC,S.LAST_UPDATE DESC"");
+      }
     }
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
"
juddi,91b0f5f80d7512579b8dd4fc4b3065cc777c21dc,"When only the ""sortByNameAsc"" find qualifier is specified, BusinessList, ServiceList and TModelList were not returned in the correctly sorted order (ascending by name).  See JIRA issue JUDDI-50 for more information (http://issues.apache.org/jira/browse/JUDDI-50)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262968 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-02 02:57:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
index 257fef4..f2d326a 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
@@ -181,14 +181,24 @@
     }
     else if (qualifiers.sortByNameAsc || qualifiers.sortByNameDesc)
     {
-      if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
-        sql.append(""M.NAME ASC,M.LAST_UPDATE DESC"");
-      else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
-        sql.append(""M.NAME ASC,M.LAST_UPDATE ASC"");
-      else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
-        sql.append(""M.NAME DESC,M.LAST_UPDATE DESC"");
+      if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc) 
+      {
+        if (qualifiers.sortByNameAsc && qualifiers.sortByDateDesc)
+          sql.append(""M.NAME ASC,M.LAST_UPDATE DESC"");
+        else if (qualifiers.sortByNameAsc && qualifiers.sortByDateAsc)
+          sql.append(""M.NAME ASC,M.LAST_UPDATE ASC"");
+        else if (qualifiers.sortByNameDesc && qualifiers.sortByDateDesc)
+          sql.append(""M.NAME DESC,M.LAST_UPDATE DESC"");
+        else
+          sql.append(""M.NAME DESC,M.LAST_UPDATE ASC"");
+      } 
       else
-        sql.append(""M.NAME DESC,M.LAST_UPDATE ASC"");
+      {
+        if (qualifiers.sortByNameAsc)
+          sql.append(""M.NAME ASC,M.LAST_UPDATE DESC"");
+        else
+          sql.append(""M.NAME DESC,M.LAST_UPDATE DESC"");
+      }
     }
     else if (qualifiers.sortByDateAsc || qualifiers.sortByDateDesc)
     {
"
juddi,1b413565ba38e218b1f4e542cb9c6d7ae2b82332,"The fetchBusiness method should not add empty CategoryBag or IdentifierBag to the returned Business.  The fetchBusiness method now checks to be sure there's something in each bag before adding it to the business.  The fetchService method had a similar issue with empty CategoryBag.  See JIRA issue JUDDI-43 for more information (http://issues.apache.org/jira/browse/JUDDI-43)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262966 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-02 02:23:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index d2e42a5..5564392 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -487,13 +487,21 @@
         business.setNameVector(BusinessNameTable.select(businessKey,connection));
         business.setDescriptionVector(BusinessDescTable.select(businessKey,connection));
 
-        IdentifierBag identifierBag = new IdentifierBag();
-        identifierBag.setKeyedReferenceVector(BusinessIdentifierTable.select(businessKey,connection));
-        business.setIdentifierBag(identifierBag);
+        Vector idVector = BusinessIdentifierTable.select(businessKey,connection); 
+        if (idVector.size() > 0) 
+        { 
+          IdentifierBag identifierBag = new IdentifierBag(); 
+          identifierBag.setKeyedReferenceVector(idVector); 
+          business.setIdentifierBag(identifierBag); 
+        } 
 
-        CategoryBag categoryBag = new CategoryBag();
-        categoryBag.setKeyedReferenceVector(BusinessCategoryTable.select(businessKey,connection));
-        business.setCategoryBag(categoryBag);
+        Vector catVector = BusinessCategoryTable.select(businessKey,connection); 
+        if (catVector.size() > 0) 
+        { 
+          CategoryBag categoryBag = new CategoryBag(); 
+          categoryBag.setKeyedReferenceVector(catVector); 
+          business.setCategoryBag(categoryBag); 
+        } 
 
         DiscoveryURLs discoveryURLs = new DiscoveryURLs();
         discoveryURLs.setDiscoveryURLVector(DiscoveryURLTable.select(businessKey,connection));
@@ -687,9 +695,13 @@
         service.setNameVector(ServiceNameTable.select(serviceKey,connection));
         service.setDescriptionVector(ServiceDescTable.select(serviceKey,connection));
 
-        CategoryBag bag = new CategoryBag();
-        bag.setKeyedReferenceVector(ServiceCategoryTable.select(serviceKey,connection));
-        service.setCategoryBag(bag);
+        Vector catVector = ServiceCategoryTable.select(serviceKey,connection); 
+        if (catVector.size() > 0) 
+        { 
+          CategoryBag bag = new CategoryBag(); 
+          bag.setKeyedReferenceVector(catVector); 
+          service.setCategoryBag(bag); 
+        }
 
         // 'fetch' the BusinessService's BindingTemplate objects
         Vector bindingVector = fetchBindingByServiceKey(serviceKey);
"
juddi,a903b91511c2da26ab213ecab54bc466c96f2785,"The BusinessKey used in the search was not being returned in the RelatedBusinessList response as it should have been.  See JIRA issue JUDDI-42 for more information (http://issues.apache.org/jira/browse/JUDDI-42)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262965 13f79535-47bb-0310-9956-ffa450edef68
",2005-02-02 01:58:27,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/FindRelatedBusinessesFunction.java b/src/java/org/apache/juddi/function/FindRelatedBusinessesFunction.java
index 549f299..f3b5cee 100755
--- a/src/java/org/apache/juddi/function/FindRelatedBusinessesFunction.java
+++ b/src/java/org/apache/juddi/function/FindRelatedBusinessesFunction.java
@@ -21,6 +21,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.juddi.datastore.DataStore;
 import org.apache.juddi.datastore.DataStoreFactory;
+import org.apache.juddi.datatype.BusinessKey;
 import org.apache.juddi.datatype.KeyedReference;
 import org.apache.juddi.datatype.RegistryObject;
 import org.apache.juddi.datatype.request.FindQualifiers;
@@ -99,6 +100,7 @@
       list.setGeneric(generic);
       list.setOperator(Config.getOperator());
       list.setTruncated(truncatedResults);
+      list.setBusinessKey(new BusinessKey(businessKey));
       list.setRelatedBusinessInfos(infos);
       return list;
     }
"
juddi,e26b411a3c41d87d2225dbd05f9e4e23860e956c,"Fix for bug JUDDI-41.  For more detailed information see: http://nagoya.apache.org/jira/browse/JUDDI-41


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262929 13f79535-47bb-0310-9956-ffa450edef68
",2004-10-19 17:19:53,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index 31fd0ee..d2e42a5 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -1145,7 +1145,7 @@
 
           // fetch the TModel CategoryBag
           Vector catVector = TModelCategoryTable.select(tModelKey,connection);
-          if (catVector != null)
+          if ((catVector != null) && (catVector.size() != 0)) 
           {
             CategoryBag catBag = new CategoryBag();
             catBag.setKeyedReferenceVector(catVector);
@@ -1153,13 +1153,13 @@
           }
 
           // fetch the TModel IdentifierBag
-          Vector idVector = TModelIdentifierTable.select(tModelKey,connection);
-          if (idVector != null)
-          {
-            IdentifierBag idBag = new IdentifierBag();
-            idBag.setKeyedReferenceVector(idVector);
-            tModel.setIdentifierBag(idBag);
-          }
+          Vector idVector = TModelIdentifierTable.select(tModelKey,connection); 
+          if ((idVector != null) && (idVector.size() != 0)) 
+          { 
+            IdentifierBag idBag = new IdentifierBag(); 
+            idBag.setKeyedReferenceVector(idVector); 
+            tModel.setIdentifierBag(idBag); 
+          } 
 
           // fetch the TModel OverviewDoc & OverviewDoc Descrptions
           OverviewDoc overDoc = tModel.getOverviewDoc();
"
juddi,efe2a7d92c361aae33889280ba86d6a1c06bf75e,"The save_tModel request has been updated to physically remove (i.e. DELETE) an existing TModel prior re-INSERTing it.  This fix resoves issue JUDDI-37 (http://nagoya.apache.org/jira/browse/JUDDI-37). When performing a delete_tModel the DELETED column of the associated TMODEL row is set to the value 'true'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262927 13f79535-47bb-0310-9956-ffa450edef68
",2004-08-25 17:31:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/DataStore.java b/src/java/org/apache/juddi/datastore/DataStore.java
index ce4d6c8..8fd2860 100755
--- a/src/java/org/apache/juddi/datastore/DataStore.java
+++ b/src/java/org/apache/juddi/datastore/DataStore.java
@@ -233,6 +233,12 @@
   /**
    *
    */
+  void markTModelAsDeleted(String tModelKey)
+   throws RegistryException;
+
+  /**
+   *
+   */
   boolean isValidTModelKey(String tModelKey)
     throws RegistryException;
 
"
juddi,efe2a7d92c361aae33889280ba86d6a1c06bf75e,"The save_tModel request has been updated to physically remove (i.e. DELETE) an existing TModel prior re-INSERTing it.  This fix resoves issue JUDDI-37 (http://nagoya.apache.org/jira/browse/JUDDI-37). When performing a delete_tModel the DELETED column of the associated TMODEL row is set to the value 'true'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262927 13f79535-47bb-0310-9956-ffa450edef68
",2004-08-25 17:31:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index 34047cb..31fd0ee 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -1190,12 +1190,12 @@
       if ((tModelKey != null) && (connection != null))
       {
         // delete the dependents of TModel
-        //TModelCategoryTable.delete(tModelKey,connection);
-        //TModelDescTable.delete(tModelKey,connection);
-        //TModelDocDescTable.delete(tModelKey,connection);
-        //TModelIdentifierTable.delete(tModelKey,connection);
+        TModelCategoryTable.delete(tModelKey,connection);
+        TModelDescTable.delete(tModelKey,connection);
+        TModelDocDescTable.delete(tModelKey,connection);
+        TModelIdentifierTable.delete(tModelKey,connection);
 
-        // mark the TModel as deleted (don't actually delete it)
+        // delete the TModel
         TModelTable.delete(tModelKey,connection);
       }
     }
@@ -1208,6 +1208,26 @@
   /**
    *
    */
+  public void markTModelAsDeleted(String tModelKey)
+    throws org.apache.juddi.error.RegistryException
+  {
+    try
+    {
+      if ((tModelKey != null) && (connection != null))
+      {
+        // mark the TModel as deleted 
+        TModelTable.markAsDeleted(tModelKey,connection);
+      }
+    }
+    catch(java.sql.SQLException sqlex)
+    {
+      throw new RegistryException(sqlex);
+    }
+  }
+
+  /**
+   *
+   */
   public boolean isValidTModelKey(String tModelKey)
     throws org.apache.juddi.error.RegistryException
   {
"
juddi,efe2a7d92c361aae33889280ba86d6a1c06bf75e,"The save_tModel request has been updated to physically remove (i.e. DELETE) an existing TModel prior re-INSERTing it.  This fix resoves issue JUDDI-37 (http://nagoya.apache.org/jira/browse/JUDDI-37). When performing a delete_tModel the DELETED column of the associated TMODEL row is set to the value 'true'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262927 13f79535-47bb-0310-9956-ffa450edef68
",2004-08-25 17:31:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java b/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
index 9559a54..9f4091a 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
@@ -41,6 +41,7 @@
 
   static String insertSQL = null;
   static String deleteSQL = null;
+  static String updateSQL = null;
   static String selectSQL = null;
   static String selectByPublisherSQL = null;
   static String verifyOwnershipSQL = null;
@@ -65,10 +66,16 @@
 
     // build deleteSQL
     sql = new StringBuffer(100);
+    sql.append(""DELETE FROM TMODEL "");
+    sql.append(""WHERE TMODEL_KEY=?"");
+    deleteSQL = sql.toString();
+
+    // build updateSQL
+    sql = new StringBuffer(100);
     sql.append(""UPDATE TMODEL "");
     sql.append(""SET DELETED='true' "");
     sql.append(""WHERE TMODEL_KEY=?"");
-    deleteSQL = sql.toString();
+    updateSQL = sql.toString();
 
     // build selectSQL
     sql = new StringBuffer(200);
@@ -187,6 +194,39 @@
   }
 
   /**
+   * Update the TMODEL table setting the value of the DELETED column to 'true'.
+   *
+   * @param  tModelKey
+   * @param  connection JDBC connection
+   * @throws java.sql.SQLException
+   */
+  public static void markAsDeleted(String tModelKey,Connection connection)
+    throws java.sql.SQLException
+  {
+    PreparedStatement statement = null;
+
+    try
+    {
+      // prepare the delete
+      statement = connection.prepareStatement(updateSQL);
+      statement.setString(1,tModelKey.toString());
+
+      log.debug(updateSQL +
+        ""\n\t TMODEL_KEY="" + tModelKey.toString() + ""\n"");
+
+      // execute
+      statement.executeUpdate();
+    }
+    finally
+    {
+      try {
+        statement.close();
+      }
+      catch (Exception e) { /* ignored */ }
+    }
+  }
+
+  /**
    * Select one row from the TMODEL table.
    *
    * @param  tModelKey
@@ -393,7 +433,8 @@
         TModelTable.verifyOwnership(tModelKey,""sviens"",connection);
 
         // delete that TModel object
-        //TModelTable.delete(tModelKey,connection);
+        TModelTable.delete(tModelKey,connection);
+        //TModelTable.markAsDeleted(tModelKey,connection);
 
         // re-select that TModel object
         tModel = TModelTable.select(tModelKey,connection);
"
juddi,efe2a7d92c361aae33889280ba86d6a1c06bf75e,"The save_tModel request has been updated to physically remove (i.e. DELETE) an existing TModel prior re-INSERTing it.  This fix resoves issue JUDDI-37 (http://nagoya.apache.org/jira/browse/JUDDI-37). When performing a delete_tModel the DELETED column of the associated TMODEL row is set to the value 'true'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262927 13f79535-47bb-0310-9956-ffa450edef68
",2004-08-25 17:31:57,Stephen Viens,"diff --git a/src/java/org/apache/juddi/function/DeleteTModelFunction.java b/src/java/org/apache/juddi/function/DeleteTModelFunction.java
index be3bdf5..4f4fd61 100755
--- a/src/java/org/apache/juddi/function/DeleteTModelFunction.java
+++ b/src/java/org/apache/juddi/function/DeleteTModelFunction.java
@@ -89,8 +89,8 @@
         if (!dataStore.isTModelPublisher(tModelKey,publisherID))
           throw new UserMismatchException(""publisher=""+publisherID+"" tModelKey=""+tModelKey);
 
-        // TModel exists and we control it so let's delete it.
-        dataStore.deleteTModel(tModelKey);
+        // TModel exists and we control it so let's marke it as deleted.
+        dataStore.markTModelAsDeleted(tModelKey);
       }
 
       // delete the TModels
"
juddi,28de4f2e793220ada55a42b47c5b17f97a12a6fb,"Applied AxisTransport patch contributed by Antoni described in bug# JUDDI-39 (http://nagoya.apache.org/jira/browse/JUDDI-39)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262924 13f79535-47bb-0310-9956-ffa450edef68
",2004-08-24 17:49:59,Stephen Viens,"diff --git a/src/java/org/apache/juddi/proxy/AxisTransport.java b/src/java/org/apache/juddi/proxy/AxisTransport.java
index 4c93117..6934e4f 100644
--- a/src/java/org/apache/juddi/proxy/AxisTransport.java
+++ b/src/java/org/apache/juddi/proxy/AxisTransport.java
@@ -67,7 +67,7 @@
       call.setTargetEndpointAddress(endpointURL);
 
       String requestString = XMLUtils.ElementToString(request);
-      SOAPBodyElement body = new SOAPBodyElement(new ByteArrayInputStream(requestString.getBytes()));
+      SOAPBodyElement body = new SOAPBodyElement(new ByteArrayInputStream(requestString.getBytes(""UTF-8"")));
       Object[] soapBodies = new Object[] { body };
 
       Vector result = (Vector)call.invoke(soapBodies);
"
juddi,33f52cb31d1b7c38ba7973cbf5453e773dc46d23,"Fix for bug# JUDDI-27.  The find_tModel and get_tModelDetail functions have been updated to ignore TModels that have been marked as deleted.  A TModel is said to be deleted when the DELETED column of it's corresponding row in the TMODEL table is NOT NULL.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262913 13f79535-47bb-0310-9956-ffa450edef68
",2004-07-02 20:11:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
index b76eefa..257fef4 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByNameQuery.java
@@ -41,7 +41,7 @@
   {
     // build selectSQL
     StringBuffer sql = new StringBuffer(200);
-    sql.append(""SELECT M.TMODEL_KEY,M.LAST_UPDATE,M.NAME "");
+    sql.append(""SELECT M.TMODEL_KEY,M.LAST_UPDATE,M.NAME,M.DELETED "");
     sql.append(""FROM TMODEL M "");
     selectSQL = sql.toString();
   }
@@ -77,7 +77,7 @@
     try
     {
       log.debug(sql.toString());
-      
+
       statement = sql.buildPreparedStatement(connection);
       resultSet = statement.executeQuery();
 
@@ -116,14 +116,19 @@
     if ((name == null) || (name.length() == 0))
       return;
 
+    // When TModels are deleted they are only marked as 
+    // deleted they're not actually removed from the database.
+    //
+    sql.append(""WHERE M.DELETED IS NULL "");
+
     if ((qualifiers != null) && (qualifiers.exactNameMatch))
     {
-      sql.append(""WHERE M.NAME = ? "");
+      sql.append(""AND M.NAME = ? "");
       sql.addValue(name);
     }
     else
     {
-      sql.append(""WHERE M.NAME LIKE ? "");
+      sql.append(""AND M.NAME LIKE ? "");
       sql.addValue(name.endsWith(""%"") ? name : name+""%"");
     }
   }
@@ -221,19 +226,22 @@
   public static void test(Connection connection)
     throws Exception
   {
-    String name = new String(""St"");
+    String name = new String("""");
 
-    Vector keysIn = null;
-    keysIn = new Vector();
-    keysIn.add(""0e70128c-f7c6-4854-b292-d2f13b638acf"");
-    keysIn.add(""b405450a-64f5-4f95-8131-450429d0ae8c"");
-    keysIn.add(""3009f336-98c1-4193-a22f-fea73e79c909"");
-    keysIn.add(""45994713-d3c3-40d6-87b5-6ce51f36001c"");
-    keysIn.add(""901b15c5-799c-4387-8337-a1a35fceb791"");
-    keysIn.add(""80fdae14-0e5d-4ea6-8eb8-50fde422056d"");
-    keysIn.add(""e1996c33-c436-4004-9e3e-14de191bcc6b"");
-    keysIn.add(""3ef4772f-e04b-46ed-8065-c5a4e167b5ba"");
-
+    Vector keysIn = new Vector();
+		keysIn.add(""uuid:327A56F0-3299-4461-BC23-5CD513E95C55"");
+		keysIn.add(""uuid:4064C064-6D14-4F35-8953-9652106476A9"");
+		keysIn.add(""uuid:4E49A8D6-D5A2-4FC2-93A0-0411D8D19E88"");
+		keysIn.add(""uuid:807A2C6A-EE22-470D-ADC7-E0424A337C03"");
+		keysIn.add(""uuid:8609C81E-EE1F-4D5A-B202-3EB13AD01823"");
+		keysIn.add(""uuid:A035A07C-F362-44DD-8F95-E2B134BF43B4"");
+		keysIn.add(""uuid:B1B1BAF5-2329-43E6-AE13-BA8E97195039"");
+		keysIn.add(""uuid:C0B9FE13-179F-413D-8A5B-5004DB8E5BB2"");
+		keysIn.add(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"");
+		keysIn.add(""uuid:CD153257-086A-4237-B336-6BDCBDCC6634"");
+		keysIn.add(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"");
+		keysIn.add(""uuid:E59AE320-77A5-11D5-B898-0004AC49CC1E"");    
+    
     Transaction txn = new Transaction();
 
     if (connection != null)
@@ -243,8 +251,8 @@
         // begin a new transaction
         txn.begin(connection);
 
-        select(name,keysIn,null,connection);
-        select(name,null,null,connection);
+        select(name,keysIn,null,connection);				
+				select(name,null,null,connection);
 
         // commit the transaction
         txn.commit();
"
juddi,33f52cb31d1b7c38ba7973cbf5453e773dc46d23,"Fix for bug# JUDDI-27.  The find_tModel and get_tModelDetail functions have been updated to ignore TModels that have been marked as deleted.  A TModel is said to be deleted when the DELETED column of it's corresponding row in the TMODEL table is NOT NULL.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262913 13f79535-47bb-0310-9956-ffa450edef68
",2004-07-02 20:11:40,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java b/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
index 00d0612..9559a54 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/TModelTable.java
@@ -76,17 +76,21 @@
     sql.append(""AUTHORIZED_NAME,"");
     sql.append(""OPERATOR,"");
     sql.append(""NAME,"");
-    sql.append(""OVERVIEW_URL "");
+    sql.append(""OVERVIEW_URL,"");
+    sql.append(""DELETED "");
     sql.append(""FROM TMODEL "");
-    sql.append(""WHERE TMODEL_KEY=?"");
+    sql.append(""WHERE TMODEL_KEY=? "");
+    sql.append(""AND DELETED IS NULL"");
     selectSQL = sql.toString();
 
     // build selectByPublisherSQL
     sql = new StringBuffer(200);
     sql.append(""SELECT "");
-    sql.append(""TMODEL_KEY "");
+    sql.append(""TMODEL_KEY,"");
+    sql.append(""DELETED "");
     sql.append(""FROM TMODEL "");
-    sql.append(""WHERE PUBLISHER_ID=?"");
+    sql.append(""WHERE PUBLISHER_ID=? "");
+    sql.append(""AND DELETED IS NULL"");
     selectByPublisherSQL = sql.toString();
 
     // build verifyOwnershipSQL
@@ -94,7 +98,8 @@
     sql.append(""SELECT * "");
     sql.append(""FROM TMODEL "");
     sql.append(""WHERE TMODEL_KEY=? "");
-    sql.append(""AND PUBLISHER_ID=?"");
+    sql.append(""AND PUBLISHER_ID=? "" );
+    sql.append(""AND DELETED IS NULL"");
     verifyOwnershipSQL = sql.toString();
   }
 
@@ -200,6 +205,9 @@
       statement = connection.prepareStatement(selectSQL);
       statement.setString(1,tModelKey.toString());
 
+      System.out.println(selectSQL +
+        ""\n\t TMODEL_KEY="" + tModelKey.toString() + ""\n"");
+      		
       log.debug(selectSQL +
         ""\n\t TMODEL_KEY="" + tModelKey.toString() + ""\n"");
 
@@ -250,6 +258,9 @@
       statement = connection.prepareStatement(selectByPublisherSQL);
       statement.setString(1,publisherID.toString());
 
+      System.out.println(selectByPublisherSQL +
+        ""\n\t PUBLISHER_ID="" + publisherID + ""\n"");
+      		
       log.debug(selectByPublisherSQL +
         ""\n\t PUBLISHER_ID="" + publisherID + ""\n"");
 
@@ -295,6 +306,10 @@
       statement.setString(1,tModelKey);
       statement.setString(2,publisherID);
 
+      System.out.println(verifyOwnershipSQL +
+	      ""\n\t TMODEL_KEY="" + tModelKey +
+	      ""\n\t PUBLISHER_ID="" + publisherID + ""\n"");
+
       log.debug(verifyOwnershipSQL +
         ""\n\t TMODEL_KEY="" + tModelKey +
         ""\n\t PUBLISHER_ID="" + publisherID + ""\n"");
"
juddi,8a3c566fd1731245a5c16c717257fd6934322fe9,"Fix for bug# JUDDI-29.  A services businessKey value/attribute was not being included within ServiceInfo instance/element in the processing of find_business.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262907 13f79535-47bb-0310-9956-ffa450edef68
",2004-07-02 14:32:44,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
index d06d52c..34047cb 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/JDBCDataStore.java
@@ -1262,7 +1262,7 @@
         info.setBusinessKey(businessKey);
         info.setNameVector(BusinessNameTable.select(businessKey,connection));
         info.setDescriptionVector(BusinessDescTable.select(businessKey,connection));
-        info.setServiceInfos(fetchServiceInfosByBusinessKey(businessKey,false));
+        info.setServiceInfos(fetchServiceInfosByBusinessKey(businessKey));
       }
       catch(java.sql.SQLException sqlex)
       {
@@ -1276,7 +1276,7 @@
   /**
    *
    */
-  private ServiceInfos fetchServiceInfosByBusinessKey(String businessKey,boolean includeBusinessKey)
+  private ServiceInfos fetchServiceInfosByBusinessKey(String businessKey)
     throws org.apache.juddi.error.RegistryException
   {
     Vector serviceInfoVector = new Vector();
@@ -1296,8 +1296,7 @@
           // okay, create a new ServiceInfo
           ServiceInfo info = new ServiceInfo();
           info.setServiceKey(serviceKey);
-          if (includeBusinessKey)
-            info.setBusinessKey(businessKey);
+          info.setBusinessKey(businessKey);
           info.setNameVector(ServiceNameTable.select(serviceKey,connection));
 
           // add this ServiceInfo to the ServiceInfo vector
"
juddi,8a3c566fd1731245a5c16c717257fd6934322fe9,"Fix for bug# JUDDI-29.  A services businessKey value/attribute was not being included within ServiceInfo instance/element in the processing of find_business.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262907 13f79535-47bb-0310-9956-ffa450edef68
",2004-07-02 14:32:44,Stephen Viens,"diff --git a/src/java/org/apache/juddi/handler/ServiceInfoHandler.java b/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
index 03fa2f5..b728e5f 100755
--- a/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
+++ b/src/java/org/apache/juddi/handler/ServiceInfoHandler.java
@@ -70,13 +70,13 @@
     Element element = parent.getOwnerDocument().createElement(TAG_NAME);
     AbstractHandler handler = null;
 
-  String serviceKey = info.getServiceKey();
-  if (serviceKey != null)
-    element.setAttribute(""serviceKey"",serviceKey);
-
-  String businessKey = info.getBusinessKey();
-  if (businessKey != null)
-    element.setAttribute(""businessKey"",businessKey);
+    // required attribute
+    String serviceKey = info.getServiceKey();
+    element.setAttribute(""serviceKey"",(serviceKey != null) ? serviceKey : """");
+    
+    // required attribute
+    String businessKey = info.getBusinessKey();
+    element.setAttribute(""businessKey"",(businessKey != null) ? businessKey : """");
 
     Vector vector = info.getNameVector();
     if ((vector!=null) && (vector.size() > 0))
"
juddi,b84adf4193e9558b59bee88fbad404fcad375398,"Fix for bug# JUDDI-1.  When searching by category bag for any of the four core objects (business, service, binding or tmodel) we were searching by keyName and keyValue which is incorrect.  

In all cases only TModelKey and keyValue from the keyedRefernce are required and keyName is insignificant and can be ignored. There is one caveat however. If TModelKey is not specified then TModelKey for ""uddi-org:general_keywords"" should be used.

See http://nagoya.apache.org/jira/browse/JUDDI-1 for more details.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262893 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 18:26:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBindingByCategoryQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBindingByCategoryQuery.java
index 125c286..d1fedbd 100644
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBindingByCategoryQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBindingByCategoryQuery.java
@@ -25,6 +25,7 @@
 import org.apache.juddi.datatype.CategoryBag;
 import org.apache.juddi.datatype.KeyedReference;
 import org.apache.juddi.datatype.request.FindQualifiers;
+import org.apache.juddi.datatype.tmodel.TModel;
 import org.apache.juddi.util.Config;
 import org.apache.juddi.util.jdbc.ConnectionManager;
 import org.apache.juddi.util.jdbc.DynamicQuery;
@@ -61,9 +62,10 @@
   public static Vector select(String serviceKey,CategoryBag categoryBag,Vector keysIn,FindQualifiers qualifiers,Connection connection)
     throws java.sql.SQLException
   {
-    // if there is a keysIn vector but it doesn't contain
+    // If there is a keysIn vector but it doesn't contain
     // any keys then the previous query has exhausted
     // all possibilities of a match so skip this call.
+    //
     if ((keysIn != null) && (keysIn.size() == 0))
       return keysIn;
 
@@ -118,17 +120,17 @@
   private static void appendWhere(DynamicQuery sql,String serviceKey,CategoryBag categoryBag,FindQualifiers qualifiers)
   {
     sql.append(""WHERE C.BINDING_KEY = B.BINDING_KEY "");
-    if(serviceKey != null)
+    if (serviceKey != null)
     {
       sql.append(""AND B.SERVICE_KEY = ? "");
       sql.addValue(serviceKey);
     }
     
-    if(categoryBag != null)
+    if (categoryBag != null)
     {
       Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
   
-      if(keyedRefVector != null)
+      if (keyedRefVector != null)
       {
         int vectorSize = keyedRefVector.size();
         if (vectorSize > 0)
@@ -138,15 +140,44 @@
           for (int i=0; i<vectorSize; i++)
           {
             KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
+            String key = keyedRef.getTModelKey();
             String name = keyedRef.getKeyName();
             String value = keyedRef.getKeyValue();
-  
-            if ((name != null) && (value != null))
+            
+            // A null or zero-length tModelKey is treated as 
+            // though the tModelKey for uddiorg:general_keywords 
+            // had been specified.
+            //
+            if ((key == null) || (key.trim().length() == 0))
+              key = TModel.GENERAL_KEYWORDS_TMODEL_KEY;
+            
+            if (key == null)
+              key = """";
+            
+            if (value == null)
+              value = """";
+            
+            // If the tModelKey involved is that of uddi-org:general_keywords, 
+            // the keyNames are identical (DO NOT IGNORE keyName). Otherwise 
+            // keyNames are not significant. Omitted keyNames are treated as 
+            // identical to empty (zero length) keyNames.
+            //
+            if (key.equals(TModel.GENERAL_KEYWORDS_TMODEL_KEY)) 
             {
-              sql.append(""(C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
               sql.addValue(name);
               sql.addValue(value);
-  
+
+              if (i+1 < vectorSize)
+                sql.append("" OR "");
+            }
+            else 
+            {
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(value);
+
               if (i+1 < vectorSize)
                 sql.append("" OR "");
             }
@@ -235,11 +266,10 @@
 
     CategoryBag categoryBag = new CategoryBag();
     Vector keyedRefVector = new Vector();
-    keyedRefVector.addElement(new KeyedReference(""b'eta"",""jklmnopqr""));
-    keyedRefVector.addElement(new KeyedReference(""ntis-gov:NAICS:1997"",""51121""));
-    keyedRefVector.addElement(new KeyedReference(""omega"",""stuvwxyz""));
-    keyedRefVector.addElement(new KeyedReference(""cff049d0-c460-40c2-91c7-aa2261123dc7"",""Yadda, Yadda, Yadda""));
-    keyedRefVector.addElement(new KeyedReference(""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""ntis-gov:NAICS:1997"",""51121""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""Mining"",""21""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",null,""abcdefg""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
     categoryBag.setKeyedReferenceVector(keyedRefVector);
 
     Vector keysIn = new Vector();
"
juddi,b84adf4193e9558b59bee88fbad404fcad375398,"Fix for bug# JUDDI-1.  When searching by category bag for any of the four core objects (business, service, binding or tmodel) we were searching by keyName and keyValue which is incorrect.  

In all cases only TModelKey and keyValue from the keyedRefernce are required and keyName is insignificant and can be ignored. There is one caveat however. If TModelKey is not specified then TModelKey for ""uddi-org:general_keywords"" should be used.

See http://nagoya.apache.org/jira/browse/JUDDI-1 for more details.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262893 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 18:26:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByCategoryQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByCategoryQuery.java
index bdfcb2a..b109f38 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByCategoryQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByCategoryQuery.java
@@ -25,6 +25,7 @@
 import org.apache.juddi.datatype.CategoryBag;
 import org.apache.juddi.datatype.KeyedReference;
 import org.apache.juddi.datatype.request.FindQualifiers;
+import org.apache.juddi.datatype.tmodel.TModel;
 import org.apache.juddi.util.Config;
 import org.apache.juddi.util.jdbc.ConnectionManager;
 import org.apache.juddi.util.jdbc.DynamicQuery;
@@ -57,9 +58,10 @@
   public static Vector select(CategoryBag categoryBag,Vector keysIn,FindQualifiers qualifiers,Connection connection)
     throws java.sql.SQLException
   {
-    // if there is a keysIn vector but it doesn't contain
+    // If there is a keysIn vector but it doesn't contain
     // any keys then the previous query has exhausted
     // all possibilities of a match so skip this call.
+    //
     if ((keysIn != null) && (keysIn.size() == 0))
       return keysIn;
 
@@ -114,38 +116,67 @@
   {
     sql.append(""WHERE B.BUSINESS_KEY = C.BUSINESS_KEY "");
 
-  if(categoryBag != null)
-  {
-      Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
-    if(keyedRefVector != null)
+    if (categoryBag != null)
     {
-        int vectorSize = keyedRefVector.size();
-      if (vectorSize > 0)
+      Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
+      if (keyedRefVector != null)
       {
-        sql.append(""AND ("");
-
-        for (int i=0; i<vectorSize; i++)
+        int vectorSize = keyedRefVector.size();
+        if (vectorSize > 0)
         {
-          KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
-          String name = keyedRef.getKeyName();
-          String value = keyedRef.getKeyValue();
-
-          if ((name != null) && (value != null))
+          sql.append(""AND ("");
+  
+          for (int i=0; i<vectorSize; i++)
           {
-            sql.append(""(C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
-            sql.addValue(name);
-            sql.addValue(value);
+            KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
+            String key = keyedRef.getTModelKey();
+            String name = keyedRef.getKeyName();
+            String value = keyedRef.getKeyValue();
+            
+            // A null or zero-length tModelKey is treated as 
+            // though the tModelKey for uddiorg:general_keywords 
+            // had been specified.
+            //
+            if ((key == null) || (key.trim().length() == 0))
+              key = TModel.GENERAL_KEYWORDS_TMODEL_KEY;
+            
+            if (key == null)
+              key = """";
+            
+            if (value == null)
+              value = """";
+            
+            // If the tModelKey involved is that of uddi-org:general_keywords, 
+            // the keyNames are identical (DO NOT IGNORE keyName). Otherwise 
+            // keyNames are not significant. Omitted keyNames are treated as 
+            // identical to empty (zero length) keyNames.
+            //
+            if (key.equals(TModel.GENERAL_KEYWORDS_TMODEL_KEY)) 
+            {
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(name);
+              sql.addValue(value);
 
-            if (i+1 < vectorSize)
-              sql.append("" OR "");
+              if (i+1 < vectorSize)
+                sql.append("" OR "");
+            }
+            else 
+            {
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(value);
+
+              if (i+1 < vectorSize)
+                sql.append("" OR "");
+            }
           }
+  
+          sql.append("") "");
         }
-
-        sql.append("") "");
       }
     }
   }
-  }
 
   /**
    * Utility method used to construct SQL ""IN"" statements such as
@@ -221,10 +252,10 @@
   {
     CategoryBag categoryBag = new CategoryBag();
     Vector keyedRefVector = new Vector();
-    keyedRefVector.addElement(new KeyedReference(""ntis-gov:NAICS:1997"",""51121""));
-    keyedRefVector.addElement(new KeyedReference(""Mining"",""21""));
-    keyedRefVector.addElement(new KeyedReference(""cff049d0-c460-40c2-91c7-aa2261123dc7"",""Yadda, Yadda, Yadda""));
-    keyedRefVector.addElement(new KeyedReference(""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""ntis-gov:NAICS:1997"",""51121""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""Mining"",""21""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",null,""abcdefg""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
     categoryBag.setKeyedReferenceVector(keyedRefVector);
 
     Vector keysIn = new Vector();
"
juddi,b84adf4193e9558b59bee88fbad404fcad375398,"Fix for bug# JUDDI-1.  When searching by category bag for any of the four core objects (business, service, binding or tmodel) we were searching by keyName and keyValue which is incorrect.  

In all cases only TModelKey and keyValue from the keyedRefernce are required and keyName is insignificant and can be ignored. There is one caveat however. If TModelKey is not specified then TModelKey for ""uddi-org:general_keywords"" should be used.

See http://nagoya.apache.org/jira/browse/JUDDI-1 for more details.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262893 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 18:26:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByCategoryQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByCategoryQuery.java
index 76244b8..020e7ee 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindServiceByCategoryQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindServiceByCategoryQuery.java
@@ -25,6 +25,7 @@
 import org.apache.juddi.datatype.CategoryBag;
 import org.apache.juddi.datatype.KeyedReference;
 import org.apache.juddi.datatype.request.FindQualifiers;
+import org.apache.juddi.datatype.tmodel.TModel;
 import org.apache.juddi.util.Config;
 import org.apache.juddi.util.jdbc.ConnectionManager;
 import org.apache.juddi.util.jdbc.DynamicQuery;
@@ -61,9 +62,10 @@
   public static Vector select(String businessKey,CategoryBag categoryBag,Vector keysIn,FindQualifiers qualifiers,Connection connection)
     throws java.sql.SQLException
   {
-    // if there is a keysIn vector but it doesn't contain
+    // If there is a keysIn vector but it doesn't contain
     // any keys then the previous query has exhausted
     // all possibilities of a match so skip this call.
+    //
     if ((keysIn != null) && (keysIn.size() == 0))
       return keysIn;
 
@@ -117,17 +119,17 @@
   private static void appendWhere(DynamicQuery sql,String businessKey,CategoryBag categoryBag,FindQualifiers qualifiers)
   {
     sql.append(""WHERE C.SERVICE_KEY = S.SERVICE_KEY "");
-    if(businessKey != null)
+    if (businessKey != null)
     {
       sql.append(""AND S.BUSINESS_KEY = ? "");
       sql.addValue(businessKey);
     }
     
-    if(categoryBag != null)
+    if (categoryBag != null)
     {
       Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
   
-      if(keyedRefVector != null)
+      if (keyedRefVector != null)
       {
         int vectorSize = keyedRefVector.size();
         if (vectorSize > 0)
@@ -137,15 +139,44 @@
           for (int i=0; i<vectorSize; i++)
           {
             KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
+            String key = keyedRef.getTModelKey();
             String name = keyedRef.getKeyName();
             String value = keyedRef.getKeyValue();
-  
-            if ((name != null) && (value != null))
+            
+            // A null or zero-length tModelKey is treated as 
+            // though the tModelKey for uddiorg:general_keywords 
+            // had been specified.
+            //
+            if ((key == null) || (key.trim().length() == 0))
+              key = TModel.GENERAL_KEYWORDS_TMODEL_KEY;
+            
+            if (key == null)
+              key = """";
+            
+            if (value == null)
+              value = """";
+            
+            // If the tModelKey involved is that of uddi-org:general_keywords, 
+            // the keyNames are identical (DO NOT IGNORE keyName). Otherwise 
+            // keyNames are not significant. Omitted keyNames are treated as 
+            // identical to empty (zero length) keyNames.
+            //
+            if (key.equals(TModel.GENERAL_KEYWORDS_TMODEL_KEY)) 
             {
-              sql.append(""(C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
               sql.addValue(name);
               sql.addValue(value);
-  
+
+              if (i+1 < vectorSize)
+                sql.append("" OR "");
+            }
+            else 
+            {
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(value);
+
               if (i+1 < vectorSize)
                 sql.append("" OR "");
             }
@@ -233,10 +264,10 @@
 
     CategoryBag categoryBag = new CategoryBag();
     Vector keyedRefVector = new Vector();
-    keyedRefVector.addElement(new KeyedReference(""ntis-gov:NAICS:1997"",""51121""));
-    keyedRefVector.addElement(new KeyedReference(""Mining"",""21""));
-    keyedRefVector.addElement(new KeyedReference(""cff049d0-c460-40c2-91c7-aa2261123dc7"",""Yadda, Yadda, Yadda""));
-    keyedRefVector.addElement(new KeyedReference(""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""ntis-gov:NAICS:1997"",""51121""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""Mining"",""21""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",null,""abcdefg""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
     categoryBag.setKeyedReferenceVector(keyedRefVector);
 
     Vector keysIn = new Vector();
"
juddi,b84adf4193e9558b59bee88fbad404fcad375398,"Fix for bug# JUDDI-1.  When searching by category bag for any of the four core objects (business, service, binding or tmodel) we were searching by keyName and keyValue which is incorrect.  

In all cases only TModelKey and keyValue from the keyedRefernce are required and keyName is insignificant and can be ignored. There is one caveat however. If TModelKey is not specified then TModelKey for ""uddi-org:general_keywords"" should be used.

See http://nagoya.apache.org/jira/browse/JUDDI-1 for more details.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262893 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 18:26:18,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByCategoryQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByCategoryQuery.java
index bf5feb4..db62d03 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByCategoryQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByCategoryQuery.java
@@ -58,9 +58,10 @@
   public static Vector select(CategoryBag categoryBag,Vector keysIn,FindQualifiers qualifiers,Connection connection)
     throws java.sql.SQLException
   {
-    // if there is a keysIn vector but it doesn't contain
+    // If there is a keysIn vector but it doesn't contain
     // any keys then the previous query has exhausted
     // all possibilities of a match so skip this call.
+    //
     if ((keysIn != null) && (keysIn.size() == 0))
       return keysIn;
 
@@ -115,12 +116,11 @@
   {
     sql.append(""WHERE M.TMODEL_KEY = C.TMODEL_KEY "");
 
-    if(categoryBag != null)
+    if (categoryBag != null)
     {
-
       Vector keyedRefVector = categoryBag.getKeyedReferenceVector();
 
-      if(keyedRefVector != null)
+      if (keyedRefVector != null)
       {
         int vectorSize = keyedRefVector.size();
         if (vectorSize > 0)
@@ -130,32 +130,46 @@
           for (int i=0; i<vectorSize; i++)
           {
             KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
+            String key = keyedRef.getTModelKey();
             String name = keyedRef.getKeyName();
             String value = keyedRef.getKeyValue();
-
-            String tModelKey = keyedRef.getTModelKey();
-            if (tModelKey.equals(TModel.GENERAL_KEYWORDS_TMODEL_KEY)) 
+            
+            // A null or zero-length tModelKey is treated as 
+            // though the tModelKey for uddiorg:general_keywords 
+            // had been specified.
+            //
+            if ((key == null) || (key.trim().length() == 0))
+              key = TModel.GENERAL_KEYWORDS_TMODEL_KEY;
+            
+            if (key == null)
+              key = """";
+            
+            if (value == null)
+              value = """";
+            
+            // If the tModelKey involved is that of uddi-org:general_keywords, 
+            // the keyNames are identical (DO NOT IGNORE keyName). Otherwise 
+            // keyNames are not significant. Omitted keyNames are treated as 
+            // identical to empty (zero length) keyNames.
+            //
+            if (key.equals(TModel.GENERAL_KEYWORDS_TMODEL_KEY)) 
             {
-              // DO NOT ignore the name .. 
-              if ((name != null) && (value != null))
-              {
-                sql.append(""(C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
-                sql.addValue(name);
-                sql.addValue(value);
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_NAME = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(name);
+              sql.addValue(value);
 
-                if (i+1 < vectorSize)
-                  sql.append("" OR "");
-              }
+              if (i+1 < vectorSize)
+                sql.append("" OR "");
             }
-            else {
-              if (value != null)
-              {
-                sql.append(""(C.KEY_VALUE = ?)"");
-                sql.addValue(value);
+            else 
+            {
+              sql.append(""(C.TMODEL_KEY_REF = ? AND C.KEY_VALUE = ?)"");
+              sql.addValue(key);
+              sql.addValue(value);
 
-                if (i+1 < vectorSize)
-                  sql.append("" OR "");
-              }
+              if (i+1 < vectorSize)
+                sql.append("" OR "");       
             }
           }
 
@@ -239,10 +253,10 @@
   {
     CategoryBag categoryBag = new CategoryBag();
     Vector keyedRefVector = new Vector();
-    keyedRefVector.addElement(new KeyedReference(""ntis-gov:NAICS:1997"",""51121""));
-    keyedRefVector.addElement(new KeyedReference(""Mining"",""21""));
-    keyedRefVector.addElement(new KeyedReference(""cff049d0-c460-40c2-91c7-aa2261123dc7"",""Yadda, Yadda, Yadda""));
-    keyedRefVector.addElement(new KeyedReference(""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""ntis-gov:NAICS:1997"",""51121""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:C1ACF26D-9672-4404-9D70-39B756E62AB4"",""Mining"",""21""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",null,""abcdefg""));
+    keyedRefVector.addElement(new KeyedReference(""uuid:DB77450D-9FA8-45D4-A7BC-04411D14E384"",""1775f0f8-cd47-451d-88da-73ce508836f3"",""blah, blah, blah""));
     categoryBag.setKeyedReferenceVector(keyedRefVector);
 
     Vector keysIn = new Vector();
"
juddi,cfb18266450a939bd46fc8a30cc14b5b646064c2,"Fixes bug #JUDDI-28

When searching for TModels or BusinessEntities using IdentifierBags 
of KeyedReferendes jUDDI currently ignores the tModelKey value 
and requires a keyName and keyValue to be present. jUDDI should 
be ignoring ""keyName"" and requiring tModelKey and keyValue. 

See bug #JUDDI-28 in JIRA for more information.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262892 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 13:37:29,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByIdentifierQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByIdentifierQuery.java
index 77d7450..b66a86f 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByIdentifierQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindBusinessByIdentifierQuery.java
@@ -126,19 +126,28 @@
 
           for (int i=0; i<vectorSize; i++)
           {
+            // When determining whether a keyedReference matches
+            // a passed keyedReference, a match occurs if and only 
+            // if 1) the tModelKeys refer to the same tModel and 2) 
+            // the keyValues are identical. The keyNames are not 
+            // significant. - UDDI Programmers API v2.04, Pgs 18, 19
+            //
             KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
-            String name = keyedRef.getKeyName();
+            
+            String key = keyedRef.getTModelKey();
+            if (key == null)
+              key = """";
+            
             String value = keyedRef.getKeyValue();
+            if (value == null)
+              value = """";
+  
+            sql.append(""(I.TMODEL_KEY_REF = ? AND I.KEY_VALUE = ?)"");
+            sql.addValue(key);
+            sql.addValue(value);
 
-            if ((name != null) && (value != null))
-            {
-              sql.append(""(I.KEY_NAME = ? AND I.KEY_VALUE = ?)"");
-              sql.addValue(name);
-              sql.addValue(value);
-
-              if (i+1 < vectorSize)
-                sql.append("" OR "");
-            }
+            if (i+1 < vectorSize)
+              sql.append("" OR "");
           }
 
           sql.append("") "");
"
juddi,cfb18266450a939bd46fc8a30cc14b5b646064c2,"Fixes bug #JUDDI-28

When searching for TModels or BusinessEntities using IdentifierBags 
of KeyedReferendes jUDDI currently ignores the tModelKey value 
and requires a keyName and keyValue to be present. jUDDI should 
be ignoring ""keyName"" and requiring tModelKey and keyValue. 

See bug #JUDDI-28 in JIRA for more information.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262892 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-25 13:37:29,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByIdentifierQuery.java b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByIdentifierQuery.java
index 8c240d6..083e2f2 100755
--- a/src/java/org/apache/juddi/datastore/jdbc/FindTModelByIdentifierQuery.java
+++ b/src/java/org/apache/juddi/datastore/jdbc/FindTModelByIdentifierQuery.java
@@ -126,19 +126,28 @@
 
           for (int i=0; i<vectorSize; i++)
           {
+            // When determining whether a keyedReference matches 
+            // a passed keyedReference, a match occurs if and only 
+            // if 1) the tModelKeys refer to the same tModel and 2) 
+            // the keyValues are identical. The keyNames are not 
+            // significant. - UDDI Programmers API v2.04, Pg 25
+            //
             KeyedReference keyedRef = (KeyedReference)keyedRefVector.elementAt(i);
-            String name = keyedRef.getKeyName();
+            
+            String key = keyedRef.getTModelKey();
+            if (key == null)
+              key = """";
+            
             String value = keyedRef.getKeyValue();
+            if (value == null)
+              value = """";
 
-            if ((name != null) && (value != null))
-            {
-              sql.append(""(I.KEY_NAME = ? AND I.KEY_VALUE = ?)"");
-              sql.addValue(name);
-              sql.addValue(value);
+            sql.append(""(I.TMODEL_KEY_REF = ? AND I.KEY_VALUE = ?)"");
+            sql.addValue(key);
+            sql.addValue(value);
 
-              if (i+1 < vectorSize)
-                sql.append("" OR "");
-            }
+            if (i+1 < vectorSize)
+              sql.append("" OR "");
           }
 
           sql.append("") "");
"
juddi,fad244ae6411504fddcedd9cbcfddd748639dc0d,"(Bug# JUDDI-25 Fixed) The path to the juddi.properties file included two separator characters before WEB-INF.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262877 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-08 00:36:19,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryServlet.java b/src/java/org/apache/juddi/registry/RegistryServlet.java
index 13a9585..806b072 100644
--- a/src/java/org/apache/juddi/registry/RegistryServlet.java
+++ b/src/java/org/apache/juddi/registry/RegistryServlet.java
@@ -66,7 +66,6 @@
 
     StringBuffer propFilePath = new StringBuffer(255);
     propFilePath.append(getServletContext().getRealPath(""/""));
-    propFilePath.append(File.separator);
     propFilePath.append(""WEB-INF"");
     propFilePath.append(File.separator);
     propFilePath.append(PROPERTY_FILE_NAME);
"
juddi,2648ea67bc6fe1997333068233a3d019691e8dc2,"(bug# JUDDI-26) Corrected misspelling of static final variable E_UNVALIDATABLE (it was coded as E_VUNVALIDATABLE)


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262876 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-07 23:48:12,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datatype/response/Result.java b/src/java/org/apache/juddi/datatype/response/Result.java
index b76c96e..af832cd 100755
--- a/src/java/org/apache/juddi/datatype/response/Result.java
+++ b/src/java/org/apache/juddi/datatype/response/Result.java
@@ -238,7 +238,7 @@
   // numerical value 20220, from the list of valid exception codes. This has
   // been corrected.
   public static final int E_UNVALIDATABLE = 20220;
-  public static final String E_VUNVALIDATABLE_CODE = ""E_unvalidatable"";
+  public static final String E_UNVALIDATABLE_CODE = ""E_unvalidatable"";
   public static final String E_UNVALIDATABLE_MSG = """";
 
   // Signifies that the request could not be carried out because a needed
"
juddi,2f9958b9e354cc16506d54984ad1ae1852c0d3c4,"(bug# JUDDI-24) Corrected case of juddi.dataStore property. It was incorrectly coded as 'juddi.datastore'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262875 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-07 23:46:49,Stephen Viens,"diff --git a/src/java/org/apache/juddi/datastore/DataStoreFactory.java b/src/java/org/apache/juddi/datastore/DataStoreFactory.java
index 182cde6..bb08043 100755
--- a/src/java/org/apache/juddi/datastore/DataStoreFactory.java
+++ b/src/java/org/apache/juddi/datastore/DataStoreFactory.java
@@ -38,7 +38,7 @@
   private static Log log = LogFactory.getLog(DataStoreFactory.class);
 
   // Authenticator property key & default implementation
-  private static final String IMPL_KEY = ""juddi.datastore"";
+  private static final String IMPL_KEY = ""juddi.dataStore"";
   private static final String DEFAULT_IMPL = ""org.apache.juddi.datastore.jdbc.JDBCDataStore"";
 
   private static Class implClass = null;
"
juddi,2f9958b9e354cc16506d54984ad1ae1852c0d3c4,"(bug# JUDDI-24) Corrected case of juddi.dataStore property. It was incorrectly coded as 'juddi.datastore'.


git-svn-id: https://svn.apache.org/repos/asf/webservices/juddi/trunk@262875 13f79535-47bb-0310-9956-ffa450edef68
",2004-06-07 23:46:49,Stephen Viens,"diff --git a/src/java/org/apache/juddi/registry/RegistryEngine.java b/src/java/org/apache/juddi/registry/RegistryEngine.java
index a53369b..5e516f8 100755
--- a/src/java/org/apache/juddi/registry/RegistryEngine.java
+++ b/src/java/org/apache/juddi/registry/RegistryEngine.java
@@ -48,7 +48,7 @@
   public static final String PROPNAME_DATASOURCE_NAME = ""juddi.dataSource"";
   
   public static final String PROPNAME_AUTH_CLASS_NAME = ""juddi.auth"";
-  public static final String PROPNAME_DATASTORE_CLASS_NAME = ""juddi.datastore"";
+  public static final String PROPNAME_DATASTORE_CLASS_NAME = ""juddi.dataStore"";
   public static final String PROPNAME_CRYPTOR_CLASS_NAME = ""juddi.cryptor"";
   public static final String PROPNAME_UUIDGEN_CLASS_NAME = ""juddi.uuidgen"";
   public static final String PROPNAME_VALIDATOR_CLASS_NAME = ""juddi.validator"";
"
